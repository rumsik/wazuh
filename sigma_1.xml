<group name="sigma,">
    <!--
Author: Brian Kellogg
Sigma: https://github.com/SigmaHQ/sigma
Wazuh: https://wazuh.com
All Sigma rules licensed under DRL: https://github.com/SigmaHQ/sigma/blob/master/LICENSE.Detection.Rules.md
-->
    <rule id="900001" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/raw_access_thread/raw_access_thread_susp_disk_access_using_uncommon_tools.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, oscd.community-->
        <!--Description: Detects raw disk access using uncommon tools or tools that are located in suspicious locations (heavy filtering is required), which could indicate possible defense evasion attempts-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: db809f10-56ce-4420-8c86-d6a7d793c79c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1006</id>
        </mitre>
        <description>Potential Defense Evasion Via Raw Disk Access By Uncommon Tools</description>
        <options>no_full_log</options>
        <group>windows,raw_access_thread,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="yes" type="pcre2">(?i)floppy</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+\$WINDOWS\.\~BT\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+CCM\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+explorer\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+servicing\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+SoftwareDistribution\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+System32\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+SystemApps\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+uus\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+WinSxS\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)Registry</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)System</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+ProgramData\\+Microsoft\\+Windows\ Defender\\+Platform\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+MsMpEng\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Microsoft\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+Temp\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Executables\\+SSDUpdate\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+HostMetadata\\+NVMEHostmetadata\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)None</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+ImmersiveControlPanel\\+SystemSettings\.exe)$</field>
    </rule>
    <rule id="900002" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/raw_access_thread/raw_access_thread_susp_disk_access_using_uncommon_tools.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, oscd.community-->
        <!--Description: Detects raw disk access using uncommon tools or tools that are located in suspicious locations (heavy filtering is required), which could indicate possible defense evasion attempts-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: db809f10-56ce-4420-8c86-d6a7d793c79c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1006</id>
        </mitre>
        <description>Potential Defense Evasion Via Raw Disk Access By Uncommon Tools</description>
        <options>no_full_log</options>
        <group>windows,raw_access_thread,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+GitHubDesktop\\+app\-</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+resources\\+app\\+git\\+mingw64\\+bin\\+git\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+Temp\\+asgard2\-agent\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+thor\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Keybase\\+upd\.exe</field>
    </rule>
    <rule id="900003" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_unblock_file.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Remove the Zone.Identifier alternate data stream which identifies the file as downloaded from the internet.-->
        <!--Date: 2022/02/01-->
        <!--Status: test-->
        <!--ID: 5947497f-1aa4-41dd-9693-c9848d58727d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1553.005</id>
        </mitre>
        <description>Suspicious Unblock-File</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Unblock\-File\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Path\ )</field>
    </rule>
    <rule id="900004" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_mail_acces.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may target user email on local systems to collect sensitive information.
Files containing email data can be acquired from a users local system, such as Outlook storage or cache files.
-->
        <!--Date: 2021/07/21-->
        <!--Status: test-->
        <!--ID: 2837e152-93c8-43d2-85ba-c3cd3c2ae614-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1114.001</id>
        </mitre>
        <description>Powershell Local Email Collection</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-Inbox\.ps1|Microsoft\.Office\.Interop\.Outlook|Microsoft\.Office\.Interop\.Outlook\.olDefaultFolders|\-comobject\ outlook\.application</field>
    </rule>
    <rule id="900005" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_mount_diskimage.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse container files such as disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW.-->
        <!--Date: 2022/02/01-->
        <!--Status: test-->
        <!--ID: 29e1c216-6408-489d-8a06-ee9d151ef819-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1553.005</id>
        </mitre>
        <description>Suspicious Mount-DiskImage</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Mount\-DiskImage\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ImagePath\ )</field>
    </rule>
    <rule id="900006" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_get_childitem_bookmarks.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may enumerate browser bookmarks to learn more about compromised hosts.
Browser bookmarks may reveal personal information about users (ex: banking sites, interests, social media, etc.) as well as details about
internal network resources such as servers, tools/dashboards, or other related infrastructure.
-->
        <!--Date: 2021/12/13-->
        <!--Status: test-->
        <!--ID: e0565f5d-d420-4e02-8a68-ac00d864f9cf-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1217</id>
        </mitre>
        <description>Automated Collection Bookmarks Using Get-ChildItem PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-ChildItem</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-Recurse\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-Path\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\ \-Filter\ Bookmarks</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\ \-ErrorAction\ SilentlyContinue</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\ \-Force</field>
    </rule>
    <rule id="900007" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_directory_enum.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects technique used by MAZE ransomware to enumerate directories using Powershell-->
        <!--Date: 2022/03/17-->
        <!--Status: test-->
        <!--ID: 162e69a7-7981-4344-84a9-0f1c9a217a52-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1083</id>
        </mitre>
        <description>Powershell Directory Enumeration</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)foreach</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-ChildItem</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Path\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ErrorAction\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)SilentlyContinue</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Out\-File\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-append</field>
    </rule>
    <rule id="900008" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_download.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious PowerShell download command-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: 403c2cc0-7f6b-4925-9423-bfa573bed7eb-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Download - Powershell Script</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.Net\.WebClient</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.DownloadFile\(|\.DownloadString\(</field>
    </rule>
    <rule id="900009" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_via_stdin.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via Stdin in Scripts-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: 86b896ba-ffa1-4fea-83e3-ee28a4c915c7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Stdin - Powershell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i).*(set).*&amp;&amp;\s?set.*(environment|invoke|\$\{?input).*&amp;&amp;.*"</field>
    </rule>
    <rule id="900010" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_using_set_service_to_hide_services.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of the "Set-Service" powershell cmdlet to configure a new SecurityDescriptor that allows a service to be hidden from other utilities such as "sc.exe", "Get-Service"...etc. (Works only in powershell 7)-->
        <!--Date: 2022/10/17-->
        <!--Status: test-->
        <!--ID: 953945c5-22fe-4a92-9f8a-a9edc1e522da-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1574.011</id>
        </mitre>
        <description>Abuse of Service Permissions to Hide Services Via Set-Service - PS</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Set\-Service\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)DCLCWPDTSD</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-SecurityDescriptorSddl\ |\-sd\ )</field>
    </rule>
    <rule id="900011" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_create_local_user.yml</info>
        <!--Sigma Rule Author: @ROxPinTeddy-->
        <!--Description: Detects creation of a local user via PowerShell-->
        <!--Date: 2020/04/11-->
        <!--Status: test-->
        <!--ID: 243de76f-4725-4f2e-8225-a8a69b15ad61-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.persistence</id>
            <id>attack.t1136.001</id>
        </mitre>
        <description>PowerShell Create Local User</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-LocalUser</field>
    </rule>
    <rule id="900012" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_shellcode_b64.yml</info>
        <!--Sigma Rule Author: David Ledbetter (shellcode), Florian Roth (Nextron Systems)-->
        <!--Description: Detects Base64 encoded Shellcode-->
        <!--Date: 2018/11/17-->
        <!--Status: test-->
        <!--ID: 16b37b70-6fcf-4814-a092-c36bd3aafcbd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell ShellCode</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)AAAAYInlM</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)OiCAAAAYInlM|OiJAAAAYInlM</field>
    </rule>
    <rule id="900013" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_request_kerberos_ticket.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: utilize native PowerShell Identity modules to query the domain to extract the Service Principal Names for a single computer.
This behavior is typically used during a kerberos or silver ticket attack.
A successful execution will output the SPNs for the endpoint in question.
-->
        <!--Date: 2021/12/28-->
        <!--Status: test-->
        <!--ID: a861d835-af37-4930-bcd6-5b178bfb54df-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>Request A Single Ticket via PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.IdentityModel\.Tokens\.KerberosRequestorSecurityToken</field>
    </rule>
    <rule id="900014" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_wmimplant.yml</info>
        <!--Sigma Rule Author: NVISO-->
        <!--Description: Detects parameters used by WMImplant-->
        <!--Date: 2020/03/26-->
        <!--Status: test-->
        <!--ID: 8028c2c3-e25a-46e3-827f-bbb5abf181d7-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>WMImplant Hack Tool</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:WMImplant|\ change_user\ |\ gen_cli\ |\ command_exec\ |\ disable_wdigest\ |\ disable_winrm\ |\ enable_wdigest\ |\ enable_winrm\ |\ registry_mod\ |\ remote_posh\ |\ sched_job\ |\ service_mod\ |\ process_kill\ |\ active_users\ |\ basic_info\ |\ power_off\ |\ vacant_system\ |\ logon_events\ )</field>
    </rule>
    <rule id="900015" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_remotefxvgpudisablement_abuse.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects PowerShell module creation where the module Contents are set to "function Get-VMRemoteFXPhysicalVideoAdapter". This could be a sign of potential abuse of the "RemoteFXvGPUDisablement.exe" binary which is known to be vulnerable to module load-order hijacking.-->
        <!--Date: 2023/05/09-->
        <!--Status: experimental-->
        <!--ID: cacef8fc-9d3d-41f7-956d-455c6e881bc5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Potential RemoteFXvGPUDisablement.EXE Abuse - PowerShell ScriptBlock</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)^(?:function\ Get\-VMRemoteFXPhysicalVideoAdapter\ \{)</field>
    </rule>
    <rule id="900016" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_clear_eventlog.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of known powershell cmdlets such as "Clear-EventLog" to clear the Windows event logs-->
        <!--Date: 2022/09/12-->
        <!--Status: test-->
        <!--ID: 0f017df3-8f5a-414f-ad6b-24aff1128278-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.001</id>
        </mitre>
        <description>Suspicious Eventlog Clear</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Clear\-EventLog\ |Remove\-EventLog\ |Limit\-EventLog\ |Clear\-WinEvent\ )</field>
    </rule>
    <rule id="900017" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_networkcredential.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries with no prior knowledge of legitimate credentials within the system or environment may guess passwords to attempt access to accounts.
Without knowledge of the password for an account, an adversary may opt to systematically guess the password using a repetitive or iterative mechanism
-->
        <!--Date: 2021/12/27-->
        <!--Status: test-->
        <!--ID: 1883444f-084b-419b-ac62-e0d0c5b3693f-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1110.001</id>
        </mitre>
        <description>Suspicious Connection to Remote Account</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.DirectoryServices\.Protocols\.LdapDirectoryIdentifier|System\.Net\.NetworkCredential|System\.DirectoryServices\.Protocols\.LdapConnection</field>
    </rule>
    <rule id="900018" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_veeam_credential_dumping_script.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of a PowerShell script that contains calls to the "Veeam.Backup" class, in order to dump stored credentials.-->
        <!--Date: 2023/05/04-->
        <!--Status: experimental-->
        <!--ID: 976d6e6f-a04b-4900-9713-0134a353e38b-->
        <mitre>
            <id>attack.credential_access</id>
        </mitre>
        <description>Veeam Backup Servers Credential Dumping Script Execution</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\[Credentials\]</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\[Veeam\.Backup\.Common\.ProtectedStorage\]::GetLocalString</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Invoke\-Sqlcmd</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Veeam\ Backup\ and\ Replication</field>
    </rule>
    <rule id="900019" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_aadinternals_cmdlets_execution.yml</info>
        <!--Sigma Rule Author: Austin Songer (@austinsonger), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects ADDInternals Cmdlet execution. A tool for administering Azure AD and Office 365. Which can be abused by threat actors to attack Azure AD or Office 365.-->
        <!--Date: 2022/12/23-->
        <!--Status: test-->
        <!--ID: 91e69562-2426-42ce-a647-711b8152ced6-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.reconnaissance</id>
            <id>attack.discovery</id>
            <id>attack.credential_access</id>
            <id>attack.impact</id>
        </mitre>
        <description>AADInternals PowerShell Cmdlets Execution - PsScript</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Add\-AADInt|ConvertTo\-AADInt|Disable\-AADInt|Enable\-AADInt|Export\-AADInt|Get\-AADInt|Grant\-AADInt|Install\-AADInt|Invoke\-AADInt|Join\-AADInt|New\-AADInt|Open\-AADInt|Read\-AADInt|Register\-AADInt|Remove\-AADInt|Restore\-AADInt|Search\-AADInt|Send\-AADInt|Set\-AADInt|Start\-AADInt|Update\-AADInt</field>
    </rule>
    <rule id="900020" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_potential_invoke_mimikatz.yml</info>
        <!--Sigma Rule Author: Tim Rauch-->
        <!--Description: Detects Invoke-Mimikatz PowerShell script and alike. Mimikatz is a credential dumper capable of obtaining plaintext Windows account logins and passwords.-->
        <!--Date: 2022/09/28-->
        <!--Status: test-->
        <!--ID: 189e3b02-82b2-4b90-9662-411eb64486d4-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
        </mitre>
        <description>Potential Invoke-Mimikatz PowerShell Script</description>
        <options>no_full_log</options>
        <group>ps_script,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)DumpCreds</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)DumpCerts</field>
    </rule>
    <rule id="900021" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_potential_invoke_mimikatz.yml</info>
        <!--Sigma Rule Author: Tim Rauch-->
        <!--Description: Detects Invoke-Mimikatz PowerShell script and alike. Mimikatz is a credential dumper capable of obtaining plaintext Windows account logins and passwords.-->
        <!--Date: 2022/09/28-->
        <!--Status: test-->
        <!--ID: 189e3b02-82b2-4b90-9662-411eb64486d4-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
        </mitre>
        <description>Potential Invoke-Mimikatz PowerShell Script</description>
        <options>no_full_log</options>
        <group>ps_script,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)sekurlsa::logonpasswords</field>
    </rule>
    <rule id="900022" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_potential_invoke_mimikatz.yml</info>
        <!--Sigma Rule Author: Tim Rauch-->
        <!--Description: Detects Invoke-Mimikatz PowerShell script and alike. Mimikatz is a credential dumper capable of obtaining plaintext Windows account logins and passwords.-->
        <!--Date: 2022/09/28-->
        <!--Status: test-->
        <!--ID: 189e3b02-82b2-4b90-9662-411eb64486d4-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
        </mitre>
        <description>Potential Invoke-Mimikatz PowerShell Script</description>
        <options>no_full_log</options>
        <group>ps_script,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)crypto::certificates</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)CERT_SYSTEM_STORE_LOCAL_MACHINE</field>
    </rule>
    <rule id="900023" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_invocation_specific.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-nop</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-w\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)hidden</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-c\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\[Convert\]::FromBase64String</field>
    </rule>
    <rule id="900024" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_invocation_specific.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-w\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)hidden</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-noni</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-nop</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-c\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)iex</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-Object</field>
    </rule>
    <rule id="900025" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_invocation_specific.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-w\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)hidden</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-ep</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)bypass</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-Enc</field>
    </rule>
    <rule id="900026" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_invocation_specific.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)powershell</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)reg</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)add</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)HKCU\\+software\\+microsoft\\+windows\\+currentversion\\+run</field>
    </rule>
    <rule id="900027" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_invocation_specific.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)bypass</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-noprofile</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-windowstyle</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)hidden</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)new\-object</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)system\.net\.webclient</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.download</field>
    </rule>
    <rule id="900028" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_invocation_specific.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)iex</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-Object</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Net\.WebClient</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.Download</field>
    </rule>
    <rule id="900029" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_invocation_specific.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: ae7fbf8e-f3cb-49fd-8db4-5f3bed522c71-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)\(New\-Object\ System\.Net\.WebClient\)\.DownloadString\('https://community\.chocolatey\.org/install\.ps1</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)\(New\-Object\ System\.Net\.WebClient\)\.DownloadString\('https://chocolatey\.org/install\.ps1'\)</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)Write\-ChocolateyWarning</field>
    </rule>
    <rule id="900030" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_set_policies_to_unsecure_level.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects use of Set-ExecutionPolicy to set insecure policies-->
        <!--Date: 2021/10/20-->
        <!--Status: test-->
        <!--ID: 61d0475c-173f-4844-86f7-f3eebae1c66b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Change PowerShell Policies to an Insecure Level - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Set\-ExecutionPolicy</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Unrestricted|bypass|RemoteSigned</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)\(New\-Object\ System\.Net\.WebClient\)\.DownloadString\('https://community\.chocolatey\.org/install\.ps1'\)</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)\(New\-Object\ System\.Net\.WebClient\)\.DownloadString\('https://chocolatey\.org/install\.ps1'\)</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)\\+AppData\\+Roaming\\+Code\\+</field>
    </rule>
    <rule id="900031" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_via_use_rundll32.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Rundll32 in Scripts-->
        <!--Date: 2019/10/08-->
        <!--Status: test-->
        <!--ID: a5a30a6e-75ca-4233-8b8c-42e0f2037d3b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Rundll32 - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)value|invoke|comspec|iex</field>
    </rule>
    <rule id="900032" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_wmi_unquoted_service_search.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects known WMI recon method to look for unquoted service paths, often used by pentest inside of powershell scripts attackers enum scripts-->
        <!--Date: 2022/06/20-->
        <!--Status: test-->
        <!--ID: 09658312-bc27-4a3b-91c5-e49ab9046d1b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
        </mitre>
        <description>WMIC Unquoted Services Path Lookup - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Get\-WmiObject\ |gwmi\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ Win32_Service\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Name</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)DisplayName</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)PathName</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)StartMode</field>
    </rule>
    <rule id="900033" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_computer_discovery_get_adcomputer.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of the Get-ADComputer cmdlet to collect computer information and output it to a file-->
        <!--Date: 2022/11/17-->
        <!--Status: test-->
        <!--ID: db885529-903f-4c5d-9864-28fe199e6370-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
        </mitre>
        <description>Computer Discovery And Export Via Get-ADComputer Cmdlet - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Get\-ADComputer\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\ \-Filter\ \\+</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\ \|\ Select\ |Out\-File|Set\-Content|Add\-Content</field>
    </rule>
    <rule id="900034" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_keywords.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Perez Diego (@darkquassar), Tuan Le (NCSGroup)-->
        <!--Description: Detects potentially suspicious keywords that could indicate the use of a PowerShell exploitation framework-->
        <!--Date: 2019/02/11-->
        <!--Status: test-->
        <!--ID: 1f49f2ab-26bc-48b3-96cc-dcffbc93eadf-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Potential Suspicious PowerShell Keywords</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.Reflection\.Assembly\.Load\(\$|\[System\.Reflection\.Assembly\]::Load\(\$|\[Reflection\.Assembly\]::Load\(\$|System\.Reflection\.AssemblyName|Reflection\.Emit\.AssemblyBuilderAccess|Reflection\.Emit\.CustomAttributeBuilder|Runtime\.InteropServices\.UnmanagedType|Runtime\.InteropServices\.DllImportAttribute|SuspendThread|rundll32</field>
    </rule>
    <rule id="900035" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_user_discovery_get_aduser.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of the Get-ADUser cmdlet to collect user information and output it to a file-->
        <!--Date: 2022/11/17-->
        <!--Status: test-->
        <!--ID: c2993223-6da8-4b1a-88ee-668b8bf315e9-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
        </mitre>
        <description>User Discovery And Export Via Get-ADUser Cmdlet - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Get\-ADUser\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\ \-Filter\ \\+</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\ &gt;\ |\ \|\ Select\ |Out\-File|Set\-Content|Add\-Content</field>
    </rule>
    <rule id="900036" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_hotfix_enum.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects call to "Win32_QuickFixEngineering" in order to enumerate installed hotfixes often used in "enum" scripts by attackers-->
        <!--Date: 2022/06/21-->
        <!--Status: test-->
        <!--ID: f5d1def8-1de0-4a0e-9794-1f6f27dd605c-->
        <mitre>
            <id>attack.discovery</id>
        </mitre>
        <description>PowerShell Hotfix Enumeration</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Win32_QuickFixEngineering</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)HotFixID</field>
    </rule>
    <rule id="900037" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_active_directory_module_dll_import.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali-->
        <!--Description: Detects usage of the "Import-Module" cmdlet to load the "Microsoft.ActiveDirectory.Management.dl" DLL. Which is often used by attackers to perform AD enumeration.-->
        <!--Date: 2023/01/22-->
        <!--Status: test-->
        <!--ID: 9e620995-f2d8-4630-8430-4afd89f77604-->
        <mitre>
            <id>attack.reconnaissance</id>
            <id>attack.discovery</id>
            <id>attack.impact</id>
        </mitre>
        <description>Potential Active Directory Enumeration Using AD Module - PsScript</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Import\-Module\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Microsoft\.ActiveDirectory\.Management\.dll</field>
    </rule>
    <rule id="900038" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_active_directory_module_dll_import.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali-->
        <!--Description: Detects usage of the "Import-Module" cmdlet to load the "Microsoft.ActiveDirectory.Management.dl" DLL. Which is often used by attackers to perform AD enumeration.-->
        <!--Date: 2023/01/22-->
        <!--Status: test-->
        <!--ID: 9e620995-f2d8-4630-8430-4afd89f77604-->
        <mitre>
            <id>attack.reconnaissance</id>
            <id>attack.discovery</id>
            <id>attack.impact</id>
        </mitre>
        <description>Potential Active Directory Enumeration Using AD Module - PsScript</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)ipmo\ Microsoft\.ActiveDirectory\.Management\.dll</field>
    </rule>
    <rule id="900039" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_amsi_bypass_pattern_nov22.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects code fragments found in small and obfuscated AMSI bypass PowerShell scripts-->
        <!--Date: 2022/11/09-->
        <!--Status: test-->
        <!--ID: e0d6c087-2d1c-47fd-8799-3904103c5a98-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
            <id>attack.execution</id>
        </mitre>
        <description>AMSI Bypass Pattern Assembly GetType</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\[Ref\]\.Assembly\.GetType</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)SetValue\(\$null,\$true\)</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)NonPublic,Static</field>
    </rule>
    <rule id="900040" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_windowstyle.yml</info>
        <!--Sigma Rule Author: frack113, Tim Shelton (fp AWS)-->
        <!--Description: Adversaries may use hidden windows to conceal malicious activity from the plain sight of users.
In some cases, windows that would typically be displayed when an application carries out an operation can be hidden
-->
        <!--Date: 2021/10/20-->
        <!--Status: test-->
        <!--ID: 313fbb0a-a341-4682-848d-6d6f8c4fab7c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.003</id>
        </mitre>
        <description>Suspicious PowerShell WindowStyle Option</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)powershell</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)WindowStyle</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Hidden</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Amazon\\+WorkSpacesConfig\\+Scripts\\+</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)\$PSScriptRoot\\+Module\\+WorkspaceScriptModule\\+WorkspaceScriptModule</field>
    </rule>
    <rule id="900041" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_clear_powershell_history.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, Jonhnathan Ribeiro, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects keywords that could indicate clearing PowerShell history-->
        <!--Date: 2022/01/25-->
        <!--Status: test-->
        <!--ID: 26b692dc-1722-49b2-b496-a8258aa6371d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.003</id>
        </mitre>
        <description>Clear PowerShell History - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Set\-PSReadlineOption</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)–HistorySaveStyle</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)SaveNothing</field>
    </rule>
    <rule id="900042" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_clear_powershell_history.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, Jonhnathan Ribeiro, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects keywords that could indicate clearing PowerShell history-->
        <!--Date: 2022/01/25-->
        <!--Status: test-->
        <!--ID: 26b692dc-1722-49b2-b496-a8258aa6371d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.003</id>
        </mitre>
        <description>Clear PowerShell History - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Set\-PSReadlineOption</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-HistorySaveStyle</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)SaveNothing</field>
    </rule>
    <rule id="900043" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_clip.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Clip.exe to execute PowerShell-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: 73e67340-0d25-11eb-adc1-0242ac120002-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation CLIP+ Launcher - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:/c|/r).+clip(?:\.exe)?.{0,4}&amp;&amp;.+clipboard]::\(\s\\+"\{\d\}.+-f.+"</field>
    </rule>
    <rule id="900044" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_getprocess_lsass.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a Get-Process command on lsass process, which is in almost all cases a sign of malicious activity-->
        <!--Date: 2021/04/23-->
        <!--Status: test-->
        <!--ID: 84c174ab-d3ef-481f-9c86-a50d0b8e3edb-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>PowerShell Get-Process LSASS in ScriptBlock</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-Process\ lsass</field>
    </rule>
    <rule id="900045" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_gettypefromclsid.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects suspicious Powershell code that execute COM Objects-->
        <!--Date: 2022/04/02-->
        <!--Status: test-->
        <!--ID: 8bc063d5-3a3a-4f01-a140-bc15e55e8437-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.persistence</id>
            <id>attack.t1546.015</id>
        </mitre>
        <description>Suspicious GetTypeFromCLSID ShellExecute</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)::GetTypeFromCLSID\(</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.ShellExecute\(</field>
    </rule>
    <rule id="900046" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_get_current_user.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the use of PowerShell to identify the current logged user.-->
        <!--Date: 2022/04/04-->
        <!--Status: test-->
        <!--ID: 4096a49c-7de4-4da0-a230-c66ccd56ea5a-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
        </mitre>
        <description>Suspicious PowerShell Get Current User</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\[System\.Environment\]::UserName|\$env:UserName|\[System\.Security\.Principal\.WindowsIdentity\]::GetCurrent\(\)</field>
    </rule>
    <rule id="900047" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_get_acl_service.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services.
Adversaries may use flaws in the permissions for registry to redirect from the originally specified executable to one that they control, in order to launch their own code at Service start.
Windows stores local service configuration information in the Registry under HKLM\SYSTEM\CurrentControlSet\Services
-->
        <!--Date: 2021/12/30-->
        <!--Status: test-->
        <!--ID: 95afc12e-3cbb-40c3-9340-84a032e596a3-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1574.011</id>
            <id>stp.2a</id>
        </mitre>
        <description>Service Registry Permissions Weakness Check</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)get\-acl</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)REGISTRY::HKLM\\+SYSTEM\\+CurrentControlSet\\+Services\\+</field>
    </rule>
    <rule id="900048" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_enable_psremoting.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.-->
        <!--Date: 2022/01/07-->
        <!--Status: test-->
        <!--ID: 991a9744-f2f0-44f2-bd33-9092eba17dc3-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.006</id>
        </mitre>
        <description>Enable Windows Remote Management</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Enable\-PSRemoting\ )</field>
    </rule>
    <rule id="900049" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_smb_share_reco.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as
a precursor for Collection and to identify potential systems of interest for Lateral Movement.
Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network.
-->
        <!--Date: 2021/12/15-->
        <!--Status: test-->
        <!--ID: 95f0643a-ed40-467c-806b-aac9542ec5ab-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.001</id>
        </mitre>
        <description>Suspicious Get Information for SMB Share</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)get\-smbshare</field>
    </rule>
    <rule id="900050" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_shellintel_malicious_commandlets.yml</info>
        <!--Sigma Rule Author: Max Altgelt (Nextron Systems), Tobias Michalski (Nextron Systems)-->
        <!--Description: Detects Commandlet names from ShellIntel exploitation scripts.-->
        <!--Date: 2021/08/09-->
        <!--Status: test-->
        <!--ID: 402e1e1d-ad59-47b6-bf80-1ee44985b3a7-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious ShellIntel PowerShell Commandlets</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Invoke\-SMBAutoBrute|Invoke\-GPOLinks|Invoke\-Potato</field>
    </rule>
    <rule id="900051" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_local_group_reco.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to find local system groups and permission settings.
The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.
Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.
-->
        <!--Date: 2021/12/12-->
        <!--Status: test-->
        <!--ID: fa6a5a45-3ee2-4529-aa14-ee5edc9e29cb-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.001</id>
        </mitre>
        <description>Suspicious Get Local Groups Information - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)get\-localgroup|Get\-LocalGroupMember</field>
    </rule>
    <rule id="900052" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_local_group_reco.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to find local system groups and permission settings.
The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.
Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.
-->
        <!--Date: 2021/12/12-->
        <!--Status: test-->
        <!--ID: fa6a5a45-3ee2-4529-aa14-ee5edc9e29cb-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.001</id>
        </mitre>
        <description>Suspicious Get Local Groups Information - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-WMIObject</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Win32_Group</field>
    </rule>
    <rule id="900053" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_directoryservices_accountmanagement.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may create a domain account to maintain access to victim systems.
Domain accounts are those managed by Active Directory Domain Services where access and permissions are configured across systems and services that are part of that domain..
-->
        <!--Date: 2021/12/28-->
        <!--Status: test-->
        <!--ID: b29a93fb-087c-4b5b-a84d-ee3309e69d08-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1136.002</id>
        </mitre>
        <description>Manipulation of User Computer or Group Security Principals Across AD</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.DirectoryServices\.AccountManagement</field>
    </rule>
    <rule id="900054" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_get_addefaultdomainpasswordpolicy.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detetcts PowerShell activity in which Get-Addefaultdomainpasswordpolicy is used to get the default password policy for an Active Directory domain.-->
        <!--Date: 2022/03/17-->
        <!--Status: test-->
        <!--ID: bbb9495b-58fc-4016-b9df-9a3a1b67ca82-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1201</id>
        </mitre>
        <description>Password Policy Discovery With Get-AdDefaultDomainPasswordPolicy</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-AdDefaultDomainPasswordPolicy</field>
    </rule>
    <rule id="900055" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_web_request_cmd_and_cmdlets.yml</info>
        <!--Sigma Rule Author: James Pemberton / @4A616D6573-->
        <!--Description: Detects the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via PowerShell scriptblock logs-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 1139d2e2-84b1-4226-b445-354492eba8ba-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Usage Of Web Request Commands And Cmdlets - ScriptBlock</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\[System\.Net\.WebRequest\]::create|curl\ |Invoke\-RestMethod|Invoke\-WebRequest|iwr\ |Net\.WebClient|Resume\-BitsTransfer|Start\-BitsTransfer|wget\ |WinHttp\.WinHttpRequest</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:C:\\+Packages\\+Plugins\\+Microsoft\.GuestConfiguration\.ConfigurationforWindows\\+)</field>
    </rule>
    <rule id="900056" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_tamper_windows_defender_set_mp.yml</info>
        <!--Sigma Rule Author: frack113, elhoim, Tim Shelton (fps, alias support), Swachchhanda Shrawan Poudel, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects PowerShell scripts attempting to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow.-->
        <!--Date: 2022/01/16-->
        <!--Status: experimental-->
        <!--ID: 14c71865-6cd3-44ae-adaa-1db923fae5f2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Tamper Windows Defender - ScriptBlockLogging</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Set\-MpPreference</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-dbaf\ \$true|\-dbaf\ 1|\-dbm\ \$true|\-dbm\ 1|\-dips\ \$true|\-dips\ 1|\-DisableArchiveScanning\ \$true|\-DisableArchiveScanning\ 1|\-DisableBehaviorMonitoring\ \$true|\-DisableBehaviorMonitoring\ 1|\-DisableBlockAtFirstSeen\ \$true|\-DisableBlockAtFirstSeen\ 1|\-DisableIntrusionPreventionSystem\ \$true|\-DisableIntrusionPreventionSystem\ 1|\-DisableIOAVProtection\ \$true|\-DisableIOAVProtection\ 1|\-DisableRealtimeMonitoring\ \$true|\-DisableRealtimeMonitoring\ 1|\-DisableRemovableDriveScanning\ \$true|\-DisableRemovableDriveScanning\ 1|\-DisableScanningMappedNetworkDrivesForFullScan\ \$true|\-DisableScanningMappedNetworkDrivesForFullScan\ 1|\-DisableScanningNetworkFiles\ \$true|\-DisableScanningNetworkFiles\ 1|\-DisableScriptScanning\ \$true|\-DisableScriptScanning\ 1|\-drdsc\ \$true|\-drdsc\ 1|\-drtm\ \$true|\-drtm\ 1|\-dscrptsc\ \$true|\-dscrptsc\ 1|\-dsmndf\ \$true|\-dsmndf\ 1|\-dsnf\ \$true|\-dsnf\ 1|\-dss\ \$true|\-dss\ 1</field>
    </rule>
    <rule id="900057" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_gwmi.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: The infrastructure for management data and operations that enables local and remote management of Windows personal computers and servers-->
        <!--Date: 2022/01/12-->
        <!--Status: test-->
        <!--ID: 0332a266-b584-47b4-933d-a00b103e1b37-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546</id>
        </mitre>
        <description>Suspicious Get-WmiObject</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-WmiObject|gwmi</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+CL_Utility\.ps1)</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)function\ Get\-FreeSpace</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)SELECT\ .+\ FROM\ Win32_LogicalDisk\ WHERE\ MediaType=12</field>
    </rule>
    <rule id="900058" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_adrecon_execution.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects execution of ADRecon.ps1 for AD reconnaissance which has been reported to be actively used by FIN7-->
        <!--Date: 2021/07/16-->
        <!--Status: test-->
        <!--ID: bf72941a-cba0-41ea-b18c-9aca3925690d-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell ADRecon Execution</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Function\ Get\-ADRExcelComOb|Get\-ADRGPO|Get\-ADRDomainController|ADRecon\-Report\.xlsx</field>
    </rule>
    <rule id="900059" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_localuser.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may manipulate accounts to maintain access to victim systems.
Account manipulation may consist of any action that preserves adversary access to a compromised account, such as modifying credentials or permission groups
-->
        <!--Date: 2021/12/28-->
        <!--Status: test-->
        <!--ID: 4fdc44df-bfe9-4fcc-b041-68f5a2d3031c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1098</id>
        </mitre>
        <description>Powershell LocalAccount Manipulation</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Disable\-LocalUser|Enable\-LocalUser|Get\-LocalUser|Set\-LocalUser|New\-LocalUser|Rename\-LocalUser|Remove\-LocalUser</field>
    </rule>
    <rule id="900060" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_as_rep_roasting.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects AS-REP roasting is an attack that is often-overlooked. It is not very common as you have to explicitly set accounts that do not require pre-authentication.-->
        <!--Date: 2022/03/17-->
        <!--Status: test-->
        <!--ID: 96c982fe-3d08-4df4-bed2-eb14e02f21c8-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
        </mitre>
        <description>Get-ADUser Enumeration Using UserAccountControl Flags</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-ADUser</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-Filter</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)useraccountcontrol</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-band</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)4194304</field>
    </rule>
    <rule id="900061" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_via_compress.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via COMPRESS OBFUSCATION-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: 20e5497e-331c-4cd5-8d36-935f6e2a9a07-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation COMPRESS OBFUSCATION - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)new\-object</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)text\.encoding\]::ascii</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)system\.io\.compression\.deflatestream|system\.io\.streamreader</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:readtoend)$</field>
    </rule>
    <rule id="900062" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_hktl_winpwn.yml</info>
        <!--Sigma Rule Author: Swachchhanda Shrawan Poudel-->
        <!--Description: Detects scriptblock text keywords indicative of potential usge of the tool WinPwn. A tool for Windows and Active Directory reconnaissance and exploitation.
-->
        <!--Date: 2023/12/04-->
        <!--Status: experimental-->
        <!--ID: 851fd622-b675-4d26-b803-14bc7baa517a-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.defense_evasion</id>
            <id>attack.discovery</id>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1046</id>
            <id>attack.t1082</id>
            <id>attack.t1106</id>
            <id>attack.t1518</id>
            <id>attack.t1548.002</id>
            <id>attack.t1552.001</id>
            <id>attack.t1555</id>
            <id>attack.t1555.003</id>
        </mitre>
        <description>HackTool - WinPwn Execution - ScriptBlock</description>
        <options>no_full_log</options>
        <group>ps_script,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Offline_Winpwn|WinPwn\ |WinPwn\.exe|WinPwn\.ps1</field>
    </rule>
    <rule id="900063" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_x509enrollment.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect use of X509Enrollment-->
        <!--Date: 2022/12/23-->
        <!--Status: test-->
        <!--ID: 504d63cb-0dba-4d02-8531-e72981aace2c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1553.004</id>
        </mitre>
        <description>Suspicious X509Enrollment - Ps Script</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)X509Enrollment\.CBinaryConverter|884e2002\-217d\-11da\-b2a4\-000e7bbb2b09</field>
    </rule>
    <rule id="900064" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_remove_adgroupmember.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may interrupt availability of system and network resources by inhibiting access to accounts utilized by legitimate users.
Accounts may be deleted, locked, or manipulated (ex: changed credentials) to remove access to accounts.
-->
        <!--Date: 2021/12/26-->
        <!--Status: test-->
        <!--ID: 48a45d45-8112-416b-8a67-46e03a4b2107-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1531</id>
        </mitre>
        <description>Remove Account From Domain Admin Group</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Remove\-ADGroupMember</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Identity\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Members\ )</field>
    </rule>
    <rule id="900065" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_follina_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of "TroubleshootingPack" cmdlets to leverage CVE-2022-30190 or action similar to "msdt" lolbin (as described in LOLBAS)-->
        <!--Date: 2022/06/21-->
        <!--Status: test-->
        <!--ID: 03409c93-a7c7-49ba-9a4c-a00badf2a153-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Troubleshooting Pack Cmdlet Execution</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Invoke\-TroubleshootingPack</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)C:\\+Windows\\+Diagnostics\\+System\\+PCW</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-AnswerFile</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-Unattended</field>
    </rule>
    <rule id="900066" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_token_obfuscation.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects TOKEN OBFUSCATION technique from Invoke-Obfuscation-->
        <!--Date: 2022/12/27-->
        <!--Status: experimental-->
        <!--ID: f3a98ce4-6164-4dd4-867c-4d83de7eca51-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027.009</id>
        </mitre>
        <description>Powershell Token Obfuscation - Powershell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\w+`(\w+|-|.)`[\w+|\s]</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)"(\{\d\}){2,}"\s*-f</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$\{((e|n|v)*`(e|n|v)*)+:path\}|\$\{((e|n|v)*`(e|n|v)*)+:((p|a|t|h)*`(p|a|t|h)*)+\}|\$\{env:((p|a|t|h)*`(p|a|t|h)*)+\}</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)it\ will\ return\ true\ or\ false\ instead</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)The\ function\ also\ prevents\ `Get\-ItemProperty`\ from\ failing</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:C:\\+Program\ Files\\+Microsoft\\+Exchange\ Server\\+)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+bin\\+servicecontrol\.ps1)</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)`r`n</field>
    </rule>
    <rule id="900067" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_directorysearcher.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Enumerates Active Directory to determine computers that are joined to the domain-->
        <!--Date: 2022/02/12-->
        <!--Status: test-->
        <!--ID: 1f6399cf-2c80-4924-ace1-6fcff3393480-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1018</id>
        </mitre>
        <description>DirectorySearcher Powershell Exploitation</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:New\-Object\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.DirectoryServices\.DirectorySearcher</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.PropertiesToLoad\.Add</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.findall\(\)</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Properties\.name</field>
    </rule>
    <rule id="900068" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_office_comobject_registerxll.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse Microsoft Office add-ins to obtain persistence on a compromised system.
Office add-ins can be used to add functionality to Office programs
-->
        <!--Date: 2021/12/28-->
        <!--Status: test-->
        <!--ID: 36fbec91-fa1b-4d5d-8df1-8d8edcb632ad-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137.006</id>
        </mitre>
        <description>Code Executed Via Office Add-in XLL File</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:new\-object\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ComObject\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.application</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.RegisterXLL</field>
    </rule>
    <rule id="900069" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_malicious_keywords.yml</info>
        <!--Sigma Rule Author: Sean Metcalf (source), Florian Roth (Nextron Systems)-->
        <!--Description: Detects keywords from well-known PowerShell exploitation frameworks-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: f62176f3-8128-4faa-bf6c-83261322e5eb-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious PowerShell Keywords</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)AdjustTokenPrivileges|IMAGE_NT_OPTIONAL_HDR64_MAGIC|Metasploit|Microsoft\.Win32\.UnsafeNativeMethods|Mimikatz|MiniDumpWriteDump|PAGE_EXECUTE_READ|ReadProcessMemory\.Invoke|SE_PRIVILEGE_ENABLED|SECURITY_DELEGATION|TOKEN_ADJUST_PRIVILEGES|TOKEN_ALL_ACCESS|TOKEN_ASSIGN_PRIMARY|TOKEN_DUPLICATE|TOKEN_ELEVATION|TOKEN_IMPERSONATE|TOKEN_INFORMATION_CLASS|TOKEN_PRIVILEGES|TOKEN_QUERY</field>
    </rule>
    <rule id="900070" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_file_and_directory_discovery.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may enumerate files and directories or may search in specific locations of a host or network share for certain information within a file system.
Adversaries may use the information from [File and Directory Discovery](https://attack.mitre.org/techniques/T1083) during automated discovery to shape follow-on behaviors,
including whether or not the adversary fully infects the target and/or attempts specific actions.
-->
        <!--Date: 2021/12/15-->
        <!--Status: test-->
        <!--ID: d23f2ba5-9da0-4463-8908-8ee47f614bb9-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1083</id>
        </mitre>
        <description>Powershell File and Directory Discovery</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)ls|get\-childitem|gci</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-recurse</field>
    </rule>
    <rule id="900071" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_dnscat_execution.yml</info>
        <!--Sigma Rule Author: Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Dnscat exfiltration tool execution-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: a6d67db4-6220-436d-8afc-f3842fe05d43-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Dnscat Execution</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Start\-Dnscat2</field>
    </rule>
    <rule id="900072" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_var.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Environment Variables to execute PowerShell-->
        <!--Date: 2020/10/15-->
        <!--Status: test-->
        <!--ID: 0adfbc14-0ed1-11eb-adc1-0242ac120002-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR+ Launcher - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:/c|/r)(?:\s|)"set\s[a-zA-Z]{3,6}.*(?:\{\d\}){1,}\\+"\s+?-f(?:.*\)){1,}.*"</field>
    </rule>
    <rule id="900073" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_send_mailmessage.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.
The data may also be sent to an alternate network location from the main command and control server.
-->
        <!--Date: 2022/09/26-->
        <!--Status: test-->
        <!--ID: 9a7afa56-4762-43eb-807d-c3dc9ffe211b-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048.003</id>
        </mitre>
        <description>Powershell Exfiltration Over SMTP</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Send\-MailMessage</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)CmdletsToExport</field>
    </rule>
    <rule id="900074" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_get_process.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Get the processes that are running on the local computer.-->
        <!--Date: 2022/03/17-->
        <!--Status: test-->
        <!--ID: af4c87ce-bdda-4215-b998-15220772e993-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1057</id>
        </mitre>
        <description>Suspicious Process Discovery With Get-Process</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-Process</field>
    </rule>
    <rule id="900075" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_capture_screenshots.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to take screen captures of the desktop to gather information over the course of an operation.
Screen capturing functionality may be included as a feature of a remote access tool used in post-compromise operations
-->
        <!--Date: 2021/12/28-->
        <!--Status: test-->
        <!--ID: d4a11f63-2390-411c-9adf-d791fd152830-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1113</id>
        </mitre>
        <description>Windows Screen Capture with CopyFromScreen</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.CopyFromScreen</field>
    </rule>
    <rule id="900076" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_hyper_v_condlet.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may carry out malicious operations using a virtual instance to avoid detection-->
        <!--Date: 2022/04/09-->
        <!--Status: test-->
        <!--ID: 42d36aa1-3240-4db0-8257-e0118dcdd9cd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.006</id>
        </mitre>
        <description>Suspicious Hyper-V Cmdlets</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-VM|Set\-VMFirmware|Start\-VM</field>
    </rule>
    <rule id="900077" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_export_certificate.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects calls to cmdlets inside of PowerShell scripts that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines.-->
        <!--Date: 2021/04/23-->
        <!--Status: test-->
        <!--ID: aa7a3fce-bef5-4311-9cc1-5f04bb8c308c-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.004</id>
        </mitre>
        <description>Certificate Exported Via PowerShell - ScriptBlock</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Export\-PfxCertificate|Export\-Certificate</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)CmdletsToExport\ =\ @\(</field>
    </rule>
    <rule id="900078" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_resolve_list_of_ip_from_file.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects PowerShell scripts that have capabilities to read files, loop through them and resolve DNS host entries.-->
        <!--Date: 2023/05/05-->
        <!--Status: experimental-->
        <!--ID: fbc5e92f-3044-4e73-a5c6-1c4359b539de-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1020</id>
        </mitre>
        <description>PowerShell Script With File Hostname Resolving Capabilities</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Get\-content\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)foreach</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\[System\.Net\.Dns\]::GetHostEntry</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Out\-File</field>
    </rule>
    <rule id="900079" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_iofilestream.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Open a handle on the drive volume via the \\.\ DOS device path specifier and perform direct access read of the first few bytes of the volume.-->
        <!--Date: 2022/01/09-->
        <!--Status: test-->
        <!--ID: 70ad982f-67c8-40e0-a955-b920c2fa05cb-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.003</id>
        </mitre>
        <description>Suspicious IO.FileStream</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-Object</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)IO\.FileStream</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\\+\.\\+</field>
    </rule>
    <rule id="900080" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_malicious_commandlets.yml</info>
        <!--Sigma Rule Author: Sean Metcalf, Florian Roth, Bartlomiej Czyz @bczyz1, oscd.community, Nasreddine Bencherchali, Tim Shelton, Mustafa Kaan Demir, Georg Lauenstein, Max Altgelt, Tobias Michalski, Austin Songer-->
        <!--Description: Detects Commandlet names from well-known PowerShell exploitation frameworks-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: 89819aa4-bbd6-46bc-88ec-c7f7fe30efa6-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.discovery</id>
            <id>attack.t1482</id>
            <id>attack.t1087</id>
            <id>attack.t1087.001</id>
            <id>attack.t1087.002</id>
            <id>attack.t1069.001</id>
            <id>attack.t1069.002</id>
            <id>attack.t1069</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious PowerShell Commandlets - ScriptBlock</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Add\-Exfiltration|Add\-Persistence|Add\-RegBackdoor|Add\-RemoteRegBackdoor|Add\-ScrnSaveBackdoor|Check\-VM|ConvertTo\-Rc4ByteStream|Decrypt\-Hash|Disable\-ADIDNSNode|Disable\-MachineAccount|Do\-Exfiltration|Enable\-ADIDNSNode|Enable\-MachineAccount|Enabled\-DuplicateToken|Exploit\-Jboss|Export\-ADR|Export\-ADRCSV|Export\-ADRExcel|Export\-ADRHTML|Export\-ADRJSON|Export\-ADRXML|Find\-Fruit|Find\-GPOLocation|Find\-TrustedDocuments|Get\-ADIDNS|Get\-ApplicationHost|Get\-ChromeDump|Get\-ClipboardContents|Get\-FoxDump|Get\-GPPPassword|Get\-IndexedItem|Get\-KerberosAESKey|Get\-Keystrokes|Get\-LSASecret|Get\-MachineAccountAttribute|Get\-MachineAccountCreator|Get\-PassHashes|Get\-RegAlwaysInstallElevated|Get\-RegAutoLogon|Get\-RemoteBootKey|Get\-RemoteCachedCredential|Get\-RemoteLocalAccountHash|Get\-RemoteLSAKey|Get\-RemoteMachineAccountHash|Get\-RemoteNLKMKey|Get\-RickAstley|Get\-Screenshot|Get\-SecurityPackages|Get\-ServiceFilePermission|Get\-ServicePermission|Get\-ServiceUnquoted|Get\-SiteListPassword|Get\-System|Get\-TimedScreenshot|Get\-UnattendedInstallFile|Get\-Unconstrained|Get\-USBKeystrokes|Get\-VaultCredential|Get\-VulnAutoRun|Get\-VulnSchTask|Grant\-ADIDNSPermission|Gupt\-Backdoor|HTTP\-Login|Install\-ServiceBinary|Install\-SSP|Invoke\-ACLScanner|Invoke\-ADRecon|Invoke\-ADSBackdoor|Invoke\-AgentSmith|Invoke\-AllChecks|Invoke\-ARPScan|Invoke\-AzureHound|Invoke\-BackdoorLNK|Invoke\-BadPotato|Invoke\-BetterSafetyKatz|Invoke\-BypassUAC|Invoke\-Carbuncle|Invoke\-Certify|Invoke\-ConPtyShell|Invoke\-CredentialInjection|Invoke\-DAFT|Invoke\-DCSync|Invoke\-DinvokeKatz|Invoke\-DllInjection|Invoke\-DNSUpdate|Invoke\-DomainPasswordSpray|Invoke\-DowngradeAccount|Invoke\-EgressCheck|Invoke\-Eyewitness|Invoke\-FakeLogonScreen|Invoke\-Farmer|Invoke\-Get\-RBCD\-Threaded|Invoke\-Gopher|Invoke\-Grouper|Invoke\-HandleKatz|Invoke\-ImpersonatedProcess|Invoke\-ImpersonateSystem|Invoke\-InteractiveSystemPowerShell|Invoke\-Internalmonologue|Invoke\-Inveigh|Invoke\-InveighRelay|Invoke\-KrbRelay|Invoke\-LdapSignCheck|Invoke\-Lockless|Invoke\-MalSCCM|Invoke\-Mimikatz|Invoke\-Mimikittenz|Invoke\-MITM6|Invoke\-NanoDump|Invoke\-NetRipper|Invoke\-Nightmare|Invoke\-NinjaCopy|Invoke\-OfficeScrape|Invoke\-OxidResolver|Invoke\-P0wnedshell|Invoke\-Paranoia|Invoke\-PortScan|Invoke\-PoshRatHttp|Invoke\-PostExfil|Invoke\-PowerDump|Invoke\-PowerShellTCP|Invoke\-PowerShellWMI|Invoke\-PPLDump|Invoke\-PsExec|Invoke\-PSInject|Invoke\-PsUaCme|Invoke\-ReflectivePEInjection|Invoke\-ReverseDNSLookup|Invoke\-Rubeus|Invoke\-RunAs|Invoke\-SafetyKatz|Invoke\-SauronEye|Invoke\-SCShell|Invoke\-Seatbelt|Invoke\-ServiceAbuse|Invoke\-ShadowSpray|Invoke\-Sharp|Invoke\-Shellcode|Invoke\-SMBScanner|Invoke\-Snaffler|Invoke\-Spoolsample|Invoke\-SpraySinglePassword|Invoke\-SSHCommand|Invoke\-StandIn|Invoke\-StickyNotesExtract|Invoke\-SystemCommand|Invoke\-Tasksbackdoor|Invoke\-Tater|Invoke\-Thunderfox|Invoke\-ThunderStruck|Invoke\-TokenManipulation|Invoke\-Tokenvator|Invoke\-TotalExec|Invoke\-UrbanBishop|Invoke\-UserHunter|Invoke\-VoiceTroll|Invoke\-Whisker|Invoke\-WinEnum|Invoke\-winPEAS|Invoke\-WireTap|Invoke\-WmiCommand|Invoke\-WMIExec|Invoke\-WScriptBypassUAC|Invoke\-Zerologon|MailRaider|New\-ADIDNSNode|New\-DNSRecordArray|New\-HoneyHash|New\-InMemoryModule|New\-MachineAccount|New\-SOASerialNumberArray|Out\-Minidump|Port\-Scan|PowerBreach|powercat\ |PowerUp|PowerView|Remove\-ADIDNSNode|Remove\-MachineAccount|Remove\-Update|Rename\-ADIDNSNode|Revoke\-ADIDNSPermission|Set\-ADIDNSNode|Set\-MacAttribute|Set\-MachineAccountAttribute|Set\-Wallpaper|Show\-TargetScreen|Start\-CaptureServer|Start\-WebcamRecorder|VolumeShadowCopyTools</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)Get\-SystemDriveInfo</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)C:\\+ProgramData\\+Amazon\\+EC2\-Windows\\+Launch\\+Module\\+</field>
    </rule>
    <rule id="900081" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_win_api_susp_access.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Nikita Nazarov, oscd.community-->
        <!--Description: Detects use of WinAPI functions in PowerShell scripts-->
        <!--Date: 2020/10/06-->
        <!--Status: experimental-->
        <!--ID: 03d83090-8cba-44a0-b02f-0b756a050306-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.t1106</id>
        </mitre>
        <description>Potential WinAPI Calls Via PowerShell Scripts</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)VirtualAlloc</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)OpenProcess</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)WriteProcessMemory</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)CreateRemoteThread</field>
    </rule>
    <rule id="900082" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_win_api_susp_access.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Nikita Nazarov, oscd.community-->
        <!--Description: Detects use of WinAPI functions in PowerShell scripts-->
        <!--Date: 2020/10/06-->
        <!--Status: experimental-->
        <!--ID: 03d83090-8cba-44a0-b02f-0b756a050306-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.t1106</id>
        </mitre>
        <description>Potential WinAPI Calls Via PowerShell Scripts</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)OpenProcessToken</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)LookupPrivilegeValue</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)AdjustTokenPrivileges</field>
    </rule>
    <rule id="900083" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_win_api_susp_access.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Nikita Nazarov, oscd.community-->
        <!--Description: Detects use of WinAPI functions in PowerShell scripts-->
        <!--Date: 2020/10/06-->
        <!--Status: experimental-->
        <!--ID: 03d83090-8cba-44a0-b02f-0b756a050306-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.t1106</id>
        </mitre>
        <description>Potential WinAPI Calls Via PowerShell Scripts</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)OpenProcessToken</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)DuplicateTokenEx</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)CloseHandle</field>
    </rule>
    <rule id="900084" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_win_api_susp_access.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Nikita Nazarov, oscd.community-->
        <!--Description: Detects use of WinAPI functions in PowerShell scripts-->
        <!--Date: 2020/10/06-->
        <!--Status: experimental-->
        <!--ID: 03d83090-8cba-44a0-b02f-0b756a050306-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.t1106</id>
        </mitre>
        <description>Potential WinAPI Calls Via PowerShell Scripts</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)WriteProcessMemory</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)VirtualAlloc</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)ReadProcessMemory</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)VirtualFree</field>
    </rule>
    <rule id="900085" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_zip_compress.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), frack113-->
        <!--Description: Detects PowerShell scripts that make use of the "Compress-Archive" Cmdlet in order to compress folders and files where the output is stored in a potentially suspicious location that is used often by malware for exfiltration.
An adversary might compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.
-->
        <!--Date: 2021/07/20-->
        <!--Status: test-->
        <!--ID: b7a3c9a3-09ea-4934-8864-6a32cacd98d9-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1074.001</id>
        </mitre>
        <description>Zip A Folder With PowerShell For Staging In Temp - PowerShell Script</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Compress\-Archive\ \-Path.+\-DestinationPath\ \$env:TEMP|Compress\-Archive\ \-Path.+\-DestinationPath.+\\+AppData\\+Local\\+Temp\\+|Compress\-Archive\ \-Path.+\-DestinationPath.+:\\+Windows\\+Temp\\+</field>
    </rule>
    <rule id="900086" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_dotnet_assembly_from_file.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects usage of "Reflection.Assembly" load functions to dynamically load assemblies in memory-->
        <!--Date: 2022/12/25-->
        <!--Status: test-->
        <!--ID: ddcd88cb-7f62-4ce5-86f9-1704190feb0a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1620</id>
        </mitre>
        <description>Potential In-Memory Execution Using Reflection.Assembly</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\[Reflection\.Assembly\]::load</field>
    </rule>
    <rule id="900087" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_ssl_keyword.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may employ a known encryption algorithm to conceal command and control traffic rather than relying on any inherent protections provided by a communication protocol.-->
        <!--Date: 2022/01/23-->
        <!--Status: test-->
        <!--ID: 195626f3-5f1b-4403-93b7-e6cfd4d6a078-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1573</id>
        </mitre>
        <description>Suspicious SSL Connection</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.Net\.Security\.SslStream</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Net\.Security\.RemoteCertificateValidationCallback</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.AuthenticateAsClient</field>
    </rule>
    <rule id="900088" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_test_netconnection.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may communicate using a protocol and port paring that are typically not associated.
For example, HTTPS over port 8088(Citation: Symantec Elfin Mar 2019) or port 587(Citation: Fortinet Agent Tesla April 2018) as opposed to the traditional port 443.
-->
        <!--Date: 2022/01/23-->
        <!--Status: test-->
        <!--ID: adf876b3-f1f8-4aa9-a4e4-a64106feec06-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1571</id>
        </mitre>
        <description>Testing Usage of Uncommonly Used Port</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Test\-NetConnection</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ComputerName\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-port\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)(?:\ 443\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)(?:\ 80\ )</field>
    </rule>
    <rule id="900089" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_remove_item_path.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Powershell Remove-Item  with -Path to delete a file or a folder with "-Recurse"-->
        <!--Date: 2022/01/15-->
        <!--Status: test-->
        <!--ID: b8af5f36-1361-4ebe-9e76-e36128d947bf-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.004</id>
        </mitre>
        <description>Use Remove-Item to Delete File</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Remove\-Item</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Path\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)HKCU:\\+</field>
        <field name="win.eventdata.scriptBlockText" negate="yes" type="pcre2">(?i)HKLM:\\+</field>
    </rule>
    <rule id="900090" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_create_volume_shadow_copy.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to access or create a copy of the Active Directory domain database in order to steal credential information-->
        <!--Date: 2022/01/12-->
        <!--Status: test-->
        <!--ID: afd12fed-b0ec-45c9-a13d-aa86625dac81-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Create Volume Shadow Copy with Powershell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)win32_shadowcopy</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\)\.Create\(</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)ClientAccessible</field>
    </rule>
    <rule id="900091" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_store_file_in_alternate_data_stream.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Storing files in Alternate Data Stream (ADS) similar to Astaroth malware.-->
        <!--Date: 2021/09/02-->
        <!--Status: test-->
        <!--ID: a699b30e-d010-46c8-bbd1-ee2e26765fe9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Powershell Store File In Alternate Data Stream</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Start\-Process</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-FilePath\ "\$env:comspec"\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ArgumentList\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)&gt;</field>
    </rule>
    <rule id="900092" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_keylogging.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may log user keystrokes to intercept credentials as the user types them.-->
        <!--Date: 2021/07/30-->
        <!--Status: test-->
        <!--ID: 34f90d3c-c297-49e9-b26d-911b05a4866c-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1056.001</id>
        </mitre>
        <description>Powershell Keylogging</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-Keystrokes</field>
    </rule>
    <rule id="900093" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_keylogging.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may log user keystrokes to intercept credentials as the user types them.-->
        <!--Date: 2021/07/30-->
        <!--Status: test-->
        <!--ID: 34f90d3c-c297-49e9-b26d-911b05a4866c-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1056.001</id>
        </mitre>
        <description>Powershell Keylogging</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-ProcAddress\ user32\.dll\ GetAsyncKeyState</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-ProcAddress\ user32\.dll\ GetForegroundWindow</field>
    </rule>
    <rule id="900094" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_psasyncshell.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of PSAsyncShell an Asynchronous TCP Reverse Shell written in powershell-->
        <!--Date: 2022/10/04-->
        <!--Status: test-->
        <!--ID: afd3df04-948d-46f6-ae44-25966c44b97f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PSAsyncShell - Asynchronous TCP Reverse Shell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)PSAsyncShell</field>
    </rule>
    <rule id="900095" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_memorydump_getstoragediagnosticinfo.yml</info>
        <!--Sigma Rule Author: Max Altgelt (Nextron Systems)-->
        <!--Description: Detects usage of a PowerShell command to dump the live memory of a Windows machine-->
        <!--Date: 2021/09/21-->
        <!--Status: test-->
        <!--ID: cd185561-4760-45d6-a63e-a51325112cae-->
        <mitre>
            <id>attack.t1003</id>
        </mitre>
        <description>Live Memory Dump Using Powershell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-StorageDiagnosticInfo</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-IncludeLiveDump</field>
    </rule>
    <rule id="900096" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_dnsexfiltration.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: DNSExfiltrator allows for transferring (exfiltrate) a file over a DNS request covert channel-->
        <!--Date: 2022/01/07-->
        <!--Status: test-->
        <!--ID: d59d7842-9a21-4bc6-ba98-64bfe0091355-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048</id>
        </mitre>
        <description>Powershell DNSExfiltration</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Invoke\-DNSExfiltrator</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-i\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-d\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-p\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-doh\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-t\ )</field>
    </rule>
    <rule id="900097" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_apt_silence_eda.yml</info>
        <!--Sigma Rule Author: Alina Stepchenkova, Group-IB, oscd.community-->
        <!--Description: Detects Silence EmpireDNSAgent as described in the Group-IP report-->
        <!--Date: 2019/11/01-->
        <!--Status: test-->
        <!--ID: 3ceb2083-a27f-449a-be33-14ec1b7cc973-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.command_and_control</id>
            <id>attack.t1071.004</id>
            <id>attack.t1572</id>
            <id>attack.impact</id>
            <id>attack.t1529</id>
            <id>attack.g0091</id>
            <id>attack.s0363</id>
        </mitre>
        <description>Silence.EDA Detection</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.Diagnostics\.Process</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Stop\-Computer</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Restart\-Computer</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Exception\ in\ execution</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$cmdargs</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Close\-Dnscat2Tunnel</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)set\ type=\$LookupType`nserver</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$Command\ \|\ nslookup\ 2&gt;\&amp;1\ \|\ Out\-String</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-RandomDNSField</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\[Convert\]::ToString\(\$SYNOptions,\ 16\)</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$Session\.Dead\ =\ \$True</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$Session\["Driver"\]\ \-eq</field>
    </rule>
    <rule id="900098" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_keylogger_activity.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects PowerShell scripts that contains reference to keystroke capturing functions-->
        <!--Date: 2023/01/04-->
        <!--Status: test-->
        <!--ID: 965e2db9-eddb-4cf6-a986-7a967df651e4-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.credential_access</id>
            <id>attack.t1056.001</id>
        </mitre>
        <description>Potential Keylogger Activity</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\[Windows\.Input\.Keyboard\]::IsKeyDown\(\[System\.Windows\.Input\.Key\]::</field>
    </rule>
    <rule id="900099" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_frombase64string_archive.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects attempts of decoding a base64 Gzip archive in a PowerShell script. This technique is often used as a method to load malicious content into memory afterward.-->
        <!--Date: 2022/12/23-->
        <!--Status: test-->
        <!--ID: df69cb1d-b891-4cd9-90c7-d617d90100ce-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1132.001</id>
        </mitre>
        <description>Suspicious FromBase64String Usage On Gzip Archive - Ps Script</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)FromBase64String</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)MemoryStream</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)H4sI</field>
    </rule>
    <rule id="900100" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_mailboxexport_share.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of the powerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations-->
        <!--Date: 2022/10/26-->
        <!--Status: test-->
        <!--ID: 4a241dea-235b-4a7e-8d76-50d817b146c4-->
        <mitre>
            <id>attack.exfiltration</id>
        </mitre>
        <description>Suspicious PowerShell Mailbox Export to Share - PS</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-MailboxExportRequest</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-Mailbox\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\ \-FilePath\ \\+</field>
    </rule>
    <rule id="900101" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_nishang_malicious_commandlets.yml</info>
        <!--Sigma Rule Author: Alec Costello-->
        <!--Description: Detects Commandlet names and arguments from the Nishang exploitation framework-->
        <!--Date: 2019/05/16-->
        <!--Status: test-->
        <!--ID: f772cee9-b7c2-4cb2-8f07-49870adc02e0-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious Nishang PowerShell Commandlets</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Add\-ConstrainedDelegationBackdoor|Copy\-VSS|Create\-MultipleSessions|DataToEncode|DNS_TXT_Pwnage|Do\-Exfiltration\-Dns|Download_Execute|Download\-Execute\-PS|DownloadAndExtractFromRemoteRegistry|DumpCerts|DumpCreds|DumpHashes|Enable\-DuplicateToken|Enable\-Duplication|Execute\-Command\-MSSQL|Execute\-DNSTXT\-Code|Execute\-OnTime|ExetoText|exfill|ExfilOption|FakeDC|FireBuster|FireListener|Get\-Information\ |Get\-PassHints|Get\-Web\-Credentials|Get\-WebCredentials|Get\-WLAN\-Keys|HTTP\-Backdoor|Invoke\-AmsiBypass|Invoke\-BruteForce|Invoke\-CredentialsPhish|Invoke\-Decode|Invoke\-Encode|Invoke\-Interceptor|Invoke\-JSRatRegsvr|Invoke\-JSRatRundll|Invoke\-MimikatzWDigestDowngrade|Invoke\-NetworkRelay|Invoke\-PowerShellIcmp|Invoke\-PowerShellUdp|Invoke\-Prasadhak|Invoke\-PSGcat|Invoke\-PsGcatAgent|Invoke\-SessionGopher|Invoke\-SSIDExfil|LoggedKeys|Nishang|NotAllNameSpaces|Out\-CHM|OUT\-DNSTXT|Out\-HTA|Out\-RundllCommand|Out\-SCF|Out\-SCT|Out\-Shortcut|Out\-WebQuery|Out\-Word|Parse_Keys|Password\-List|Powerpreter|Remove\-Persistence|Remove\-PoshRat|Remove\-Update|Run\-EXEonRemote|Set\-DCShadowPermissions|Set\-RemotePSRemoting|Set\-RemoteWMI|Shellcode32|Shellcode64|StringtoBase64|TexttoExe</field>
    </rule>
    <rule id="900102" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_software_discovery.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable.-->
        <!--Date: 2020/10/16-->
        <!--Status: test-->
        <!--ID: 2650dd1a-eb2a-412d-ac36-83f06c4f2282-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1518</id>
        </mitre>
        <description>Detected Windows Software Discovery - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)get\-itemProperty</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\\+software\\+</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)select\-object</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)format\-table</field>
    </rule>
    <rule id="900103" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_via_var.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via VAR++ LAUNCHER-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: e54f5149-6ba3-49cf-b153-070d24679126-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i).*&amp;&amp;set.*(\{\d\}){2,}\\+"\s+?-f.*&amp;&amp;.*cmd.*/c</field>
    </rule>
    <rule id="900104" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_mounted_share_deletion.yml</info>
        <!--Sigma Rule Author: oscd.community, @redcanary, Zach Stanford @svch0st-->
        <!--Description: Detects when when a mounted share is removed. Adversaries may remove share connections that are no longer useful in order to clean up traces of their operation-->
        <!--Date: 2020/10/08-->
        <!--Status: test-->
        <!--ID: 66a4d409-451b-4151-94f4-a55d559c49b0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.005</id>
        </mitre>
        <description>PowerShell Deleted Mounted Share</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Remove\-SmbShare|Remove\-FileShare</field>
    </rule>
    <rule id="900105" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_remote_session_creation.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse PowerShell commands and scripts for execution.
PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system
-->
        <!--Date: 2022/01/06-->
        <!--Status: test-->
        <!--ID: a0edd39f-a0c6-4c17-8141-261f958e8d8f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell Remote Session Creation</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-PSSession</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ComputerName\ )</field>
    </rule>
    <rule id="900106" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_invoke_webrequest_useragent.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may communicate using application layer protocols associated with web traffic to avoid detection/network filtering by blending in with existing traffic.
Commands to the remote system, and often the results of those commands, will be embedded within the protocol traffic between the client and server.
-->
        <!--Date: 2022/01/23-->
        <!--Status: test-->
        <!--ID: d4488827-73af-4f8d-9244-7b7662ef046e-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Change User Agents with WebRequest</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Invoke\-WebRequest</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-UserAgent\ )</field>
    </rule>
    <rule id="900107" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_set_alias.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects Set-Alias or New-Alias cmdlet usage. Which can be use as a mean to obfuscate PowerShell scripts-->
        <!--Date: 2023/01/08-->
        <!--Status: test-->
        <!--ID: 96cd126d-f970-49c4-848a-da3a09f55c55-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1027</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Potential PowerShell Obfuscation Using Alias Cmdlets</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Set\-Alias\ |New\-Alias\ )</field>
    </rule>
    <rule id="900108" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_prompt_credentials.yml</info>
        <!--Sigma Rule Author: John Lambert (idea), Florian Roth (Nextron Systems)-->
        <!--Description: Detects PowerShell calling a credential prompt-->
        <!--Date: 2017/04/09-->
        <!--Status: test-->
        <!--ID: ca8b77a9-d499-4095-b793-5d5f330d450e-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell Credential Prompt</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)PromptForCredential</field>
    </rule>
    <rule id="900109" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_get_adreplaccount.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: The DSInternals PowerShell Module exposes several internal features of Active Directory and Azure Active Directory.
These include FIDO2 and NGC key auditing, offline ntds.dit file manipulation, password auditing, DC recovery from IFM backups and password hash calculation.
-->
        <!--Date: 2022/02/06-->
        <!--Status: test-->
        <!--ID: 060c3ef1-fd0a-4091-bf46-e7d625f60b73-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.006</id>
        </mitre>
        <description>Suspicious Get-ADReplAccount</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-ADReplAccount</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-All\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Server\ )</field>
    </rule>
    <rule id="900110" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_get_adgroup.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects usage of the "Get-AdGroup" cmdlet to enumerate Groups within Active Directory-->
        <!--Date: 2022/03/17-->
        <!--Status: test-->
        <!--ID: 8c3a6607-b7dc-4f0d-a646-ef38c00b76ee-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.002</id>
        </mitre>
        <description>Active Directory Group Enumeration With Get-AdGroup</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Get\-AdGroup\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-Filter</field>
    </rule>
    <rule id="900111" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_root_certificate_installed.yml</info>
        <!--Sigma Rule Author: oscd.community, @redcanary, Zach Stanford @svch0st-->
        <!--Description: Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.-->
        <!--Date: 2020/10/10-->
        <!--Status: test-->
        <!--ID: 42821614-9264-4761-acfc-5772c3286f76-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1553.004</id>
        </mitre>
        <description>Root Certificate Installed - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Move\-Item</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Cert:\\+LocalMachine\\+Root</field>
    </rule>
    <rule id="900112" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_root_certificate_installed.yml</info>
        <!--Sigma Rule Author: oscd.community, @redcanary, Zach Stanford @svch0st-->
        <!--Description: Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.-->
        <!--Date: 2020/10/10-->
        <!--Status: test-->
        <!--ID: 42821614-9264-4761-acfc-5772c3286f76-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1553.004</id>
        </mitre>
        <description>Root Certificate Installed - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Import\-Certificate</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Cert:\\+LocalMachine\\+Root</field>
    </rule>
    <rule id="900113" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_amsi_null_bits_bypass.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of special strings/null bits in order to potentially bypass AMSI functionalities-->
        <!--Date: 2023/01/04-->
        <!--Status: experimental-->
        <!--ID: fa2559c8-1197-471d-9cdd-05a0273d4522-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Potential AMSI Bypass Script Using NULL Bits</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)if\(0\)\{\{\{0\}\}\}'\ \-f\ \$\(0\ \-as\ \[char\]\)\ \+|\#&lt;NULL&gt;</field>
    </rule>
    <rule id="900114" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_psattack.yml</info>
        <!--Sigma Rule Author: Sean Metcalf (source), Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of PSAttack PowerShell hack tool-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: b7ec41a4-042c-4f31-a5db-d0fcde9fa5c5-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell PSAttack</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)PS\ ATTACK!!!</field>
    </rule>
    <rule id="900115" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_new_psdrive.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may use to interact with a remote network share using Server Message Block (SMB). The adversary may then perform actions as the logged-on user.-->
        <!--Date: 2022/08/13-->
        <!--Status: test-->
        <!--ID: 1c563233-030e-4a07-af8c-ee0490a66d3a-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Suspicious New-PSDrive to Admin Share</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-PSDrive</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-psprovider\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)filesystem</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-root\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\\+</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$</field>
    </rule>
    <rule id="900116" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_proxy_scripts.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects powershell scripts that creates sockets/listeners which could be indicative of tunneling activity-->
        <!--Date: 2022/07/08-->
        <!--Status: test-->
        <!--ID: bd33d2aa-497e-4651-9893-5c5364646595-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>Suspicious TCP Tunnel Via PowerShell Script</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\[System\.Net\.HttpWebRequest\]</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.Net\.Sockets\.TcpListener</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)AcceptTcpClient</field>
    </rule>
    <rule id="900117" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_via_use_mhsta.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use MSHTA in Scripts-->
        <!--Date: 2020/10/08-->
        <!--Status: test-->
        <!--ID: e55a5195-4724-480e-a77e-3ebe64bd3759-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use MSHTA - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)set</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)mshta</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)vbscript:createobject</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.run</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\(window\.close\)</field>
    </rule>
    <rule id="900118" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_add_dnsclient_rule.yml</info>
        <!--Sigma Rule Author: Borna Talebi-->
        <!--Description: Detects powershell scripts that adds a Name Resolution Policy Table (NRPT) rule for the specified namespace.
This will bypass the default DNS server and uses a specified server for answering the query.
-->
        <!--Date: 2021/09/14-->
        <!--Status: test-->
        <!--ID: 4368354e-1797-463c-bc39-a309effbe8d7-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1565</id>
        </mitre>
        <description>Powershell Add Name Resolution Policy Table Rule</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Add\-DnsClientNrptRule</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-Namesp</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-NameSe</field>
    </rule>
    <rule id="900119" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_cmdlet_scheduled_task.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code-->
        <!--Date: 2021/12/28-->
        <!--Status: test-->
        <!--ID: 363eccc0-279a-4ccf-a3ab-24c2e63b11fb-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Powershell Create Scheduled Task</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-ScheduledTaskAction|New\-ScheduledTaskTrigger|New\-ScheduledTaskPrincipal|New\-ScheduledTaskSettingsSet|New\-ScheduledTask|Register\-ScheduledTask</field>
    </rule>
    <rule id="900120" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_cmdlet_scheduled_task.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse the Windows Task Scheduler to perform task scheduling for initial or recurring execution of malicious code-->
        <!--Date: 2021/12/28-->
        <!--Status: test-->
        <!--ID: 363eccc0-279a-4ccf-a3ab-24c2e63b11fb-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Powershell Create Scheduled Task</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Invoke\-CimMethod</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-ClassName</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)PS_ScheduledTask</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-NameSpace</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Root\\+Microsoft\\+Windows\\+TaskScheduler</field>
    </rule>
    <rule id="900121" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_start_process.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Powershell use PassThru option to start in background-->
        <!--Date: 2022/01/15-->
        <!--Status: test-->
        <!--ID: 0718cd72-f316-4aa2-988f-838ea8533277-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Suspicious Start-Process PassThru</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Start\-Process</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-PassThru\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-FilePath\ )</field>
    </rule>
    <rule id="900122" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_win32_shadowcopy.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Deletes Windows Volume Shadow Copies with PowerShell code and Get-WMIObject. This technique is used by numerous ransomware families such as Sodinokibi/REvil-->
        <!--Date: 2021/12/26-->
        <!--Status: test-->
        <!--ID: e17121b4-ef2a-4418-8a59-12fb1631fa9e-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1490</id>
        </mitre>
        <description>Delete Volume Shadow Copies via WMI with PowerShell - PS Script</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-WmiObject</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Win32_Shadowcopy</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.Delete\(\)</field>
    </rule>
    <rule id="900123" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_win32_pnpentity.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to gather information about attached peripheral devices and components connected to a computer system.-->
        <!--Date: 2021/08/23-->
        <!--Status: test-->
        <!--ID: b26647de-4feb-4283-af6b-6117661283c5-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1120</id>
        </mitre>
        <description>Powershell Suspicious Win32_PnPEntity</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Win32_PnPEntity</field>
    </rule>
    <rule id="900124" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_obfuscated_iex.yml</info>
        <!--Sigma Rule Author: Daniel Bohannon (@Mandiant/@FireEye), oscd.community-->
        <!--Description: Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the following code block \u2014-->
        <!--Date: 2019/11/08-->
        <!--Status: test-->
        <!--ID: 1b9dc62e-6e9e-42a3-8990-94d7a10007f7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Obfuscated IEX Invocation - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$PSHome\[\s*\d{1,3}\s*\]\s*\+\s*\$PSHome\[</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$ShellId\[\s*\d{1,3}\s*\]\s*\+\s*\$ShellId\[</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$env:Public\[\s*\d{1,3}\s*\]\s*\+\s*\$env:Public\[</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$env:ComSpec\[(\s*\d{1,3}\s*,){2}</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i).+mdr.+\W\s*\)\.Name</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$VerbosePreference\.ToString\(</field>
    </rule>
    <rule id="900125" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_run_from_mount_diskimage.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse container files such as disk image (.iso, .vhd) file formats to deliver malicious payloads that may not be tagged with MOTW.-->
        <!--Date: 2022/02/01-->
        <!--Status: test-->
        <!--ID: 902cedee-0398-4e3a-8183-6f3a89773a96-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1553.005</id>
        </mitre>
        <description>Suspicious Invoke-Item From Mount-DiskImage</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Mount\-DiskImage\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ImagePath\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-Volume</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.DriveLetter</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:invoke\-item\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\):\\+</field>
    </rule>
    <rule id="900126" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_write_eventlog.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of the "Write-EventLog" cmdlet with 'RawData' flag. The cmdlet can be levreage to write malicious payloads to the EventLog and then retrieve them later for later use-->
        <!--Date: 2022/08/16-->
        <!--Status: test-->
        <!--ID: 35f41cd7-c98e-469f-8a02-ec4ba0cc7a7e-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>PowerShell Write-EventLog Usage</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Write\-EventLog</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-RawData\ )</field>
    </rule>
    <rule id="900127" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_dump_password_windows_credential_manager.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may search for common password storage locations to obtain user credentials.
Passwords are stored in several places on a system, depending on the operating system or application holding the credentials.
-->
        <!--Date: 2021/12/20-->
        <!--Status: test-->
        <!--ID: 99c49d9c-34ea-45f7-84a7-4751ae6b2cbc-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1555</id>
        </mitre>
        <description>Dump Credentials from Windows Credential Manager With PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-PasswordVaultCredentials|Get\-CredManCreds</field>
    </rule>
    <rule id="900128" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_dump_password_windows_credential_manager.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may search for common password storage locations to obtain user credentials.
Passwords are stored in several places on a system, depending on the operating system or application holding the credentials.
-->
        <!--Date: 2021/12/20-->
        <!--Status: test-->
        <!--ID: 99c49d9c-34ea-45f7-84a7-4751ae6b2cbc-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1555</id>
        </mitre>
        <description>Dump Credentials from Windows Credential Manager With PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-Object</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Windows\.Security\.Credentials\.PasswordVault</field>
    </rule>
    <rule id="900129" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_dump_password_windows_credential_manager.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may search for common password storage locations to obtain user credentials.
Passwords are stored in several places on a system, depending on the operating system or application holding the credentials.
-->
        <!--Date: 2021/12/20-->
        <!--Status: test-->
        <!--ID: 99c49d9c-34ea-45f7-84a7-4751ae6b2cbc-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1555</id>
        </mitre>
        <description>Dump Credentials from Windows Credential Manager With PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-Object</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Microsoft\.CSharp\.CSharpCodeProvider</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\[System\.Runtime\.InteropServices\.RuntimeEnvironment\]::GetRuntimeDirectory\(\)\)</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Collections\.ArrayList</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.CodeDom\.Compiler\.CompilerParameters</field>
    </rule>
    <rule id="900130" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_wallpaper.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users.
This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper
-->
        <!--Date: 2021/12/26-->
        <!--Status: test-->
        <!--ID: c5ac6a1e-9407-45f5-a0ce-ca9a0806a287-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1491.001</id>
        </mitre>
        <description>Replace Desktop Wallpaper by Powershell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-ItemProperty</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Registry::</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)HKEY_CURRENT_USER\\+Control\ Panel\\+Desktop\\+</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)WallPaper</field>
    </rule>
    <rule id="900131" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_wallpaper.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may deface systems internal to an organization in an attempt to intimidate or mislead users.
This may take the form of modifications to internal websites, or directly to user systems with the replacement of the desktop wallpaper
-->
        <!--Date: 2021/12/26-->
        <!--Status: test-->
        <!--ID: c5ac6a1e-9407-45f5-a0ce-ca9a0806a287-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1491.001</id>
        </mitre>
        <description>Replace Desktop Wallpaper by Powershell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)SystemParametersInfo\(20,0,.+,3\)</field>
    </rule>
    <rule id="900132" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_hktl_rubeus.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems), Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of the hacktool Rubeus using specific command line flags-->
        <!--Date: 2023/04/27-->
        <!--Status: experimental-->
        <!--ID: 3245cd30-e015-40ff-a31d-5cadd5f377ec-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
            <id>attack.t1558.003</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1550.003</id>
        </mitre>
        <description>HackTool - Rubeus Execution - ScriptBlock</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)asreproast\ |dump\ /service:krbtgt\ |dump\ /luid:0x|kerberoast\ |createnetonly\ /program:|ptt\ /ticket:|/impersonateuser:|renew\ /ticket:|asktgt\ /user:|harvest\ /interval:|s4u\ /user:|s4u\ /ticket:|hash\ /password:|golden\ /aes256:|silver\ /user:</field>
    </rule>
    <rule id="900133" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_wmi_persistence.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may establish persistence and elevate privileges by executing malicious content triggered by a Windows Management Instrumentation (WMI) event subscription.-->
        <!--Date: 2021/08/19-->
        <!--Status: test-->
        <!--ID: 9e07f6e7-83aa-45c6-998e-0af26efd0a85-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.003</id>
        </mitre>
        <description>Powershell WMI Persistence</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:New\-CimInstance\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Namespace\ root/subscription\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ClassName\ __EventFilter\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Property\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:New\-CimInstance\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Namespace\ root/subscription\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ClassName\ CommandLineEventConsumer\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Property\ )</field>
    </rule>
    <rule id="900134" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_ace_tampering.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of certain functions and keywords that are used to manipulate security descriptors in order to potentially set a backdoor. As seen used in the DAMP project.-->
        <!--Date: 2023/01/05-->
        <!--Status: test-->
        <!--ID: 2f77047c-e6e9-4c11-b088-a3de399524cd-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Potential Persistence Via Security Descriptors - ScriptBlock</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)win32_Trustee</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)win32_Ace</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.AccessMask</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.AceType</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.SetSecurityDescriptor</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\\+Lsa\\+JD|\\+Lsa\\+Skew1|\\+Lsa\\+Data|\\+Lsa\\+GBG</field>
    </rule>
    <rule id="900135" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_get_gpo.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect use of Get-GPO to get one GPO or all the GPOs in a domain.-->
        <!--Date: 2022/06/04-->
        <!--Status: test-->
        <!--ID: eb2fd349-ec67-4caa-9143-d79c7fb34441-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1615</id>
        </mitre>
        <description>Suspicious GPO Discovery With Get-GPO</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Get\-GPO</field>
    </rule>
    <rule id="900136" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_audio_exfiltration.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potential exfiltration attempt via audio file using PowerShell-->
        <!--Date: 2023/01/16-->
        <!--Status: test-->
        <!--ID: e4f93c99-396f-47c8-bb0f-201b1fa69034-->
        <mitre>
            <id>attack.exfiltration</id>
        </mitre>
        <description>Potential Data Exfiltration Via Audio File</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\[System\.Math\]::</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\[IO\.FileMode\]::</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)BinaryWriter</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)0x52</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)0x49</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)0x46</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)0x57</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)0x41</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)0x56</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)0x45</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)0xAC</field>
    </rule>
    <rule id="900137" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_exchange_mailbox_smpt_forwarding_rule.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of the powerShell Set-Mailbox Cmdlet to set-up an SMTP forwarding rule.-->
        <!--Date: 2022/10/26-->
        <!--Status: test-->
        <!--ID: 15b7abbb-8b40-4d01-9ee2-b51994b1d474-->
        <mitre>
            <id>attack.exfiltration</id>
        </mitre>
        <description>Suspicious PowerShell Mailbox SMTP Forward Rule</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Set\-Mailbox\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-DeliverToMailboxAndForward\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-ForwardingSmtpAddress\ )</field>
    </rule>
    <rule id="900138" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_ad_group_reco.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to find domain-level groups and permission settings.
The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group.
Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.
-->
        <!--Date: 2021/12/15-->
        <!--Status: test-->
        <!--ID: 88f0884b-331d-403d-a3a1-b668cf035603-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.001</id>
        </mitre>
        <description>AD Groups Or Users Enumeration Using PowerShell - ScriptBlock</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)get\-ADPrincipalGroupMembership</field>
    </rule>
    <rule id="900139" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_ad_group_reco.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to find domain-level groups and permission settings.
The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group.
Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.
-->
        <!--Date: 2021/12/15-->
        <!--Status: test-->
        <!--ID: 88f0884b-331d-403d-a3a1-b668cf035603-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.001</id>
        </mitre>
        <description>AD Groups Or Users Enumeration Using PowerShell - ScriptBlock</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)get\-aduser</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-f\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-pr\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)DoesNotRequirePreAuth</field>
    </rule>
    <rule id="900140" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_etw_trace_evasion.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of powershell cmdlets to disable or remove ETW trace sessions-->
        <!--Date: 2022/06/28-->
        <!--Status: test-->
        <!--ID: 115fdba9-f017-42e6-84cf-d5573bf2ddf8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.t1562.006</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>Disable of ETW Trace - Powershell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Remove\-EtwTraceProvider\ )</field>
    </rule>
    <rule id="900141" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_etw_trace_evasion.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of powershell cmdlets to disable or remove ETW trace sessions-->
        <!--Date: 2022/06/28-->
        <!--Status: test-->
        <!--ID: 115fdba9-f017-42e6-84cf-d5573bf2ddf8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.t1562.006</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>Disable of ETW Trace - Powershell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Set\-EtwTraceProvider\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)0x11</field>
    </rule>
    <rule id="900142" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_import_module_susp_dirs.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects powershell scripts that import modules from suspicious directories-->
        <!--Date: 2022/07/07-->
        <!--Status: test-->
        <!--ID: 21f9162c-5f5d-4b01-89a8-b705bd7d10ab-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Import PowerShell Modules From Suspicious Directories</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Import\-Module\ "\$Env:Temp\\+|Import\-Module\ '\$Env:Temp\\+|Import\-Module\ \$Env:Temp\\+|Import\-Module\ "\$Env:Appdata\\+|Import\-Module\ '\$Env:Appdata\\+|Import\-Module\ \$Env:Appdata\\+|Import\-Module\ C:\\+Users\\+Public\\+|ipmo\ "\$Env:Temp\\+|ipmo\ '\$Env:Temp\\+|ipmo\ \$Env:Temp\\+|ipmo\ "\$Env:Appdata\\+|ipmo\ '\$Env:Appdata\\+|ipmo\ \$Env:Appdata\\+|ipmo\ C:\\+Users\\+Public\\+</field>
    </rule>
    <rule id="900143" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_set_acl.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects PowerShell scripts set ACL to of a file or a folder-->
        <!--Date: 2023/07/18-->
        <!--Status: experimental-->
        <!--ID: cae80281-ef23-44c5-873b-fd48d2666f49-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1222</id>
        </mitre>
        <description>PowerShell Script Change Permission Via Set-Acl - PsScript</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Set\-Acl\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-AclObject\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Path\ )</field>
    </rule>
    <rule id="900144" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_disable_psreadline_command_history.yml</info>
        <!--Sigma Rule Author: Ali Alwashali-->
        <!--Description: Detects scripts or commands that disabled the Powershell command history by removing psreadline module-->
        <!--Date: 2022/08/21-->
        <!--Status: test-->
        <!--ID: 602f5669-6927-4688-84db-0d4b7afb2150-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.003</id>
        </mitre>
        <description>Disable Powershell Command History</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Remove\-Module</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)psreadline</field>
    </rule>
    <rule id="900145" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_cor_profiler.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may leverage the COR_PROFILER environment variable to hijack the execution flow of programs that load the .NET CLR.
The COR_PROFILER is a .NET Framework feature which allows developers to specify an unmanaged (or external of .NET) profiling DLL to be loaded into each .NET process that loads the Common Language Runtime (CLR).
These profiliers are designed to monitor, troubleshoot, and debug managed code executed by the .NET CLR.
(Citation: Microsoft Profiling Mar 2017)
(Citation: Microsoft COR_PROFILER Feb 2013)
-->
        <!--Date: 2021/12/30-->
        <!--Status: test-->
        <!--ID: 23590215-4702-4a70-8805-8dc9e58314a2-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1574.012</id>
        </mitre>
        <description>Registry-Free Process Scope COR_PROFILER</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$env:COR_ENABLE_PROFILING</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$env:COR_PROFILER</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\$env:COR_PROFILER_PATH</field>
    </rule>
    <rule id="900146" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_extracting.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may search local file systems and remote file shares for files containing insecurely stored credentials.
These can be files created by users to store their own credentials, shared credential stores for a group of individuals,
configuration files containing passwords for a system or service, or source code/binary files containing embedded passwords.
-->
        <!--Date: 2021/12/19-->
        <!--Status: test-->
        <!--ID: bd5971a7-626d-46ab-8176-ed643f694f68-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.001</id>
        </mitre>
        <description>Extracting Information with PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)ls</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\ \-R</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:select\-string\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-Pattern\ )</field>
    </rule>
    <rule id="900147" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_clearing_windows_console_history.yml</info>
        <!--Sigma Rule Author: Austin Songer @austinsonger-->
        <!--Description: Identifies when a user attempts to clear console history. An adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion.-->
        <!--Date: 2021/11/25-->
        <!--Status: test-->
        <!--ID: bde47d4b-9987-405c-94c7-b080410e8ea7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.t1070.003</id>
        </mitre>
        <description>Clearing Windows Console History</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Clear\-History</field>
    </rule>
    <rule id="900148" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_clearing_windows_console_history.yml</info>
        <!--Sigma Rule Author: Austin Songer @austinsonger-->
        <!--Description: Identifies when a user attempts to clear console history. An adversary may clear the command history of a compromised account to conceal the actions undertaken during an intrusion.-->
        <!--Date: 2021/11/25-->
        <!--Status: test-->
        <!--ID: bde47d4b-9987-405c-94c7-b080410e8ea7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.t1070.003</id>
        </mitre>
        <description>Clearing Windows Console History</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Remove\-Item|rm</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)ConsoleHost_history\.txt|\(Get\-PSReadlineOption\)\.HistorySavePath</field>
    </rule>
    <rule id="900149" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_msxml_com.yml</info>
        <!--Sigma Rule Author: frack113, MatilJ-->
        <!--Description: Adversaries may abuse PowerShell commands and scripts for execution.
PowerShell is a powerful interactive command-line interface and scripting environment included in the Windows operating system. (Citation: TechNet PowerShell)
Adversaries can use PowerShell to perform a number of actions, including discovery of information and execution of code
-->
        <!--Date: 2022/01/19-->
        <!--Status: test-->
        <!--ID: 78aa1347-1517-4454-9982-b338d6df8343-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Powershell MsXml COM Object</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-Object</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-ComObject</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)MsXml2\.</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)XmlHttp</field>
    </rule>
    <rule id="900150" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_syncappvpublishingserver_exe.yml</info>
        <!--Sigma Rule Author: Ensar &#350;amil, @sblmsrsn, OSCD Community-->
        <!--Description: Detects SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: dddfebae-c46f-439c-af7a-fdb6bde90218-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>SyncAppvPublishingServer Execution to Bypass Powershell Restriction</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)SyncAppvPublishingServer\.exe</field>
    </rule>
    <rule id="900151" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_icmp_exfiltration.yml</info>
        <!--Sigma Rule Author: Bartlomiej Czyz @bczyz1, oscd.community-->
        <!--Description: Detects Exfiltration Over Alternative Protocol - ICMP. Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.-->
        <!--Date: 2020/10/10-->
        <!--Status: test-->
        <!--ID: 4c4af3cd-2115-479c-8193-6b8bfce9001c-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048.003</id>
        </mitre>
        <description>PowerShell ICMP Exfiltration</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)New\-Object</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)System\.Net\.NetworkInformation\.Ping</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.Send\(</field>
    </rule>
    <rule id="900152" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_via_use_clip.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Clip.exe in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: db92dd33-a3ad-49cf-8c2c-608c3e30ace0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Clip - Powershell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i).*?echo.*clip.*&amp;&amp;.*(Clipboard|i`?n`?v`?o`?k`?e`?).</field>
    </rule>
    <rule id="900153" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_win32_product_install_msi.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the execution of an MSI file using PowerShell and the WMI Win32_Product class-->
        <!--Date: 2022/04/24-->
        <!--Status: test-->
        <!--ID: 91109523-17f0-4248-a800-f81d9e7c081d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.007</id>
        </mitre>
        <description>PowerShell WMI Win32_Product Install MSI</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Invoke\-CimMethod\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-ClassName\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:Win32_Product\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\-MethodName\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.msi</field>
    </rule>
    <rule id="900154" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_command_remote.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may use Valid Accounts to interact with remote systems using Windows Remote Management (WinRM). The adversary may then perform actions as the logged-on user.-->
        <!--Date: 2022/01/07-->
        <!--Status: test-->
        <!--ID: 7b836d7f-179c-4ba4-90a7-a7e60afb48e6-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.006</id>
        </mitre>
        <description>Execute Invoke-command on Remote Host</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:invoke\-command\ )</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)(?:\ \-ComputerName\ )</field>
    </rule>
    <rule id="900155" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_stdin.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of stdin to execute PowerShell-->
        <!--Date: 2020/10/15-->
        <!--Status: test-->
        <!--ID: 779c8c12-0eb1-11eb-adc1-0242ac120002-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation STDIN+ Launcher - Powershell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:/c|/r).+powershell.+(?:\$?\{?input\}?|noexit).+"</field>
    </rule>
    <rule id="900156" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_susp_alias_obfscuation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects specific techniques often seen used inside of PowerShell scripts to obfscuate Alias creation-->
        <!--Date: 2023/01/09-->
        <!--Status: test-->
        <!--ID: e8314f79-564d-4f79-bc13-fbc0bf2660d8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1027</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Potential PowerShell Obfuscation Using Character Join</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\-Alias</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\ \-Value\ \(\-join\(</field>
    </rule>
    <rule id="900157" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_invoke_obfuscation_via_rundll.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via RUNDLL LAUNCHER-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: e6cb92b4-b470-4eb8-8a9d-d63e8583aae0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation RUNDLL LAUNCHER - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)powershell</field>
    </rule>
    <rule id="900158" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_timestomp.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may modify file time attributes to hide new or changes to existing files.
Timestomping is a technique that modifies the timestamps of a file (the modify, access, create, and change times), often to mimic files that are in the same folder.
-->
        <!--Date: 2021/08/03-->
        <!--Status: test-->
        <!--ID: c6438007-e081-42ce-9483-b067fbef33c3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.006</id>
        </mitre>
        <description>Powershell Timestomp</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)\.CreationTime\ =|\.LastWriteTime\ =|\.LastAccessTime\ =|\[IO\.File\]::SetCreationTime|\[IO\.File\]::SetLastAccessTime|\[IO\.File\]::SetLastWriteTime</field>
    </rule>
    <rule id="900159" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_script/posh_ps_powerview_malicious_commandlets.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects Commandlet names from PowerView of PowerSploit exploitation framework.-->
        <!--Date: 2021/05/18-->
        <!--Status: test-->
        <!--ID: dcd74b95-3f36-4ed9-9598-0490951643aa-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious PowerView PowerShell Commandlets</description>
        <options>no_full_log</options>
        <group>windows,ps_script,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.scriptBlockText" negate="no" type="pcre2">(?i)Add\-DomainGroupMember|Add\-DomainObjectAcl|Add\-ObjectAcl|Add\-RemoteConnection|Convert\-ADName|ConvertFrom\-UACValue|Convert\-NameToSid|ConvertTo\-SID|Export\-PowerViewCSV|Find\-DomainLocalGroupMember|Find\-DomainObjectPropertyOutlier|Find\-DomainProcess|Find\-DomainShare|Find\-DomainUserEvent|Find\-DomainUserLocation|Find\-ForeignGroup|Find\-ForeignUser|Find\-GPOComputerAdmin|Find\-GPOLocation|Find\-InterestingDomain|Find\-InterestingFile|Find\-LocalAdminAccess|Find\-ManagedSecurityGroups|Get\-CachedRDPConnection|Get\-DFSshare|Get\-DNSRecord|Get\-DNSZone|Get\-DomainComputer|Get\-DomainController|Get\-DomainDFSShare|Get\-DomainDNSRecord|Get\-DomainDNSZone|Get\-DomainFileServer|Get\-DomainGPO|Get\-DomainGroup|Get\-DomainGroupMember|Get\-DomainManagedSecurityGroup|Get\-DomainObject|Get\-DomainObjectAcl|Get\-DomainOU|Get\-DomainPolicy|Get\-DomainSID|Get\-DomainSite|Get\-DomainSPNTicket|Get\-DomainSubnet|Get\-DomainUser|Get\-DomainUserEvent|Get\-Forest|Get\-IPAddress|Get\-LastLoggedOn|Get\-LoggedOnLocal|Get\-NetComputer|Get\-NetDomain|Get\-NetFileServer|Get\-NetForest|Get\-NetGPO|Get\-NetGroup|Get\-NetLocalGroup|Get\-NetLoggedon|Get\-NetOU|Get\-NetProcess|Get\-NetRDPSession|Get\-NetSession|Get\-NetShare|Get\-NetSite|Get\-NetSubnet|Get\-NetUser|Get\-ObjectAcl|Get\-PathAcl|Get\-Proxy|Get\-RegistryMountedDrive|Get\-RegLoggedOn|Get\-SiteName|Get\-UserEvent|Get\-WMIProcess|Get\-WMIReg|Invoke\-ACLScanner|Invoke\-CheckLocalAdminAccess|Invoke\-EnumerateLocalAdmin|Invoke\-EventHunter|Invoke\-FileFinder|Invoke\-Kerberoast|Invoke\-MapDomainTrust|Invoke\-ProcessHunter|Invoke\-RevertToSelf|Invoke\-ShareFinder|Invoke\-UserHunter|Invoke\-UserImpersonation|New\-DomainGroup|New\-DomainUser|Remove\-RemoteConnection|Request\-SPNTicket|Resolve\-IPAddress|Set\-ADObject|Set\-DomainObject|Set\-DomainUserPassword|Test\-AdminAccess</field>
    </rule>
    <rule id="900160" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_via_use_mhsta.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use MSHTA in Scripts-->
        <!--Date: 2020/10/08-->
        <!--Status: test-->
        <!--ID: 07ad2ea8-6a55-4ac6-bf3e-91b8e59676eb-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use MSHTA - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)set</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)mshta</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)vbscript:createobject</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\.run</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\(window\.close\)</field>
    </rule>
    <rule id="900161" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_var.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Environment Variables to execute PowerShell-->
        <!--Date: 2020/10/15-->
        <!--Status: test-->
        <!--ID: 6bfb8fa7-b2e7-4f6c-8d9d-824e5d06ea9e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR+ Launcher - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:/c|/r)(?:\s|)"set\s[a-zA-Z]{3,6}.*(?:\{\d\}){1,}\\+"\s+?-f(?:.*\)){1,}.*"</field>
    </rule>
    <rule id="900162" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_alternate_powershell_hosts.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects alternate PowerShell hosts potentially bypassing detections looking for powershell.exe-->
        <!--Date: 2019/08/11-->
        <!--Status: test-->
        <!--ID: 64e8e417-c19a-475a-8d19-98ea705394cc-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Alternate PowerShell Hosts - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i).+</field>
        <field name="win.system.contextInfo" negate="yes" type="pcre2">(?i)=\ powershell</field>
        <field name="win.system.contextInfo" negate="yes" type="pcre2">(?i)=\ C:\\+Windows\\+System32\\+WindowsPowerShell\\+v1\.0\\+powershell</field>
        <field name="win.system.contextInfo" negate="yes" type="pcre2">(?i)=\ C:\\+Windows\\+SysWOW64\\+WindowsPowerShell\\+v1\.0\\+powershell</field>
        <field name="win.system.contextInfo" negate="yes" type="pcre2">(?i)=\ C:/Windows/System32/WindowsPowerShell/v1\.0/powershell</field>
        <field name="win.system.contextInfo" negate="yes" type="pcre2">(?i)=\ C:/Windows/SysWOW64/WindowsPowerShell/v1\.0/powershell</field>
        <field name="win.system.contextInfo" negate="yes" type="pcre2">(?i)=\ C:\\+WINDOWS\\+System32\\+sdiagnhost\.exe\ \-Embedding</field>
        <field name="win.system.contextInfo" negate="yes" type="pcre2">(?i)ConfigSyncRun\.exe</field>
        <field name="win.system.contextInfo" negate="yes" type="pcre2">(?i)C:\\+Windows\\+system32\\+dsac\.exe</field>
        <field name="win.system.contextInfo" negate="yes" type="pcre2">(?i)C:\\+Windows\\+system32\\+wsmprovhost\.exe\ \-Embedding</field>
        <field name="win.eventdata.payload" negate="yes" type="pcre2">(?i)Update\-Help</field>
        <field name="win.eventdata.payload" negate="yes" type="pcre2">(?i)Failed\ to\ update\ Help\ for\ the\ module</field>
    </rule>
    <rule id="900163" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_clip.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Clip.exe to execute PowerShell-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: a136cde0-61ad-4a61-9b82-8dc490e60dd2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation CLIP+ Launcher - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:/c|/r).+clip(?:\.exe)?.{0,4}&amp;&amp;.+clipboard]::\(\s\\+"\{\d\}.+-f.+"</field>
    </rule>
    <rule id="900164" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_syncappvpublishingserver_exe.yml</info>
        <!--Sigma Rule Author: Ensar &#350;amil, @sblmsrsn, OSCD Community-->
        <!--Description: Detects SyncAppvPublishingServer process execution which usually utilized by adversaries to bypass PowerShell execution restrictions.-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: fe5ce7eb-dad8-467c-84a9-31ec23bd644a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>SyncAppvPublishingServer Bypass Powershell Restriction - PS Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)SyncAppvPublishingServer\.exe</field>
    </rule>
    <rule id="900165" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_malicious_commandlets.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects Commandlet names from well-known PowerShell exploitation frameworks-->
        <!--Date: 2023/01/20-->
        <!--Status: test-->
        <!--ID: 7d0d0329-0ef1-4e84-a9f5-49500f9d7c6c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.discovery</id>
            <id>attack.t1482</id>
            <id>attack.t1087</id>
            <id>attack.t1087.001</id>
            <id>attack.t1087.002</id>
            <id>attack.t1069.001</id>
            <id>attack.t1069.002</id>
            <id>attack.t1069</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious PowerShell Commandlets - PoshModule</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)Add\-Exfiltration|Add\-Persistence|Add\-RegBackdoor|Add\-RemoteRegBackdoor|Add\-ScrnSaveBackdoor|Check\-VM|ConvertTo\-Rc4ByteStream|Decrypt\-Hash|Disable\-ADIDNSNode|Disable\-MachineAccount|Do\-Exfiltration|Enable\-ADIDNSNode|Enable\-MachineAccount|Enabled\-DuplicateToken|Exploit\-Jboss|Export\-ADR|Export\-ADRCSV|Export\-ADRExcel|Export\-ADRHTML|Export\-ADRJSON|Export\-ADRXML|Find\-Fruit|Find\-GPOLocation|Find\-TrustedDocuments|Get\-ADIDNS|Get\-ApplicationHost|Get\-ChromeDump|Get\-ClipboardContents|Get\-FoxDump|Get\-GPPPassword|Get\-IndexedItem|Get\-KerberosAESKey|Get\-Keystrokes|Get\-LSASecret|Get\-MachineAccountAttribute|Get\-MachineAccountCreator|Get\-PassHashes|Get\-RegAlwaysInstallElevated|Get\-RegAutoLogon|Get\-RemoteBootKey|Get\-RemoteCachedCredential|Get\-RemoteLocalAccountHash|Get\-RemoteLSAKey|Get\-RemoteMachineAccountHash|Get\-RemoteNLKMKey|Get\-RickAstley|Get\-Screenshot|Get\-SecurityPackages|Get\-ServiceFilePermission|Get\-ServicePermission|Get\-ServiceUnquoted|Get\-SiteListPassword|Get\-System|Get\-TimedScreenshot|Get\-UnattendedInstallFile|Get\-Unconstrained|Get\-USBKeystrokes|Get\-VaultCredential|Get\-VulnAutoRun|Get\-VulnSchTask|Grant\-ADIDNSPermission|Gupt\-Backdoor|HTTP\-Login|Install\-ServiceBinary|Install\-SSP|Invoke\-ACLScanner|Invoke\-ADRecon|Invoke\-ADSBackdoor|Invoke\-AgentSmith|Invoke\-AllChecks|Invoke\-ARPScan|Invoke\-AzureHound|Invoke\-BackdoorLNK|Invoke\-BadPotato|Invoke\-BetterSafetyKatz|Invoke\-BypassUAC|Invoke\-Carbuncle|Invoke\-Certify|Invoke\-ConPtyShell|Invoke\-CredentialInjection|Invoke\-DAFT|Invoke\-DCSync|Invoke\-DinvokeKatz|Invoke\-DllInjection|Invoke\-DNSUpdate|Invoke\-DomainPasswordSpray|Invoke\-DowngradeAccount|Invoke\-EgressCheck|Invoke\-Eyewitness|Invoke\-FakeLogonScreen|Invoke\-Farmer|Invoke\-Get\-RBCD\-Threaded|Invoke\-Gopher|Invoke\-Grouper|Invoke\-HandleKatz|Invoke\-ImpersonatedProcess|Invoke\-ImpersonateSystem|Invoke\-InteractiveSystemPowerShell|Invoke\-Internalmonologue|Invoke\-Inveigh|Invoke\-InveighRelay|Invoke\-KrbRelay|Invoke\-LdapSignCheck|Invoke\-Lockless|Invoke\-MalSCCM|Invoke\-Mimikatz|Invoke\-Mimikittenz|Invoke\-MITM6|Invoke\-NanoDump|Invoke\-NetRipper|Invoke\-Nightmare|Invoke\-NinjaCopy|Invoke\-OfficeScrape|Invoke\-OxidResolver|Invoke\-P0wnedshell|Invoke\-Paranoia|Invoke\-PortScan|Invoke\-PoshRatHttp|Invoke\-PostExfil|Invoke\-PowerDump|Invoke\-PowerShellTCP|Invoke\-PowerShellWMI|Invoke\-PPLDump|Invoke\-PsExec|Invoke\-PSInject|Invoke\-PsUaCme|Invoke\-ReflectivePEInjection|Invoke\-ReverseDNSLookup|Invoke\-Rubeus|Invoke\-RunAs|Invoke\-SafetyKatz|Invoke\-SauronEye|Invoke\-SCShell|Invoke\-Seatbelt|Invoke\-ServiceAbuse|Invoke\-ShadowSpray|Invoke\-Sharp|Invoke\-Shellcode|Invoke\-SMBScanner|Invoke\-Snaffler|Invoke\-Spoolsample|Invoke\-SpraySinglePassword|Invoke\-SSHCommand|Invoke\-StandIn|Invoke\-StickyNotesExtract|Invoke\-SystemCommand|Invoke\-Tasksbackdoor|Invoke\-Tater|Invoke\-Thunderfox|Invoke\-ThunderStruck|Invoke\-TokenManipulation|Invoke\-Tokenvator|Invoke\-TotalExec|Invoke\-UrbanBishop|Invoke\-UserHunter|Invoke\-VoiceTroll|Invoke\-Whisker|Invoke\-WinEnum|Invoke\-winPEAS|Invoke\-WireTap|Invoke\-WmiCommand|Invoke\-WMIExec|Invoke\-WScriptBypassUAC|Invoke\-Zerologon|MailRaider|New\-ADIDNSNode|New\-DNSRecordArray|New\-HoneyHash|New\-InMemoryModule|New\-MachineAccount|New\-SOASerialNumberArray|Out\-Minidump|Port\-Scan|PowerBreach|powercat\ |PowerUp|PowerView|Remove\-ADIDNSNode|Remove\-MachineAccount|Remove\-Update|Rename\-ADIDNSNode|Revoke\-ADIDNSPermission|Set\-ADIDNSNode|Set\-MacAttribute|Set\-MachineAccountAttribute|Set\-Wallpaper|Show\-TargetScreen|Start\-CaptureServer|Start\-WebcamRecorder|VolumeShadowCopyTools</field>
    </rule>
    <rule id="900166" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_decompress_commands.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: A General detection for specific decompress commands in PowerShell logs. This could be an adversary decompressing files.-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: 1ddc1472-8e52-4f7d-9f11-eab14fc171f5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1140</id>
        </mitre>
        <description>PowerShell Decompress Commands</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)Expand\-Archive</field>
    </rule>
    <rule id="900167" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_clear_powershell_history.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, Jonhnathan Ribeiro, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects keywords that could indicate clearing PowerShell history-->
        <!--Date: 2019/10/25-->
        <!--Status: test-->
        <!--ID: f99276ad-d122-4989-a09a-d00904a5f9d2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.003</id>
        </mitre>
        <description>Clear PowerShell History - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)Set\-PSReadlineOption</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)–HistorySaveStyle</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)SaveNothing</field>
    </rule>
    <rule id="900168" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_clear_powershell_history.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, Jonhnathan Ribeiro, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects keywords that could indicate clearing PowerShell history-->
        <!--Date: 2019/10/25-->
        <!--Status: test-->
        <!--ID: f99276ad-d122-4989-a09a-d00904a5f9d2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.003</id>
        </mitre>
        <description>Clear PowerShell History - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)Set\-PSReadlineOption</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\-HistorySaveStyle</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)SaveNothing</field>
    </rule>
    <rule id="900169" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_ad_group_reco.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to find domain-level groups and permission settings.
The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group.
Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.
-->
        <!--Date: 2021/12/15-->
        <!--Status: test-->
        <!--ID: 815bfc17-7fc6-4908-a55e-2f37b98cedb4-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.001</id>
        </mitre>
        <description>AD Groups Or Users Enumeration Using PowerShell - PoshModule</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)get\-ADPrincipalGroupMembership</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)get\-ADPrincipalGroupMembership</field>
    </rule>
    <rule id="900170" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_ad_group_reco.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to find domain-level groups and permission settings.
The knowledge of domain-level permission groups can help adversaries determine which groups exist and which users belong to a particular group.
Adversaries may use this information to determine which users have elevated permissions, such as domain administrators.
-->
        <!--Date: 2021/12/15-->
        <!--Status: test-->
        <!--ID: 815bfc17-7fc6-4908-a55e-2f37b98cedb4-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.001</id>
        </mitre>
        <description>AD Groups Or Users Enumeration Using PowerShell - PoshModule</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)get\-aduser</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)(?:\-f\ )</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)(?:\-pr\ )</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)DoesNotRequirePreAuth</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)get\-aduser</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)(?:\-f\ )</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)(?:\-pr\ )</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)DoesNotRequirePreAuth</field>
    </rule>
    <rule id="900171" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_bad_opsec_artifacts.yml</info>
        <!--Sigma Rule Author: ok @securonix invrep_de, oscd.community-->
        <!--Description: focuses on trivial artifacts observed in variants of prevalent offensive ps1 payloads, including
Cobalt Strike Beacon, PoshC2, Powerview, Letmein, Empire, Powersploit, and other attack payloads
that often undergo minimal changes by attackers due to bad opsec.
-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: 8d31a8ce-46b5-4dd6-bdc3-680931f1db86-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Bad Opsec Powershell Code Artifacts</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\$DoIt|harmj0y|mattifestation|_RastaMouse|tifkin_|0xdeadbeef</field>
    </rule>
    <rule id="900172" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_stdin.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of stdin to execute PowerShell-->
        <!--Date: 2020/10/15-->
        <!--Status: test-->
        <!--ID: 9ac8b09b-45de-4a07-9da1-0de8c09304a3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation STDIN+ Launcher - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i).*cmd.{0,5}(?:/c|/r).+powershell.+(?:\$\{?input\}?|noexit).+"</field>
    </rule>
    <rule id="900173" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_get_addbaccount.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious invocation of the Get-ADDBAccount script that reads from a ntds.dit file and may be used to get access to credentials without using any credential dumpers-->
        <!--Date: 2022/03/16-->
        <!--Status: test-->
        <!--ID: b140afd9-474b-4072-958e-2ebb435abd68-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Suspicious Get-ADDBAccount Usage</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)Get\-ADDBAccount</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)(?:BootKey\ )</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)(?:DatabasePath\ )</field>
    </rule>
    <rule id="900174" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_remote_powershell_session.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g, Tim Shelton-->
        <!--Description: Detects remote PowerShell sessions-->
        <!--Date: 2019/08/10-->
        <!--Status: test-->
        <!--ID: 96b9f619-aa91-478f-bacb-c3e50f8df575-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.006</id>
        </mitre>
        <description>Remote PowerShell Session (PS Module)</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)(?:\ =\ ServerRemoteHost\ )</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)wsmprovhost\.exe</field>
        <field name="win.system.contextInfo" negate="yes" type="pcre2">(?i)\\+Windows\\+system32\\+WindowsPowerShell\\+v1\.0\\+Modules\\+Microsoft\.PowerShell\.Archive\\+Microsoft\.PowerShell\.Archive\.psm1</field>
    </rule>
    <rule id="900175" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_obfuscated_iex.yml</info>
        <!--Sigma Rule Author: Daniel Bohannon (@Mandiant/@FireEye), oscd.community-->
        <!--Description: Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the code block cited in the reference section below-->
        <!--Date: 2019/11/08-->
        <!--Status: test-->
        <!--ID: 2f211361-7dce-442d-b78a-c04039677378-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Obfuscated IEX Invocation - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\$PSHome\[\s*\d{1,3}\s*\]\s*\+\s*\$PSHome\[</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\$ShellId\[\s*\d{1,3}\s*\]\s*\+\s*\$ShellId\[</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\$env:Public\[\s*\d{1,3}\s*\]\s*\+\s*\$env:Public\[</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\$env:ComSpec\[(\s*\d{1,3}\s*,){2}</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i).+mdr.+\W\s*\)\.Name</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\$VerbosePreference\.ToString\(</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\[String\]\s*\$VerbosePreference</field>
    </rule>
    <rule id="900176" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_get_clipboard.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: A General detection for the Get-Clipboard commands in PowerShell logs. This could be an adversary capturing clipboard contents.-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: 4cbd4f12-2e22-43e3-882f-bff3247ffb78-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1115</id>
        </mitre>
        <description>PowerShell Get Clipboard</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)Get\-Clipboard</field>
    </rule>
    <rule id="900177" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_via_var.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via VAR++ LAUNCHER-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: f3c89218-8c3d-4ba9-9974-f1d8e6a1b4a6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i).*&amp;&amp;set.*(\{\d\}){2,}\\+"\s+?-f.*&amp;&amp;.*cmd.*/c</field>
    </rule>
    <rule id="900178" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_via_rundll.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via RUNDLL LAUNCHER-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: a23791fe-8846-485a-b16b-ca691e1b03d4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation RUNDLL LAUNCHER - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)powershell</field>
    </rule>
    <rule id="900179" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_via_use_rundll32.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Rundll32 in Scripts-->
        <!--Date: 2019/10/08-->
        <!--Status: test-->
        <!--ID: 88a22f69-62f9-4b8a-aa00-6b0212f2f05a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Rundll32 - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)value|invoke|comspec|iex</field>
    </rule>
    <rule id="900180" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_via_compress.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via COMPRESS OBFUSCATION-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: 7034cbbb-cc55-4dc2-8dad-36c0b942e8f1-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation COMPRESS OBFUSCATION - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)new\-object</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)text\.encoding\]::ascii</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)system\.io\.compression\.deflatestream|system\.io\.streamreader</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)(?:readtoend)$</field>
    </rule>
    <rule id="900181" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_remotefxvgpudisablement_abuse.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), frack113-->
        <!--Description: Detects PowerShell module creation where the module Contents are set to "function Get-VMRemoteFXPhysicalVideoAdapter". This could be a sign of potential abuse of the "RemoteFXvGPUDisablement.exe" binary which is known to be vulnerable to module load-order hijacking.-->
        <!--Date: 2021/07/13-->
        <!--Status: experimental-->
        <!--ID: 38a7625e-b2cb-485d-b83d-aff137d859f4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Potential RemoteFXvGPUDisablement.EXE Abuse - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)ModuleContents=function\ Get\-VMRemoteFXPhysicalVideoAdapter\ \{</field>
    </rule>
    <rule id="900182" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_get_nettcpconnection.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.-->
        <!--Date: 2021/12/10-->
        <!--Status: test-->
        <!--ID: aff815cc-e400-4bf0-a47a-5d8a2407d4e1-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1049</id>
        </mitre>
        <description>Use Get-NetTCPConnection - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)Get\-NetTCPConnection</field>
    </rule>
    <rule id="900183" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_via_use_clip.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Clip.exe in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: ebdf49d8-b89c-46c9-8fdf-2c308406f6bd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Clip - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i).*?echo.*clip.*&amp;&amp;.*(Clipboard|i`?n`?v`?o`?k`?e`?).</field>
    </rule>
    <rule id="900184" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_local_group_reco.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to find local system groups and permission settings.
The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.
Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.
-->
        <!--Date: 2021/12/12-->
        <!--Status: test-->
        <!--ID: cef24b90-dddc-4ae1-a09a-8764872f69fc-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.001</id>
        </mitre>
        <description>Suspicious Get Local Groups Information</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)get\-localgroup|Get\-LocalGroupMember</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)get\-localgroup|Get\-LocalGroupMember</field>
    </rule>
    <rule id="900185" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_local_group_reco.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to find local system groups and permission settings.
The knowledge of local system permission groups can help adversaries determine which groups exist and which users belong to a particular group.
Adversaries may use this information to determine which users have elevated permissions, such as the users found within the local administrators group.
-->
        <!--Date: 2021/12/12-->
        <!--Status: test-->
        <!--ID: cef24b90-dddc-4ae1-a09a-8764872f69fc-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.001</id>
        </mitre>
        <description>Suspicious Get Local Groups Information</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)Get\-WMIObject</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)Win32_Group</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)Get\-WMIObject</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)Win32_Group</field>
    </rule>
    <rule id="900186" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_invoke_obfuscation_via_stdin.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via Stdin in Scripts-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: c72aca44-8d52-45ad-8f81-f96c4d3c755e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Stdin - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i).*(set).*&amp;&amp;\s?set.*(environment|invoke|\$?\{?input).*&amp;&amp;.*"</field>
    </rule>
    <rule id="900187" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_reset_computermachinepassword.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: The Reset-ComputerMachinePassword cmdlet changes the computer account password that the computers use to authenticate to the domain controllers in the domain.
You can use it to reset the password of the local computer.
-->
        <!--Date: 2022/02/21-->
        <!--Status: test-->
        <!--ID: e3818659-5016-4811-a73c-dde4679169d2-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1078</id>
        </mitre>
        <description>Suspicious Computer Machine Password by PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)Reset\-ComputerMachinePassword</field>
    </rule>
    <rule id="900188" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_zip_compress.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), frack113-->
        <!--Description: Detects PowerShell scripts that make use of the "Compress-Archive" Cmdlet in order to compress folders and files where the output is stored in a potentially suspicious location that is used often by malware for exfiltration.
An adversary might compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.
-->
        <!--Date: 2021/07/20-->
        <!--Status: test-->
        <!--ID: daf7eb81-35fd-410d-9d7a-657837e602bb-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1074.001</id>
        </mitre>
        <description>Zip A Folder With PowerShell For Staging In Temp  - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)Compress\-Archive\ \-Path.+\-DestinationPath\ \$env:TEMP</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)Compress\-Archive\ \-Path.+\-DestinationPath.+\\+AppData\\+Local\\+Temp\\+</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)Compress\-Archive\ \-Path.+\-DestinationPath.+:\\+Windows\\+Temp\\+</field>
    </rule>
    <rule id="900189" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_invocation_specific.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: 8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)\-nop</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)(?:\ \-w\ )</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)hidden</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)(?:\ \-c\ )</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)\[Convert\]::FromBase64String</field>
    </rule>
    <rule id="900190" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_invocation_specific.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: 8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)(?:\ \-w\ )</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)hidden</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)\-noni</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)\-nop</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)(?:\ \-c\ )</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)iex</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)New\-Object</field>
    </rule>
    <rule id="900191" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_invocation_specific.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: 8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)(?:\ \-w\ )</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)hidden</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)\-ep</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)bypass</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)\-Enc</field>
    </rule>
    <rule id="900192" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_invocation_specific.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: 8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)powershell</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)reg</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)add</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)HKCU\\+software\\+microsoft\\+windows\\+currentversion\\+run</field>
    </rule>
    <rule id="900193" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_invocation_specific.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: 8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)bypass</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)\-noprofile</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)\-windowstyle</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)hidden</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)new\-object</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)system\.net\.webclient</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)\.download</field>
    </rule>
    <rule id="900194" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_invocation_specific.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: 8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)iex</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)New\-Object</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)Net\.WebClient</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)\.Download</field>
    </rule>
    <rule id="900195" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_invocation_specific.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: 8ff28fdd-e2fa-4dfa-aeda-ef3d61c62090-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.contextInfo" negate="yes" type="pcre2">(?i)\(New\-Object\ System\.Net\.WebClient\)\.DownloadString\('https://community\.chocolatey\.org/install\.ps1</field>
        <field name="win.system.contextInfo" negate="yes" type="pcre2">(?i)Write\-ChocolateyWarning</field>
    </rule>
    <rule id="900196" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_exploit_scripts.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali-->
        <!--Description: Detects the execution of known offensive powershell scripts used for exploitation or reconnaissance-->
        <!--Date: 2023/01/23-->
        <!--Status: test-->
        <!--ID: 41025fd7-0466-4650-a813-574aaacbe7f4-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious PowerShell Scripts - PoshModule</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)Add\-ConstrainedDelegationBackdoor\.ps1|Add\-Exfiltration\.ps1|Add\-Persistence\.ps1|Add\-RegBackdoor\.ps1|Add\-RemoteRegBackdoor\.ps1|Add\-ScrnSaveBackdoor\.ps1|Check\-VM\.ps1|ConvertTo\-ROT13\.ps1|Copy\-VSS\.ps1|Create\-MultipleSessions\.ps1|DNS_TXT_Pwnage\.ps1|Do\-Exfiltration\.ps1|DomainPasswordSpray\.ps1|Download_Execute\.ps1|Download\-Execute\-PS\.ps1|Enabled\-DuplicateToken\.ps1|Enable\-DuplicateToken\.ps1|Execute\-Command\-MSSQL\.ps1|Execute\-DNSTXT\-Code\.ps1|Execute\-OnTime\.ps1|ExetoText\.ps1|Exploit\-Jboss\.ps1|Find\-AVSignature\.ps1|Find\-Fruit\.ps1|Find\-GPOLocation\.ps1|Find\-TrustedDocuments\.ps1|FireBuster\.ps1|FireListener\.ps1|Get\-ApplicationHost\.ps1|Get\-ChromeDump\.ps1|Get\-ClipboardContents\.ps1|Get\-ComputerDetail\.ps1|Get\-FoxDump\.ps1|Get\-GPPAutologon\.ps1|Get\-GPPPassword\.ps1|Get\-IndexedItem\.ps1|Get\-Keystrokes\.ps1|Get\-LSASecret\.ps1|Get\-MicrophoneAudio\.ps1|Get\-PassHashes\.ps1|Get\-PassHints\.ps1|Get\-RegAlwaysInstallElevated\.ps1|Get\-RegAutoLogon\.ps1|Get\-RickAstley\.ps1|Get\-Screenshot\.ps1|Get\-SecurityPackages\.ps1|Get\-ServiceFilePermission\.ps1|Get\-ServicePermission\.ps1|Get\-ServiceUnquoted\.ps1|Get\-SiteListPassword\.ps1|Get\-System\.ps1|Get\-TimedScreenshot\.ps1|Get\-UnattendedInstallFile\.ps1|Get\-Unconstrained\.ps1|Get\-USBKeystrokes\.ps1|Get\-VaultCredential\.ps1|Get\-VulnAutoRun\.ps1|Get\-VulnSchTask\.ps1|Get\-WebConfig\.ps1|Get\-WebCredentials\.ps1|Get\-WLAN\-Keys\.ps1|Gupt\-Backdoor\.ps1|HTTP\-Backdoor\.ps1|HTTP\-Login\.ps1|Install\-ServiceBinary\.ps1|Install\-SSP\.ps1|Invoke\-ACLScanner\.ps1|Invoke\-ADSBackdoor\.ps1|Invoke\-AmsiBypass\.ps1|Invoke\-ARPScan\.ps1|Invoke\-BackdoorLNK\.ps1|Invoke\-BadPotato\.ps1|Invoke\-BetterSafetyKatz\.ps1|Invoke\-BruteForce\.ps1|Invoke\-BypassUAC\.ps1|Invoke\-Carbuncle\.ps1|Invoke\-Certify\.ps1|Invoke\-ConPtyShell\.ps1|Invoke\-CredentialInjection\.ps1|Invoke\-CredentialsPhish\.ps1|Invoke\-DAFT\.ps1|Invoke\-DCSync\.ps1|Invoke\-Decode\.ps1|Invoke\-DinvokeKatz\.ps1|Invoke\-DllInjection\.ps1|Invoke\-DowngradeAccount\.ps1|Invoke\-EgressCheck\.ps1|Invoke\-Encode\.ps1|Invoke\-EventViewer\.ps1|Invoke\-Eyewitness\.ps1|Invoke\-FakeLogonScreen\.ps1|Invoke\-Farmer\.ps1|Invoke\-Get\-RBCD\-Threaded\.ps1|Invoke\-Gopher\.ps1|Invoke\-Grouper2\.ps1|Invoke\-Grouper3\.ps1|Invoke\-HandleKatz\.ps1|Invoke\-Interceptor\.ps1|Invoke\-Internalmonologue\.ps1|Invoke\-Inveigh\.ps1|Invoke\-InveighRelay\.ps1|Invoke\-JSRatRegsvr\.ps1|Invoke\-JSRatRundll\.ps1|Invoke\-KrbRelay\.ps1|Invoke\-KrbRelayUp\.ps1|Invoke\-LdapSignCheck\.ps1|Invoke\-Lockless\.ps1|Invoke\-MalSCCM\.ps1|Invoke\-Mimikatz\.ps1|Invoke\-MimikatzWDigestDowngrade\.ps1|Invoke\-Mimikittenz\.ps1|Invoke\-MITM6\.ps1|Invoke\-NanoDump\.ps1|Invoke\-NetRipper\.ps1|Invoke\-NetworkRelay\.ps1|Invoke\-NinjaCopy\.ps1|Invoke\-OxidResolver\.ps1|Invoke\-P0wnedshell\.ps1|Invoke\-P0wnedshellx86\.ps1|Invoke\-Paranoia\.ps1|Invoke\-PortScan\.ps1|Invoke\-PoshRatHttp\.ps1|Invoke\-PoshRatHttps\.ps1|Invoke\-PostExfil\.ps1|Invoke\-PowerDump\.ps1|Invoke\-PowerShellIcmp\.ps1|Invoke\-PowerShellTCP\.ps1|Invoke\-PowerShellTcpOneLine\.ps1|Invoke\-PowerShellTcpOneLineBind\.ps1|Invoke\-PowerShellUdp\.ps1|Invoke\-PowerShellUdpOneLine\.ps1|Invoke\-PowerShellWMI\.ps1|Invoke\-PowerThIEf\.ps1|Invoke\-PPLDump\.ps1|Invoke\-Prasadhak\.ps1|Invoke\-PsExec\.ps1|Invoke\-PsGcat\.ps1|Invoke\-PsGcatAgent\.ps1|Invoke\-PSInject\.ps1|Invoke\-PsUaCme\.ps1|Invoke\-ReflectivePEInjection\.ps1|Invoke\-ReverseDNSLookup\.ps1|Invoke\-Rubeus\.ps1|Invoke\-RunAs\.ps1|Invoke\-SafetyKatz\.ps1|Invoke\-SauronEye\.ps1|Invoke\-SCShell\.ps1|Invoke\-Seatbelt\.ps1|Invoke\-ServiceAbuse\.ps1|Invoke\-SessionGopher\.ps1|Invoke\-ShellCode\.ps1|Invoke\-SMBScanner\.ps1|Invoke\-Snaffler\.ps1|Invoke\-Spoolsample\.ps1|Invoke\-SSHCommand\.ps1|Invoke\-SSIDExfil\.ps1|Invoke\-StandIn\.ps1|Invoke\-StickyNotesExtract\.ps1|Invoke\-Tater\.ps1|Invoke\-Thunderfox\.ps1|Invoke\-ThunderStruck\.ps1|Invoke\-TokenManipulation\.ps1|Invoke\-Tokenvator\.ps1|Invoke\-TotalExec\.ps1|Invoke\-UrbanBishop\.ps1|Invoke\-UserHunter\.ps1|Invoke\-VoiceTroll\.ps1|Invoke\-Whisker\.ps1|Invoke\-WinEnum\.ps1|Invoke\-winPEAS\.ps1|Invoke\-WireTap\.ps1|Invoke\-WmiCommand\.ps1|Invoke\-WScriptBypassUAC\.ps1|Invoke\-Zerologon\.ps1|Keylogger\.ps1|MailRaider\.ps1|New\-HoneyHash\.ps1|OfficeMemScraper\.ps1|Offline_Winpwn\.ps1|Out\-CHM\.ps1|Out\-DnsTxt\.ps1|Out\-Excel\.ps1|Out\-HTA\.ps1|Out\-Java\.ps1|Out\-JS\.ps1|Out\-Minidump\.ps1|Out\-RundllCommand\.ps1|Out\-SCF\.ps1|Out\-SCT\.ps1|Out\-Shortcut\.ps1|Out\-WebQuery\.ps1|Out\-Word\.ps1|Parse_Keys\.ps1|Port\-Scan\.ps1|PowerBreach\.ps1|powercat\.ps1|PowerRunAsSystem\.psm1|PowerSharpPack\.ps1|PowerUp\.ps1|PowerUpSQL\.ps1|PowerView\.ps1|PSAsyncShell\.ps1|RemoteHashRetrieval\.ps1|Remove\-Persistence\.ps1|Remove\-PoshRat\.ps1|Remove\-Update\.ps1|Run\-EXEonRemote\.ps1|Schtasks\-Backdoor\.ps1|Set\-DCShadowPermissions\.ps1|Set\-MacAttribute\.ps1|Set\-RemotePSRemoting\.ps1|Set\-RemoteWMI\.ps1|Set\-Wallpaper\.ps1|Show\-TargetScreen\.ps1|Speak\.ps1|Start\-CaptureServer\.ps1|Start\-WebcamRecorder\.ps1|StringToBase64\.ps1|TexttoExe\.ps1|VolumeShadowCopyTools\.ps1|WinPwn\.ps1|WSUSpendu\.ps1</field>
    </rule>
    <rule id="900197" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_exploit_scripts.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali-->
        <!--Description: Detects the execution of known offensive powershell scripts used for exploitation or reconnaissance-->
        <!--Date: 2023/01/23-->
        <!--Status: test-->
        <!--ID: 41025fd7-0466-4650-a813-574aaacbe7f4-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious PowerShell Scripts - PoshModule</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)Invoke\-Sharp</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)\.ps1</field>
    </rule>
    <rule id="900198" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_module/posh_pm_susp_smb_share_reco.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may look for folders and drives shared on remote systems as a means of identifying sources of information to gather as a precursor for Collection and
to identify potential systems of interest for Lateral Movement.
Networks often contain shared network drives and folders that enable users to access file directories on various systems across a network.
-->
        <!--Date: 2021/12/15-->
        <!--Status: test-->
        <!--ID: 6942bd25-5970-40ab-af49-944247103358-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.001</id>
        </mitre>
        <description>Suspicious Get Information for SMB Share - PowerShell Module</description>
        <options>no_full_log</options>
        <group>windows,ps_module,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)get\-smbshare</field>
        <field name="win.system.contextInfo" negate="no" type="pcre2">(?i)get\-smbshare</field>
    </rule>
    <rule id="900199" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_wsman_com_provider_no_powershell.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects suspicious use of the WSMAN provider without PowerShell.exe as the host application.-->
        <!--Date: 2020/06/24-->
        <!--Status: test-->
        <!--ID: df9a0e0e-fedb-4d6c-8668-d765dfc92aa7-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.003</id>
        </mitre>
        <description>Suspicious Non PowerShell WSMAN COM Provider</description>
        <options>no_full_log</options>
        <group>windows,powershell-classic,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)ProviderName=WSMan</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)HostApplication=powershell</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)HostApplication=C:\\+Windows\\+System32\\+WindowsPowerShell\\+v1\.0\\+powershell</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)HostApplication=C:\\+Windows\\+SysWOW64\\+WindowsPowerShell\\+v1\.0\\+powershell</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)HostApplication=C:/Windows/System32/WindowsPowerShell/v1\.0/powershell</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)HostApplication=C:/Windows/SysWOW64/WindowsPowerShell/v1\.0/powershell</field>
    </rule>
    <rule id="900200" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_remote_powershell_session.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects remote PowerShell sessions-->
        <!--Date: 2019/08/10-->
        <!--Status: test-->
        <!--ID: 60167e5c-84b2-4c95-a7ac-86281f27c445-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.006</id>
        </mitre>
        <description>Remote PowerShell Session (PS Classic)</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)HostName=ServerRemoteHost</field>
        <field name="full_log" negate="no" type="pcre2">(?i)wsmprovhost\.exe</field>
    </rule>
    <rule id="900201" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_downgrade_attack.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Lee Holmes (idea), Harish Segar (improvements)-->
        <!--Description: Detects PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0-->
        <!--Date: 2017/03/22-->
        <!--Status: test-->
        <!--ID: 6331d09b-4785-4c13-980f-f96661356249-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell Downgrade Attack - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)EngineVersion=2\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)HostVersion=2\.</field>
    </rule>
    <rule id="900202" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_alternate_powershell_hosts.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects alternate PowerShell hosts potentially bypassing detections looking for powershell.exe-->
        <!--Date: 2019/08/11-->
        <!--Status: test-->
        <!--ID: d7326048-328b-4d5e-98af-86e84b17c765-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Uncommon PowerShell Hosts</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)HostApplication=</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)HostApplication=powershell</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)HostApplication=C:\\+Windows\\+System32\\+WindowsPowerShell\\+v1\.0\\+powershell</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)HostApplication=C:\\+Windows\\+SysWOW64\\+WindowsPowerShell\\+v1\.0\\+powershell</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)HostApplication=C:/Windows/System32/WindowsPowerShell/v1\.0/powershell</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)HostApplication=C:/Windows/SysWOW64/WindowsPowerShell/v1\.0/powershell</field>
    </rule>
    <rule id="900203" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_alternate_powershell_hosts.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects alternate PowerShell hosts potentially bypassing detections looking for powershell.exe-->
        <!--Date: 2019/08/11-->
        <!--Status: test-->
        <!--ID: d7326048-328b-4d5e-98af-86e84b17c765-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Uncommon PowerShell Hosts</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)HostApplication=</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)Citrix\\+ConfigSync\\+ConfigSync\.ps1</field>
    </rule>
    <rule id="900204" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_abuse_nslookup_with_dns_records.yml</info>
        <!--Sigma Rule Author: Sai Prashanth Pulisetti @pulisettis, Aishwarya Singam-->
        <!--Description: Detects a powershell download cradle using nslookup. This cradle uses nslookup to extract payloads from DNS records.-->
        <!--Date: 2022/12/10-->
        <!--Status: test-->
        <!--ID: 999bff6d-dc15-44c9-9f5c-e1051bfc86e1-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Nslookup PowerShell Download Cradle</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)powershell</field>
        <field name="full_log" negate="no" type="pcre2">(?i)nslookup</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\[1\]</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\-q=txt\ http|\-querytype=txt\ http</field>
    </rule>
    <rule id="900205" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_renamed_powershell.yml</info>
        <!--Sigma Rule Author: Harish Segar, frack113-->
        <!--Description: Detects renamed powershell-->
        <!--Date: 2020/06/29-->
        <!--Status: test-->
        <!--ID: 30a8cb77-8eb3-4cfb-8e79-ad457c5a4592-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Renamed Powershell Under Powershell Channel</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)HostName=ConsoleHost</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)HostApplication=powershell</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)HostApplication=C:\\+Windows\\+System32\\+WindowsPowerShell\\+v1\.0\\+powershell</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)HostApplication=C:\\+Windows\\+SysWOW64\\+WindowsPowerShell\\+v1\.0\\+powershell</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)HostApplication=C:/Windows/System32/WindowsPowerShell/v1\.0/powershell</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)HostApplication=C:/Windows/SysWOW64/WindowsPowerShell/v1\.0/powershell</field>
    </rule>
    <rule id="900206" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_powercat.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network-->
        <!--Date: 2021/07/21-->
        <!--Status: test-->
        <!--ID: c5b20776-639a-49bf-94c7-84f912b91c15-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1095</id>
        </mitre>
        <description>Netcat The Powershell Version</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)powercat\ |powercat\.ps1</field>
    </rule>
    <rule id="900207" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_delete_volume_shadow_copies.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Shadow Copies deletion using operating systems utilities via PowerShell-->
        <!--Date: 2021/06/03-->
        <!--Status: stable-->
        <!--ID: 87df9ee1-5416-453a-8a08-e8d4a51e9ce1-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1490</id>
        </mitre>
        <description>Delete Volume Shadow Copies Via WMI With PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)Get\-WmiObject</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Win32_Shadowcopy</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Delete\(\)|Remove\-WmiObject</field>
    </rule>
    <rule id="900208" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_tamper_windows_defender_set_mp.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Attempting to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow.-->
        <!--Date: 2021/06/07-->
        <!--Status: experimental-->
        <!--ID: ec19ebab-72dc-40e1-9728-4c0b805d722c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Tamper Windows Defender - PSClassic</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_provider_start,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)Set\-MpPreference</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\-dbaf\ \$true|\-dbaf\ 1|\-dbm\ \$true|\-dbm\ 1|\-dips\ \$true|\-dips\ 1|\-DisableArchiveScanning\ \$true|\-DisableArchiveScanning\ 1|\-DisableBehaviorMonitoring\ \$true|\-DisableBehaviorMonitoring\ 1|\-DisableBlockAtFirstSeen\ \$true|\-DisableBlockAtFirstSeen\ 1|\-DisableIntrusionPreventionSystem\ \$true|\-DisableIntrusionPreventionSystem\ 1|\-DisableIOAVProtection\ \$true|\-DisableIOAVProtection\ 1|\-DisableRealtimeMonitoring\ \$true|\-DisableRealtimeMonitoring\ 1|\-DisableRemovableDriveScanning\ \$true|\-DisableRemovableDriveScanning\ 1|\-DisableScanningMappedNetworkDrivesForFullScan\ \$true|\-DisableScanningMappedNetworkDrivesForFullScan\ 1|\-DisableScanningNetworkFiles\ \$true|\-DisableScanningNetworkFiles\ 1|\-DisableScriptScanning\ \$true|\-DisableScriptScanning\ 1|\-drdsc\ \$true|\-drdsc\ 1|\-drtm\ \$true|\-drtm\ 1|\-dscrptsc\ \$true|\-dscrptsc\ 1|\-dsmndf\ \$true|\-dsmndf\ 1|\-dsnf\ \$true|\-dsnf\ 1|\-dss\ \$true|\-dss\ 1</field>
    </rule>
    <rule id="900209" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_tamper_windows_defender_set_mp.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Attempting to disable scheduled scanning and other parts of Windows Defender ATP or set default actions to allow.-->
        <!--Date: 2021/06/07-->
        <!--Status: experimental-->
        <!--ID: ec19ebab-72dc-40e1-9728-4c0b805d722c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Tamper Windows Defender - PSClassic</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_provider_start,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)Set\-MpPreference</field>
        <field name="full_log" negate="no" type="pcre2">(?i)HighThreatDefaultAction\ Allow|htdefac\ Allow|LowThreatDefaultAction\ Allow|ltdefac\ Allow|ModerateThreatDefaultAction\ Allow|mtdefac\ Allow|SevereThreatDefaultAction\ Allow|stdefac\ Allow</field>
    </rule>
    <rule id="900210" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_remotefxvgpudisablement_abuse.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects PowerShell module creation where the module Contents are set to "function Get-VMRemoteFXPhysicalVideoAdapter". This could be a sign of potential abuse of  the "RemoteFXvGPUDisablement.exe" binary which is known to be vulnerable to module load-order hijacking.-->
        <!--Date: 2021/07/13-->
        <!--Status: test-->
        <!--ID: f65e22f9-819e-4f96-9c7b-498364ae7a25-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Potential RemoteFXvGPUDisablement.EXE Abuse</description>
        <options>no_full_log</options>
        <group>windows,powershell-classic,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)ModuleContents=function\ Get\-VMRemoteFXPhysicalVideoAdapter\ \{</field>
    </rule>
    <rule id="900211" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_susp_zip_compress.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), frack113-->
        <!--Description: Detects PowerShell scripts that make use of the "Compress-Archive" Cmdlet in order to compress folders and files where the output is stored in a potentially suspicious location that is used often by malware for exfiltration.
An adversary might compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.
-->
        <!--Date: 2021/07/20-->
        <!--Status: test-->
        <!--ID: 71ff406e-b633-4989-96ec-bc49d825a412-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1074.001</id>
        </mitre>
        <description>Zip A Folder With PowerShell For Staging In Temp - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,powershell-classic,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)Compress\-Archive\ \-Path.+\-DestinationPath\ \$env:TEMP|Compress\-Archive\ \-Path.+\-DestinationPath.+\\+AppData\\+Local\\+Temp\\+|Compress\-Archive\ \-Path.+\-DestinationPath.+:\\+Windows\\+Temp\\+</field>
    </rule>
    <rule id="900212" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_xor_commandline.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Harish Segar (rule)-->
        <!--Description: Detects suspicious powershell process which includes bxor command, alternative obfuscation method to b64 encoded commands.-->
        <!--Date: 2020/06/29-->
        <!--Status: test-->
        <!--ID: 812837bb-b17f-45e9-8bd0-0ec35d2e3bd6-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious XOR Encoded PowerShell Command Line - PowerShell</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)HostName=ConsoleHost</field>
        <field name="full_log" negate="no" type="pcre2">(?i)bxor|char|join</field>
    </rule>
    <rule id="900213" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/powershell/powershell_classic/posh_pc_susp_get_nettcpconnection.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to get a listing of network connections to or from the compromised system they are currently accessing or from remote systems by querying for information over the network.-->
        <!--Date: 2021/12/10-->
        <!--Status: test-->
        <!--ID: b366adb4-d63d-422d-8a2c-186463b5ded0-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1049</id>
        </mitre>
        <description>Use Get-NetTCPConnection</description>
        <options>no_full_log</options>
        <group>windows,ps_classic_start,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)Get\-NetTCPConnection</field>
    </rule>
    <rule id="900214" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/create_remote_thread_win_hktl_cobaltstrike.yml</info>
        <!--Sigma Rule Author: Olaf Hartong, Florian Roth (Nextron Systems), Aleksey Potapov, oscd.community-->
        <!--Description: Detects a potential remote threat creation with certain characteristics which are typical for Cobalt Strike beacons-->
        <!--Date: 2018/11/30-->
        <!--Status: test-->
        <!--ID: 6309645e-122d-4c5b-bb2b-22e4f9c2fa42-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1055.001</id>
        </mitre>
        <description>HackTool - Potential CobaltStrike Process Injection</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.startAddress" negate="no" type="pcre2">(?i)(?:0B80|0C7C|0C88)$</field>
    </rule>
    <rule id="900215" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/create_remote_thread_win_powershell_lsass.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: Detects remote thread creation by PowerShell processes into "lsass.exe"-->
        <!--Date: 2020/10/06-->
        <!--Status: test-->
        <!--ID: fb656378-f909-47c1-8747-278bf09f4f4f-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Potential Credential Dumping Attempt Via PowerShell Remote Thread</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
    </rule>
    <rule id="900216" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/create_remote_thread_win_powershell_susp_targets.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the creation of a remote thread from a Powershell process in a potentially suspicious target process-->
        <!--Date: 2018/06/25-->
        <!--Status: experimental-->
        <!--ID: 99b97608-3e21-4bfe-8217-2a127c396a0e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1218.011</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Remote Thread Creation Via PowerShell In Potentially Suspicious Target</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe|\\+regsvr32\.exe)$</field>
    </rule>
    <rule id="900217" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/create_remote_thread_win_uncommon_target_image.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects uncommon target processes for remote thread creation-->
        <!--Date: 2022/03/16-->
        <!--Status: experimental-->
        <!--ID: a1a144b7-5c9b-4853-a559-2172be8d4a03-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055.003</id>
        </mitre>
        <description>Remote Thread Creation In Uncommon Target Image</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+calc\.exe|\\+calculator\.exe|\\+explorer\.exe|\\+mspaint\.exe|\\+notepad\.exe|\\+ping\.exe|\\+sethc\.exe|\\+spoolsv\.exe|\\+wordpad\.exe|\\+write\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+csrss\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+rundll32\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+explorer\.exe)$</field>
        <field name="win.eventdata.startFunction" negate="yes" type="pcre2">(?i)LoadLibraryW</field>
        <field name="win.eventdata.startFunction" negate="yes" type="pcre2">(?i)FreeLibrary</field>
    </rule>
    <rule id="900218" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/create_remote_thread_win_uncommon_target_image.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects uncommon target processes for remote thread creation-->
        <!--Date: 2022/03/16-->
        <!--Status: experimental-->
        <!--ID: a1a144b7-5c9b-4853-a559-2172be8d4a03-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055.003</id>
        </mitre>
        <description>Remote Thread Creation In Uncommon Target Image</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+calc\.exe|\\+calculator\.exe|\\+explorer\.exe|\\+mspaint\.exe|\\+notepad\.exe|\\+ping\.exe|\\+sethc\.exe|\\+spoolsv\.exe|\\+wordpad\.exe|\\+write\.exe)$</field>
        <field name="win.eventdata.startFunction" negate="yes" type="pcre2">(?i)EtwpNotificationThread</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)unknown\ process</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+VMware\\+VMware\ Tools\\+vmtoolsd\.exe)$</field>
        <field name="win.eventdata.startFunction" negate="yes" type="pcre2">(?i)GetCommandLineW</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+explorer\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+notepad\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+spoolsv\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+WinZip\\+FAHWindow64\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+explorer\.exe)$</field>
    </rule>
    <rule id="900219" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/create_remote_thread_win_hktl_cactustorch.yml</info>
        <!--Sigma Rule Author: @SBousseaden (detection), Thomas Patzke (rule)-->
        <!--Description: Detects remote thread creation from CACTUSTORCH as described in references.-->
        <!--Date: 2019/02/01-->
        <!--Status: test-->
        <!--ID: 2e4e488a-6164-4811-9ea1-f960c7359c40-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1055.012</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
            <id>attack.t1218.005</id>
        </mitre>
        <description>HackTool - CACTUSTORCH Remote Thread Creation</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\+System32\\+cscript\.exe|\\+System32\\+wscript\.exe|\\+System32\\+mshta\.exe|\\+winword\.exe|\\+excel\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)\\+SysWOW64\\+</field>
        <field name="win.eventdata.startModule" negate="no" type="pcre2">(?i)None</field>
    </rule>
    <rule id="900220" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/create_remote_thread_win_mstsc_susp_location.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects remote thread creation in the "mstsc.exe" process by a process located in a potentially suspicious location.
This technique is often used by attackers in order to hook some APIs used by DLLs loaded by "mstsc.exe" during RDP authentications in order to steal credentials.
-->
        <!--Date: 2023/07/28-->
        <!--Status: experimental-->
        <!--ID: c0aac16a-b1e7-4330-bab0-3c27bb4987c7-->
        <mitre>
            <id>attack.credential_access</id>
        </mitre>
        <description>Remote Thread Creation In Mstsc.Exe From Suspicious Location</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+mstsc\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i):\\+Users\\+Public\\+|:\\+Windows\\+PerfLogs\\+|:\\+Windows\\+Tasks\\+|:\\+Temp\\+|:\\+Windows\\+Temp\\+|:\\+AppData\\+Local\\+Temp\\+</field>
    </rule>
    <rule id="900221" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/create_remote_thread_win_loadlibrary.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects potential use of CreateRemoteThread api and LoadLibrary function to inject DLL into a process-->
        <!--Date: 2019/08/11-->
        <!--Status: test-->
        <!--ID: 052ec6f6-1adc-41e6-907a-f1c813478bee-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1055.001</id>
        </mitre>
        <description>CreateRemoteThread API and LoadLibrary</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.startModule" negate="no" type="pcre2">(?i)(?:\\+kernel32\.dll)$</field>
        <field name="win.eventdata.startFunction" negate="no" type="pcre2">(?i)LoadLibraryA</field>
    </rule>
    <rule id="900222" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/create_remote_thread_win_password_dumper_lsass.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects password dumper activity by monitoring remote thread creation EventID 8 in combination with the lsass.exe process as TargetImage.
The process in field Process is the malicious program. A single execution can lead to hundreds of events.
-->
        <!--Date: 2017/02/19-->
        <!--Status: stable-->
        <!--ID: f239b326-2f41-4d6b-9dfa-c846a60ef505-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.s0005</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Password Dumper Remote Thread in LSASS</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.startModule" negate="no" type="pcre2">(?i)</field>
    </rule>
    <rule id="900223" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/create_remote_thread_win_keepass.yml</info>
        <!--Sigma Rule Author: Timon Hackenjos-->
        <!--Description: Detects remote thread creation in "KeePass.exe" which could indicates potential password dumping activity-->
        <!--Date: 2022/04/22-->
        <!--Status: experimental-->
        <!--ID: 77564cc2-7382-438b-a7f6-395c2ae53b9a-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1555.005</id>
        </mitre>
        <description>Remote Thread Created In KeePass.EXE</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+KeePass\.exe)$</field>
    </rule>
    <rule id="900224" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/create_remote_thread_win_uncommon_source_image.yml</info>
        <!--Sigma Rule Author: Perez Diego (@darkquassar), oscd.community-->
        <!--Description: Detects uncommon processes creating remote threads-->
        <!--Date: 2019/10/27-->
        <!--Status: experimental-->
        <!--ID: 66d31e5f-52d6-40a4-9615-002d3789a119-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1055</id>
        </mitre>
        <description>Remote Thread Creation By Uncommon Source Image</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\+bash\.exe|\\+cscript\.exe|\\+cvtres\.exe|\\+defrag\.exe|\\+dnx\.exe|\\+esentutl\.exe|\\+excel\.exe|\\+expand\.exe|\\+explorer\.exe|\\+find\.exe|\\+findstr\.exe|\\+forfiles\.exe|\\+gpupdate\.exe|\\+hh\.exe|\\+iexplore\.exe|\\+installutil\.exe|\\+lync\.exe|\\+makecab\.exe|\\+mDNSResponder\.exe|\\+monitoringhost\.exe|\\+msbuild\.exe|\\+mshta\.exe|\\+msiexec\.exe|\\+mspaint\.exe|\\+outlook\.exe|\\+ping\.exe|\\+powerpnt\.exe|\\+provtool\.exe|\\+python\.exe|\\+regsvr32\.exe|\\+robocopy\.exe|\\+runonce\.exe|\\+sapcimc\.exe|\\+schtasks\.exe|\\+smartscreen\.exe|\\+spoolsv\.exe|\\+tstheme\.exe|\\+userinit\.exe|\\+vssadmin\.exe|\\+vssvc\.exe|\\+w3wp\.exe|\\+winlogon\.exe|\\+winscp\.exe|\\+winword\.exe|\\+wmic\.exe|\\+wscript\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+winlogon\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+services\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+wininit\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+csrss\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+LogonUI\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+winlogon\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)4</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+schtasks\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+SysWOW64\\+schtasks\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+conhost\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+explorer\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\ \(x86\)\\+)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+SysWOW64\\+)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)System</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+msiexec\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+</field>
    </rule>
    <rule id="900225" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/create_remote_thread_win_uncommon_source_image.yml</info>
        <!--Sigma Rule Author: Perez Diego (@darkquassar), oscd.community-->
        <!--Description: Detects uncommon processes creating remote threads-->
        <!--Date: 2019/10/27-->
        <!--Status: experimental-->
        <!--ID: 66d31e5f-52d6-40a4-9615-002d3789a119-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1055</id>
        </mitre>
        <description>Remote Thread Creation By Uncommon Source Image</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\+bash\.exe|\\+cscript\.exe|\\+cvtres\.exe|\\+defrag\.exe|\\+dnx\.exe|\\+esentutl\.exe|\\+excel\.exe|\\+expand\.exe|\\+explorer\.exe|\\+find\.exe|\\+findstr\.exe|\\+forfiles\.exe|\\+gpupdate\.exe|\\+hh\.exe|\\+iexplore\.exe|\\+installutil\.exe|\\+lync\.exe|\\+makecab\.exe|\\+mDNSResponder\.exe|\\+monitoringhost\.exe|\\+msbuild\.exe|\\+mshta\.exe|\\+msiexec\.exe|\\+mspaint\.exe|\\+outlook\.exe|\\+ping\.exe|\\+powerpnt\.exe|\\+provtool\.exe|\\+python\.exe|\\+regsvr32\.exe|\\+robocopy\.exe|\\+runonce\.exe|\\+sapcimc\.exe|\\+schtasks\.exe|\\+smartscreen\.exe|\\+spoolsv\.exe|\\+tstheme\.exe|\\+userinit\.exe|\\+vssadmin\.exe|\\+vssvc\.exe|\\+w3wp\.exe|\\+winlogon\.exe|\\+winscp\.exe|\\+winword\.exe|\\+wmic\.exe|\\+wscript\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)\\+Microsoft\ Office\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+POWERPNT\.EXE)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+csrss\.exe)$</field>
    </rule>
    <rule id="900226" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/create_remote_thread/create_remote_thread_win_ttdinjec.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects a remote thread creation of Ttdinject.exe used as proxy-->
        <!--Date: 2022/05/16-->
        <!--Status: test-->
        <!--ID: c15e99a3-c474-48ab-b9a7-84549a7a9d16-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1127</id>
        </mitre>
        <description>Remote Thread Creation Ttdinject.exe Proxy</description>
        <options>no_full_log</options>
        <group>windows,create_remote_thread,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\+ttdinject\.exe)$</field>
    </rule>
    <rule id="900227" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_susp_external_ip_lookup.yml</info>
        <!--Sigma Rule Author: Brandon George (blog post), Thomas Patzke-->
        <!--Description: Detects DNS queries for IP lookup services such as "api.ipify.org" originating from a non browser process.-->
        <!--Date: 2021/07/08-->
        <!--Status: test-->
        <!--ID: ec82e2a5-81ea-4211-a1f8-37a0286df2c2-->
        <mitre>
            <id>attack.reconnaissance</id>
            <id>attack.t1590</id>
        </mitre>
        <description>Suspicious DNS Query for IP Lookup Service APIs</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)api\.2ip\.ua|api\.bigdatacloud\.net|api\.ipify\.org|bot\.whatismyipaddress\.com|canireachthe\.net|checkip\.amazonaws\.com|checkip\.dyndns\.org|curlmyip\.com|db\-ip\.com|edns\.ip\-api\.com|eth0\.me|freegeoip\.app|geoipy\.com|getip\.pro|icanhazip\.com|ident\.me|ifconfig\.io|ifconfig\.me|ipapi\.co|ip\-api\.com|ip\.anysrc\.net|ip\.tyk\.nu|ipaddressworld\.com|ipecho\.net|ipinfo\.io|ipof\.in|ipv4\.icanhazip\.com|ipv4bot\.whatismyipaddress\.com|ipwho\.is|l2\.io|myexternalip\.com|wgetip\.com|whatismyip\.akamai\.com|wtfismyip\.com</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+brave\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Mozilla\ Firefox\\+firefox\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Mozilla\ Firefox\\+firefox\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Internet\ Explorer\\+iexplore\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Internet\ Explorer\\+iexplore\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+maxthon\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+EdgeWebView\\+Application\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WindowsApps\\+MicrosoftEdge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+Edge\\+Application\\+msedge\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Microsoft\\+Edge\\+Application\\+msedge\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+EdgeCore\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Microsoft\\+EdgeCore\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedgewebview2\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+opera\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+safari\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+seamonkey\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+vivaldi\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+whale\.exe)$</field>
    </rule>
    <rule id="900228" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_tor_onion_domain_query.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects DNS queries to an ".onion" address related to Tor routing networks-->
        <!--Date: 2022/02/20-->
        <!--Status: experimental-->
        <!--ID: b55ca2a3-7cff-4dda-8bdd-c7bfa63bf544-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090.003</id>
        </mitre>
        <description>DNS Query Tor .Onion Address - Sysmon</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)\.onion</field>
    </rule>
    <rule id="900229" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_remote_access_software_domains_non_browsers.yml</info>
        <!--Sigma Rule Author: frack113, Connor Martin-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/07/11-->
        <!--Status: experimental-->
        <!--ID: 4d07b1f4-cb00-4470-b9f8-b0191d48ff52-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>DNS Query To Remote Access Software Domain From Non-Browser App</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)(?:agent\.jumpcloud\.com|agentreporting\.atera\.com|ammyy\.com|api\.parsec\.app|api\.playanext\.com|api\.splashtop\.com|app\.atera\.com|assist\.zoho\.com|authentication\.logmeininc\.com|beyondtrustcloud\.com|cdn\.kaseya\.net|client\.teamviewer\.com|comserver\.corporate\.beanywhere\.com|control\.connectwise\.com|downloads\.zohocdn\.com|dwservice\.net|express\.gotoassist\.com|getgo\.com|integratedchat\.teamviewer\.com|join\.zoho\.com|kickstart\.jumpcloud\.com|license\.bomgar\.com|logmein\-gateway\.com|logmein\.com|logmeincdn\.http\.internapcdn\.net|n\-able\.com|net\.anydesk\.com|netsupportsoftware\.com|parsecusercontent\.com|pubsub\.atera\.com|relay\.kaseya\.net|relay\.screenconnect\.com|relay\.splashtop\.com|remotedesktop\-pa\.googleapis\.com|remoteutilities\.com|secure\.logmeinrescue\.com|services\.vnc\.com|static\.remotepc\.com|swi\-rc\.com|swi\-tc\.com|telemetry\.servers\.qetqo\.com|tmate\.io|zohoassist\.com)$</field>
    </rule>
    <rule id="900230" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_remote_access_software_domains_non_browsers.yml</info>
        <!--Sigma Rule Author: frack113, Connor Martin-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/07/11-->
        <!--Status: experimental-->
        <!--ID: 4d07b1f4-cb00-4470-b9f8-b0191d48ff52-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>DNS Query To Remote Access Software Domain From Non-Browser App</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)(?:\.rustdesk\.com)$</field>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)^(?:rs\-)</field>
    </rule>
    <rule id="900231" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_remote_access_software_domains_non_browsers.yml</info>
        <!--Sigma Rule Author: frack113, Connor Martin-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/07/11-->
        <!--Status: experimental-->
        <!--ID: 4d07b1f4-cb00-4470-b9f8-b0191d48ff52-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>DNS Query To Remote Access Software Domain From Non-Browser App</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Mozilla\ Firefox\\+firefox\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Mozilla\ Firefox\\+firefox\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Internet\ Explorer\\+iexplore\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Internet\ Explorer\\+iexplore\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+EdgeWebView\\+Application\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WindowsApps\\+MicrosoftEdge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+Edge\\+Application\\+msedge\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Microsoft\\+Edge\\+Application\\+msedge\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+EdgeCore\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Microsoft\\+EdgeCore\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedgewebview2\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+safari\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+MsMpEng\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+MsSense\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+brave\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+BraveSoftware\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Maxthon\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+maxthon\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Programs\\+Opera\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+opera\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+SeaMonkey\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+SeaMonkey\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+seamonkey\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Vivaldi\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+vivaldi\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Naver\\+Naver\ Whale\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Naver\\+Naver\ Whale\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+whale\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Tor\ Browser\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Waterfox\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Waterfox\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Waterfox\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Programs\\+midori\-ng\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Midori\ Next\ Generation\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+SlimBrowser\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+SlimBrowser\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+slimbrowser\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Flock\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Flock\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Phoebe\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Phoebe\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Falkon\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Falkon\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+falkon\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Avant\ Browser\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Avant\ Browser\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+avant\.exe)$</field>
    </rule>
    <rule id="900232" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_dns_server_discovery_via_ldap_query.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects DNS server discovery via LDAP query requests from uncommon applications-->
        <!--Date: 2022/08/20-->
        <!--Status: experimental-->
        <!--ID: a21bcd7e-38ec-49ad-b69a-9ea17e69509e-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1482</id>
        </mitre>
        <description>DNS Server Discovery Via LDAP Query</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)^(?:_ldap\.)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+ProgramData\\+Microsoft\\+Windows\ Defender\\+Platform\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+MsMpEng\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)&lt;unknown\ process&gt;</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="900233" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_dns_server_discovery_via_ldap_query.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects DNS server discovery via LDAP query requests from uncommon applications-->
        <!--Date: 2022/08/20-->
        <!--Status: experimental-->
        <!--ID: a21bcd7e-38ec-49ad-b69a-9ea17e69509e-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1482</id>
        </mitre>
        <description>DNS Server Discovery Via LDAP Query</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)^(?:_ldap\.)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+WindowsAzure\\+GuestAgent)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+chrome\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+firefox\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+opera\.exe)$</field>
    </rule>
    <rule id="900234" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_regsvr32_dns_query.yml</info>
        <!--Sigma Rule Author: Dmitriy Lifanov, oscd.community-->
        <!--Description: Detects DNS queries initiated by "Regsvr32.exe"-->
        <!--Date: 2019/10/25-->
        <!--Status: test-->
        <!--ID: 36e037c4-c228-4866-b6a3-48eb292b9955-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1559.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.010</id>
        </mitre>
        <description>DNS Query Request By Regsvr32.EXE</description>
        <options>no_full_log</options>
        <group>dns_query,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+regsvr32\.exe)$</field>
    </rule>
    <rule id="900235" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_hybridconnectionmgr_servicebus.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects Azure Hybrid Connection Manager services querying the Azure service bus service-->
        <!--Date: 2021/04/12-->
        <!--Status: test-->
        <!--ID: 7bd3902d-8b8b-4dd4-838a-c6862d40150d-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1554</id>
        </mitre>
        <description>DNS HybridConnectionManager Service Bus</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)servicebus\.windows\.net</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)HybridConnectionManager</field>
    </rule>
    <rule id="900236" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_ufile_io_query.yml</info>
        <!--Sigma Rule Author: yatinwad, TheDFIRReport-->
        <!--Description: Detects DNS queries to "ufile.io", which was seen abused by malware and threat actors as a method for data exfiltration-->
        <!--Date: 2022/06/23-->
        <!--Status: experimental-->
        <!--ID: 1cbbeaaf-3c8c-4e4c-9d72-49485b6a176b-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.002</id>
        </mitre>
        <description>DNS Query To Ufile.io</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)ufile\.io</field>
    </rule>
    <rule id="900237" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_cloudflared_communication.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects DNS query requests to Cloudflared tunnels domains.-->
        <!--Date: 2023/12/20-->
        <!--Status: experimental-->
        <!--ID: a1d9eec5-33b2-4177-8d24-27fe754d0812-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Cloudflared Tunnels Related DNS Requests</description>
        <options>no_full_log</options>
        <group>dns_query,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)(?:\.v2\.argotunnel\.com|protocol\-v2\.argotunnel\.com|trycloudflare\.com|update\.argotunnel\.com)$</field>
    </rule>
    <rule id="900238" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_mal_cobaltstrike.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a program that invoked suspicious DNS queries known from Cobalt Strike beacons-->
        <!--Date: 2021/11/09-->
        <!--Status: test-->
        <!--ID: f356a9c4-effd-4608-bbf8-408afd5cd006-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.004</id>
        </mitre>
        <description>Suspicious Cobalt Strike DNS Beaconing - Sysmon</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)^(?:aaa\.stage\.|post\.1)</field>
    </rule>
    <rule id="900239" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_mal_cobaltstrike.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a program that invoked suspicious DNS queries known from Cobalt Strike beacons-->
        <!--Date: 2021/11/09-->
        <!--Status: test-->
        <!--ID: f356a9c4-effd-4608-bbf8-408afd5cd006-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.004</id>
        </mitre>
        <description>Suspicious Cobalt Strike DNS Beaconing - Sysmon</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)\.stage\.123456\.</field>
    </rule>
    <rule id="900240" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_mega_nz.yml</info>
        <!--Sigma Rule Author: Aaron Greetham (@beardofbinary) - NCC Group-->
        <!--Description: Detects DNS queries for subdomains related to MEGA sharing website-->
        <!--Date: 2021/05/26-->
        <!--Status: test-->
        <!--ID: 613c03ba-0779-4a53-8a1f-47f914a4ded3-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.002</id>
        </mitre>
        <description>DNS Query To MEGA Hosting Website</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)userstorage\.mega\.co\.nz</field>
    </rule>
    <rule id="900241" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_anonymfiles_com.yml</info>
        <!--Sigma Rule Author: pH-T (Nextron Systems)-->
        <!--Description: Detects DNS queries for "anonfiles.com", which is an anonymous file upload platform often used for malicious purposes-->
        <!--Date: 2022/07/15-->
        <!--Status: test-->
        <!--ID: 065cceea-77ec-4030-9052-fc0affea7110-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.002</id>
        </mitre>
        <description>DNS Query for Anonfiles.com Domain - Sysmon</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)\.anonfiles\.com</field>
    </rule>
    <rule id="900242" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_teamviewer_domain_query_by_uncommon_app.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects DNS queries to a TeamViewer domain only resolved by a TeamViewer client by an image that isn't named TeamViewer (sometimes used by threat actors for obfuscation)-->
        <!--Date: 2022/01/30-->
        <!--Status: test-->
        <!--ID: 778ba9a8-45e4-4b80-8e3e-34a419f0b85e-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>TeamViewer Domain Query By Non-TeamViewer Application</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)taf\.teamviewer\.com|udp\.ping\.teamviewer\.com</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)TeamViewer</field>
    </rule>
    <rule id="900243" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_appinstaller.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects DNS queries made by "AppInstaller.EXE". The AppInstaller is the default handler for the "ms-appinstaller" URI. It attempts to load/install a package from the referenced URL
-->
        <!--Date: 2021/11/24-->
        <!--Status: test-->
        <!--ID: 7cff77e1-9663-46a3-8260-17f2e1aa9d0a-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>AppX Package Installation Attempts Via AppInstaller.EXE</description>
        <options>no_full_log</options>
        <group>windows,dns_query,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+WindowsApps\\+Microsoft\.DesktopAppInstaller_)</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+AppInstaller\.exe)$</field>
    </rule>
    <rule id="900244" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_vscode_tunnel_communication.yml</info>
        <!--Sigma Rule Author: citron_ninja-->
        <!--Description: Detects DNS query requests to Visual Studio Code tunnel domains. Attackers can abuse that feature to establish a reverse shell or persistence on a machine.
-->
        <!--Date: 2023/10/25-->
        <!--Status: experimental-->
        <!--ID: b3e6418f-7c7a-4fad-993a-93b65027a9f1-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>DNS Query To Visual Studio Code Tunnels Domain</description>
        <options>no_full_log</options>
        <group>dns_query,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)(?:\.tunnels\.api\.visualstudio\.com)$</field>
    </rule>
    <rule id="900245" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/dns_query/dns_query_win_devtunnels_communication.yml</info>
        <!--Sigma Rule Author: citron_ninja-->
        <!--Description: Detects DNS query requests to Devtunnels domains. Attackers can abuse that feature to establish a reverse shell or persistence on a machine.
-->
        <!--Date: 2023/10/25-->
        <!--Status: experimental-->
        <!--ID: 1cb0c6ce-3d00-44fc-ab9c-6d6d577bf20b-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>DNS Query To Devtunnels Domain</description>
        <options>no_full_log</options>
        <group>dns_query,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)(?:\.devtunnels\.ms)$</field>
    </rule>
    <rule id="900246" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/sysmon/sysmon_file_executable_detected.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Triggers on any Sysmon "FileExecutableDetected" event, which triggers every time a PE that is monitored by the config is created.-->
        <!--Date: 2023/07/20-->
        <!--Status: experimental-->
        <!--ID: 693a44e9-7f26-4cb6-b787-214867672d3a-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Sysmon File Executable Creation Detected</description>
        <options>no_full_log</options>
        <group>windows,sysmon,</group>
        <if_sid>184665, 185000, 185001, 185002, 185003, 185004, 185005, 185006, 185007, 185008, 185009, 185010, 185011, 185012, 185013, 184666, 184667, 184676, 184677, 184678, 184686, 184687, 184696, 184697, 184698, 184706, 184707, 184716, 184717, 184726, 184727, 184736, 184737, 184746, 184747, 184766, 184767, 184776</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)29</field>
    </rule>
    <rule id="900247" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/sysmon/sysmon_file_block_executable.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Triggers on any Sysmon "FileBlockExecutable" event, which indicates a violation of the configured block policy-->
        <!--Date: 2022/08/16-->
        <!--Status: experimental-->
        <!--ID: 23b71bc5-953e-4971-be4c-c896cda73fc2-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Sysmon Blocked Executable</description>
        <options>no_full_log</options>
        <group>windows,sysmon,</group>
        <if_sid>184665, 185000, 185001, 185002, 185003, 185004, 185005, 185006, 185007, 185008, 185009, 185010, 185011, 185012, 185013, 184666, 184667, 184676, 184677, 184678, 184686, 184687, 184696, 184697, 184698, 184706, 184707, 184716, 184717, 184726, 184727, 184736, 184737, 184746, 184747, 184766, 184767, 184776</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)27</field>
    </rule>
    <rule id="900248" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/sysmon/sysmon_file_block_shredding.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Triggers on any Sysmon "FileBlockShredding" event, which indicates a violation of the configured shredding policy.-->
        <!--Date: 2023/07/20-->
        <!--Status: experimental-->
        <!--ID: c3e5c1b1-45e9-4632-b242-27939c170239-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Sysmon Blocked File Shredding</description>
        <options>no_full_log</options>
        <group>windows,sysmon,</group>
        <if_sid>184665, 185000, 185001, 185002, 185003, 185004, 185005, 185006, 185007, 185008, 185009, 185010, 185011, 185012, 185013, 184666, 184667, 184676, 184677, 184678, 184686, 184687, 184696, 184697, 184698, 184706, 184707, 184716, 184717, 184726, 184727, 184736, 184737, 184746, 184747, 184766, 184767, 184776</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)28</field>
    </rule>
    <rule id="900249" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/sysmon/sysmon_config_modification.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects a Sysmon configuration change, which could be the result of a legitimate reconfiguration or someone trying manipulate the configuration-->
        <!--Date: 2022/01/12-->
        <!--Status: test-->
        <!--ID: 8ac03a65-6c84-4116-acad-dc1558ff7a77-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Sysmon Configuration Change</description>
        <options>no_full_log</options>
        <group>windows,sysmon,</group>
        <if_sid>184665, 185000, 185001, 185002, 185003, 185004, 185005, 185006, 185007, 185008, 185009, 185010, 185011, 185012, 185013, 184666, 184667, 184676, 184677, 184678, 184686, 184687, 184696, 184697, 184698, 184706, 184707, 184716, 184717, 184726, 184727, 184736, 184737, 184746, 184747, 184766, 184767, 184776</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)16</field>
    </rule>
    <rule id="900250" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/sysmon/sysmon_config_modification_error.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects when an adversary is trying to hide it's action from Sysmon logging based on error messages-->
        <!--Date: 2021/06/04-->
        <!--Status: test-->
        <!--ID: 815cd91b-7dbc-4247-841a-d7dd1392b0a8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564</id>
        </mitre>
        <description>Sysmon Configuration Error</description>
        <options>no_full_log</options>
        <group>windows,sysmon_error,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Failed\ to\ open\ service\ configuration\ with\ error|Failed\ to\ connect\ to\ the\ driver\ to\ update\ configuration</field>
        <field name="win.eventdata.description" negate="yes" type="pcre2">(?i)Failed\ to\ open\ service\ configuration\ with\ error</field>
        <field name="win.eventdata.description" negate="yes" type="pcre2">(?i)Last\ error:\ The\ media\ is\ write\ protected\.</field>
        <field name="win.eventdata.description" negate="yes" type="pcre2">(?i)Failed\ to\ open\ service\ configuration\ with\ error\ 19</field>
        <field name="win.eventdata.description" negate="yes" type="pcre2">(?i)Failed\ to\ open\ service\ configuration\ with\ error\ 93</field>
    </rule>
    <rule id="900251" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/sysmon/sysmon_config_modification_status.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects when an attacker tries to hide from Sysmon by disabling or stopping it-->
        <!--Date: 2021/06/04-->
        <!--Status: test-->
        <!--ID: 1f2b5353-573f-4880-8e33-7d04dcf97744-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564</id>
        </mitre>
        <description>Sysmon Configuration Modification</description>
        <options>no_full_log</options>
        <group>windows,sysmon_status,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)Stopped</field>
    </rule>
    <rule id="900252" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/sysmon/sysmon_config_modification_status.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects when an attacker tries to hide from Sysmon by disabling or stopping it-->
        <!--Date: 2021/06/04-->
        <!--Status: test-->
        <!--ID: 1f2b5353-573f-4880-8e33-7d04dcf97744-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564</id>
        </mitre>
        <description>Sysmon Configuration Modification</description>
        <options>no_full_log</options>
        <group>windows,sysmon_status,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)Sysmon\ config\ state\ changed</field>
    </rule>
    <rule id="900253" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/sysmon/sysmon_config_modification_status.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects when an attacker tries to hide from Sysmon by disabling or stopping it-->
        <!--Date: 2021/06/04-->
        <!--Status: test-->
        <!--ID: 1f2b5353-573f-4880-8e33-7d04dcf97744-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564</id>
        </mitre>
        <description>Sysmon Configuration Modification</description>
        <options>no_full_log</options>
        <group>windows,sysmon_status,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="yes" type="pcre2">(?i)Started</field>
    </rule>
    <rule id="900254" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/win_alert_mimikatz_keywords.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), David ANDRE (additional keywords)-->
        <!--Description: This method detects mimikatz keywords in different Eventlogs (some of them only appear in older Mimikatz version that are however still used by different threat groups)-->
        <!--Date: 2017/01/10-->
        <!--Status: test-->
        <!--ID: 06d71506-7beb-4f22-8888-e2e5e2ca7fd8-->
        <mitre>
            <id>attack.s0002</id>
            <id>attack.lateral_movement</id>
            <id>attack.credential_access</id>
            <id>car.2013-07-001</id>
            <id>car.2019-04-004</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.004</id>
            <id>attack.t1003.001</id>
            <id>attack.t1003.006</id>
        </mitre>
        <description>Mimikatz Use</description>
        <options>no_full_log</options>
        <group>windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)dpapi::masterkey|eo\.oe\.kiwi|event::clear|event::drop|gentilkiwi\.com|kerberos::golden|kerberos::ptc|kerberos::ptt|kerberos::tgt|Kiwi\ Legit\ Printer|lsadump::|mimidrv\.sys|\\+mimilib\.dll|misc::printnightmare|misc::shadowcopies|misc::skeleton|privilege::backup|privilege::debug|privilege::driver|sekurlsa::</field>
        <field name="win.system.eventID" negate="yes" type="pcre2">(?i)15</field>
    </rule>
    <rule id="900255" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/servicebus/win_hybridconnectionmgr_svc_running.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Rule to detect the Hybrid Connection Manager service running on an endpoint.-->
        <!--Date: 2021/04/12-->
        <!--Status: test-->
        <!--ID: b55d23e5-6821-44ff-8a6e-67218891e49f-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1554</id>
        </mitre>
        <description>HybridConnectionManager Service Running</description>
        <options>no_full_log</options>
        <group>windows,microsoft-servicebus-client,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)40300|40301|40302</field>
        <field name="full_log" negate="no" type="pcre2">(?i)HybridConnection|sb://|servicebus\.windows\.net|HybridConnectionManage</field>
    </rule>
    <rule id="900256" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/diagnosis/scripted/win_diagnosis_scripted_load_remote_diagcab.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects loading of diagcab packages from a remote path, as seen in DogWalk vulnerability-->
        <!--Date: 2022/08/14-->
        <!--Status: test-->
        <!--ID: 50cb47b8-2c33-4b23-a2e9-4600657d9746-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Loading Diagcab Package From Remote Path</description>
        <options>no_full_log</options>
        <group>windows,diagnosis-scripted,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)101</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\\+</field>
    </rule>
    <rule id="900257" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_mal_service_installs.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Daniil Yugoslavskiy, oscd.community (update)-->
        <!--Description: Detects known malicious service installs that only appear in cases of lateral movement, credential dumping, and other suspicious activities.-->
        <!--Date: 2017/03/27-->
        <!--Status: test-->
        <!--ID: cb062102-587e-4414-8efa-dbe3c7bf19c6-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1003</id>
            <id>car.2013-09-005</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>Malicious Service Installations</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)javamtsup</field>
    </rule>
    <rule id="900258" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_scheduled_task_delete_or_disable.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when adversaries stop services or processes by deleting or disabling their respective scheduled tasks in order to conduct data destructive activities-->
        <!--Date: 2022/12/05-->
        <!--Status: experimental-->
        <!--ID: 7595ba94-cf3b-4471-aa03-4f6baa9e5fad-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.persistence</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Important Scheduled Task Deleted/Disabled</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4699|4701</field>
        <field name="win.eventdata.taskName" negate="no" type="pcre2">(?i)\\+Windows\\+SystemRestore\\+SR|\\+Windows\\+Windows\ Defender\\+|\\+Windows\\+BitLocker|\\+Windows\\+WindowsBackup\\+|\\+Windows\\+WindowsUpdate\\+|\\+Windows\\+UpdateOrchestrator\\+Schedule|\\+Windows\\+ExploitGuard</field>
        <field name="win.system.eventID" negate="yes" type="pcre2">(?i)4699</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
        <field name="win.eventdata.taskName" negate="yes" type="pcre2">(?i)\\+Windows\\+Windows\ Defender\\+</field>
    </rule>
    <rule id="900259" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_dpapi_domain_backupkey_extraction.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects tools extracting LSA secret DPAPI domain backup key from Domain Controllers-->
        <!--Date: 2019/06/20-->
        <!--Status: test-->
        <!--ID: 4ac1f50b-3bd0-4968-902d-868b4647937e-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.004</id>
        </mitre>
        <description>DPAPI Domain Backup Key Extraction</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4662</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)SecretObject</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)0x2</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)BCKUPKEY</field>
    </rule>
    <rule id="900260" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_svcctl_remote_service.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detects remote service activity via remote access to the svcctl named pipe-->
        <!--Date: 2019/04/03-->
        <!--Status: test-->
        <!--ID: 586a8d6b-6bfe-4ad9-9d78-888cd2fe50c3-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.persistence</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Remote Service Activity via SVCCTL Named Pipe</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)\\+.+\\+IPC\$</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)svcctl</field>
        <field name="win.eventdata.accesses" negate="no" type="pcre2">(?i)WriteData</field>
    </rule>
    <rule id="900261" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_metasploit_authentication.yml</info>
        <!--Sigma Rule Author: Chakib Gzenayi (@Chak092), Hosni Mribah-->
        <!--Description: Alerts on Metasploit host's authentications on the domain.-->
        <!--Date: 2020/05/06-->
        <!--Status: test-->
        <!--ID: 72124974-a68b-4366-b990-d30e0b2a190d-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Metasploit SMB Authentication</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4625|4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)3</field>
        <field name="win.eventdata.authenticationPackageName" negate="no" type="pcre2">(?i)NTLM</field>
        <field name="win.eventdata.workstationName" negate="no" type="pcre2">(?i)^[A-Za-z0-9]{16}$</field>
    </rule>
    <rule id="900262" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_metasploit_authentication.yml</info>
        <!--Sigma Rule Author: Chakib Gzenayi (@Chak092), Hosni Mribah-->
        <!--Description: Alerts on Metasploit host's authentications on the domain.-->
        <!--Date: 2020/05/06-->
        <!--Status: test-->
        <!--ID: 72124974-a68b-4366-b990-d30e0b2a190d-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Metasploit SMB Authentication</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.processName" negate="no" type="pcre2">(?i)None</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4776</field>
        <field name="full_log" negate="no" type="pcre2">(?i)[A-Za-z0-9]{16}</field>
    </rule>
    <rule id="900263" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_dce_rpc_smb_spoolss_named_pipe.yml</info>
        <!--Sigma Rule Author: OTR (Open Threat Research)-->
        <!--Description: Detects the use of the spoolss named pipe over SMB. This can be used to trigger the authentication via NTLM of any machine that has the spoolservice enabled.-->
        <!--Date: 2018/11/28-->
        <!--Status: test-->
        <!--ID: 214e8f95-100a-4e04-bb31-ef6cba8ce07e-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>DCERPC SMB Spoolss Named Pipe</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)\\+.+\\+IPC\$</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)spoolss</field>
    </rule>
    <rule id="900264" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_codeintegrity_check_failure.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects code integrity failures such as missing page hashes or corrupted drivers due unauthorized modification. This could be a sign of tampered binaries.-->
        <!--Date: 2019/12/03-->
        <!--Status: stable-->
        <!--ID: 470ec5fa-7b4e-4071-b200-4c753100f49b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027.001</id>
        </mitre>
        <description>Failed Code Integrity Checks</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5038|6281</field>
    </rule>
    <rule id="900265" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_time_modification.yml</info>
        <!--Sigma Rule Author: @neu5ron-->
        <!--Description: Detect scenarios where a potentially unauthorized application or user is modifying the system time.-->
        <!--Date: 2019/02/05-->
        <!--Status: test-->
        <!--ID: faa031b5-21ed-4e02-8881-2591f98d82ed-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.006</id>
        </mitre>
        <description>Unauthorized System Time Modification</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4616</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+VMware\\+VMware\ Tools\\+vmtoolsd\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+VBoxService\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+oobe\\+msoobe\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+svchost\.exe</field>
        <field name="win.eventdata.subjectUserSid" negate="yes" type="pcre2">(?i)S\-1\-5\-19</field>
    </rule>
    <rule id="900266" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_net_recon_activity.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jack Croock (method), Jonhnathan Ribeiro (improvements), oscd.community-->
        <!--Description: Detects activity as "net user administrator /domain" and "net group domain admins /domain"-->
        <!--Date: 2017/03/07-->
        <!--Status: test-->
        <!--ID: 968eef52-9cff-4454-8992-1e74b9cbad6c-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1087.002</id>
            <id>attack.t1069.002</id>
            <id>attack.s0039</id>
        </mitre>
        <description>Reconnaissance Activity</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4661</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)0x2d</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)SAM_USER|SAM_GROUP</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)^(?:S\-1\-5\-21\-)</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)(?:\-500|\-512)$</field>
    </rule>
    <rule id="900267" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_teams_suspicious_objectaccess.yml</info>
        <!--Sigma Rule Author: @SerkinValery-->
        <!--Description: Detects an access to authentication tokens and accounts of Microsoft Teams desktop application.-->
        <!--Date: 2022/09/16-->
        <!--Status: test-->
        <!--ID: 25cde13e-8e20-4c29-b949-4e795b76f16f-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1528</id>
        </mitre>
        <description>Suspicious Teams Application Related ObjectAcess Event</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4663</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\+Microsoft\\+Teams\\+Cookies|\\+Microsoft\\+Teams\\+Local\ Storage\\+leveldb</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)\\+Microsoft\\+Teams\\+current\\+Teams\.exe</field>
    </rule>
    <rule id="900268" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_aadhealth_svc_agent_regkey_access.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research), MSTIC-->
        <!--Description: This detection uses Windows security events to detect suspicious access attempts to the registry key values and sub-keys of Azure AD Health service agents (e.g AD FS).
Information from AD Health service agents can be used to potentially abuse some of the features provided by those services in the cloud (e.g. Federation).
This detection requires an access control entry (ACE) on the system access control list (SACL) of the following securable object: HKLM:\SOFTWARE\Microsoft\ADHealthAgent.
Make sure you set the SACL to propagate to its sub-keys.
-->
        <!--Date: 2021/08/26-->
        <!--Status: test-->
        <!--ID: 1d2ab8ac-1a01-423b-9c39-001510eae8e8-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1012</id>
        </mitre>
        <description>Azure AD Health Service Agents Registry Keys Access</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656|4663</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)Key</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\+REGISTRY\\+MACHINE\\+SOFTWARE\\+Microsoft\\+ADHealthAgent</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)Microsoft\.Identity\.Health\.Adfs\.DiagnosticsAgent\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)Microsoft\.Identity\.Health\.Adfs\.InsightsService\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)Microsoft\.Identity\.Health\.Adfs\.MonitoringAgent\.Startup\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)Microsoft\.Identity\.Health\.Adfs\.PshSurrogate\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)Microsoft\.Identity\.Health\.Common\.Clients\.ResourceMonitor\.exe</field>
    </rule>
    <rule id="900269" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_user_couldnt_call_priv_service_lsaregisterlogonprocess.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (source), Ilyas Ochkov (rule), oscd.community-->
        <!--Description: The 'LsaRegisterLogonProcess' function verifies that the application making the function call is a logon process by checking that it has the SeTcbPrivilege privilege set. Possible Rubeus tries to get a handle to LSA.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 6daac7fc-77d1-449a-a71a-e6b4d59a0e54-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>User Couldn't Call a Privileged Service 'LsaRegisterLogonProcess'</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4673</field>
        <field name="win.eventdata.service" negate="no" type="pcre2">(?i)LsaRegisterLogonProcess\(\)</field>
        <field name="full_log" negate="no" type="pcre2">(?i)0x8010000000000000</field>
    </rule>
    <rule id="900270" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_invoke_obfuscation_var_services_security.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Environment Variables to execute PowerShell-->
        <!--Date: 2020/10/15-->
        <!--Status: test-->
        <!--ID: dcf2db1f-f091-425b-a821-c05875b8925a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR+ Launcher - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)"set</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\-f</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)/c|/r</field>
    </rule>
    <rule id="900271" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_psexec.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: detects execution of psexec or paexec with renamed service name, this rule helps to filter out the noise if psexec is used for legit purposes or if attacker uses a different psexec client other than sysinternal one-->
        <!--Date: 2019/04/03-->
        <!--Status: test-->
        <!--ID: c462f537-a1e3-41a6-b5fc-b2c2cef9bf82-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Suspicious PsExec Execution</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)\\+.+\\+IPC\$</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)(?:\-stdin|\-stdout|\-stderr)$</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)^(?:PSEXESVC)</field>
    </rule>
    <rule id="900272" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_alert_enable_weak_encryption.yml</info>
        <!--Sigma Rule Author: @neu5ron-->
        <!--Description: Detects scenario where weak encryption is enabled for a user profile which could be used for hash/password cracking.-->
        <!--Date: 2017/07/30-->
        <!--Status: test-->
        <!--ID: f6de9536-0441-4b3f-a646-f4e00f300ffd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Weak Encryption Enabled and Kerberoast</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4738</field>
        <field name="win.eventdata.newUacValue" negate="no" type="pcre2">(?i)(?:8...|9...|A...|B...|C...|D...|E...|F...)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:8...)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:9...)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:A...)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:B...)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:C...)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:D...)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:E...)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:F...)$</field>
    </rule>
    <rule id="900273" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_alert_enable_weak_encryption.yml</info>
        <!--Sigma Rule Author: @neu5ron-->
        <!--Description: Detects scenario where weak encryption is enabled for a user profile which could be used for hash/password cracking.-->
        <!--Date: 2017/07/30-->
        <!--Status: test-->
        <!--ID: f6de9536-0441-4b3f-a646-f4e00f300ffd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Weak Encryption Enabled and Kerberoast</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4738</field>
        <field name="win.eventdata.newUacValue" negate="no" type="pcre2">(?i)(?:8...|9...|A...|B...|C...|D...|E...|F...)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:1....)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:3....)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:5....)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:7....)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:9....)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:B....)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:D....)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:F....)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:1....)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:3....)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:5....)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:7....)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:9....)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:B....)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:D....)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:F....)$</field>
    </rule>
    <rule id="900274" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_alert_enable_weak_encryption.yml</info>
        <!--Sigma Rule Author: @neu5ron-->
        <!--Description: Detects scenario where weak encryption is enabled for a user profile which could be used for hash/password cracking.-->
        <!--Date: 2017/07/30-->
        <!--Status: test-->
        <!--ID: f6de9536-0441-4b3f-a646-f4e00f300ffd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Weak Encryption Enabled and Kerberoast</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4738</field>
        <field name="win.eventdata.newUacValue" negate="no" type="pcre2">(?i)(?:8...|9...|A...|B...|C...|D...|E...|F...)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:1....)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:3....)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:5....)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:7....)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:9....)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:B....)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:D....)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:F....)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:8..)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:9..)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:A..)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:B..)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:C..)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:D..)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:E..)$</field>
        <field name="win.eventdata.newUacValue" negate="yes" type="pcre2">(?i)(?:F..)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:8..)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:9..)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:A..)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:B..)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:C..)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:D..)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:E..)$</field>
        <field name="win.eventdata.oldUacValue" negate="yes" type="pcre2">(?i)(?:F..)$</field>
    </rule>
    <rule id="900275" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_ad_object_writedac_access.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects WRITE_DAC access to a domain object-->
        <!--Date: 2019/09/12-->
        <!--Status: test-->
        <!--ID: 028c7842-4243-41cd-be6f-12f3cf1a26c7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1222.001</id>
        </mitre>
        <description>AD Object WriteDAC Access</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4662</field>
        <field name="win.eventdata.objectServer" negate="no" type="pcre2">(?i)DS</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)0x40000</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)19195a5b\-6da0\-11d0\-afd3\-00c04fd930c9|domainDNS</field>
    </rule>
    <rule id="900276" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_atsvc_task.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detects remote task creation via at.exe or API interacting with ATSVC namedpipe-->
        <!--Date: 2019/04/03-->
        <!--Status: test-->
        <!--ID: f6de6525-4509-495a-8a82-1f8b0ed73a00-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.persistence</id>
            <id>car.2013-05-004</id>
            <id>car.2015-04-001</id>
            <id>attack.t1053.002</id>
        </mitre>
        <description>Remote Task Creation via ATSVC Named Pipe</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)\\+.+\\+IPC\$</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)atsvc</field>
        <field name="win.eventdata.accesses" negate="no" type="pcre2">(?i)WriteData</field>
    </rule>
    <rule id="900277" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_remote_powershell_session.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects basic PowerShell Remoting (WinRM) by monitoring for network inbound connections to ports 5985 OR 5986-->
        <!--Date: 2019/09/12-->
        <!--Status: test-->
        <!--ID: 13acf386-b8c6-4fe0-9a6e-c4756b974698-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Remote PowerShell Sessions Network Connections (WinRM)</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5156</field>
        <field name="win.eventdata.destinationPort" negate="no" type="pcre2">(?i)5985|5986</field>
        <field name="full_log" negate="no" type="pcre2">(?i)44</field>
    </rule>
    <rule id="900278" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_sam_registry_hive_handle_request.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects handles requested to SAM registry hive-->
        <!--Date: 2019/08/12-->
        <!--Status: test-->
        <!--ID: f8748f2c-89dc-4d95-afb0-5a2dfdbad332-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1012</id>
            <id>attack.credential_access</id>
            <id>attack.t1552.002</id>
        </mitre>
        <description>SAM Registry Hive Handle Request</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)Key</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)(?:\\+SAM)$</field>
    </rule>
    <rule id="900279" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_aadhealth_mon_agent_regkey_access.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research), MSTIC-->
        <!--Description: This detection uses Windows security events to detect suspicious access attempts to the registry key of Azure AD Health monitoring agent.
This detection requires an access control entry (ACE) on the system access control list (SACL) of the following securable object HKLM\SOFTWARE\Microsoft\Microsoft Online\Reporting\MonitoringAgent.
-->
        <!--Date: 2021/08/26-->
        <!--Status: test-->
        <!--ID: ff151c33-45fa-475d-af4f-c2f93571f4fe-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1012</id>
        </mitre>
        <description>Azure AD Health Monitoring Agent Registry Keys Access</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656|4663</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)Key</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\+REGISTRY\\+MACHINE\\+SOFTWARE\\+Microsoft\\+Microsoft\ Online\\+Reporting\\+MonitoringAgent</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)Microsoft\.Identity\.Health\.Adfs\.DiagnosticsAgent\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)Microsoft\.Identity\.Health\.Adfs\.InsightsService\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)Microsoft\.Identity\.Health\.Adfs\.MonitoringAgent\.Startup\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)Microsoft\.Identity\.Health\.Adfs\.PshSurrogate\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)Microsoft\.Identity\.Health\.Common\.Clients\.ResourceMonitor\.exe</field>
    </rule>
    <rule id="900280" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_register_new_logon_process_by_rubeus.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (source), Ilyas Ochkov (rule), oscd.community-->
        <!--Description: Detects potential use of Rubeus via registered new trusted logon process-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 12e6d621-194f-4f59-90cc-1959e21e69f7-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>Register new Logon Process by Rubeus</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4611</field>
        <field name="win.eventdata.logonProcessName" negate="no" type="pcre2">(?i)User32LogonProcesss</field>
    </rule>
    <rule id="900281" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_impacket_secretdump.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden, wagga-->
        <!--Description: Detect AD credential dumping using impacket secretdump HKTL-->
        <!--Date: 2019/04/03-->
        <!--Status: test-->
        <!--ID: 252902e3-5830-4cf6-bf21-c22083dfd5cf-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.004</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Possible Impacket SecretDump Remote Activity</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)\\+.+\\+ADMIN\$</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)SYSTEM32\\+</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)\.tmp</field>
    </rule>
    <rule id="900282" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_device_installation_blocked.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects an installation of a device that is forbidden by the system policy-->
        <!--Date: 2022/10/14-->
        <!--Status: test-->
        <!--ID: c9eb55c3-b468-40ab-9089-db2862e42137-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1200</id>
        </mitre>
        <description>Device Installation Blocked</description>
        <options>no_full_log</options>
        <group>security,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)6423</field>
    </rule>
    <rule id="900283" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_invoke_obfuscation_via_rundll_services_security.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via RUNDLL LAUNCHER-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: f241cf1b-3a6b-4e1a-b4f9-133c00dd95ca-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation RUNDLL LAUNCHER - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)powershell</field>
    </rule>
    <rule id="900284" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_adcs_certificate_template_configuration_vulnerability.yml</info>
        <!--Sigma Rule Author: Orlinum , BlueDefenZer-->
        <!--Description: Detects certificate creation with template allowing risk permission subject-->
        <!--Date: 2021/11/17-->
        <!--Status: test-->
        <!--ID: 5ee3a654-372f-11ec-8d3d-0242ac130003-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.credential_access</id>
        </mitre>
        <description>ADCS Certificate Template Configuration Vulnerability</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4898</field>
        <field name="full_log" negate="no" type="pcre2">(?i)CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT</field>
    </rule>
    <rule id="900285" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_adcs_certificate_template_configuration_vulnerability.yml</info>
        <!--Sigma Rule Author: Orlinum , BlueDefenZer-->
        <!--Description: Detects certificate creation with template allowing risk permission subject-->
        <!--Date: 2021/11/17-->
        <!--Status: test-->
        <!--ID: 5ee3a654-372f-11ec-8d3d-0242ac130003-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.credential_access</id>
        </mitre>
        <description>ADCS Certificate Template Configuration Vulnerability</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4899</field>
        <field name="full_log" negate="no" type="pcre2">(?i)CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT</field>
    </rule>
    <rule id="900286" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_invoke_obfuscation_clip_services_security.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Clip.exe to execute PowerShell-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: 4edf51e1-cb83-4e1a-bc39-800e396068e3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation CLIP+ Launcher - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)clipboard\]::</field>
    </rule>
    <rule id="900287" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_local_anon_logon_created.yml</info>
        <!--Sigma Rule Author: James Pemberton / @4A616D6573-->
        <!--Description: Detects the creation of suspicious accounts similar to ANONYMOUS LOGON, such as using additional spaces. Created as an covering detection for exclusion of Logon Type 3 from ANONYMOUS LOGON accounts.-->
        <!--Date: 2019/10/31-->
        <!--Status: test-->
        <!--ID: 1bbf25b9-8038-4154-a50b-118f2a32be27-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1136.001</id>
            <id>attack.t1136.002</id>
        </mitre>
        <description>Suspicious Windows ANONYMOUS LOGON Local Account Created</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4720</field>
        <field name="win.eventdata.samAccountName" negate="no" type="pcre2">(?i)ANONYMOUS</field>
        <field name="win.eventdata.samAccountName" negate="no" type="pcre2">(?i)LOGON</field>
    </rule>
    <rule id="900288" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_meterpreter_or_cobaltstrike_getsystem_service_install.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Ecco, Florian Roth-->
        <!--Description: Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: ecbc5e16-58e0-4521-9c60-eb9a7ea4ad34-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1134.001</id>
            <id>attack.t1134.002</id>
        </mitre>
        <description>Meterpreter or Cobalt Strike Getsystem Service Installation - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\\+pipe\\+</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)%COMSPEC%</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\\+pipe\\+</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)cmd\.exe</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\\+pipe\\+</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\.dll,a</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)/p:</field>
    </rule>
    <rule id="900289" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_rc4_kerberos.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects service ticket requests using RC4 encryption type-->
        <!--Date: 2017/02/06-->
        <!--Status: test-->
        <!--ID: 496a0e47-0a33-4dca-b009-9e6ca3591f39-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>Suspicious Kerberos RC4 Ticket Encryption</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4769</field>
        <field name="win.eventdata.ticketOptions" negate="no" type="pcre2">(?i)0x40810000</field>
        <field name="win.eventdata.ticketEncryptionType" negate="no" type="pcre2">(?i)0x17</field>
        <field name="win.eventdata.serviceName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
    </rule>
    <rule id="900290" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_windows_defender_exclusions_registry_modified.yml</info>
        <!--Sigma Rule Author: @BarryShooshooga-->
        <!--Description: Detects modifications to the Windows Defender exclusion registry key. This could indicate a potentially suspicious or even malicious activity by an attacker trying to add a new exclusion in order to bypass security.
-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: 46a68649-f218-4f86-aea1-16a759d81820-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Exclusion List Modified</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4657</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\+Microsoft\\+Windows\ Defender\\+Exclusions\\+</field>
    </rule>
    <rule id="900291" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_kerberos_manipulation.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This method triggers on rare Kerberos Failure Codes caused by manipulations of Kerberos messages-->
        <!--Date: 2017/02/10-->
        <!--Status: test-->
        <!--ID: f7644214-0eb0-4ace-9455-331ec4c09253-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1212</id>
        </mitre>
        <description>Kerberos Manipulation</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)675|4768|4769|4771</field>
        <field name="win.eventdata.failureCode" negate="no" type="pcre2">(?i)0x9|0xA|0xB|0xF|0x10|0x11|0x13|0x14|0x1A|0x1F|0x21|0x22|0x23|0x24|0x26|0x27|0x28|0x29|0x2C|0x2D|0x2E|0x2F|0x31|0x32|0x3E|0x3F|0x40|0x41|0x43|0x44</field>
    </rule>
    <rule id="900292" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_hybridconnectionmgr_svc_installation.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Rule to detect the Hybrid Connection Manager service installation.-->
        <!--Date: 2021/04/12-->
        <!--Status: test-->
        <!--ID: 0ee4d8a5-4e67-4faf-acfa-62a78457d1f2-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1554</id>
        </mitre>
        <description>HybridConnectionManager Service Installation</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)HybridConnectionManager</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)HybridConnectionManager</field>
    </rule>
    <rule id="900293" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_disable_event_auditing_critical.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects scenarios where system auditing for important events such as "Process Creation" or "Logon" events is disabled.-->
        <!--Date: 2023/06/20-->
        <!--Status: test-->
        <!--ID: ab4561b1-6c7e-48a7-ad08-087cfb9ce8f1-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>Important Windows Event Auditing Disabled</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4719</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\{0CCE9215\-69AE\-11D9\-BED3\-505054503030\}|\{0CCE922B\-69AE\-11D9\-BED3\-505054503030\}|\{0CCE9240\-69AE\-11D9\-BED3\-505054503030\}|\{0CCE9210\-69AE\-11D9\-BED3\-505054503030\}|\{0CCE9211\-69AE\-11D9\-BED3\-505054503030\}|\{0CCE9212\-69AE\-11D9\-BED3\-505054503030\}|\{0CCE921B\-69AE\-11D9\-BED3\-505054503030\}|\{0CCE922F\-69AE\-11D9\-BED3\-505054503030\}|\{0CCE9230\-69AE\-11D9\-BED3\-505054503030\}|\{0CCE9235\-69AE\-11D9\-BED3\-505054503030\}|\{0CCE9236\-69AE\-11D9\-BED3\-505054503030\}|\{0CCE9237\-69AE\-11D9\-BED3\-505054503030\}|\{0CCE923F\-69AE\-11D9\-BED3\-505054503030\}|\{0CCE9242\-69AE\-11D9\-BED3\-505054503030\}</field>
        <field name="full_log" negate="no" type="pcre2">(?i)%%8448|%%8450</field>
    </rule>
    <rule id="900294" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_disable_event_auditing_critical.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects scenarios where system auditing for important events such as "Process Creation" or "Logon" events is disabled.-->
        <!--Date: 2023/06/20-->
        <!--Status: test-->
        <!--ID: ab4561b1-6c7e-48a7-ad08-087cfb9ce8f1-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>Important Windows Event Auditing Disabled</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4719</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\{0CCE9217\-69AE\-11D9\-BED3\-505054503030\}</field>
        <field name="full_log" negate="no" type="pcre2">(?i)%%8448</field>
    </rule>
    <rule id="900295" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_alert_ruler.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This events that are generated when using the hacktool Ruler by Sensepost-->
        <!--Date: 2017/05/31-->
        <!--Status: test-->
        <!--ID: 24549159-ac1b-479c-8175-d42aea947cae-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.execution</id>
            <id>attack.t1087</id>
            <id>attack.t1114</id>
            <id>attack.t1059</id>
            <id>attack.t1550.002</id>
        </mitre>
        <description>Hacktool Ruler</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4776</field>
        <field name="full_log" negate="no" type="pcre2">(?i)RULER</field>
    </rule>
    <rule id="900296" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_alert_ruler.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This events that are generated when using the hacktool Ruler by Sensepost-->
        <!--Date: 2017/05/31-->
        <!--Status: test-->
        <!--ID: 24549159-ac1b-479c-8175-d42aea947cae-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.execution</id>
            <id>attack.t1087</id>
            <id>attack.t1114</id>
            <id>attack.t1059</id>
            <id>attack.t1550.002</id>
        </mitre>
        <description>Hacktool Ruler</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624|4625</field>
        <field name="win.eventdata.workstationName" negate="no" type="pcre2">(?i)RULER</field>
    </rule>
    <rule id="900297" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_service_install_remote_access_software.yml</info>
        <!--Sigma Rule Author: Connor Martin, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects service installation of different remote access tools software. These software are often abused by threat actors to perform-->
        <!--Date: 2022/12/23-->
        <!--Status: experimental-->
        <!--ID: c8b00925-926c-47e3-beea-298fd563728e-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>Remote Access Tool Services Have Been Installed - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)AmmyyAdmin|Atera|BASupportExpressSrvcUpdater|BASupportExpressStandaloneService|chromoting|GoToAssist|GoToMyPC|jumpcloud|LMIGuardianSvc|LogMeIn|monblanking|Parsec|RManService|RPCPerformanceService|RPCService|SplashtopRemoteService|SSUService|TeamViewer|TightVNC|vncserver|Zoho</field>
    </rule>
    <rule id="900298" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_petitpotam_network_share.yml</info>
        <!--Sigma Rule Author: Mauricio Velazco, Michael Haag-->
        <!--Description: Detect PetitPotam coerced authentication activity.-->
        <!--Date: 2021/09/02-->
        <!--Status: test-->
        <!--ID: 1ce8c8a3-2723-48ed-8246-906ac91061a6-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1187</id>
        </mitre>
        <description>Possible PetitPotam Coerce Authentication Attempt</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)^(?:\\+)</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)(?:\\+IPC\$)$</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)lsarpc</field>
        <field name="win.eventdata.subjectUserName" negate="no" type="pcre2">(?i)ANONYMOUS\ LOGON</field>
    </rule>
    <rule id="900299" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_petitpotam_susp_tgt_request.yml</info>
        <!--Sigma Rule Author: Mauricio Velazco, Michael Haag-->
        <!--Description: Detect suspicious Kerberos TGT requests.
Once an attacer obtains a computer certificate by abusing Active Directory Certificate Services in combination with PetitPotam, the next step would be to leverage the certificate for malicious purposes.
One way of doing this is to request a Kerberos Ticket Granting Ticket using a tool like Rubeus.
This request will generate a 4768 event with some unusual fields depending on the environment.
This analytic will require tuning, we recommend filtering Account_Name to the Domain Controller computer accounts.
-->
        <!--Date: 2021/09/02-->
        <!--Status: test-->
        <!--ID: 6a53d871-682d-40b6-83e0-b7c1a6c4e3a5-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1187</id>
        </mitre>
        <description>PetitPotam Suspicious Kerberos TGT Request</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4768</field>
        <field name="win.eventdata.targetUserName" negate="no" type="pcre2">(?i)(?:\$)$</field>
        <field name="full_log" negate="no" type="pcre2">(?i).+</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)::1</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)</field>
    </rule>
    <rule id="900300" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_windows_defender_exclusions_write_access.yml</info>
        <!--Sigma Rule Author: @BarryShooshooga, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects write access requests to the Windows Defender exclusions registry keys. This could be an indication of an attacker trying to request a handle or access the object to write new exclusions in order to bypass security.
-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: e9c8808f-4cfb-4ba9-97d4-e5f3beaa244d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Exclusion Reigstry Key - Write Access Requested</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.accessList" negate="no" type="pcre2">(?i)%%4417|%%4418</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656|4663</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\+Microsoft\\+Windows\ Defender\\+Exclusions\\+</field>
    </rule>
    <rule id="900301" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_dsrm_password_change.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: The Directory Service Restore Mode (DSRM) account is a local administrator account on Domain Controllers. Attackers may change the password to gain persistence.-->
        <!--Date: 2017/02/19-->
        <!--Status: stable-->
        <!--ID: 53ad8e36-f573-46bf-97e4-15ba5bf4bb51-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1098</id>
        </mitre>
        <description>Password Change on Directory Service Restore Mode (DSRM) Account</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4794</field>
    </rule>
    <rule id="900302" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_dpapi_domain_masterkey_backup_attempt.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects anyone attempting a backup for the DPAPI Master Key. This events gets generated at the source and not the Domain Controller.-->
        <!--Date: 2019/08/10-->
        <!--Status: test-->
        <!--ID: 39a94fd1-8c9a-4ff6-bf22-c058762f8014-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.004</id>
        </mitre>
        <description>DPAPI Domain Master Key Backup Attempt</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4692</field>
    </rule>
    <rule id="900303" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_gpo_scheduledtasks.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detect lateral movement using GPO scheduled task, usually used to deploy ransomware at scale-->
        <!--Date: 2019/04/03-->
        <!--Status: test-->
        <!--ID: a8f29a7b-b137-4446-80a0-b804272f3da2-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Persistence and Execution at Scale via GPO Scheduled Task</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)\\+.+\\+SYSVOL</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)(?:ScheduledTasks\.xml)$</field>
        <field name="win.eventdata.accesses" negate="no" type="pcre2">(?i)WriteData|%%4417</field>
    </rule>
    <rule id="900304" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_scm_database_handle_failure.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects non-system users failing to get a handle of the SCM database.-->
        <!--Date: 2019/08/12-->
        <!--Status: test-->
        <!--ID: 13addce7-47b2-4ca0-a98f-1de964d1d669-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1010</id>
        </mitre>
        <description>SCM Database Handle Failure</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)SC_MANAGER\ OBJECT</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)ServicesActive</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)0xf003f</field>
        <field name="win.eventdata.subjectLogonId" negate="yes" type="pcre2">(?i)0x3e4</field>
    </rule>
    <rule id="900305" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_net_ntlm_downgrade.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), wagga-->
        <!--Description: Detects NetNTLM downgrade attack-->
        <!--Date: 2018/03/20-->
        <!--Status: test-->
        <!--ID: d3abac66-f11c-4ed0-8acb-50cc29c97eed-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
            <id>attack.t1112</id>
        </mitre>
        <description>NetNTLM Downgrade Attack</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4657</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\+REGISTRY\\+MACHINE\\+SYSTEM</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)ControlSet</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\+Control\\+Lsa</field>
        <field name="win.eventdata.objectValueName" negate="no" type="pcre2">(?i)LmCompatibilityLevel|NtlmMinClientSec|RestrictSendingNTLMTraffic</field>
    </rule>
    <rule id="900306" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_invoke_obfuscation_via_use_clip_services_security.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Clip.exe in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: 1a0a2ff1-611b-4dac-8216-8a7b47c618a6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Clip - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\(Clipboard\|i</field>
    </rule>
    <rule id="900307" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_syskey_registry_access.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects handle requests and access operations to specific registry keys to calculate the SysKey-->
        <!--Date: 2019/08/12-->
        <!--Status: test-->
        <!--ID: 9a4ff3b8-6187-4fd2-8e8b-e0eae1129495-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1012</id>
        </mitre>
        <description>SysKey Registry Keys Access</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656|4663</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)key</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)(?:lsa\\+JD|lsa\\+GBG|lsa\\+Skew1|lsa\\+Data)$</field>
    </rule>
    <rule id="900308" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_opened_encrypted_zip.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the extraction of password protected ZIP archives. See the filename variable for more details on which file has been opened.-->
        <!--Date: 2022/05/09-->
        <!--Status: test-->
        <!--ID: 00ba9da1-b510-4f6b-b258-8d338836180f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Password Protected ZIP File Opened</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5379</field>
        <field name="win.eventdata.targetName" negate="no" type="pcre2">(?i)Microsoft_Windows_Shell_ZipFolder:filename</field>
        <field name="win.eventdata.targetName" negate="yes" type="pcre2">(?i)\\+Temporary\ Internet\ Files\\+Content\.Outlook</field>
    </rule>
    <rule id="900309" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_add_domain_trust.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Addition of domains is seldom and should be verified for legitimacy.-->
        <!--Date: 2019/12/03-->
        <!--Status: stable-->
        <!--ID: 0255a820-e564-4e40-af2b-6ac61160335c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1098</id>
        </mitre>
        <description>Addition of Domain Trusts</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4706</field>
    </rule>
    <rule id="900310" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_invoke_obfuscation_via_compress_services_security.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via COMPRESS OBFUSCATION-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: 7a922f1b-2635-4d6c-91ef-af228b198ad3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation COMPRESS OBFUSCATION - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)new\-object</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)text\.encoding\]::ascii</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)readtoend</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)system\.io\.compression\.deflatestream|system\.io\.streamreader</field>
    </rule>
    <rule id="900311" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_ldap_dataexchange.yml</info>
        <!--Sigma Rule Author: xknow @xknow_infosec-->
        <!--Description: Detects the usage of particular AttributeLDAPDisplayNames, which are known for data exchange via LDAP by the tool LDAPFragger and are additionally not commonly used in companies.-->
        <!--Date: 2019/03/24-->
        <!--Status: test-->
        <!--ID: d00a9a72-2c09-4459-ad03-5e0a23351e36-->
        <mitre>
            <id>attack.t1001.003</id>
            <id>attack.command_and_control</id>
        </mitre>
        <description>Suspicious LDAP-Attributes Used</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5136</field>
        <field name="win.eventdata.attributeValue" negate="no" type="pcre2">(?i).+</field>
        <field name="win.eventdata.attributeLDAPDisplayName" negate="no" type="pcre2">(?i)primaryInternationalISDNNumber|otherFacsimileTelephoneNumber|primaryTelexNumber</field>
    </rule>
    <rule id="900312" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_dcsync.yml</info>
        <!--Sigma Rule Author: Benjamin Delpy, Florian Roth (Nextron Systems), Scott Dermott, Sorina Ionescu-->
        <!--Description: Detects Mimikatz DC sync security events-->
        <!--Date: 2018/06/03-->
        <!--Status: test-->
        <!--ID: 611eab06-a145-4dfa-a295-3ccc5c20f59a-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.s0002</id>
            <id>attack.t1003.006</id>
        </mitre>
        <description>Mimikatz DC Sync</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4662</field>
        <field name="win.eventdata.properties" negate="no" type="pcre2">(?i)Replicating\ Directory\ Changes\ All|1131f6ad\-9c07\-11d1\-f79f\-00c04fc2dcd2|1131f6aa\-9c07\-11d1\-f79f\-00c04fc2dcd2|9923a32a\-3607\-11d2\-b9be\-0000f87a36b2|89e95b76\-444d\-4c62\-991a\-0facbeda640c</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)0x100</field>
        <field name="win.eventdata.subjectDomainName" negate="yes" type="pcre2">(?i)Window\ Manager</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)^(?:NT\ AUT)</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)^(?:MSOL_)</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
    </rule>
    <rule id="900313" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_rdp_reverse_tunnel.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detects svchost hosting RDP termsvcs communicating with the loopback address-->
        <!--Date: 2019/02/16-->
        <!--Status: test-->
        <!--ID: 5bed80b6-b3e8-428e-a3ae-d3c757589e41-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.command_and_control</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1090.001</id>
            <id>attack.t1090.002</id>
            <id>attack.t1021.001</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>RDP over Reverse SSH Tunnel WFP</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5156</field>
        <field name="win.eventdata.sourcePort" negate="no" type="pcre2">(?i)3389</field>
        <field name="full_log" negate="no" type="pcre2">(?i)127\.|::1</field>
    </rule>
    <rule id="900314" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_rdp_reverse_tunnel.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detects svchost hosting RDP termsvcs communicating with the loopback address-->
        <!--Date: 2019/02/16-->
        <!--Status: test-->
        <!--ID: 5bed80b6-b3e8-428e-a3ae-d3c757589e41-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.command_and_control</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1090.001</id>
            <id>attack.t1090.002</id>
            <id>attack.t1021.001</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>RDP over Reverse SSH Tunnel WFP</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5156</field>
        <field name="win.eventdata.destinationPort" negate="no" type="pcre2">(?i)3389</field>
        <field name="full_log" negate="no" type="pcre2">(?i)127\.|::1</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)AppContainer\ Loopback</field>
        <field name="win.eventdata.application" negate="yes" type="pcre2">(?i)(?:\\+thor\.exe)$</field>
        <field name="win.eventdata.application" negate="yes" type="pcre2">(?i)(?:\\+thor64\.exe)$</field>
    </rule>
    <rule id="900315" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_iso_mount.yml</info>
        <!--Sigma Rule Author: Syed Hasan (@syedhasan009)-->
        <!--Description: Detects the mount of an ISO image on an endpoint-->
        <!--Date: 2021/05/29-->
        <!--Status: test-->
        <!--ID: 0248a7bc-8a9a-4cd8-a57e-3ae8e073a073-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1566.001</id>
        </mitre>
        <description>ISO Image Mounted</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4663</field>
        <field name="win.eventdata.objectServer" negate="no" type="pcre2">(?i)Security</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)File</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)^(?:\\+Device\\+CdRom)</field>
        <field name="win.eventdata.objectName" negate="yes" type="pcre2">(?i)\\+Device\\+CdRom0\\+autorun\.ico</field>
        <field name="win.eventdata.objectName" negate="yes" type="pcre2">(?i)\\+Device\\+CdRom0\\+setup\.exe</field>
        <field name="win.eventdata.objectName" negate="yes" type="pcre2">(?i)\\+Device\\+CdRom0\\+setup64\.exe</field>
    </rule>
    <rule id="900316" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_ad_replication_non_machine_account.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects potential abuse of Active Directory Replication Service (ADRS) from a non machine account to request credentials.-->
        <!--Date: 2019/07/26-->
        <!--Status: test-->
        <!--ID: 17d619c1-e020-4347-957e-1d1207455c93-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.006</id>
        </mitre>
        <description>Active Directory Replication from Non Machine Account</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4662</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)0x100</field>
        <field name="win.eventdata.properties" negate="no" type="pcre2">(?i)1131f6aa\-9c07\-11d1\-f79f\-00c04fc2dcd2|1131f6ad\-9c07\-11d1\-f79f\-00c04fc2dcd2|89e95b76\-444d\-4c62\-991a\-0facbeda640c</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)^(?:MSOL_)</field>
    </rule>
    <rule id="900317" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_ad_user_enumeration.yml</info>
        <!--Sigma Rule Author: Maxime Thiebaut (@0xThiebaut)-->
        <!--Description: Detects read access to a domain user from a non-machine account-->
        <!--Date: 2020/03/30-->
        <!--Status: test-->
        <!--ID: ab6bffca-beff-4baa-af11-6733f296d57a-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1087.002</id>
        </mitre>
        <description>Potential AD User Enumeration From Non-Machine Account</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4662</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)bf967aba\-0de6\-11d0\-a285\-00aa003049e2</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)(?:1.|3.|4.|7.|9.|B.|D.|F.)$</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)^(?:MSOL_)</field>
    </rule>
    <rule id="900318" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_user_added_to_local_administrators.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This rule triggers on user accounts that are added to the local Administrators group, which could be legitimate activity or a sign of privilege escalation activity-->
        <!--Date: 2017/03/14-->
        <!--Status: stable-->
        <!--ID: c265cf08-3f99-46c1-8d59-328247057d57-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1078</id>
            <id>attack.persistence</id>
            <id>attack.t1098</id>
        </mitre>
        <description>User Added to Local Administrators</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4732</field>
        <field name="win.eventdata.targetUserName" negate="no" type="pcre2">(?i)^(?:Administr)</field>
    </rule>
    <rule id="900319" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_user_added_to_local_administrators.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This rule triggers on user accounts that are added to the local Administrators group, which could be legitimate activity or a sign of privilege escalation activity-->
        <!--Date: 2017/03/14-->
        <!--Status: stable-->
        <!--ID: c265cf08-3f99-46c1-8d59-328247057d57-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1078</id>
            <id>attack.persistence</id>
            <id>attack.t1098</id>
        </mitre>
        <description>User Added to Local Administrators</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4732</field>
        <field name="win.eventdata.targetSid" negate="no" type="pcre2">(?i)S\-1\-5\-32\-544</field>
    </rule>
    <rule id="900320" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_user_added_to_local_administrators.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This rule triggers on user accounts that are added to the local Administrators group, which could be legitimate activity or a sign of privilege escalation activity-->
        <!--Date: 2017/03/14-->
        <!--Status: stable-->
        <!--ID: c265cf08-3f99-46c1-8d59-328247057d57-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1078</id>
            <id>attack.persistence</id>
            <id>attack.t1098</id>
        </mitre>
        <description>User Added to Local Administrators</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4732</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
    </rule>
    <rule id="900321" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_impacket_psexec.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects execution of Impacket's psexec.py.-->
        <!--Date: 2020/12/14-->
        <!--Status: test-->
        <!--ID: 32d56ea1-417f-44ff-822b-882873f5f43b-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Impacket PsExec Execution</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)\\+.+\\+IPC\$</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)RemCom_stdin|RemCom_stdout|RemCom_stderr</field>
    </rule>
    <rule id="900322" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_sysmon_channel_reference_deletion.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Potential threat actor tampering with Sysmon manifest and eventually disabling it-->
        <!--Date: 2020/07/14-->
        <!--Status: test-->
        <!--ID: 18beca67-ab3e-4ee3-ba7a-a46ca8d7d0cc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Sysmon Channel Reference Deletion</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4657</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)WINEVT\\+Publishers\\+\{5770385f\-c22a\-43e0\-bf4c\-06f5698ffbd9\}|WINEVT\\+Channels\\+Microsoft\-Windows\-Sysmon/Operational</field>
        <field name="win.eventdata.objectValueName" negate="no" type="pcre2">(?i)Enabled</field>
        <field name="win.eventdata.newValue" negate="no" type="pcre2">(?i)0</field>
    </rule>
    <rule id="900323" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_sysmon_channel_reference_deletion.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Potential threat actor tampering with Sysmon manifest and eventually disabling it-->
        <!--Date: 2020/07/14-->
        <!--Status: test-->
        <!--ID: 18beca67-ab3e-4ee3-ba7a-a46ca8d7d0cc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Sysmon Channel Reference Deletion</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4663</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)WINEVT\\+Publishers\\+\{5770385f\-c22a\-43e0\-bf4c\-06f5698ffbd9\}|WINEVT\\+Channels\\+Microsoft\-Windows\-Sysmon/Operational</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)65536</field>
    </rule>
    <rule id="900324" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_user_logoff.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects a user log-off activity. Could be used for example to correlate information during forensic investigations-->
        <!--Date: 2022/10/14-->
        <!--Status: test-->
        <!--ID: 0badd08f-c6a3-4630-90d3-6875cca440be-->
        <description>User Logoff Event</description>
        <options>no_full_log</options>
        <group>security,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4634|4647</field>
    </rule>
    <rule id="900325" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_invoke_obfuscation_via_stdin_services_security.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via Stdin in Scripts-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: 80b708f3-d034-40e4-a6c8-d23b7a7db3d1-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Stdin - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)set</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)environment|invoke|\$\{input\)</field>
    </rule>
    <rule id="900326" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_lsass_dump.yml</info>
        <!--Sigma Rule Author: sigma-->
        <!--Description: Detects process handle on LSASS process with certain access mask and object type SAM_DOMAIN-->
        <!--Date: 2017/02/12-->
        <!--Status: test-->
        <!--ID: aa1697b7-d611-4f9a-9cb2-5125b4ccfd5c-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Password Dumper Activity on LSASS</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656</field>
        <field name="win.eventdata.processName" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)0x705</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)SAM_DOMAIN</field>
    </rule>
    <rule id="900327" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_failed_logon_reasons.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This method uses uncommon error codes on failed logons to determine suspicious activity and tampering with accounts that have been disabled or somehow restricted.-->
        <!--Date: 2017/02/19-->
        <!--Status: test-->
        <!--ID: 9eb99343-d336-4020-a3cd-67f3819e68ee-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.initial_access</id>
            <id>attack.t1078</id>
        </mitre>
        <description>Account Tampering - Suspicious Failed Logon Reasons</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4625|4776</field>
        <field name="win.eventdata.status" negate="no" type="pcre2">(?i)0xC0000072|0xC000006F|0xC0000070|0xC0000413|0xC000018C|0xC000015B</field>
        <field name="win.eventdata.subjectUserSid" negate="yes" type="pcre2">(?i)S\-1\-0\-0</field>
    </rule>
    <rule id="900328" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_windows_defender_exclusions_write_deleted.yml</info>
        <!--Sigma Rule Author: @BarryShooshooga-->
        <!--Description: Detects when a Windows Defender exclusion has been deleted. This could indicate an attacker trying to delete their tracks by removing the added exclusions
-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: a33f8808-2812-4373-ae95-8cfb82134978-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Exclusion Deleted</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4660</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\+Microsoft\\+Windows\ Defender\\+Exclusions\\+</field>
    </rule>
    <rule id="900329" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_dcom_iertutil_dll_hijack.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g, Open Threat Research (OTR)-->
        <!--Description: Detects a threat actor creating a file named `iertutil.dll` in the `C:\Program Files\Internet Explorer\` directory over the network for a DCOM InternetExplorer DLL Hijack scenario.-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: c39f0c81-7348-4965-ab27-2fde35a1b641-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1021.003</id>
        </mitre>
        <description>DCOM InternetExplorer.Application Iertutil DLL Hijack - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)(?:\\+Internet\ Explorer\\+iertutil\.dll)$</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
    </rule>
    <rule id="900330" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_cobaltstrike_service_installs.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Wojciech Lesicki-->
        <!--Description: Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement-->
        <!--Date: 2021/05/26-->
        <!--Status: test-->
        <!--ID: d7a95147-145f-4678-b85d-d1ff4a3bb3f6-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>CobaltStrike Service Installations - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)ADMIN\$</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\.exe</field>
    </rule>
    <rule id="900331" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_cobaltstrike_service_installs.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Wojciech Lesicki-->
        <!--Description: Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement-->
        <!--Date: 2021/05/26-->
        <!--Status: test-->
        <!--ID: d7a95147-145f-4678-b85d-d1ff4a3bb3f6-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>CobaltStrike Service Installations - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)%COMSPEC%</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)start</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)powershell</field>
    </rule>
    <rule id="900332" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_cobaltstrike_service_installs.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Wojciech Lesicki-->
        <!--Description: Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement-->
        <!--Date: 2021/05/26-->
        <!--Status: test-->
        <!--ID: d7a95147-145f-4678-b85d-d1ff4a3bb3f6-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>CobaltStrike Service Installations - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)powershell\ \-nop\ \-w\ hidden\ \-encodedcommand</field>
    </rule>
    <rule id="900333" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_cobaltstrike_service_installs.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Wojciech Lesicki-->
        <!--Description: Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement-->
        <!--Date: 2021/05/26-->
        <!--Status: test-->
        <!--ID: d7a95147-145f-4678-b85d-d1ff4a3bb3f6-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>CobaltStrike Service Installations - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">IEX\ \(New\-Object\ Net\.Webclient\)\.DownloadString\('http://127\.0\.0\.1:</field>
    </rule>
    <rule id="900334" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_sdelete.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects renaming of file while deletion with SDelete tool.-->
        <!--Date: 2017/06/14-->
        <!--Status: test-->
        <!--ID: 39a80702-d7ca-4a83-b776-525b1f86a36d-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.004</id>
            <id>attack.t1027.005</id>
            <id>attack.t1485</id>
            <id>attack.t1553.002</id>
            <id>attack.s0195</id>
        </mitre>
        <description>Secure Deletion with SDelete</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656|4663|4658</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)(?:\.AAA|\.ZZZ)$</field>
    </rule>
    <rule id="900335" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_invoke_obfuscation_via_use_mshta_services_security.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use MSHTA in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: 9b8d9203-4e0f-4cd9-bb06-4cc4ea6d0e9a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use MSHTA - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)mshta</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)vbscript:createobject</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\.run</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)window\.close</field>
    </rule>
    <rule id="900336" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_user_creation.yml</info>
        <!--Sigma Rule Author: Patrick Bareiss-->
        <!--Description: Detects local user creation on Windows servers, which shouldn't happen in an Active Directory environment. Apply this Sigma Use Case on your Windows server logs and not on your DC logs.-->
        <!--Date: 2019/04/18-->
        <!--Status: test-->
        <!--ID: 66b6be3d-55d0-4f47-9855-d69df21740ea-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1136.001</id>
        </mitre>
        <description>Local User Creation</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4720</field>
    </rule>
    <rule id="900337" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_lsass_dump_generic.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez, Teymur Kheirkhabarov, Dimitrios Slamaris, Mark Russinovich, Aleksey Potapov, oscd.community (update)-->
        <!--Description: Detects process handle on LSASS process with certain access mask-->
        <!--Date: 2019/11/01-->
        <!--Status: experimental-->
        <!--ID: 4a1b6da0-d94f-4fc3-98fc-2d9cb9e5ee76-->
        <mitre>
            <id>attack.credential_access</id>
            <id>car.2019-04-004</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Potentially Suspicious AccessMask Requested From LSASS</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)0x40|0x1400|0x100000|0x1410|0x1010|0x1438|0x143a|0x1418|0x1f0fff|0x1f1fff|0x1f2fff|0x1f3fff</field>
    </rule>
    <rule id="900338" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_lsass_dump_generic.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez, Teymur Kheirkhabarov, Dimitrios Slamaris, Mark Russinovich, Aleksey Potapov, oscd.community (update)-->
        <!--Description: Detects process handle on LSASS process with certain access mask-->
        <!--Date: 2019/11/01-->
        <!--Status: experimental-->
        <!--ID: 4a1b6da0-d94f-4fc3-98fc-2d9cb9e5ee76-->
        <mitre>
            <id>attack.credential_access</id>
            <id>car.2019-04-004</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Potentially Suspicious AccessMask Requested From LSASS</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4663</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.accessList" negate="no" type="pcre2">(?i)4484|4416</field>
    </rule>
    <rule id="900339" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_lsass_dump_generic.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez, Teymur Kheirkhabarov, Dimitrios Slamaris, Mark Russinovich, Aleksey Potapov, oscd.community (update)-->
        <!--Description: Detects process handle on LSASS process with certain access mask-->
        <!--Date: 2019/11/01-->
        <!--Status: experimental-->
        <!--ID: 4a1b6da0-d94f-4fc3-98fc-2d9cb9e5ee76-->
        <mitre>
            <id>attack.credential_access</id>
            <id>car.2019-04-004</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Potentially Suspicious AccessMask Requested From LSASS</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+csrss\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+GamingServices\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+lsm\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+MicrosoftEdgeUpdate\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+minionhost\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+MRT\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+MsMpEng\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+perfmon\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+procexp\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+procexp64\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+svchost\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+taskmgr\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+thor\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+thor64\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+vmtoolsd\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+VsTskMgr\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+wininit\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+wmiprvse\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:RtkAudUService64)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i):\\+ProgramData\\+Microsoft\\+Windows\ Defender\\+Platform\\+</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i):\\+Windows\\+SysNative\\+</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i):\\+Windows\\+System32\\+</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i):\\+Windows\\+SysWow64\\+</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i):\\+Windows\\+Temp\\+asgard2\-agent\\+</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i):\\+Program\ Files</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+taskhostw\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+msiexec\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+CCM\\+CcmExec\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+Sysmon64\.exe)$</field>
        <field name="win.eventdata.accessList" negate="yes" type="pcre2">(?i)%%4484</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i):\\+Windows\\+Temp\\+asgard2\-agent\-sc\\+aurora\\+</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+aurora\-agent\-64\.exe)$</field>
        <field name="win.eventdata.accessList" negate="yes" type="pcre2">(?i)%%4484</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+x64\\+SCENARIOENGINE\.EXE)$</field>
        <field name="win.eventdata.accessList" negate="yes" type="pcre2">(?i)%%4484</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+is\-</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+avira_system_speedup\.tmp)$</field>
        <field name="win.eventdata.accessList" negate="yes" type="pcre2">(?i)%%4484</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i):\\+Windows\\+Temp\\+</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+avira_speedup_setup_update\.tmp)$</field>
        <field name="win.eventdata.accessList" negate="yes" type="pcre2">(?i)%%4484</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+snmp\.exe)$</field>
        <field name="win.eventdata.accessList" negate="yes" type="pcre2">(?i)%%4484</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i):\\+Windows\\+SystemTemp\\+</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+GoogleUpdate\.exe)$</field>
        <field name="win.eventdata.accessList" negate="yes" type="pcre2">(?i)%%4484</field>
    </rule>
    <rule id="900340" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_disable_event_auditing.yml</info>
        <!--Sigma Rule Author: @neu5ron, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects scenarios where system auditing (i.e.: Windows event log auditing) is disabled.
This may be used in a scenario where an entity would want to bypass local logging to evade detection when Windows event logging is enabled and reviewed.
Also, it is recommended to turn off "Local Group Policy Object Processing" via GPO, which will make sure that Active Directory GPOs take precedence over local/edited computer policies via something such as "gpedit.msc".
Please note, that disabling "Local Group Policy Object Processing" may cause an issue in scenarios of one off specific GPO modifications - however, it is recommended to perform these modifications in Active Directory anyways.
-->
        <!--Date: 2017/11/19-->
        <!--Status: test-->
        <!--ID: 69aeb277-f15f-4d2d-b32a-55e883609563-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>Windows Event Auditing Disabled</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4719</field>
        <field name="full_log" negate="no" type="pcre2">(?i)%%8448|%%8450</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\{0CCE9215\-69AE\-11D9\-BED3\-505054503030\}</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\{0CCE922B\-69AE\-11D9\-BED3\-505054503030\}</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\{0CCE9240\-69AE\-11D9\-BED3\-505054503030\}</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\{0CCE9210\-69AE\-11D9\-BED3\-505054503030\}</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\{0CCE9211\-69AE\-11D9\-BED3\-505054503030\}</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\{0CCE9212\-69AE\-11D9\-BED3\-505054503030\}</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\{0CCE921B\-69AE\-11D9\-BED3\-505054503030\}</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\{0CCE922F\-69AE\-11D9\-BED3\-505054503030\}</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\{0CCE9230\-69AE\-11D9\-BED3\-505054503030\}</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\{0CCE9235\-69AE\-11D9\-BED3\-505054503030\}</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\{0CCE9236\-69AE\-11D9\-BED3\-505054503030\}</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\{0CCE9237\-69AE\-11D9\-BED3\-505054503030\}</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\{0CCE923F\-69AE\-11D9\-BED3\-505054503030\}</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\{0CCE9242\-69AE\-11D9\-BED3\-505054503030\}</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\{0CCE9217\-69AE\-11D9\-BED3\-505054503030\}</field>
    </rule>
    <rule id="900341" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_opened_encrypted_zip_outlook.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the extraction of password protected ZIP archives. See the filename variable for more details on which file has been opened.-->
        <!--Date: 2022/05/09-->
        <!--Status: test-->
        <!--ID: 571498c8-908e-40b4-910b-d2369159a3da-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.initial_access</id>
            <id>attack.t1027</id>
            <id>attack.t1566.001</id>
        </mitre>
        <description>Password Protected ZIP File Opened (Email Attachment)</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5379</field>
        <field name="win.eventdata.targetName" negate="no" type="pcre2">(?i)Microsoft_Windows_Shell_ZipFolder:filename</field>
        <field name="win.eventdata.targetName" negate="no" type="pcre2">(?i)\\+Temporary\ Internet\ Files\\+Content\.Outlook</field>
    </rule>
    <rule id="900342" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_add_remove_computer.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the creation or removal of a computer. Can be used to detect attacks such as DCShadow via the creation of a new SPN.-->
        <!--Date: 2022/10/14-->
        <!--Status: test-->
        <!--ID: 20d96d95-5a20-4cf1-a483-f3bda8a7c037-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1207</id>
        </mitre>
        <description>Add or Remove Computer from DC</description>
        <options>no_full_log</options>
        <group>security,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4741|4743</field>
    </rule>
    <rule id="900343" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_scm_database_privileged_operation.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g, Tim Shelton-->
        <!--Description: Detects non-system users performing privileged operation os the SCM database-->
        <!--Date: 2019/08/15-->
        <!--Status: test-->
        <!--ID: dae8171c-5ec6-4396-b210-8466585b53e9-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548</id>
        </mitre>
        <description>SCM Database Privileged Operation</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4674</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)SC_MANAGER\ OBJECT</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)servicesactive</field>
        <field name="win.eventdata.privilegeList" negate="no" type="pcre2">(?i)SeTakeOwnershipPrivilege</field>
        <field name="win.eventdata.subjectLogonId" negate="yes" type="pcre2">(?i)0x3e4</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+services\.exe)$</field>
    </rule>
    <rule id="900344" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_logon_explicit_credentials.yml</info>
        <!--Sigma Rule Author: oscd.community, Teymur Kheirkhabarov @HeirhabarovT, Zach Stanford @svch0st, Tim Shelton-->
        <!--Description: Detects suspicious processes logging on with explicit credentials-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: 941e5c45-cda7-4864-8cea-bbb7458d194a-->
        <mitre>
            <id>attack.t1078</id>
            <id>attack.lateral_movement</id>
        </mitre>
        <description>Suspicious Remote Logon with Explicit Credentials</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4648</field>
        <field name="win.eventdata.processName" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+winrs\.exe|\\+wmic\.exe|\\+net\.exe|\\+net1\.exe|\\+reg\.exe)$</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)localhost</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
        <field name="win.eventdata.targetUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
    </rule>
    <rule id="900345" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_dot_net_etw_tamper.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Potential adversaries stopping ETW providers recording loaded .NET assemblies.-->
        <!--Date: 2020/06/05-->
        <!--Status: test-->
        <!--ID: a4c90ea1-2634-4ca0-adbb-35eae169b6fc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
            <id>attack.t1562</id>
        </mitre>
        <description>ETW Logging Disabled In .NET Processes - Registry</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4657</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)(?:\\+SOFTWARE\\+Microsoft\\+\.NETFramework)$</field>
        <field name="win.eventdata.objectValueName" negate="no" type="pcre2">(?i)ETWEnabled</field>
        <field name="win.eventdata.newValue" negate="no" type="pcre2">(?i)0</field>
    </rule>
    <rule id="900346" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_dot_net_etw_tamper.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Potential adversaries stopping ETW providers recording loaded .NET assemblies.-->
        <!--Date: 2020/06/05-->
        <!--Status: test-->
        <!--ID: a4c90ea1-2634-4ca0-adbb-35eae169b6fc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
            <id>attack.t1562</id>
        </mitre>
        <description>ETW Logging Disabled In .NET Processes - Registry</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4657</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\+Environment</field>
        <field name="win.eventdata.objectValueName" negate="no" type="pcre2">(?i)COMPlus_ETWEnabled|COMPlus_ETWFlags</field>
        <field name="win.eventdata.newValue" negate="no" type="pcre2">(?i)0</field>
    </rule>
    <rule id="900347" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_camera_microphone_access.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Potential adversaries accessing the microphone and webcam in an endpoint.-->
        <!--Date: 2020/06/07-->
        <!--Status: test-->
        <!--ID: 8cd538a4-62d5-4e83-810b-12d41e428d6e-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1123</id>
        </mitre>
        <description>Processes Accessing the Microphone and Webcam</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4657|4656|4663</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+CapabilityAccessManager\\+ConsentStore\\+microphone\\+NonPackaged|\\+SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+CapabilityAccessManager\\+ConsentStore\\+webcam\\+NonPackaged</field>
    </rule>
    <rule id="900348" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_mal_creddumper.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Teymur Kheirkhabarov, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects well-known credential dumping tools execution via service execution events-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: f0d1feba-4344-4ca9-8121-a6c97bd6df52-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.execution</id>
            <id>attack.t1003.001</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.004</id>
            <id>attack.t1003.005</id>
            <id>attack.t1003.006</id>
            <id>attack.t1569.002</id>
            <id>attack.s0005</id>
        </mitre>
        <description>Credential Dumping Tools Service Execution - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)cachedump|dumpsvc|fgexec|gsecdump|mimidrv|pwdump|servpw</field>
    </rule>
    <rule id="900349" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_powershell_script_installed_as_service.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: Detects powershell script installed as a Service-->
        <!--Date: 2020/10/06-->
        <!--Status: test-->
        <!--ID: 2a926e6a-4b81-4011-8a96-e36cc8c04302-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>PowerShell Scripts Installed as Services - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)powershell|pwsh</field>
    </rule>
    <rule id="900350" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_registry_permissions_weakness_check.yml</info>
        <!--Sigma Rule Author: Center for Threat Informed Defense (CTID) Summiting the Pyramid Team-->
        <!--Description: Detects "read access" requests on the services registry key.
Adversaries may execute their own malicious payloads by hijacking the Registry entries used by services.
Adversaries may use flaws in the permissions for Registry keys related to services to redirect from the originally specified executable to one that they control, in order to launch their own code when a service starts.
-->
        <!--Date: 2023/09/28-->
        <!--Status: experimental-->
        <!--ID: 11d00fff-5dc3-428c-8184-801f292faec0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1574.011</id>
        </mitre>
        <description>Service Registry Key Read Access Request</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4663</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)\\+SYSTEM\\+</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)ControlSet\\+Services\\+</field>
        <field name="win.eventdata.accessList" negate="no" type="pcre2">(?i)%%1538</field>
    </rule>
    <rule id="900351" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_transf_files_with_cred_data_via_network_shares.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, oscd.community-->
        <!--Description: Transferring files with well-known filenames (sensitive files with credential data) using network shares-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: 910ab938-668b-401b-b08c-b596e80fdca5-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.001</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Transferring Files with Credential Data via Network Shares</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)\\+mimidrv|\\+lsass|\\+windows\\+minidump\\+|\\+hiberfil|\\+sqldmpr|\\+sam|\\+ntds\.dit|\\+security</field>
    </rule>
    <rule id="900352" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_lm_namedpipe.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: This detection excludes known namped pipes accessible remotely and notify on newly observed ones, may help to detect lateral movement and remote exec using named pipes-->
        <!--Date: 2019/04/03-->
        <!--Status: test-->
        <!--ID: 52d8b0c6-53d6-439a-9e41-52ad442ad9ad-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>First Time Seen Remote Named Pipe</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)\\+.+\\+IPC\$</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)atsvc</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)samr</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)lsarpc</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)lsass</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)winreg</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)netlogon</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)srvsvc</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)protected_storage</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)wkssvc</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)browser</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)netdfs</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)svcctl</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)spoolss</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)ntsvcs</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)LSM_API_service</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)HydraLsPipe</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)TermSrv_API_service</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)MsFteWds</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)sql\\+query</field>
        <field name="win.eventdata.relativeTargetName" negate="yes" type="pcre2">(?i)eventlog</field>
    </rule>
    <rule id="900353" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_pcap_drivers.yml</info>
        <!--Sigma Rule Author: Cian Heasley-->
        <!--Description: Detects Windows Pcap driver installation based on a list of associated .sys files.-->
        <!--Date: 2020/06/10-->
        <!--Status: test-->
        <!--ID: 7b687634-ab20-11ea-bb37-0242ac130002-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.credential_access</id>
            <id>attack.t1040</id>
        </mitre>
        <description>Windows Pcap Drivers</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)pcap|npcap|npf|nm3|ndiscap|nmnt|windivert|USBPcap|pktmon</field>
    </rule>
    <rule id="900354" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_add_sid_history.yml</info>
        <!--Sigma Rule Author: Thomas Patzke, @atc_project (improvements)-->
        <!--Description: An attacker can use the SID history attribute to gain additional privileges.-->
        <!--Date: 2017/02/19-->
        <!--Status: stable-->
        <!--ID: 2632954e-db1c-49cb-9936-67d1ef1d17d2-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1134.005</id>
        </mitre>
        <description>Addition of SID History to Active Directory Object</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4765|4766</field>
    </rule>
    <rule id="900355" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_add_sid_history.yml</info>
        <!--Sigma Rule Author: Thomas Patzke, @atc_project (improvements)-->
        <!--Description: An attacker can use the SID history attribute to gain additional privileges.-->
        <!--Date: 2017/02/19-->
        <!--Status: stable-->
        <!--ID: 2632954e-db1c-49cb-9936-67d1ef1d17d2-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1134.005</id>
        </mitre>
        <description>Addition of SID History to Active Directory Object</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4738</field>
        <field name="win.eventdata.sidHistory" negate="yes" type="pcre2">(?i)\-</field>
        <field name="win.eventdata.sidHistory" negate="yes" type="pcre2">(?i)%%1793</field>
        <field name="win.eventdata.sidHistory" negate="no" type="pcre2">(?i)None</field>
    </rule>
    <rule id="900356" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_computer_name.yml</info>
        <!--Sigma Rule Author: elhoim-->
        <!--Description: Detects suspicious computer name samtheadmin-{1..100}$ generated by hacktool-->
        <!--Date: 2022/09/09-->
        <!--Status: test-->
        <!--ID: 39698b3f-da92-4bc6-bfb5-645a98386e45-->
        <mitre>
            <id>cve.2021.42278</id>
            <id>cve.2021.42287</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1078</id>
        </mitre>
        <description>Win Susp Computer Name Containing Samtheadmin</description>
        <options>no_full_log</options>
        <group>security,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.samAccountName" negate="no" type="pcre2">(?i)^(?:SAMTHEADMIN\-)</field>
        <field name="win.eventdata.samAccountName" negate="no" type="pcre2">(?i)(?:\$)$</field>
    </rule>
    <rule id="900357" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_computer_name.yml</info>
        <!--Sigma Rule Author: elhoim-->
        <!--Description: Detects suspicious computer name samtheadmin-{1..100}$ generated by hacktool-->
        <!--Date: 2022/09/09-->
        <!--Status: test-->
        <!--ID: 39698b3f-da92-4bc6-bfb5-645a98386e45-->
        <mitre>
            <id>cve.2021.42278</id>
            <id>cve.2021.42287</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1078</id>
        </mitre>
        <description>Win Susp Computer Name Containing Samtheadmin</description>
        <options>no_full_log</options>
        <group>security,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetUserName" negate="no" type="pcre2">(?i)^(?:SAMTHEADMIN\-)</field>
        <field name="win.eventdata.targetUserName" negate="no" type="pcre2">(?i)(?:\$)$</field>
    </rule>
    <rule id="900358" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_not_allowed_rdp_access.yml</info>
        <!--Sigma Rule Author: Pushkarev Dmitry-->
        <!--Description: This event is generated when an authenticated user who is not allowed to log on remotely attempts to connect to this computer through Remote Desktop.
Often, this event can be generated by attackers when searching for available windows servers in the network.
-->
        <!--Date: 2020/06/27-->
        <!--Status: test-->
        <!--ID: 8e5c03fa-b7f0-11ea-b242-07e0576828d9-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.001</id>
        </mitre>
        <description>Denied Access To Remote Desktop</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4825</field>
    </rule>
    <rule id="900359" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_raccess_sensitive_fext.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detects known sensitive file extensions accessed on a network share-->
        <!--Date: 2019/04/03-->
        <!--Status: test-->
        <!--ID: 91c945bc-2ad1-4799-a591-4d00198a1215-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1039</id>
        </mitre>
        <description>Suspicious Access to Sensitive File Extensions</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)(?:\.pst|\.ost|\.msg|\.nst|\.oab|\.edb|\.nsf|\.bak|\.dmp|\.kirbi|\\+groups\.xml|\.rdp)$</field>
    </rule>
    <rule id="900360" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_invoke_obfuscation_via_var_services_security.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via VAR++ LAUNCHER-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: 4c54ba8f-73d2-4d40-8890-d9cf1dca3d30-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\&amp;\&amp;set</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\-f</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\{0\}|\{1\}|\{2\}|\{3\}|\{4\}|\{5\}</field>
    </rule>
    <rule id="900361" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_lsass_access_non_system_account.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects potential mimikatz-like tools accessing LSASS from non system account-->
        <!--Date: 2019/06/20-->
        <!--Status: test-->
        <!--ID: 962fe167-e48d-4fd6-9974-11e5b9a5d6d1-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>LSASS Access from Non System Account</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4663|4656</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)0x40|0x1400|0x100000|0x1410|0x1010|0x1438|0x143a|0x1418|0x1f0fff|0x1f1fff|0x1f2fff|0x1f3fff|40|1400|1000|100000|1410|1010|1438|143a|1418|1f0fff|1f1fff|1f2fff|1f3fff</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)Process</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files)</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+wbem\\+WmiPrvSE\.exe</field>
        <field name="win.eventdata.accessMask" negate="yes" type="pcre2">(?i)0x1410</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)\\+SteamLibrary\\+steamapps\\+</field>
    </rule>
    <rule id="900362" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_eventlog_cleared.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: One of the Windows Eventlogs has been cleared. e.g. caused by "wevtutil cl" command execution-->
        <!--Date: 2017/01/10-->
        <!--Status: test-->
        <!--ID: d99b79d2-0a6f-4f46-ad8b-260b6e17f982-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.001</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>Security Eventlog Cleared</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)517</field>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Security</field>
    </rule>
    <rule id="900363" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_eventlog_cleared.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: One of the Windows Eventlogs has been cleared. e.g. caused by "wevtutil cl" command execution-->
        <!--Date: 2017/01/10-->
        <!--Status: test-->
        <!--ID: d99b79d2-0a6f-4f46-ad8b-260b6e17f982-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.001</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>Security Eventlog Cleared</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1102</field>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Eventlog</field>
    </rule>
    <rule id="900364" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_vssaudit_secevent_source_registration.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g, Open Threat Research (OTR)-->
        <!--Description: Detects the registration of the security event source VSSAudit. It would usually trigger when volume shadow copy operations happen.-->
        <!--Date: 2020/10/20-->
        <!--Status: test-->
        <!--ID: e9faba72-4974-4ab2-a4c5-46e25ad59e9b-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>VSSAudit Security Event Source Registration</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.auditSourceName" negate="no" type="pcre2">(?i)VSSAudit</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4904|4905</field>
    </rule>
    <rule id="900365" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_adcs_certificate_template_configuration_vulnerability_eku.yml</info>
        <!--Sigma Rule Author: Orlinum , BlueDefenZer-->
        <!--Description: Detects certificate creation with template allowing risk permission subject and risky EKU-->
        <!--Date: 2021/11/17-->
        <!--Status: test-->
        <!--ID: bfbd3291-de87-4b7c-88a2-d6a5deb28668-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.credential_access</id>
        </mitre>
        <description>ADCS Certificate Template Configuration Vulnerability with Risky EKU</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4898</field>
        <field name="full_log" negate="no" type="pcre2">(?i)1\.3\.6\.1\.5\.5\.7\.3\.2|1\.3\.6\.1\.5\.2\.3\.4|1\.3\.6\.1\.4\.1\.311\.20\.2\.2|2\.5\.29\.37\.0</field>
        <field name="full_log" negate="no" type="pcre2">(?i)CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT</field>
    </rule>
    <rule id="900366" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_adcs_certificate_template_configuration_vulnerability_eku.yml</info>
        <!--Sigma Rule Author: Orlinum , BlueDefenZer-->
        <!--Description: Detects certificate creation with template allowing risk permission subject and risky EKU-->
        <!--Date: 2021/11/17-->
        <!--Status: test-->
        <!--ID: bfbd3291-de87-4b7c-88a2-d6a5deb28668-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.credential_access</id>
        </mitre>
        <description>ADCS Certificate Template Configuration Vulnerability with Risky EKU</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4898</field>
        <field name="full_log" negate="no" type="pcre2">(?i)1\.3\.6\.1\.5\.5\.7\.3\.2|1\.3\.6\.1\.5\.2\.3\.4|1\.3\.6\.1\.4\.1\.311\.20\.2\.2|2\.5\.29\.37\.0</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4899</field>
        <field name="full_log" negate="no" type="pcre2">(?i)1\.3\.6\.1\.5\.5\.7\.3\.2|1\.3\.6\.1\.5\.2\.3\.4|1\.3\.6\.1\.4\.1\.311\.20\.2\.2|2\.5\.29\.37\.0</field>
        <field name="full_log" negate="no" type="pcre2">(?i)CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT</field>
    </rule>
    <rule id="900367" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_alert_ad_user_backdoors.yml</info>
        <!--Sigma Rule Author: @neu5ron-->
        <!--Description: Detects scenarios where one can control another users or computers account without having to use their credentials.-->
        <!--Date: 2017/04/13-->
        <!--Status: test-->
        <!--ID: 300bac00-e041-4ee2-9c36-e262656a6ecc-->
        <mitre>
            <id>attack.t1098</id>
            <id>attack.persistence</id>
        </mitre>
        <description>Active Directory User Backdoors</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4738</field>
        <field name="win.eventdata.allowedToDelegateTo" negate="yes" type="pcre2">(?i)\-</field>
        <field name="win.eventdata.allowedToDelegateTo" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="900368" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_alert_ad_user_backdoors.yml</info>
        <!--Sigma Rule Author: @neu5ron-->
        <!--Description: Detects scenarios where one can control another users or computers account without having to use their credentials.-->
        <!--Date: 2017/04/13-->
        <!--Status: test-->
        <!--ID: 300bac00-e041-4ee2-9c36-e262656a6ecc-->
        <mitre>
            <id>attack.t1098</id>
            <id>attack.persistence</id>
        </mitre>
        <description>Active Directory User Backdoors</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5136</field>
        <field name="win.eventdata.attributeLDAPDisplayName" negate="no" type="pcre2">(?i)msDS\-AllowedToDelegateTo</field>
    </rule>
    <rule id="900369" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_alert_ad_user_backdoors.yml</info>
        <!--Sigma Rule Author: @neu5ron-->
        <!--Description: Detects scenarios where one can control another users or computers account without having to use their credentials.-->
        <!--Date: 2017/04/13-->
        <!--Status: test-->
        <!--ID: 300bac00-e041-4ee2-9c36-e262656a6ecc-->
        <mitre>
            <id>attack.t1098</id>
            <id>attack.persistence</id>
        </mitre>
        <description>Active Directory User Backdoors</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5136</field>
        <field name="win.eventdata.objectClass" negate="no" type="pcre2">(?i)user</field>
        <field name="win.eventdata.attributeLDAPDisplayName" negate="no" type="pcre2">(?i)servicePrincipalName</field>
    </rule>
    <rule id="900370" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_alert_ad_user_backdoors.yml</info>
        <!--Sigma Rule Author: @neu5ron-->
        <!--Description: Detects scenarios where one can control another users or computers account without having to use their credentials.-->
        <!--Date: 2017/04/13-->
        <!--Status: test-->
        <!--ID: 300bac00-e041-4ee2-9c36-e262656a6ecc-->
        <mitre>
            <id>attack.t1098</id>
            <id>attack.persistence</id>
        </mitre>
        <description>Active Directory User Backdoors</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5136</field>
        <field name="win.eventdata.attributeLDAPDisplayName" negate="no" type="pcre2">(?i)msDS\-AllowedToActOnBehalfOfOtherIdentity</field>
    </rule>
    <rule id="900371" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_net_share_obj_susp_desktop_ini.yml</info>
        <!--Sigma Rule Author: Tim Shelton (HAWK.IO)-->
        <!--Description: Detects unusual processes accessing desktop.ini remotely over network share, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk.-->
        <!--Date: 2021/12/06-->
        <!--Status: test-->
        <!--ID: 35bc7e28-ee6b-492f-ab04-da58fcf6402e-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.009</id>
        </mitre>
        <description>Windows Network Access Suspicious desktop.ini Action</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)File</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)(?:\\+desktop\.ini)$</field>
        <field name="win.eventdata.accessList" negate="no" type="pcre2">(?i)WriteData|DELETE|WriteDAC|AppendData|AddSubdirectory</field>
    </rule>
    <rule id="900372" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_outbound_kerberos_connection.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, oscd.community-->
        <!--Description: Detects suspicious outbound network activity via kerberos default port indicating possible lateral movement or first stage PrivEsc via delegation.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: eca91c7c-9214-47b9-b4c5-cb1d7e4f2350-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>Suspicious Outbound Kerberos Connection - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5156</field>
        <field name="win.eventdata.destinationPort" negate="no" type="pcre2">(?i)88</field>
        <field name="win.eventdata.application" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+lsass\.exe</field>
        <field name="win.eventdata.application" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="win.eventdata.application" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="win.eventdata.application" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Mozilla\ Firefox\\+firefox\.exe</field>
        <field name="win.eventdata.application" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Mozilla\ Firefox\\+firefox\.exe</field>
    </rule>
    <rule id="900373" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_new_or_renamed_user_account_with_dollar_sign.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, oscd.community-->
        <!--Description: Detects possible bypass EDR and SIEM via abnormal user account name.-->
        <!--Date: 2019/10/25-->
        <!--Status: test-->
        <!--ID: cfeed607-6aa4-4bbd-9627-b637deb723c8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>New or Renamed User Account with '$' in Attribute 'SamAccountName'</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4720</field>
        <field name="win.eventdata.samAccountName" negate="no" type="pcre2">(?i)\$</field>
    </rule>
    <rule id="900374" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_new_or_renamed_user_account_with_dollar_sign.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, oscd.community-->
        <!--Description: Detects possible bypass EDR and SIEM via abnormal user account name.-->
        <!--Date: 2019/10/25-->
        <!--Status: test-->
        <!--ID: cfeed607-6aa4-4bbd-9627-b637deb723c8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>New or Renamed User Account with '$' in Attribute 'SamAccountName'</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4781</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\$</field>
    </rule>
    <rule id="900375" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_admin_share_access.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects access to $ADMIN share-->
        <!--Date: 2017/03/04-->
        <!--Status: test-->
        <!--ID: 098d7118-55bc-4912-a836-dc6483a8d150-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Access to ADMIN$ Share</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5140</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)Admin\$</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
    </rule>
    <rule id="900376" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_admin_logon.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects logon with "Special groups" and "Special Privileges" can be thought of as Administrator groups or privileges.-->
        <!--Date: 2022/10/14-->
        <!--Status: test-->
        <!--ID: 94309181-d345-4cbf-b5fe-061769bdf9cb-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.lateral_movement</id>
            <id>attack.credential_access</id>
            <id>attack.t1558</id>
            <id>attack.t1649</id>
            <id>attack.t1550</id>
        </mitre>
        <description>User with Privileges Logon</description>
        <options>no_full_log</options>
        <group>security,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4672|4964</field>
        <field name="win.eventdata.subjectUserSid" negate="yes" type="pcre2">(?i)S\-1\-5\-18</field>
    </rule>
    <rule id="900377" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_workstation_was_locked.yml</info>
        <!--Sigma Rule Author: Alexandr Yampolskyi, SOC Prime-->
        <!--Description: Automatically lock workstation sessions after a standard period of inactivity.
The case is not applicable for Unix OS. Supported OS - Windows 2008 R2 and 7, Windows 2012 R2 and 8.1, Windows 2016 and 10 Windows Server 2019.
-->
        <!--Date: 2019/03/26-->
        <!--Status: stable-->
        <!--ID: 411742ad-89b0-49cb-a7b0-3971b5c1e0a4-->
        <description>Locked Workstation</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4800</field>
    </rule>
    <rule id="900378" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_tap_driver_installation.yml</info>
        <!--Sigma Rule Author: Daniil Yugoslavskiy, Ian Davis, oscd.community-->
        <!--Description: Well-known TAP software installation. Possible preparation for data exfiltration using tunnelling techniques-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 9c8afa4d-0022-48f0-9456-3712466f9701-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048</id>
        </mitre>
        <description>Tap Driver Installation - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)tap0901</field>
    </rule>
    <rule id="900379" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_wmi_persistence.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Gleb Sukhodolskiy, Timur Zinniatullin oscd.community-->
        <!--Description: Detects suspicious WMI event filter and command line event consumer based on WMI and Security Logs.-->
        <!--Date: 2017/08/22-->
        <!--Status: test-->
        <!--ID: f033f3f3-fd24-4995-97d8-a3bb17550a88-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.003</id>
        </mitre>
        <description>WMI Persistence - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4662</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)WMI\ Namespace</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)subscription</field>
    </rule>
    <rule id="900380" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_hidden_user_creation.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the creation of a local hidden user account which should not happen for event ID 4720.-->
        <!--Date: 2021/05/03-->
        <!--Status: test-->
        <!--ID: 7b449a5e-1db5-4dd0-a2dc-4e3a67282538-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1136.001</id>
        </mitre>
        <description>Hidden Local User Creation</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4720</field>
        <field name="win.eventdata.targetUserName" negate="no" type="pcre2">(?i)(?:\$)$</field>
    </rule>
    <rule id="900381" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_protected_storage_service_access.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects access to a protected_storage service over the network. Potential abuse of DPAPI to extract domain backup keys from Domain Controllers-->
        <!--Date: 2019/08/10-->
        <!--Status: test-->
        <!--ID: 45545954-4016-43c6-855e-eae8f1c369dc-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Protected Storage Service Access</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)IPC</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)protected_storage</field>
    </rule>
    <rule id="900382" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_account_discovery.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detect priv users or groups recon based on 4661 eventid and known privileged users or groups SIDs-->
        <!--Date: 2019/04/03-->
        <!--Status: test-->
        <!--ID: 35ba1d85-724d-42a3-889f-2e2362bcaf23-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1087.002</id>
        </mitre>
        <description>AD Privileged Users or Groups Reconnaissance</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4661</field>
        <field name="win.eventdata.objectType" negate="no" type="pcre2">(?i)SAM_USER|SAM_GROUP</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)(?:\-512|\-502|\-500|\-505|\-519|\-520|\-544|\-551|\-555)$</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)admin</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
    </rule>
    <rule id="900383" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_replay_attack_detected.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects possible Kerberos Replay Attack on the domain controllers when "KRB_AP_ERR_REPEAT" Kerberos response is sent to the client-->
        <!--Date: 2022/10/14-->
        <!--Status: test-->
        <!--ID: 5a44727c-3b85-4713-8c44-4401d5499629-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558</id>
        </mitre>
        <description>Replay Attack Detected</description>
        <options>no_full_log</options>
        <group>security,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4649</field>
    </rule>
    <rule id="900384" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_user_driver_loaded.yml</info>
        <!--Sigma Rule Author: xknow (@xknow_infosec), xorxes (@xor_xes)-->
        <!--Description: Detects the usage of the 'SeLoadDriverPrivilege' privilege. This privilege is required to load or unload a device driver.
With this privilege, the user can dynamically load and unload device drivers or other code in to kernel mode.
This user right does not apply to Plug and Play device drivers.
If you exclude privileged users/admins and processes, which are allowed to do so, you are maybe left with bad programs trying to load malicious kernel drivers.
This will detect Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs) and the usage of Sysinternals and various other tools. So you have to work with a whitelist to find the bad stuff.
-->
        <!--Date: 2019/04/08-->
        <!--Status: test-->
        <!--ID: f63508a0-c809-4435-b3be-ed819394d612-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Potential Privileged System Service Operation - SeLoadDriverPrivilege</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4673</field>
        <field name="win.eventdata.privilegeList" negate="no" type="pcre2">(?i)SeLoadDriverPrivilege</field>
        <field name="win.eventdata.service" negate="no" type="pcre2">(?i)\-</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+Dism\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+rundll32\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+fltMC\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+HelpPane\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+mmc\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+svchost\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+wimserv\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+RuntimeBroker\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+SystemSettingsBroker\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+explorer\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+procexp64\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+procexp\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+procmon64\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+procmon\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+Google\\+Chrome\\+Application\\+chrome\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Microsoft\\+Teams\\+current\\+Teams\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+WindowsApps\\+Microsoft)</field>
    </rule>
    <rule id="900385" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_mal_wceaux_dll.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects wceaux.dll access while WCE pass-the-hash remote command execution on source host-->
        <!--Date: 2017/06/14-->
        <!--Status: test-->
        <!--ID: 1de68c67-af5c-4097-9c85-fe5578e09e67-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
            <id>attack.s0005</id>
        </mitre>
        <description>WCE wceaux.dll Access</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4656|4658|4660|4663</field>
        <field name="win.eventdata.objectName" negate="no" type="pcre2">(?i)(?:\\+wceaux\.dll)$</field>
    </rule>
    <rule id="900386" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_password_policy_enumerated.yml</info>
        <!--Sigma Rule Author: Zach Mathis-->
        <!--Description: Detects when the password policy is enumerated.-->
        <!--Date: 2023/05/19-->
        <!--Status: experimental-->
        <!--ID: 12ba6a38-adb3-4d6b-91ba-a7fb248e3199-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1201</id>
        </mitre>
        <description>Password Policy Enumerated</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4661</field>
        <field name="win.eventdata.accessList" negate="no" type="pcre2">(?i)%%5392</field>
        <field name="win.eventdata.objectServer" negate="no" type="pcre2">(?i)Security\ Account\ Manager</field>
    </rule>
    <rule id="900387" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_external_device.yml</info>
        <!--Sigma Rule Author: Keith Wright-->
        <!--Description: Detects external diskdrives or plugged in USB devices, EventID 6416 on Windows 10 or later-->
        <!--Date: 2019/11/20-->
        <!--Status: test-->
        <!--ID: f69a87ea-955e-4fb4-adb2-bb9fd6685632-->
        <mitre>
            <id>attack.t1091</id>
            <id>attack.t1200</id>
            <id>attack.lateral_movement</id>
            <id>attack.initial_access</id>
        </mitre>
        <description>External Disk Drive Or USB Storage Device</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)6416</field>
        <field name="full_log" negate="no" type="pcre2">(?i)DiskDrive</field>
    </rule>
    <rule id="900388" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_external_device.yml</info>
        <!--Sigma Rule Author: Keith Wright-->
        <!--Description: Detects external diskdrives or plugged in USB devices, EventID 6416 on Windows 10 or later-->
        <!--Date: 2019/11/20-->
        <!--Status: test-->
        <!--ID: f69a87ea-955e-4fb4-adb2-bb9fd6685632-->
        <mitre>
            <id>attack.t1091</id>
            <id>attack.t1200</id>
            <id>attack.lateral_movement</id>
            <id>attack.initial_access</id>
        </mitre>
        <description>External Disk Drive Or USB Storage Device</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.deviceDescription" negate="no" type="pcre2">(?i)USB\ Mass\ Storage\ Device</field>
    </rule>
    <rule id="900389" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_account_backdoor_dcsync_rights.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden; Roberto Rodriguez @Cyb3rWard0g; oscd.community; Tim Shelton; Maxence Fossat-->
        <!--Description: Backdooring domain object to grant the rights associated with DCSync to a regular user or machine account using Powerview\Add-DomainObjectAcl DCSync Extended Right cmdlet, will allow to re-obtain the pwd hashes of any user/computer-->
        <!--Date: 2019/04/03-->
        <!--Status: test-->
        <!--ID: 2c99737c-585d-4431-b61a-c911d86ff32f-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1098</id>
        </mitre>
        <description>Powerview Add-DomainObjectAcl DCSync AD Extend Right</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5136</field>
        <field name="win.eventdata.attributeLDAPDisplayName" negate="no" type="pcre2">(?i)ntSecurityDescriptor</field>
        <field name="win.eventdata.attributeValue" negate="no" type="pcre2">(?i)1131f6ad\-9c07\-11d1\-f79f\-00c04fc2dcd2|1131f6aa\-9c07\-11d1\-f79f\-00c04fc2dcd2|89e95b76\-444d\-4c62\-991a\-0facbeda640c</field>
        <field name="win.eventdata.objectClass" negate="yes" type="pcre2">(?i)dnsNode</field>
        <field name="win.eventdata.objectClass" negate="yes" type="pcre2">(?i)dnsZoneScope</field>
        <field name="win.eventdata.objectClass" negate="yes" type="pcre2">(?i)dnsZone</field>
    </rule>
    <rule id="900390" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_metasploit_or_impacket_smb_psexec_service_install.yml</info>
        <!--Sigma Rule Author: Bartlomiej Czyz, Relativity-->
        <!--Description: Detects usage of Metasploit SMB PsExec (exploit/windows/smb/psexec) and Impacket psexec.py by triggering on specific service installation-->
        <!--Date: 2021/01/21-->
        <!--Status: test-->
        <!--ID: 6fb63b40-e02a-403e-9ffd-3bcc1d749442-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1570</id>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>Metasploit Or Impacket Service Installation Via SMB PsExec</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)^%systemroot%\\+[a-zA-Z]{8}\.exe$</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)(^[a-zA-Z]{4}$)|(^[a-zA-Z]{8}$)|(^[a-zA-Z]{16}$)</field>
        <field name="full_log" negate="no" type="pcre2">(?i)3</field>
        <field name="full_log" negate="no" type="pcre2">(?i)0x10</field>
        <field name="win.eventdata.serviceName" negate="yes" type="pcre2">(?i)PSEXESVC</field>
    </rule>
    <rule id="900391" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_event_log_cleared.yml</info>
        <!--Sigma Rule Author: Saw Winn Naung-->
        <!--Description: Checks for event id 1102 which indicates the security event log was cleared.-->
        <!--Date: 2021/08/15-->
        <!--Status: test-->
        <!--ID: a122ac13-daf8-4175-83a2-72c387be339d-->
        <mitre>
            <id>attack.t1070.001</id>
        </mitre>
        <description>Security Event Log Cleared</description>
        <options>no_full_log</options>
        <group>security,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1102</field>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Eventlog</field>
    </rule>
    <rule id="900392" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_wmiprvse_wbemcomn_dll_hijack.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g, Open Threat Research (OTR)-->
        <!--Description: Detects a threat actor creating a file named `wbemcomn.dll` in the `C:\Windows\System32\wbem\` directory over the network for a WMI DLL Hijack scenario.-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: f6c68d5f-e101-4b86-8c84-7d96851fd65c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>T1047 Wmiprvse Wbemcomn DLL Hijack</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.relativeTargetName" negate="no" type="pcre2">(?i)(?:\\+wbem\\+wbemcomn\.dll)$</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
    </rule>
    <rule id="900393" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_opened_encrypted_zip_filename.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the extraction of password protected ZIP archives with suspicious file names. See the filename variable for more details on which file has been opened.-->
        <!--Date: 2022/05/09-->
        <!--Status: test-->
        <!--ID: 54f0434b-726f-48a1-b2aa-067df14516e4-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.t1105</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Password Protected ZIP File Opened (Suspicious Filenames)</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5379</field>
        <field name="win.eventdata.targetName" negate="no" type="pcre2">(?i)Microsoft_Windows_Shell_ZipFolder:filename</field>
        <field name="win.eventdata.targetName" negate="no" type="pcre2">(?i)invoice|new\ order|rechnung|factura|delivery|purchase|order|payment</field>
    </rule>
    <rule id="900394" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_possible_dc_shadow.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, oscd.community, Chakib Gzenayi (@Chak092), Hosni Mribah-->
        <!--Description: Detects DCShadow via create new SPN-->
        <!--Date: 2019/10/25-->
        <!--Status: test-->
        <!--ID: 32e19d25-4aed-4860-a55a-be99cb0bf7ed-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1207</id>
        </mitre>
        <description>Possible DC Shadow Attack</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4742</field>
        <field name="full_log" negate="no" type="pcre2">(?i)GC/</field>
    </rule>
    <rule id="900395" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_possible_dc_shadow.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, oscd.community, Chakib Gzenayi (@Chak092), Hosni Mribah-->
        <!--Description: Detects DCShadow via create new SPN-->
        <!--Date: 2019/10/25-->
        <!--Status: test-->
        <!--ID: 32e19d25-4aed-4860-a55a-be99cb0bf7ed-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1207</id>
        </mitre>
        <description>Possible DC Shadow Attack</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5136</field>
        <field name="win.eventdata.attributeLDAPDisplayName" negate="no" type="pcre2">(?i)servicePrincipalName</field>
        <field name="win.eventdata.attributeValue" negate="no" type="pcre2">(?i)^(?:GC/)</field>
    </rule>
    <rule id="900396" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_smb_file_creation_admin_shares.yml</info>
        <!--Sigma Rule Author: Jose Rodriguez (@Cyb3rPandaH), OTR (Open Threat Research)-->
        <!--Description: Look for non-system accounts SMB accessing a file with write (0x2) access mask via administrative share (i.e C$).-->
        <!--Date: 2020/08/06-->
        <!--Status: test-->
        <!--ID: b210394c-ba12-4f89-9117-44a2464b9511-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>SMB Create Remote File Admin Share</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5145</field>
        <field name="win.eventdata.shareName" negate="no" type="pcre2">(?i)(?:C\$)$</field>
        <field name="win.eventdata.accessMask" negate="no" type="pcre2">(?i)0x2</field>
        <field name="win.eventdata.subjectUserName" negate="yes" type="pcre2">(?i)(?:\$)$</field>
    </rule>
    <rule id="900397" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_susp_possible_shadow_credentials_added.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Elastic (idea)-->
        <!--Description: Detects possible addition of shadow credentials to an active directory object.-->
        <!--Date: 2022/10/17-->
        <!--Status: test-->
        <!--ID: f598ea0c-c25a-4f72-a219-50c44411c791-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1556</id>
        </mitre>
        <description>Possible Shadow Credentials Added</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5136</field>
        <field name="win.eventdata.attributeLDAPDisplayName" negate="no" type="pcre2">(?i)msDS\-KeyCredentialLink</field>
    </rule>
    <rule id="900398" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/win_security_invoke_obfuscation_via_use_rundll32_services_security.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Rundll32 in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: cd0f7229-d16f-42de-8fe3-fba365fbcb3a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Rundll32 - Security</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4697</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.serviceFileName" negate="no" type="pcre2">(?i)value|invoke|comspec|iex</field>
    </rule>
    <rule id="900399" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_access_token_abuse.yml</info>
        <!--Sigma Rule Author: Michaela Adams, Zach Mathis-->
        <!--Description: Detects potential token impersonation and theft. Example, when using "DuplicateToken(Ex)" and "ImpersonateLoggedOnUser" with the "LOGON32_LOGON_NEW_CREDENTIALS flag".-->
        <!--Date: 2022/11/06-->
        <!--Status: experimental-->
        <!--ID: 02f7c9c1-1ae8-4c6a-8add-04693807f92f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1134.001</id>
            <id>stp.4u</id>
        </mitre>
        <description>Potential Access Token Abuse</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)9</field>
        <field name="win.eventdata.logonProcessName" negate="no" type="pcre2">(?i)Advapi</field>
        <field name="win.eventdata.authenticationPackageName" negate="no" type="pcre2">(?i)Negotiate</field>
        <field name="full_log" negate="no" type="pcre2">(?i)%%1833</field>
    </rule>
    <rule id="900400" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_rdp_bluekeep_poc_scanner.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Adam Bradbury (idea)-->
        <!--Description: Detects the use of a scanner by zerosum0x0 that discovers targets vulnerable to  CVE-2019-0708 RDP RCE aka BlueKeep-->
        <!--Date: 2019/06/02-->
        <!--Status: test-->
        <!--ID: 8400629e-79a9-4737-b387-5db940ab2367-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1210</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>Scanner PoC for CVE-2019-0708 RDP RCE Vuln</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4625</field>
        <field name="win.eventdata.targetUserName" negate="no" type="pcre2">(?i)AAAAAAA</field>
    </rule>
    <rule id="900401" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_security_enabled_global_group_deleted.yml</info>
        <!--Sigma Rule Author: Alexandr Yampolskyi, SOC Prime-->
        <!--Description: Detects activity when a security-enabled global group is deleted-->
        <!--Date: 2023/04/26-->
        <!--Status: stable-->
        <!--ID: b237c54b-0f15-4612-a819-44b735e0de27-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1098</id>
        </mitre>
        <description>A Security-Enabled Global Group Was Deleted</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4730|634</field>
    </rule>
    <rule id="900402" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_diagtrack_eop_default_login_username.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the default "UserName" used by the DiagTrackEoP POC-->
        <!--Date: 2022/08/03-->
        <!--Status: test-->
        <!--ID: 2111118f-7e46-4fc8-974a-59fd8ec95196-->
        <mitre>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>DiagTrackEoP Default Login Username</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)9</field>
        <field name="full_log" negate="no" type="pcre2">(?i)thisisnotvaliduser</field>
    </rule>
    <rule id="900403" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_overpass_the_hash.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (source), Dominik Schaudel (rule)-->
        <!--Description: Detects successful logon with logon type 9 (NewCredentials) which matches the Overpass the Hash behavior of e.g Mimikatz's sekurlsa::pth module.-->
        <!--Date: 2018/02/12-->
        <!--Status: test-->
        <!--ID: 192a0330-c20b-4356-90b6-7b7049ae0b87-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.s0002</id>
            <id>attack.t1550.002</id>
        </mitre>
        <description>Successful Overpass the Hash Attempt</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)9</field>
        <field name="win.eventdata.logonProcessName" negate="no" type="pcre2">(?i)seclogo</field>
        <field name="win.eventdata.authenticationPackageName" negate="no" type="pcre2">(?i)Negotiate</field>
    </rule>
    <rule id="900404" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_member_added_security_enabled_global_group.yml</info>
        <!--Sigma Rule Author: Alexandr Yampolskyi, SOC Prime-->
        <!--Description: Detects activity when a member is added to a security-enabled global group-->
        <!--Date: 2023/04/26-->
        <!--Status: stable-->
        <!--ID: c43c26be-2e87-46c7-8661-284588c5a53e-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1098</id>
        </mitre>
        <description>A Member Was Added to a Security-Enabled Global Group</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4728|632</field>
    </rule>
    <rule id="900405" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_susp_rottenpotato.yml</info>
        <!--Sigma Rule Author: @SBousseaden, Florian Roth-->
        <!--Description: Detects logon events that have characteristics of events generated during an attack with RottenPotato and the like-->
        <!--Date: 2019/11/15-->
        <!--Status: test-->
        <!--ID: 16f5d8ca-44bd-47c8-acbe-6fc95a16c12f-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.credential_access</id>
            <id>attack.t1557.001</id>
        </mitre>
        <description>RottenPotato Like Attack Pattern</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)3</field>
        <field name="win.eventdata.targetUserName" negate="no" type="pcre2">(?i)ANONYMOUS\ LOGON</field>
        <field name="win.eventdata.workstationName" negate="no" type="pcre2">(?i)\-</field>
        <field name="win.eventdata.ipAddress" negate="no" type="pcre2">(?i)127\.0\.0\.1|::1</field>
    </rule>
    <rule id="900406" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_successful_external_remote_rdp_login.yml</info>
        <!--Sigma Rule Author: Micah Babinski (@micahbabinski), Zach Mathis (@yamatosecurity)-->
        <!--Description: Detects successful logon from public IP address via RDP. This can indicate a publicly-exposed RDP port.-->
        <!--Date: 2023/01/19-->
        <!--Status: experimental-->
        <!--ID: 259a9cdf-c4dd-4fa2-b243-2269e5ab18a2-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.credential_access</id>
            <id>attack.t1133</id>
            <id>attack.t1078</id>
            <id>attack.t1110</id>
        </mitre>
        <description>External Remote RDP Logon from Public IP</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)10</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)127\.0\.0\.0/8</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)10\.0\.0\.0/8</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)172\.16\.0\.0/12</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)192\.168\.0\.0/16</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)::1</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:fe80:)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:fc)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:fd)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)\-</field>
    </rule>
    <rule id="900407" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_rdp_localhost_login.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: RDP login with localhost source address may be a tunnelled login-->
        <!--Date: 2019/01/28-->
        <!--Status: test-->
        <!--ID: 51e33403-2a37-4d66-a574-1fda1782cc31-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>car.2013-07-002</id>
            <id>attack.t1021.001</id>
        </mitre>
        <description>RDP Login from Localhost</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)10</field>
        <field name="win.eventdata.ipAddress" negate="no" type="pcre2">(?i)::1|127\.0\.0\.1</field>
    </rule>
    <rule id="900408" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_scrcons_remote_wmi_scripteventconsumer.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detect potential adversaries leveraging WMI ActiveScriptEventConsumers remotely to move laterally in a network-->
        <!--Date: 2020/09/02-->
        <!--Status: test-->
        <!--ID: 9599c180-e3a8-4743-8f92-7fb96d3be648-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.privilege_escalation</id>
            <id>attack.persistence</id>
            <id>attack.t1546.003</id>
        </mitre>
        <description>Remote WMI ActiveScriptEventConsumers</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)3</field>
        <field name="win.eventdata.processName" negate="no" type="pcre2">(?i)(?:scrcons\.exe)$</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)0x3e7</field>
    </rule>
    <rule id="900409" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_susp_logon_newcredentials.yml</info>
        <!--Sigma Rule Author: Max Altgelt (Nextron Systems)-->
        <!--Description: Detects logon events that specify new credentials-->
        <!--Date: 2022/04/06-->
        <!--Status: test-->
        <!--ID: def8b624-e08f-4ae1-8612-1ba21190da6b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1550</id>
        </mitre>
        <description>Outgoing Logon with New Credentials</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)9</field>
    </rule>
    <rule id="900410" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_susp_failed_logon_source.yml</info>
        <!--Sigma Rule Author: NVISO-->
        <!--Description: A login from a public IP can indicate a misconfigured firewall or network boundary.-->
        <!--Date: 2020/05/06-->
        <!--Status: test-->
        <!--ID: f88e112a-21aa-44bd-9b01-6ee2a2bbbed1-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.persistence</id>
            <id>attack.t1078</id>
            <id>attack.t1190</id>
            <id>attack.t1133</id>
        </mitre>
        <description>Failed Logon From Public IP</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4625</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)\-</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:10\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:192\.168\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:172\.16\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:172\.17\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:172\.18\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:172\.19\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:172\.20\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:172\.21\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:172\.22\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:172\.23\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:172\.24\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:172\.25\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:172\.26\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:172\.27\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:172\.28\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:172\.29\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:172\.30\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:172\.31\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:127\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:169\.254\.)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)::1</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:fe80::)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:fc00::)</field>
    </rule>
    <rule id="900411" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_admin_rdp_login.yml</info>
        <!--Sigma Rule Author: juju4-->
        <!--Description: Detect remote login by Administrator user (depending on internal pattern).-->
        <!--Date: 2017/10/29-->
        <!--Status: test-->
        <!--ID: 0f63e1ef-1eb9-4226-9d54-8927ca08520a-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1078.001</id>
            <id>attack.t1078.002</id>
            <id>attack.t1078.003</id>
            <id>car.2016-04-005</id>
        </mitre>
        <description>Admin User Remote Logon</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)10</field>
        <field name="win.eventdata.authenticationPackageName" negate="no" type="pcre2">(?i)Negotiate</field>
        <field name="win.eventdata.targetUserName" negate="no" type="pcre2">(?i)^(?:Admin)</field>
    </rule>
    <rule id="900412" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_successful_external_remote_smb_login.yml</info>
        <!--Sigma Rule Author: Micah Babinski (@micahbabinski), Zach Mathis (@yamatosecurity)-->
        <!--Description: Detects successful logon from public IP address via SMB. This can indicate a publicly-exposed SMB port.-->
        <!--Date: 2023/01/19-->
        <!--Status: experimental-->
        <!--ID: 78d5cab4-557e-454f-9fb9-a222bd0d5edc-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.credential_access</id>
            <id>attack.t1133</id>
            <id>attack.t1078</id>
            <id>attack.t1110</id>
        </mitre>
        <description>External Remote SMB Logon from Public IP</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)3</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)127\.0\.0\.0/8</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)10\.0\.0\.0/8</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)172\.16\.0\.0/12</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)192\.168\.0\.0/16</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)::1</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:fe80:)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:fc)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)^(?:fd)</field>
        <field name="win.eventdata.ipAddress" negate="yes" type="pcre2">(?i)\-</field>
    </rule>
    <rule id="900413" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_pass_the_hash_2.yml</info>
        <!--Sigma Rule Author: Dave Kennedy, Jeff Warren (method) / David Vassallo (rule)-->
        <!--Description: Detects the attack technique pass the hash which is used to move laterally inside the network-->
        <!--Date: 2019/06/14-->
        <!--Status: stable-->
        <!--ID: 8eef149c-bd26-49f2-9e5a-9b00e3af499b-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1550.002</id>
        </mitre>
        <description>Pass the Hash Activity 2</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.subjectUserSid" negate="no" type="pcre2">(?i)S\-1\-0\-0</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)3</field>
        <field name="win.eventdata.logonProcessName" negate="no" type="pcre2">(?i)NtLmSsp</field>
        <field name="win.eventdata.keyLength" negate="no" type="pcre2">(?i)0</field>
    </rule>
    <rule id="900414" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_pass_the_hash_2.yml</info>
        <!--Sigma Rule Author: Dave Kennedy, Jeff Warren (method) / David Vassallo (rule)-->
        <!--Description: Detects the attack technique pass the hash which is used to move laterally inside the network-->
        <!--Date: 2019/06/14-->
        <!--Status: stable-->
        <!--ID: 8eef149c-bd26-49f2-9e5a-9b00e3af499b-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1550.002</id>
        </mitre>
        <description>Pass the Hash Activity 2</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)9</field>
        <field name="win.eventdata.logonProcessName" negate="no" type="pcre2">(?i)seclogo</field>
    </rule>
    <rule id="900415" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_pass_the_hash_2.yml</info>
        <!--Sigma Rule Author: Dave Kennedy, Jeff Warren (method) / David Vassallo (rule)-->
        <!--Description: Detects the attack technique pass the hash which is used to move laterally inside the network-->
        <!--Date: 2019/06/14-->
        <!--Status: stable-->
        <!--ID: 8eef149c-bd26-49f2-9e5a-9b00e3af499b-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1550.002</id>
        </mitre>
        <description>Pass the Hash Activity 2</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetUserName" negate="yes" type="pcre2">(?i)ANONYMOUS\ LOGON</field>
    </rule>
    <rule id="900416" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_susp_krbrelayup.yml</info>
        <!--Sigma Rule Author: @SBousseaden, Florian Roth-->
        <!--Description: Detects logon events that have characteristics of events generated during an attack with KrbRelayUp and the like-->
        <!--Date: 2022/04/27-->
        <!--Status: test-->
        <!--ID: 749c9f5e-b353-4b90-a9c1-05243357ca4b-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.credential_access</id>
        </mitre>
        <description>KrbRelayUp Attack Pattern</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.logonType" negate="no" type="pcre2">(?i)3</field>
        <field name="win.eventdata.authenticationPackageName" negate="no" type="pcre2">(?i)Kerberos</field>
        <field name="win.eventdata.ipAddress" negate="no" type="pcre2">(?i)127\.0\.0\.1</field>
        <field name="win.eventdata.targetUserSid" negate="no" type="pcre2">(?i)^(?:S\-1\-5\-21\-)</field>
        <field name="win.eventdata.targetUserSid" negate="no" type="pcre2">(?i)(?:\-500)$</field>
    </rule>
    <rule id="900417" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_member_removed_security_enabled_global_group.yml</info>
        <!--Sigma Rule Author: Alexandr Yampolskyi, SOC Prime-->
        <!--Description: Detects activity when a member is removed from a security-enabled global group-->
        <!--Date: 2023/04/26-->
        <!--Status: stable-->
        <!--ID: 02c39d30-02b5-45d2-b435-8aebfe5a8629-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1098</id>
        </mitre>
        <description>A Member Was Removed From a Security-Enabled Global Group</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)633|4729</field>
    </rule>
    <rule id="900418" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security/account_management/win_security_susp_wmi_login.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detection of logins performed with WMI-->
        <!--Date: 2019/12/04-->
        <!--Status: stable-->
        <!--ID: 5af54681-df95-4c26-854f-2565e13cfab0-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
        </mitre>
        <description>Login with WMI</description>
        <options>no_full_log</options>
        <group>windows,security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4624</field>
        <field name="win.eventdata.processName" negate="no" type="pcre2">(?i)(?:\\+WmiPrvSE\.exe)$</field>
    </rule>
    <rule id="900419" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/appmodel_runtime/win_appmodel_runtime_sysinternals_tools_appx_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of Sysinternals tools via an AppX package. Attackers could install the Sysinternals Suite to get access to tools such as psexec and procdump to avoid detection based on System paths-->
        <!--Date: 2023/01/16-->
        <!--Status: experimental-->
        <!--ID: d29a20b2-be4b-4827-81f2-3d8a59eab5fc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
        </mitre>
        <description>Sysinternals Tools AppX Versions Execution</description>
        <options>no_full_log</options>
        <group>windows,appmodel-runtime,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)201</field>
        <field name="full_log" negate="no" type="pcre2">(?i)procdump\.exe|psloglist\.exe|psexec\.exe|livekd\.exe|ADExplorer\.exe</field>
    </rule>
    <rule id="900420" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/shell_core/win_shell_core_susp_packages_installed.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious application installed by looking at the added shortcut to the app resolver cache-->
        <!--Date: 2022/08/14-->
        <!--Status: test-->
        <!--ID: 83c161b6-ca67-4f33-8ad0-644a0737cf07-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Suspicious Application Installed</description>
        <options>no_full_log</options>
        <group>windows,shell-core,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)28115</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Zenmap|AnyDesk|wireshark|openvpn</field>
    </rule>
    <rule id="900421" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/shell_core/win_shell_core_susp_packages_installed.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious application installed by looking at the added shortcut to the app resolver cache-->
        <!--Date: 2022/08/14-->
        <!--Status: test-->
        <!--ID: 83c161b6-ca67-4f33-8ad0-644a0737cf07-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Suspicious Application Installed</description>
        <options>no_full_log</options>
        <group>windows,shell-core,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)28115</field>
        <field name="full_log" negate="no" type="pcre2">(?i)zenmap\.exe|prokzult\ ad|wireshark|openvpn</field>
    </rule>
    <rule id="900422" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/msexchange/win_exchange_proxyshell_certificate_generation.yml</info>
        <!--Sigma Rule Author: Max Altgelt (Nextron Systems)-->
        <!--Description: Detects a write of an Exchange CSR to an untypical directory or with aspx name suffix which can be used to place a webshell-->
        <!--Date: 2021/08/23-->
        <!--Status: test-->
        <!--ID: b7bc7038-638b-4ffd-880c-292c692209ef-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Certificate Request Export to Exchange Webserver</description>
        <options>no_full_log</options>
        <group>msexchange-management,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)New\-ExchangeCertificate|\ \-GenerateRequest|\ \-BinaryEncoded|\ \-RequestFile</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\\+localhost\\+C\$|\\+127\.0\.0\.1\\+C\$|C:\\+inetpub|\.aspx</field>
    </rule>
    <rule id="900423" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/msexchange/win_exchange_transportagent.yml</info>
        <!--Sigma Rule Author: Tobias Michalski (Nextron Systems)-->
        <!--Description: Detects the Installation of a Exchange Transport Agent-->
        <!--Date: 2021/06/08-->
        <!--Status: test-->
        <!--ID: 4fe151c2-ecf9-4fae-95ae-b88ec9c2fca6-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.002</id>
        </mitre>
        <description>MSExchange Transport Agent Installation - Builtin</description>
        <options>no_full_log</options>
        <group>windows,msexchange-management,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)Install\-TransportAgent</field>
    </rule>
    <rule id="900424" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/msexchange/win_exchange_transportagent_failed.yml</info>
        <!--Sigma Rule Author: Tobias Michalski (Nextron Systems)-->
        <!--Description: Detects a failed installation of a Exchange Transport Agent-->
        <!--Date: 2021/06/08-->
        <!--Status: test-->
        <!--ID: c7d16cae-aaf3-42e5-9c1c-fb8553faa6fa-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.002</id>
        </mitre>
        <description>Failed MSExchange Transport Agent Installation</description>
        <options>no_full_log</options>
        <group>msexchange-management,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)6</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Install\-TransportAgent</field>
    </rule>
    <rule id="900425" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/msexchange/win_exchange_proxylogon_oabvirtualdir.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects specific patterns found after a successful ProxyLogon exploitation in relation to a Commandlet invocation of Set-OabVirtualDirectory-->
        <!--Date: 2021/08/09-->
        <!--Status: test-->
        <!--ID: 550d3350-bb8a-4ff3-9533-2ba533f4a1c0-->
        <mitre>
            <id>attack.t1587.001</id>
            <id>attack.resource_development</id>
        </mitre>
        <description>ProxyLogon MSExchange OabVirtualDirectory</description>
        <options>no_full_log</options>
        <group>windows,msexchange-management,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:OabVirtualDirectory|\ \-ExternalUrl\ )</field>
        <field name="full_log" negate="no" type="pcre2">(?i)eval\(request|http://f/&lt;script|"unsafe"\};|function\ Page_Load\(\)</field>
    </rule>
    <rule id="900426" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/msexchange/win_exchange_proxyshell_remove_mailbox_export.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects removal of an exported Exchange mailbox which could be to cover tracks from ProxyShell exploit-->
        <!--Date: 2021/08/27-->
        <!--Status: test-->
        <!--ID: 09570ae5-889e-43ea-aac0-0e1221fb3d95-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
        </mitre>
        <description>Remove Exported Mailbox from Exchange Webserver</description>
        <options>no_full_log</options>
        <group>msexchange-management,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)Remove\-MailboxExportRequest|\ \-Identity\ |\ \-Confirm\ "False"</field>
    </rule>
    <rule id="900427" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/msexchange/win_exchange_proxyshell_mailbox_export.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Rich Warren, Christian Burkard (Nextron Systems)-->
        <!--Description: Detects a successful export of an Exchange mailbox to untypical directory or with aspx name suffix which can be used to place a webshell or the needed role assignment for it-->
        <!--Date: 2021/08/09-->
        <!--Status: experimental-->
        <!--ID: 516376b4-05cd-4122-bae0-ad7641c38d48-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Mailbox Export to Exchange Webserver</description>
        <options>no_full_log</options>
        <group>msexchange-management,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:New\-MailboxExportRequest|\ \-Mailbox\ )</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\-FilePath\ "\\+|\.aspx</field>
    </rule>
    <rule id="900428" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/msexchange/win_exchange_proxyshell_mailbox_export.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Rich Warren, Christian Burkard (Nextron Systems)-->
        <!--Description: Detects a successful export of an Exchange mailbox to untypical directory or with aspx name suffix which can be used to place a webshell or the needed role assignment for it-->
        <!--Date: 2021/08/09-->
        <!--Status: experimental-->
        <!--ID: 516376b4-05cd-4122-bae0-ad7641c38d48-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Mailbox Export to Exchange Webserver</description>
        <options>no_full_log</options>
        <group>msexchange-management,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:New\-ManagementRoleAssignment|\ \-Role\ "Mailbox\ Import\ Export"|\ \-User\ )</field>
    </rule>
    <rule id="900429" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/msexchange/win_exchange_set_oabvirtualdirectory_externalurl.yml</info>
        <!--Sigma Rule Author: Jose Rodriguez @Cyb3rPandaH-->
        <!--Description: Rule to detect an adversary setting OabVirtualDirectory External URL property to a script in Exchange Management log-->
        <!--Date: 2021/03/15-->
        <!--Status: test-->
        <!--ID: 9db37458-4df2-46a5-95ab-307e7f29e675-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Exchange Set OabVirtualDirectory ExternalUrl Property</description>
        <options>no_full_log</options>
        <group>windows,msexchange-management,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)Set\-OabVirtualDirectory|ExternalUrl|Page_Load|script</field>
    </rule>
    <rule id="900430" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/lsa_server/win_lsa_server_normal_user_admin.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect standard users login that are part of high privileged groups such as the Administrator group-->
        <!--Date: 2023/01/13-->
        <!--Status: experimental-->
        <!--ID: 7ac407cc-0f48-4328-aede-de1d2e6fef41-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Standard User In High Privileged Group</description>
        <options>no_full_log</options>
        <group>windows,lsa-server,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)300</field>
        <field name="win.eventdata.targetUserSid" negate="no" type="pcre2">(?i)^(?:S\-1\-5\-21\-)</field>
        <field name="full_log" negate="no" type="pcre2">(?i)S\-1\-5\-32\-544|\-500\}|\-518\}|\-519\}</field>
        <field name="win.eventdata.targetUserSid" negate="yes" type="pcre2">(?i)(?:\-500)$</field>
        <field name="win.eventdata.targetUserSid" negate="yes" type="pcre2">(?i)(?:\-518)$</field>
        <field name="win.eventdata.targetUserSid" negate="yes" type="pcre2">(?i)(?:\-519)$</field>
    </rule>
    <rule id="900431" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/bits_client/win_bits_client_new_transfer_saving_susp_extensions.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects new BITS transfer job saving local files with potential suspicious extensions-->
        <!--Date: 2022/03/01-->
        <!--Status: experimental-->
        <!--ID: b85e5894-9b19-4d86-8c87-a2f3b81f0521-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1197</id>
        </mitre>
        <description>BITS Transfer Job Downloading File Potential Suspicious Extension</description>
        <options>no_full_log</options>
        <group>windows,bits-client,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)16403</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\.bat|\.dll|\.exe|\.hta|\.ps1|\.psd1|\.sh|\.vbe|\.vbs)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+AppData\\+</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\.com</field>
    </rule>
    <rule id="900432" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/bits_client/win_bits_client_new_job_via_bitsadmin.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the creation of a new bits job by Bitsadmin-->
        <!--Date: 2022/03/01-->
        <!--Status: test-->
        <!--ID: 1ff315dc-2a3a-4b71-8dde-873818d25d39-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1197</id>
        </mitre>
        <description>New BITS Job Created Via Bitsadmin</description>
        <options>no_full_log</options>
        <group>windows,bits-client,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3</field>
        <field name="win.eventdata.processPath" negate="no" type="pcre2">(?i)(?:\\+bitsadmin\.exe)$</field>
    </rule>
    <rule id="900433" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/bits_client/win_bits_client_new_transfer_via_ip_address.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a BITS transfer job downloading file(s) from a direct IP address.-->
        <!--Date: 2023/01/11-->
        <!--Status: experimental-->
        <!--ID: 90f138c1-f578-4ac3-8c49-eecfd847c8b7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1197</id>
        </mitre>
        <description>BITS Transfer Job Download From Direct IP</description>
        <options>no_full_log</options>
        <group>windows,bits-client,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)16403</field>
        <field name="full_log" negate="no" type="pcre2">(?i)http://1|http://2|http://3|http://4|http://5|http://6|http://7|http://8|http://9|https://1|https://2|https://3|https://4|https://5|https://6|https://7|https://8|https://9</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://10\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://192\.168\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://172\.16\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://172\.17\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://172\.18\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://172\.19\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://172\.20\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://172\.21\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://172\.22\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://172\.23\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://172\.24\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://172\.25\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://172\.26\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://172\.27\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://172\.28\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://172\.29\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://172\.30\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://172\.31\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://127\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)://169\.254\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)https://7\-</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)http://7\-</field>
    </rule>
    <rule id="900434" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/bits_client/win_bits_client_new_transfer_via_uncommon_tld.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a suspicious download using the BITS client from a FQDN that is unusual. Adversaries may abuse BITS jobs to persistently execute or clean up after malicious payloads.-->
        <!--Date: 2022/06/10-->
        <!--Status: experimental-->
        <!--ID: 6d44fb93-e7d2-475c-9d3d-54c9c1e33427-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1197</id>
        </mitre>
        <description>BITS Transfer Job With Uncommon Or Suspicious Remote TLD</description>
        <options>no_full_log</options>
        <group>windows,bits-client,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)16403</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\.azureedge\.net/</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\.com/</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\.sfx\.ms/</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)download\.mozilla\.org/</field>
    </rule>
    <rule id="900435" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/bits_client/win_bits_client_new_transfer_via_file_sharing_domains.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects BITS transfer job downloading files from a file sharing domain.-->
        <!--Date: 2022/06/28-->
        <!--Status: experimental-->
        <!--ID: d635249d-86b5-4dad-a8c7-d7272b788586-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1197</id>
        </mitre>
        <description>BITS Transfer Job Download From File Sharing Domains</description>
        <options>no_full_log</options>
        <group>windows,bits-client,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)16403</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\.githubusercontent\.com|anonfiles\.com|cdn\.discordapp\.com|cdn\.discordapp\.com/attachments/|ddns\.net|dl\.dropboxusercontent\.com|ghostbin\.co|gofile\.io|hastebin\.com|mediafire\.com|mega\.nz|paste\.ee|pastebin\.com|pastebin\.pl|pastetext\.net|privatlab\.com|privatlab\.net|send\.exploit\.in|sendspace\.com|storage\.googleapis\.com|storjshare\.io|temp\.sh|transfer\.sh|ufile\.io</field>
    </rule>
    <rule id="900436" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/bits_client/win_bits_client_new_job_via_powershell.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the creation of a new bits job by PowerShell-->
        <!--Date: 2022/03/01-->
        <!--Status: experimental-->
        <!--ID: fe3a2d49-f255-4d10-935c-bda7391108eb-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1197</id>
        </mitre>
        <description>New BITS Job Created Via PowerShell</description>
        <options>no_full_log</options>
        <group>windows,bits-client,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3</field>
        <field name="win.eventdata.processPath" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
    </rule>
    <rule id="900437" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/bits_client/win_bits_client_new_trasnfer_susp_local_folder.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects new BITS transfer job where the LocalName/Saved file is stored in a potentially suspicious location-->
        <!--Date: 2022/06/28-->
        <!--Status: experimental-->
        <!--ID: f8a56cb7-a363-44ed-a82f-5926bb44cd05-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1197</id>
        </mitre>
        <description>BITS Transfer Job Download To Potential Suspicious Folder</description>
        <options>no_full_log</options>
        <group>windows,bits-client,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)16403</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\\+Desktop\\+|C:\\+Users\\+Public\\+|C:\\+PerfLogs\\+</field>
    </rule>
    <rule id="900438" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/terminalservices/win_terminalservices_rdp_ngrok.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects cases in which ngrok, a reverse proxy tool, forwards events to the local RDP port, which could be a sign of malicious behaviour-->
        <!--Date: 2022/04/29-->
        <!--Status: test-->
        <!--ID: 64d51a51-32a6-49f0-9f3d-17e34d640272-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>Ngrok Usage with Remote Desktop Service</description>
        <options>no_full_log</options>
        <group>windows,terminalservices-localsessionmanager,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)21</field>
        <field name="full_log" negate="no" type="pcre2">(?i)16777216</field>
    </rule>
    <rule id="900439" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/appxpackaging_om/win_appxpackaging_om_sups_appx_signature.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of AppX packages with known suspicious or malicious signature-->
        <!--Date: 2023/01/16-->
        <!--Status: test-->
        <!--ID: b5aa7d60-c17e-4538-97de-09029d6cd76b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
        </mitre>
        <description>Suspicious Digital Signature Of AppX Package</description>
        <options>no_full_log</options>
        <group>windows,appxpackaging-om,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)157</field>
        <field name="full_log" negate="no" type="pcre2">(?i)CN=Foresee\ Consulting\ Inc\.,\ O=Foresee\ Consulting\ Inc\.,\ L=North\ York,\ S=Ontario,\ C=CA,\ SERIALNUMBER=1004913\-1,\ OID\.1\.3\.6\.1\.4\.1\.311\.60\.2\.1\.3=CA,\ OID\.2\.5\.4\.15=Private\ Organization</field>
    </rule>
    <rule id="900440" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/driverframeworks/win_usb_device_plugged.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects plugged/unplugged USB devices-->
        <!--Date: 2017/11/09-->
        <!--Status: test-->
        <!--ID: 1a4bd6e3-4c6e-405d-a9a3-53a116e341d4-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1200</id>
        </mitre>
        <description>USB Device Plugged</description>
        <options>no_full_log</options>
        <group>windows,driver-framework,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2003|2100|2102</field>
    </rule>
    <rule id="900441" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/openssh/win_sshd_openssh_server_listening_on_socket.yml</info>
        <!--Sigma Rule Author: mdecrevoisier-->
        <!--Description: Detects scenarios where an attacker enables the OpenSSH server and server starts to listening on SSH socket.-->
        <!--Date: 2022/10/25-->
        <!--Status: test-->
        <!--ID: 3ce8e9a4-bc61-4c9b-8e69-d7e2492a8781-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.004</id>
        </mitre>
        <description>OpenSSH Server Listening On Socket</description>
        <options>no_full_log</options>
        <group>windows,openssh,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)4</field>
        <field name="full_log" negate="no" type="pcre2">(?i)sshd</field>
        <field name="win.eventdata.payload" negate="no" type="pcre2">(?i)^(?:Server\ listening\ on\ )</field>
    </rule>
    <rule id="900442" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/smbclient/security/win_smbclient_security_susp_failed_guest_logon.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), KevTheHermit, fuzzyf10w-->
        <!--Description: Detect Attempt PrintNightmare (CVE-2021-1675) Remote code execution in Windows Spooler Service-->
        <!--Date: 2021/06/30-->
        <!--Status: test-->
        <!--ID: 71886b70-d7b4-4dbf-acce-87d2ca135262-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1110.001</id>
        </mitre>
        <description>Suspicious Rejected SMB Guest Logon From IP</description>
        <options>no_full_log</options>
        <group>windows,smbclient-security,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)31017</field>
        <field name="win.eventdata.samAccountName" negate="no" type="pcre2">(?i)</field>
        <field name="win.eventdata.serverName" negate="no" type="pcre2">(?i)^(?:\\+1)</field>
    </rule>
    <rule id="900443" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/ldap/win_ldap_recon.yml</info>
        <!--Sigma Rule Author: Adeem Mawani-->
        <!--Description: Detects potential Active Directory enumeration via LDAP-->
        <!--Date: 2021/06/22-->
        <!--Status: test-->
        <!--ID: 31d68132-4038-47c7-8f8e-635a39a7c174-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.002</id>
            <id>attack.t1087.002</id>
            <id>attack.t1482</id>
        </mitre>
        <description>Potential Active Directory Reconnaissance/Enumeration Via LDAP</description>
        <options>no_full_log</options>
        <group>windows,ldap,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)30</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\(groupType:1\.2\.840\.113556\.1\.4\.803:=2147483648\)|\(groupType:1\.2\.840\.113556\.1\.4\.803:=2147483656\)|\(groupType:1\.2\.840\.113556\.1\.4\.803:=2147483652\)|\(groupType:1\.2\.840\.113556\.1\.4\.803:=2147483650\)|\(sAMAccountType=805306369\)|\(sAMAccountType=805306368\)|\(sAMAccountType=536870913\)|\(sAMAccountType=536870912\)|\(sAMAccountType=268435457\)|\(sAMAccountType=268435456\)|\(objectCategory=groupPolicyContainer\)|\(objectCategory=organizationalUnit\)|\(objectCategory=Computer\)|\(objectCategory=nTDSDSA\)|\(objectCategory=server\)|\(objectCategory=domain\)|\(objectCategory=person\)|\(objectCategory=group\)|\(objectCategory=user\)|\(objectClass=trustedDomain\)|\(objectClass=computer\)|\(objectClass=server\)|\(objectClass=group\)|\(objectClass=user\)|\(primaryGroupID=521\)|\(primaryGroupID=516\)|\(primaryGroupID=515\)|\(primaryGroupID=512\)|Domain\ Admins|objectGUID=\\+|\(schemaIDGUID=\\+.+\)</field>
        <field name="win.system.eventID" negate="yes" type="pcre2">(?i)30</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\(domainSid=.+\)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\(objectSid=.+\)</field>
    </rule>
    <rule id="900444" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/ldap/win_ldap_recon.yml</info>
        <!--Sigma Rule Author: Adeem Mawani-->
        <!--Description: Detects potential Active Directory enumeration via LDAP-->
        <!--Date: 2021/06/22-->
        <!--Status: test-->
        <!--ID: 31d68132-4038-47c7-8f8e-635a39a7c174-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1069.002</id>
            <id>attack.t1087.002</id>
            <id>attack.t1482</id>
        </mitre>
        <description>Potential Active Directory Reconnaissance/Enumeration Via LDAP</description>
        <options>no_full_log</options>
        <group>windows,ldap,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)30</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\(userAccountControl:1\.2\.840\.113556\.1\.4\.803:=4194304\)|\(userAccountControl:1\.2\.840\.113556\.1\.4\.803:=2097152\)|!\(userAccountControl:1\.2\.840\.113556\.1\.4\.803:=1048574\)|\(userAccountControl:1\.2\.840\.113556\.1\.4\.803:=524288\)|\(userAccountControl:1\.2\.840\.113556\.1\.4\.803:=65536\)|\(userAccountControl:1\.2\.840\.113556\.1\.4\.803:=8192\)|\(userAccountControl:1\.2\.840\.113556\.1\.4\.803:=544\)|!\(UserAccountControl:1\.2\.840\.113556\.1\.4\.803:=2\)|msDS\-AllowedToActOnBehalfOfOtherIdentity|msDS\-AllowedToDelegateTo|msDS\-GroupManagedServiceAccount|\(accountExpires=9223372036854775807\)|\(accountExpires=0\)|\(adminCount=1\)|ms\-MCS\-AdmPwd</field>
    </rule>
    <rule id="900445" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/taskscheduler/win_taskscheduler_lolbin_execution_via_task_scheduler.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of Scheduled Tasks where the program being run is located in a suspicious location or where it is an unusual program to be run from a Scheduled Task-->
        <!--Date: 2022/12/05-->
        <!--Status: experimental-->
        <!--ID: f0767f15-0fb3-44b9-851e-e8d9a6d0005d-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Scheduled Task Executed Uncommon LOLBIN</description>
        <options>no_full_log</options>
        <group>windows,taskscheduler,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)129</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\\+calc\.exe|\\+cscript\.exe|\\+mshta\.exe|\\+mspaint\.exe|\\+notepad\.exe|\\+regsvr32\.exe|\\+wscript\.exe)</field>
    </rule>
    <rule id="900446" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/taskscheduler/win_taskscheduler_execution_from_susp_locations.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of Scheduled Tasks where the Program being run is located in a suspicious location or it's an unusale program to be run from a Scheduled Task-->
        <!--Date: 2022/12/05-->
        <!--Status: experimental-->
        <!--ID: 424273ea-7cf8-43a6-b712-375f925e481f-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Scheduled Task Executed From A Suspicious Location</description>
        <options>no_full_log</options>
        <group>windows,taskscheduler,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)129</field>
        <field name="full_log" negate="no" type="pcre2">(?i)C:\\+Windows\\+Temp\\+|\\+AppData\\+Local\\+Temp\\+|\\+Desktop\\+|\\+Downloads\\+|\\+Users\\+Public\\+|C:\\+Temp\\+</field>
    </rule>
    <rule id="900447" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/taskscheduler/win_taskscheduler_susp_schtasks_delete.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects when adversaries try to stop system services or processes by deleting their respective scheduled tasks in order to conduct data destructive activities-->
        <!--Date: 2023/01/13-->
        <!--Status: experimental-->
        <!--ID: 9e3cb244-bdb8-4632-8c90-6079c8f4f16d-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1489</id>
        </mitre>
        <description>Important Scheduled Task Deleted</description>
        <options>no_full_log</options>
        <group>windows,taskscheduler,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)141</field>
        <field name="win.eventdata.taskName" negate="no" type="pcre2">(?i)\\+Windows\\+SystemRestore\\+SR|\\+Windows\\+Windows\ Defender\\+|\\+Windows\\+BitLocker|\\+Windows\\+WindowsBackup\\+|\\+Windows\\+WindowsUpdate\\+|\\+Windows\\+UpdateOrchestrator\\+|\\+Windows\\+ExploitGuard</field>
        <field name="win.eventdata.samAccountName" negate="yes" type="pcre2">(?i)AUTHORI</field>
        <field name="win.eventdata.samAccountName" negate="yes" type="pcre2">(?i)AUTORI</field>
    </rule>
    <rule id="900448" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/appxdeployment_server/win_appxdeployment_server_susp_appx_package_installation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects an appx package installation with the error code "0x80073cff" which indicates that the package didn't meet the signing requirements and could be suspicious-->
        <!--Date: 2023/01/11-->
        <!--Status: test-->
        <!--ID: 898d5fc9-fbc3-43de-93ad-38e97237c344-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious AppX Package Installation Attempt</description>
        <options>no_full_log</options>
        <group>windows,appxdeployment-server,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)401</field>
        <field name="full_log" negate="no" type="pcre2">(?i)0x80073cff</field>
    </rule>
    <rule id="900449" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/appxdeployment_server/win_appxdeployment_server_susp_package_locations.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects an appx package added the pipeline of the "to be processed" packages which is located in suspicious locations-->
        <!--Date: 2023/01/11-->
        <!--Status: test-->
        <!--ID: 5cdeaf3d-1489-477c-95ab-c318559fc051-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious AppX Package Locations</description>
        <options>no_full_log</options>
        <group>windows,appxdeployment-server,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)854</field>
        <field name="full_log" negate="no" type="pcre2">(?i)C:\\+Users\\+Public\\+|/users/public/|C:\\+PerfLogs\\+|C:/perflogs/|\\+Desktop\\+|/desktop/|\\+Downloads\\+|/Downloads/|C:\\+Windows\\+Temp\\+|C:/Windows/Temp/|\\+AppdData\\+Local\\+Temp\\+|/AppdData/Local/Temp/</field>
    </rule>
    <rule id="900450" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/appxdeployment_server/win_appxdeployment_server_uncommon_package_locations.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects an appx package added the pipeline of the "to be processed" packages which is located in uncommon locations-->
        <!--Date: 2023/01/11-->
        <!--Status: test-->
        <!--ID: c977cb50-3dff-4a9f-b873-9290f56132f1-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Uncommon AppX Package Locations</description>
        <options>no_full_log</options>
        <group>windows,appxdeployment-server,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)854</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+WindowsApps\\+</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)C:\\+Windows\\+SystemApps\\+</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)C:\\+Windows\\+PrintDialog\\+</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)C:\\+Windows\\+ImmersiveControlPanel\\+</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)x\-windowsupdate://</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)file:///C:/Program%20Files</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)https://statics\.teams\.cdn\.office\.net/</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)microsoft\.com</field>
    </rule>
    <rule id="900451" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/appxdeployment_server/win_appxdeployment_server_policy_block.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects an appx package deployment that was blocked by the local computer policy-->
        <!--Date: 2023/01/11-->
        <!--Status: test-->
        <!--ID: e021bbb5-407f-41f5-9dc9-1864c45a7a51-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Deployment Of The AppX Package Was Blocked By The Policy</description>
        <options>no_full_log</options>
        <group>windows,appxdeployment-server,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)441|442|453|454</field>
    </rule>
    <rule id="900452" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/appxdeployment_server/win_appxdeployment_server_mal_appx_names.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potential installation or installation attempts of known malicious appx packages-->
        <!--Date: 2023/01/11-->
        <!--Status: test-->
        <!--ID: 09d3b48b-be17-47f5-bf4e-94e7e75d09ce-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Potential Malicious AppX Package Installation Attempts</description>
        <options>no_full_log</options>
        <group>windows,appxdeployment-server,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)400|401</field>
        <field name="full_log" negate="no" type="pcre2">(?i)3669e262\-ec02\-4e9d\-bcb4\-3d008b4afac9</field>
    </rule>
    <rule id="900453" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/appxdeployment_server/win_appxdeployment_server_susp_domains.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects an appx package added the pipeline of the "to be processed" packages which is downloaded from a suspicious domain-->
        <!--Date: 2023/01/11-->
        <!--Status: experimental-->
        <!--ID: 8b48ad89-10d8-4382-a546-50588c410f0d-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious Remote AppX Package Locations</description>
        <options>no_full_log</options>
        <group>windows,appxdeployment-server,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)854</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\.githubusercontent\.com|anonfiles\.com|cdn\.discordapp\.com|cdn\.discordapp\.com/attachments/|ddns\.net|dl\.dropboxusercontent\.com|ghostbin\.co|gofile\.io|hastebin\.com|mediafire\.com|mega\.nz|paste\.ee|pastebin\.com|pastebin\.pl|pastetext\.net|privatlab\.com|privatlab\.net|send\.exploit\.in|sendspace\.com|storage\.googleapis\.com|storjshare\.io|temp\.sh|transfer\.sh|ufile\.io</field>
    </rule>
    <rule id="900454" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/appxdeployment_server/win_appxdeployment_server_applocker_block.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects an appx package deployment that was blocked by AppLocker policy-->
        <!--Date: 2023/01/11-->
        <!--Status: test-->
        <!--ID: 6ae53108-c3a0-4bee-8f45-c7591a2c337f-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Deployment AppX Package Was Blocked By AppLocker</description>
        <options>no_full_log</options>
        <group>windows,appxdeployment-server,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)412</field>
    </rule>
    <rule id="900455" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/certificate_services_client_lifecycle_system/win_certificateservicesclient_lifecycle_system_cert_exported.yml</info>
        <!--Sigma Rule Author: Zach Mathis-->
        <!--Description: Detects when an application exports a certificate (and potentially the private key as well) from the local Windows certificate store.-->
        <!--Date: 2023/05/13-->
        <!--Status: experimental-->
        <!--ID: 58c0bff0-40a0-46e8-b5e8-b734b84d2017-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1649</id>
        </mitre>
        <description>Certificate Exported From Local Certificate Store</description>
        <options>no_full_log</options>
        <group>windows,certificateservicesclient-lifecycle-system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1007</field>
    </rule>
    <rule id="900456" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/applocker/win_applocker_file_was_not_allowed_to_run.yml</info>
        <!--Sigma Rule Author: Pushkarev Dmitry-->
        <!--Description: Detect run not allowed files. Applocker is a very useful tool, especially on servers where unprivileged users have access. For example terminal servers. You need configure applocker and log collect to receive these events.-->
        <!--Date: 2020/06/28-->
        <!--Status: test-->
        <!--ID: 401e5d00-b944-11ea-8f9a-00163ecd60ae-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204.002</id>
            <id>attack.t1059.001</id>
            <id>attack.t1059.003</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.006</id>
            <id>attack.t1059.007</id>
        </mitre>
        <description>File Was Not Allowed To Run</description>
        <options>no_full_log</options>
        <group>windows,applocker,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)8004|8007|8022|8025</field>
    </rule>
    <rule id="900457" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/code_integrity/win_codeintegrity_unsigned_driver_loaded.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the presence of a loaded unsigned kernel module on the system.-->
        <!--Date: 2023/06/06-->
        <!--Status: experimental-->
        <!--ID: 951f8d29-f2f6-48a7-859f-0673ff105e6f-->
        <mitre>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>CodeIntegrity - Unsigned Kernel Module Loaded</description>
        <options>no_full_log</options>
        <group>windows,codeintegrity-operational,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3001</field>
    </rule>
    <rule id="900458" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/code_integrity/win_codeintegrity_enforced_policy_block.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects blocked load events that did not meet the authenticode signing level requirements or violated the code integrity policy.-->
        <!--Date: 2022/11/10-->
        <!--Status: experimental-->
        <!--ID: e4be5675-4a53-426a-8c81-a8bb2387e947-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543</id>
        </mitre>
        <description>CodeIntegrity - Blocked Image/Driver Load For Policy Violation</description>
        <options>no_full_log</options>
        <group>windows,codeintegrity-operational,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3077</field>
    </rule>
    <rule id="900459" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/code_integrity/win_codeintegrity_blocked_protected_process_file.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects block events for files that are disallowed by code integrity for protected processes-->
        <!--Date: 2023/06/06-->
        <!--Status: experimental-->
        <!--ID: 5daf11c3-022b-4969-adb9-365e6c078c7c-->
        <mitre>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>CodeIntegrity - Disallowed File For Protected Processes Has Been Blocked</description>
        <options>no_full_log</options>
        <group>windows,codeintegrity-operational,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3104</field>
    </rule>
    <rule id="900460" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/code_integrity/win_codeintegrity_revoked_driver_loaded.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the load of a revoked kernel driver-->
        <!--Date: 2023/06/06-->
        <!--Status: experimental-->
        <!--ID: 320fccbf-5e32-4101-82b8-2679c5f007c6-->
        <mitre>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>CodeIntegrity - Revoked Kernel Driver Loaded</description>
        <options>no_full_log</options>
        <group>windows,codeintegrity-operational,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3021|3022</field>
    </rule>
    <rule id="900461" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/code_integrity/win_codeintegrity_revoked_driver_blocked.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects blocked load attempts of revoked drivers-->
        <!--Date: 2023/06/06-->
        <!--Status: experimental-->
        <!--ID: 9b72b82d-f1c5-4632-b589-187159bc6ec1-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543</id>
        </mitre>
        <description>CodeIntegrity - Blocked Driver Load With Revoked Certificate</description>
        <options>no_full_log</options>
        <group>windows,codeintegrity-operational,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3023</field>
    </rule>
    <rule id="900462" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/code_integrity/win_codeintegrity_unsigned_image_loaded.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects loaded unsigned image on the system-->
        <!--Date: 2023/06/06-->
        <!--Status: experimental-->
        <!--ID: c92c24e7-f595-493f-9c98-53d5142f5c18-->
        <mitre>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>CodeIntegrity - Unsigned Image Loaded</description>
        <options>no_full_log</options>
        <group>windows,codeintegrity-operational,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3037</field>
    </rule>
    <rule id="900463" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/code_integrity/win_codeintegrity_revoked_image_loaded.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects image load events with revoked certificates by code integrity.-->
        <!--Date: 2023/06/06-->
        <!--Status: experimental-->
        <!--ID: 881b7725-47cc-4055-8000-425823344c59-->
        <mitre>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>CodeIntegrity - Revoked Image Loaded</description>
        <options>no_full_log</options>
        <group>windows,codeintegrity-operational,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3032|3035</field>
    </rule>
    <rule id="900464" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/code_integrity/win_codeintegrity_revoked_image_blocked.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects blocked image load events with revoked certificates by code integrity.-->
        <!--Date: 2023/06/06-->
        <!--Status: experimental-->
        <!--ID: 6f156c48-3894-4952-baf0-16193e9067d2-->
        <mitre>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>CodeIntegrity - Blocked Image Load With Revoked Certificate</description>
        <options>no_full_log</options>
        <group>windows,codeintegrity-operational,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3036</field>
    </rule>
    <rule id="900465" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/code_integrity/win_codeintegrity_whql_failure.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects loaded kernel modules that did not meet the WHQL signing requirements.-->
        <!--Date: 2023/06/06-->
        <!--Status: experimental-->
        <!--ID: 2f8cd7a0-9d5a-4f62-9f8b-2c951aa0dd1f-->
        <mitre>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>CodeIntegrity - Unmet WHQL Requirements For Loaded Kernel Module</description>
        <options>no_full_log</options>
        <group>windows,codeintegrity-operational,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3082|3083</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)system32\\+drivers\\+vsock\.sys</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)System32\\+drivers\\+vmci\.sys</field>
    </rule>
    <rule id="900466" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/code_integrity/win_codeintegrity_attempted_dll_load.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects attempted file load events that did not meet the signing level requirements. It often means the file's signature is revoked or a signature with the Lifetime Signing EKU has expired.
This event is best correlated with EID 3089 to determine the error of the validation.
-->
        <!--Date: 2022/01/20-->
        <!--Status: experimental-->
        <!--ID: f8931561-97f5-4c46-907f-0a4a592e47a7-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>CodeIntegrity - Unmet Signing Level Requirements By File Under Validation</description>
        <options>no_full_log</options>
        <group>windows,codeintegrity-operational,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3033|3034</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+Windows\\+assembly\\+GAC\\+</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+mscorsvw\.exe)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+Windows\\+Microsoft\.NET\\+</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)8</field>
    </rule>
    <rule id="900467" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/code_integrity/win_codeintegrity_attempted_dll_load.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects attempted file load events that did not meet the signing level requirements. It often means the file's signature is revoked or a signature with the Lifetime Signing EKU has expired.
This event is best correlated with EID 3089 to determine the error of the validation.
-->
        <!--Date: 2022/01/20-->
        <!--Status: experimental-->
        <!--ID: f8931561-97f5-4c46-907f-0a4a592e47a7-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>CodeIntegrity - Unmet Signing Level Requirements By File Under Validation</description>
        <options>no_full_log</options>
        <group>windows,codeintegrity-operational,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3033|3034</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Program\ Files\\+DTrace\\+dtrace\.dll)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Windows\\+System32\\+svchost\.exe)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)12</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+Windows\\+System32\\+DriverStore\\+FileRepository\\+</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+igd10iumd64\.dll)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)7</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Windows\\+System32\\+nvspcap64\.dll)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Keybase\\+Gui\\+Keybase\.exe)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Microsoft\\+Teams\\+stage\\+Teams\.exe)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)8</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Program\ Files\\+Bonjour\\+mdnsNSP\.dll)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Windows\\+System32\\+svchost\.exe)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Windows\\+System32\\+SIHClient\.exe)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)8</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)12</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+Microsoft\ Office\\+root\\+vfs\\+ProgramFilesCommonX64\\+Microsoft\ Shared\\+OFFICE</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+MSOXMLMF\.DLL)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)7</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Windows\\+System32\\+nvspcap64\.dll)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+slack\\+app\-</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+slack\.exe)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)8</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Mozilla\ Firefox\\+mozavcodec\.dll)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Mozilla\ Firefox\\+mozavutil\.dll)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Mozilla\ Firefox\\+firefox\.exe)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)8</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Program\ Files\\+Avast\ Software\\+Avast\\+aswAMSI\.dll)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Program\ Files\ \(x86\)\\+Avast\ Software\\+Avast\\+aswAMSI\.dll)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)8</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)12</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+Program\ Files\\+Google\\+Drive\ File\ Stream\\+</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+crashpad_handler\.exe)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Windows\\+ImmersiveControlPanel\\+SystemSettings\.exe)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)8</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Trend\ Micro\\+Client\ Server\ Security\ Agent\\+perficrcperfmonmgr\.dll)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)8</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Program\ Files\\+National\ Instruments\\+Shared\\+mDNS\ Responder\\+nimdnsNSP\.dll\ )</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Program\ Files\\+McAfee\\+Endpoint\ Security\\+Threat\ Prevention\\+MfeAmsiProvider\.dll)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Program\ Files\\+McAfee\\+MfeAV\\+AMSIExt\.dll)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+Program\ Files\\+ESET\\+ESET\ Security\\+eamsi\.dll)</field>
    </rule>
    <rule id="900468" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/Other/win_av_relevant_match.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Arnim Rupp-->
        <!--Description: This detection method points out highly relevant Antivirus events-->
        <!--Date: 2017/02/19-->
        <!--Status: test-->
        <!--ID: 78bc5783-81d9-4d73-ac97-59f6db4f72a8-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1588</id>
        </mitre>
        <description>Relevant Anti-Virus Event</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)Adfind|ASP/BackDoor|ATK/|Backdoor\.ASP|Backdoor\.Cobalt|Backdoor\.JSP|Backdoor\.PHP|Blackworm|Brutel|BruteR|Chopper|Cobalt|COBEACON|Cometer|CRYPTES|Cryptor|Destructor|DumpCreds|Exploit\.Script\.CVE|Filecoder|FastReverseProxy|GrandCrab|HackTool|HKTL\.|HKTL/|HKTL:|HTool|Impacket|IISExchgSpawnCMD|JSP/BackDoor|Keylogger|Koadic|Krypt|Lazagne|Locker|Metasploit|Meterpreter|MeteTool|Mimikatz|Mpreter|Nighthawk|Packed\.Generic\.347|PentestPowerShell|Phobos|PHP/BackDoor|Potato|PowerSploit|PowerSSH|PshlSpy|PSWTool|PWCrack|PWDump|Ransom|Rozena|Ryzerlo|Sbelt|Seatbelt|SecurityTool|SharpDump|Sliver|Splinter|Swrort|Tescrypt|TeslaCrypt|Valyria|Webshell</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)Keygen</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)Crack</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)anti_ransomware_service\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)cyber\-protect\-service\.exe</field>
        <field name="win.system.level" negate="yes" type="pcre2">(?i)4</field>
        <field name="win.eventdata.providerName" negate="yes" type="pcre2">(?i)Microsoft\-Windows\-RestartManager</field>
    </rule>
    <rule id="900469" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/esent/win_esent_ntdsutil_abuse.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potential abuse of ntdsutil to dump ntds.dit database-->
        <!--Date: 2022/08/14-->
        <!--Status: test-->
        <!--ID: e6e88853-5f20-4c4a-8d26-cd469fd8d31f-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Ntdsutil Abuse</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)ESENT</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)216|325|326|327</field>
        <field name="full_log" negate="no" type="pcre2">(?i)ntds\.dit</field>
    </rule>
    <rule id="900470" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/screenconnect/win_app_remote_access_tools_screenconnect_command_exec.yml</info>
        <!--Sigma Rule Author: Ali Alwashali-->
        <!--Description: Detects command execution via ScreenConnect RMM-->
        <!--Date: 2023/10/10-->
        <!--Status: experimental-->
        <!--ID: 076ebe48-cc05-4d8f-9d41-89245cd93a14-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.003</id>
        </mitre>
        <description>Remote Access Tool - ScreenConnect Command Execution</description>
        <options>no_full_log</options>
        <group>application,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)ScreenConnect</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)200</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Executed\ command\ of\ length</field>
    </rule>
    <rule id="900471" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/screenconnect/win_app_remote_access_tools_screenconnect_file_transfer.yml</info>
        <!--Sigma Rule Author: Ali Alwashali-->
        <!--Description: Detects file being transferred via ScreenConnect RMM-->
        <!--Date: 2023/10/10-->
        <!--Status: experimental-->
        <!--ID: 5d19eb78-5b5b-4ef2-a9f0-4bfa94d58a13-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.003</id>
        </mitre>
        <description>Remote Access Tool - ScreenConnect File Transfer</description>
        <options>no_full_log</options>
        <group>application,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)ScreenConnect</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)201</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Transferred\ files\ with\ action</field>
    </rule>
    <rule id="900472" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/microsoft-windows_audit_cve/win_audit_cve.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Zach Mathis-->
        <!--Description: Detects events generated by user-mode applications when they call the CveEventWrite API when a known vulnerability is trying to be exploited.
MS started using this log in Jan. 2020 with CVE-2020-0601 (a Windows CryptoAPI vulnerability.
Unfortunately, that is about the only instance of CVEs being written to this log.
-->
        <!--Date: 2020/01/15-->
        <!--Status: test-->
        <!--ID: 48d91a3a-2363-43ba-a456-ca71ac3da5c2-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1203</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1068</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1211</id>
            <id>attack.credential_access</id>
            <id>attack.t1212</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1210</id>
            <id>attack.impact</id>
            <id>attack.t1499.004</id>
        </mitre>
        <description>Audit CVE Event</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Audit\-CVE|Audit\-CVE</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1</field>
    </rule>
    <rule id="900473" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/msiinstaller/win_msi_install_from_web.yml</info>
        <!--Sigma Rule Author: Stamatis Chatzimangou-->
        <!--Description: Detects installation of a remote msi file from web.-->
        <!--Date: 2022/10/23-->
        <!--Status: test-->
        <!--ID: 5594e67a-7f92-4a04-b65d-1a42fd824a60-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218</id>
            <id>attack.t1218.007</id>
        </mitre>
        <description>MSI Installation From Web</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)MsiInstaller</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1040|1042</field>
        <field name="full_log" negate="no" type="pcre2">(?i)://</field>
    </rule>
    <rule id="900474" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/msiinstaller/win_msi_install_from_susp_locations.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects MSI package installation from suspicious locations-->
        <!--Date: 2022/08/31-->
        <!--Status: test-->
        <!--ID: c7c8aa1c-5aff-408e-828b-998e3620b341-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>MSI Installation From Suspicious Locations</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)MsiInstaller</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1040|1042</field>
        <field name="full_log" negate="no" type="pcre2">(?i):\\+Windows\\+TEMP\\+|\\+|\\+Desktop\\+|\\+PerfLogs\\+|\\+Users\\+Public\\+</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+WinGet\\+</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)C:\\+Windows\\+TEMP\\+UpdHealthTools\.msi</field>
    </rule>
    <rule id="900475" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/msiinstaller/win_builtin_remove_application.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An application has been removed. Check if it is critical.-->
        <!--Date: 2022/01/28-->
        <!--Status: test-->
        <!--ID: 570ae5ec-33dc-427c-b815-db86228ad43e-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1489</id>
        </mitre>
        <description>Application Uninstalled</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)MsiInstaller</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)11724|1034</field>
    </rule>
    <rule id="900476" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/msiinstaller/win_software_atera_rmm_agent_install.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects successful installation of Atera Remote Monitoring & Management (RMM) agent as recently found to be used by Conti operators-->
        <!--Date: 2021/09/01-->
        <!--Status: test-->
        <!--ID: 87261fb2-69d0-42fe-b9de-88c6b5f65a43-->
        <mitre>
            <id>attack.t1219</id>
        </mitre>
        <description>Atera Agent Installation</description>
        <options>no_full_log</options>
        <group>application,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1033</field>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)MsiInstaller</field>
        <field name="win.system.message" negate="no" type="pcre2">(?i)AteraAgent</field>
    </rule>
    <rule id="900477" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/microsoft_windows_software_restriction_policies/win_software_restriction_policies_block.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects restricted access to applications by the Software Restriction Policies (SRP) policy-->
        <!--Date: 2023/01/12-->
        <!--Status: test-->
        <!--ID: b4c8da4a-1c12-46b0-8a2b-0a8521d03442-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1072</id>
        </mitre>
        <description>Restricted Software Access By SRP</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Microsoft\-Windows\-SoftwareRestrictionPolicies</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)865|866|867|868|882</field>
    </rule>
    <rule id="900478" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/application_error/win_application_msmpeng_crash_error.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This rule detects a suspicious crash of the Microsoft Malware Protection Engine-->
        <!--Date: 2017/05/09-->
        <!--Status: experimental-->
        <!--ID: 545a5da6-f103-4919-a519-e9aec1026ee4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1211</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Microsoft Malware Protection Engine Crash</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Application\ Error</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1000</field>
        <field name="full_log" negate="no" type="pcre2">(?i)MsMpEng\.exe</field>
        <field name="full_log" negate="no" type="pcre2">(?i)mpengine\.dll</field>
    </rule>
    <rule id="900479" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/application_error/win_werfault_susp_lsass_credential_dump.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects Windows error reporting event where the process that crashed is lsass. This could be the cause of an intentional crash by techniques such as Lsass-Shtinkering to dump credential-->
        <!--Date: 2022/12/07-->
        <!--Status: test-->
        <!--ID: a18e0862-127b-43ca-be12-1a542c75c7c5-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Potential Credential Dumping Via WER - Application</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Application\ Error</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1000</field>
        <field name="full_log" negate="no" type="pcre2">(?i)lsass\.exe</field>
        <field name="full_log" negate="no" type="pcre2">(?i)c0000001</field>
    </rule>
    <rule id="900480" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/microsoft_windows_backup/win_susp_backup_delete.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Tom U. @c_APT_ure (collection)-->
        <!--Description: Detects backup catalog deletions-->
        <!--Date: 2017/05/12-->
        <!--Status: test-->
        <!--ID: 9703792d-fd9a-456d-a672-ff92efe4806a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.004</id>
        </mitre>
        <description>Backup Catalog Deleted</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)524</field>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Backup</field>
    </rule>
    <rule id="900481" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/mssqlserver/win_mssql_sp_procoption_set.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when the a stored procedure is set or cleared for automatic execution in MSSQL. A stored procedure that is set to automatic execution runs every time an instance of SQL Server is started-->
        <!--Date: 2022/07/13-->
        <!--Status: test-->
        <!--ID: b3d57a5c-c92e-4b48-9a79-5f124b7cf964-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>MSSQL SPProcoption Set</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)MSSQLSERVER</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)33205</field>
        <field name="full_log" negate="no" type="pcre2">(?i)object_name:sp_procoption</field>
        <field name="full_log" negate="no" type="pcre2">(?i)statement:EXEC</field>
    </rule>
    <rule id="900482" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/mssqlserver/win_mssql_add_sysadmin_account.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when an attacker tries to backdoor the MSSQL server by adding a backdoor account to the sysadmin fixed server role-->
        <!--Date: 2022/07/13-->
        <!--Status: test-->
        <!--ID: 08200f85-2678-463e-9c32-88dce2f073d1-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>MSSQL Add Account To Sysadmin Role</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)MSSQLSERVER</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)33205</field>
        <field name="full_log" negate="no" type="pcre2">(?i)object_name:sysadmin</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:statement:alter\ server\ role\ \[sysadmin\]\ add\ member\ )</field>
    </rule>
    <rule id="900483" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/mssqlserver/win_mssql_xp_cmdshell_audit_log.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when the MSSQL "xp_cmdshell" stored procedure is used to execute commands-->
        <!--Date: 2022/07/12-->
        <!--Status: test-->
        <!--ID: 7f103213-a04e-4d59-8261-213dddf22314-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>MSSQL XPCmdshell Suspicious Execution</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)MSSQLSERVER</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)33205</field>
        <field name="full_log" negate="no" type="pcre2">(?i)object_name:xp_cmdshell</field>
        <field name="full_log" negate="no" type="pcre2">(?i)statement:EXEC</field>
    </rule>
    <rule id="900484" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/mssqlserver/win_mssql_failed_logon.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), j4son-->
        <!--Description: Detects failed logon attempts from clients to MSSQL server.-->
        <!--Date: 2023/10/11-->
        <!--Status: experimental-->
        <!--ID: 218d2855-2bba-4f61-9c85-81d0ea63ac71-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1110</id>
        </mitre>
        <description>MSSQL Server Failed Logon</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)MSSQLSERVER</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)18456</field>
    </rule>
    <rule id="900485" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/mssqlserver/win_mssql_disable_audit_settings.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when an attacker calls the "ALTER SERVER AUDIT" or "DROP SERVER AUDIT" transaction in order to delete or disable audit logs on the server-->
        <!--Date: 2022/07/13-->
        <!--Status: test-->
        <!--ID: 350dfb37-3706-4cdc-9e2e-5e24bc3a46df-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>MSSQL Disable Audit Settings</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)MSSQLSERVER</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)33205</field>
        <field name="full_log" negate="no" type="pcre2">(?i)statement:ALTER\ SERVER\ AUDIT|statement:DROP\ SERVER\ AUDIT</field>
    </rule>
    <rule id="900486" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/mssqlserver/win_mssql_failed_logon_from_external_network.yml</info>
        <!--Sigma Rule Author: j4son-->
        <!--Description: Detects failed logon attempts from clients with external network IP to an MSSQL server. This can be a sign of a bruteforce attack.-->
        <!--Date: 2023/10/11-->
        <!--Status: experimental-->
        <!--ID: ebfe73c2-5bc9-4ed9-aaa8-8b54b2b4777d-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1110</id>
        </mitre>
        <description>MSSQL Server Failed Logon From External Network</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)MSSQLSERVER</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)18456</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 10\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 172\.16\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 172\.17\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 172\.18\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 172\.19\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 172\.20\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 172\.21\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 172\.22\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 172\.23\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 172\.24\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 172\.25\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 172\.26\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 172\.27\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 172\.28\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 172\.29\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 172\.30\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 172\.31\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 192\.168\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 127\.</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)CLIENT:\ 169\.254\.</field>
    </rule>
    <rule id="900487" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/mssqlserver/win_mssql_xp_cmdshell_change.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when the MSSQL "xp_cmdshell" stored procedure setting is changed-->
        <!--Date: 2022/07/12-->
        <!--Status: test-->
        <!--ID: d08dd86f-681e-4a00-a92c-1db218754417-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>MSSQL XPCmdshell Option Change</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)MSSQLSERVER</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)15457</field>
        <field name="full_log" negate="no" type="pcre2">(?i)xp_cmdshell</field>
    </rule>
    <rule id="900488" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/application/windows_error_reporting/win_application_msmpeng_crash_wer.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This rule detects a suspicious crash of the Microsoft Malware Protection Engine-->
        <!--Date: 2017/05/09-->
        <!--Status: experimental-->
        <!--ID: 6c82cf5c-090d-4d57-9188-533577631108-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1211</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Microsoft Malware Protection Engine Crash - WER</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Windows\ Error\ Reporting</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1001</field>
        <field name="full_log" negate="no" type="pcre2">(?i)MsMpEng\.exe</field>
        <field name="full_log" negate="no" type="pcre2">(?i)mpengine\.dll</field>
    </rule>
    <rule id="900489" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/dns_server/win_dns_server_susp_server_level_plugin_dll.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a DNS server error in which a specified plugin DLL (in registry) could not be loaded-->
        <!--Date: 2017/05/08-->
        <!--Status: test-->
        <!--ID: cbe51394-cd93-4473-b555-edf0144952d9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>DNS Server Error Failed Loading the ServerLevelPluginDLL</description>
        <options>no_full_log</options>
        <group>windows,dns-server,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)150|770|771</field>
    </rule>
    <rule id="900490" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/dns_server/win_dns_server_failed_dns_zone_transfer.yml</info>
        <!--Sigma Rule Author: Zach Mathis-->
        <!--Description: Detects when a DNS zone transfer failed.-->
        <!--Date: 2023/05/24-->
        <!--Status: experimental-->
        <!--ID: 6d444368-6da1-43fe-b2fc-44202430480e-->
        <mitre>
            <id>attack.reconnaissance</id>
            <id>attack.t1590.002</id>
        </mitre>
        <description>Failed DNS Zone Transfer</description>
        <options>no_full_log</options>
        <group>windows,dns-server,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)6004</field>
    </rule>
    <rule id="900491" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_powershell_script_installed_as_service.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: Detects powershell script installed as a Service-->
        <!--Date: 2020/10/06-->
        <!--Status: test-->
        <!--ID: a2e5019d-a658-4c6a-92bf-7197b54e2cae-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>PowerShell Scripts Installed as Services</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)powershell|pwsh</field>
    </rule>
    <rule id="900492" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_cobaltstrike_service_installs.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Wojciech Lesicki-->
        <!--Description: Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement-->
        <!--Date: 2021/05/26-->
        <!--Status: test-->
        <!--ID: 5a105d34-05fc-401e-8553-272b45c1522d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>CobaltStrike Service Installations - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)ADMIN\$</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\.exe</field>
    </rule>
    <rule id="900493" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_cobaltstrike_service_installs.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Wojciech Lesicki-->
        <!--Description: Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement-->
        <!--Date: 2021/05/26-->
        <!--Status: test-->
        <!--ID: 5a105d34-05fc-401e-8553-272b45c1522d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>CobaltStrike Service Installations - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)%COMSPEC%</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)start</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)powershell</field>
    </rule>
    <rule id="900494" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_cobaltstrike_service_installs.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Wojciech Lesicki-->
        <!--Description: Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement-->
        <!--Date: 2021/05/26-->
        <!--Status: test-->
        <!--ID: 5a105d34-05fc-401e-8553-272b45c1522d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>CobaltStrike Service Installations - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)powershell\ \-nop\ \-w\ hidden\ \-encodedcommand</field>
    </rule>
    <rule id="900495" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_cobaltstrike_service_installs.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Wojciech Lesicki-->
        <!--Description: Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement-->
        <!--Date: 2021/05/26-->
        <!--Status: test-->
        <!--ID: 5a105d34-05fc-401e-8553-272b45c1522d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>CobaltStrike Service Installations - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">IEX\ \(New\-Object\ Net\.Webclient\)\.DownloadString\('http://127\.0\.0\.1:</field>
    </rule>
    <rule id="900496" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_tap_driver_installation.yml</info>
        <!--Sigma Rule Author: Daniil Yugoslavskiy, Ian Davis, oscd.community-->
        <!--Description: Well-known TAP software installation. Possible preparation for data exfiltration using tunnelling techniques-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 8e4cf0e5-aa5d-4dc3-beff-dc26917744a9-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048</id>
        </mitre>
        <description>Tap Driver Installation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)tap0901</field>
    </rule>
    <rule id="900497" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_via_var_services.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via VAR++ LAUNCHER-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: 14bcba49-a428-42d9-b943-e2ce0f0f7ae6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\&amp;\&amp;set</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\-f</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\{0\}|\{1\}|\{2\}|\{3\}|\{4\}|\{5\}</field>
    </rule>
    <rule id="900498" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_var_services.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Environment Variables to execute PowerShell-->
        <!--Date: 2020/10/15-->
        <!--Status: test-->
        <!--ID: 8ca7004b-e620-4ecb-870e-86129b5b8e75-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR+ Launcher - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)"set</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\-f</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)/c|/r</field>
    </rule>
    <rule id="900499" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_defender_disabled.yml</info>
        <!--Sigma Rule Author: J&#225;n Tren&#269;ansk&#253;, frack113-->
        <!--Description: Detects the "Windows Defender Threat Protection" service has been disabled-->
        <!--Date: 2020/07/28-->
        <!--Status: stable-->
        <!--ID: 6c0a7755-6d31-44fa-80e1-133e57752680-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Threat Detection Disabled - Service</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7036</field>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="full_log" negate="no" type="pcre2">(?i)Windows\ Defender\ Antivirus\ Service|Service\ antivirus\ Microsoft\ Defender</field>
        <field name="full_log" negate="no" type="pcre2">(?i)stopped|arrêté</field>
    </rule>
    <rule id="900500" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_via_rundll_services.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via RUNDLL LAUNCHER-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: 11b52f18-aaec-4d60-9143-5dd8cc4706b9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation RUNDLL LAUNCHER - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)powershell</field>
    </rule>
    <rule id="900501" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_meterpreter_or_cobaltstrike_getsystem_service_installation.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Ecco, Florian Roth-->
        <!--Description: Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service installation-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: 843544a7-56e0-4dcc-a44f-5cc266dd97d6-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1134.001</id>
            <id>attack.t1134.002</id>
        </mitre>
        <description>Meterpreter or Cobalt Strike Getsystem Service Installation - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\\+pipe\\+</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)%COMSPEC%</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\\+pipe\\+</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)cmd\.exe</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\\+pipe\\+</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\.dll,a</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)/p:</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)^(?:\\+127\.0\.0\.1\\+ADMIN\$\\+)</field>
    </rule>
    <rule id="900502" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_hack_smbexec.yml</info>
        <!--Sigma Rule Author: Omer Faruk Celik-->
        <!--Description: Detects the use of smbexec.py tool by detecting a specific service installation-->
        <!--Date: 2018/03/20-->
        <!--Status: test-->
        <!--ID: 52a85084-6989-40c3-8f32-091e12e13f09-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.execution</id>
            <id>attack.t1021.002</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>smbexec.py Service Installation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)BTOBTO</field>
    </rule>
    <rule id="900503" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_hack_smbexec.yml</info>
        <!--Sigma Rule Author: Omer Faruk Celik-->
        <!--Description: Detects the use of smbexec.py tool by detecting a specific service installation-->
        <!--Date: 2018/03/20-->
        <!--Status: test-->
        <!--ID: 52a85084-6989-40c3-8f32-091e12e13f09-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.execution</id>
            <id>attack.t1021.002</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>smbexec.py Service Installation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\.bat\ \&amp;\ del\ |__output\ 2\^&gt;\^\&amp;1\ &gt;</field>
    </rule>
    <rule id="900504" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_susp_service_installation_folder_pattern.yml</info>
        <!--Sigma Rule Author: pH-T (Nextron Systems)-->
        <!--Description: Detects service installation with suspicious folder patterns-->
        <!--Date: 2022/03/18-->
        <!--Status: test-->
        <!--ID: 1b2ae822-6fe1-43ba-aa7c-d1a3b3d1d5f2-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>car.2013-09-005</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Service Installation with Suspicious Folder Pattern</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)^[Cc]:\\+[Pp]rogram[Dd]ata\\+.{1,9}\.exe</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)^[Cc]:\\+.{1,9}\.exe</field>
    </rule>
    <rule id="900505" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_susp_rtcore64_service_install.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the installation of RTCore service. Which could be an indication of Micro-Star MSI Afterburner vulnerable driver abuse-->
        <!--Date: 2022/08/30-->
        <!--Status: test-->
        <!--ID: 91c49341-e2ef-40c0-ac45-49ec5c3fe26c-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>RTCore Suspicious Service Installation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)RTCore64</field>
    </rule>
    <rule id="900506" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_krbrelayup_service_installation.yml</info>
        <!--Sigma Rule Author: Sittikorn S, Tim Shelton-->
        <!--Description: Detects service creation from KrbRelayUp tool used for privilege escalation in Windows domain environments where LDAP signing is not enforced (the default settings)-->
        <!--Date: 2022/05/11-->
        <!--Status: test-->
        <!--ID: e97d9903-53b2-41fc-8cb9-889ed4093e80-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543</id>
        </mitre>
        <description>KrbRelayUp Service Installation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)KrbSCM</field>
    </rule>
    <rule id="900507" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_via_use_mshta_services.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use MSHTA in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: 7e9c7999-0f9b-4d4a-a6ed-af6d553d4af4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use MSHTA - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)mshta</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)vbscript:createobject</field>
    </rule>
    <rule id="900508" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_susp_proceshacker.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a ProcessHacker tool that elevated privileges to a very high level-->
        <!--Date: 2021/05/27-->
        <!--Status: test-->
        <!--ID: c4ff1eac-84ad-44dd-a6fb-d56a92fc43a9-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>ProcessHacker Privilege Elevation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)^(?:ProcessHacker)</field>
        <field name="win.eventdata.targetUserName" negate="no" type="pcre2">(?i)LocalSystem</field>
    </rule>
    <rule id="900509" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_service_install_sliver.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects known malicious service installation that appear in cases in which a Sliver implants execute the PsExec commands-->
        <!--Date: 2022/08/25-->
        <!--Status: test-->
        <!--ID: 31c51af6-e7aa-4da7-84d4-8f32cc580af2-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>Sliver C2 Default Service Installation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)^[a-zA-Z]:\\+windows\\+temp\\+[a-zA-Z0-9]{10}\.exe</field>
    </rule>
    <rule id="900510" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_service_install_sliver.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects known malicious service installation that appear in cases in which a Sliver implants execute the PsExec commands-->
        <!--Date: 2022/08/25-->
        <!--Status: test-->
        <!--ID: 31c51af6-e7aa-4da7-84d4-8f32cc580af2-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>Sliver C2 Default Service Installation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)Sliver|Sliver\ implant</field>
    </rule>
    <rule id="900511" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_service_install_susp_double_ampersand.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a service installation that uses a suspicious double ampersand used in the image path value-->
        <!--Date: 2022/07/05-->
        <!--Status: test-->
        <!--ID: ca83e9f3-657a-45d0-88d6-c1ac280caf53-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>New Service Uses Double Ampersand in Path</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
    </rule>
    <rule id="900512" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_via_use_clip_services.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Clip.exe in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: 63e3365d-4824-42d8-8b82-e56810fefa0c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Clip - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\(Clipboard\|i</field>
    </rule>
    <rule id="900513" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_clip_services.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Clip.exe to execute PowerShell-->
        <!--Date: 2020/10/13-->
        <!--Status: experimental-->
        <!--ID: f7385ee2-0e0c-11eb-adc1-0242ac120002-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation CLIP+ Launcher - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)clipboard\]::</field>
    </rule>
    <rule id="900514" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_susp_service_installation.yml</info>
        <!--Sigma Rule Author: pH-T (Nextron Systems)-->
        <!--Description: Detects suspicious service installation commands-->
        <!--Date: 2022/03/18-->
        <!--Status: test-->
        <!--ID: 1d61f71d-59d2-479e-9562-4ff5f4ead16b-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>car.2013-09-005</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Suspicious Service Installation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\ \-w\ hidden\ |\ \-nop\ |\ \-sta\ |\\+Users\\+Public\\+|\\+Windows\\+Temp\\+|\\+Perflogs\\+|\\+\.\\+pipe|\\+ADMIN\$\\+|C:\\+Temp\\+|\.downloadstring\(|\.downloadfile\(</field>
    </rule>
    <rule id="900515" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_susp_service_installation.yml</info>
        <!--Sigma Rule Author: pH-T (Nextron Systems)-->
        <!--Description: Detects suspicious service installation commands-->
        <!--Date: 2022/03/18-->
        <!--Status: test-->
        <!--ID: 1d61f71d-59d2-479e-9562-4ff5f4ead16b-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>car.2013-09-005</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Suspicious Service Installation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\ \-e</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\ JAB|\ SUVYI|\ SQBFAFgA|\ aWV4I|\ IAB|\ PAA|\ aQBlAHgA</field>
        <field name="win.eventdata.imagePath" negate="yes" type="pcre2">(?i)^(?:C:\\+WINDOWS\\+TEMP\\+thor10\-remote\\+thor64\.exe)</field>
        <field name="win.eventdata.imagePath" negate="yes" type="pcre2">(?i)^(?:C:\\+ProgramData\\+Microsoft\\+Windows\ Defender\\+Definition\ Updates\\+)</field>
    </rule>
    <rule id="900516" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_via_stdin_services.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via Stdin in Scripts-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: 487c7524-f892-4054-b263-8a0ace63fc25-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Stdin - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)set</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)environment|invoke|input</field>
    </rule>
    <rule id="900517" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_service_install_anydesk.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the installation of the anydesk software service. Which could be an indication of anydesk abuse if you the software isn't already used.-->
        <!--Date: 2022/08/11-->
        <!--Status: test-->
        <!--ID: 530a6faa-ff3d-4022-b315-50828e77eef5-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Anydesk Remote Access Software Service Installation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)AnyDesk\ Service</field>
    </rule>
    <rule id="900518" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_via_use_rundll32_services.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Rundll32 in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: 641a4bfb-c017-44f7-800c-2aee0184ce9b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Rundll32 - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)shellexec_rundll</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)value|invoke|comspec|iex</field>
    </rule>
    <rule id="900519" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_service_terminated_error_generic.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects Windows services that got terminated for whatever reason-->
        <!--Date: 2023/04/14-->
        <!--Status: experimental-->
        <!--ID: acfa2210-0d71-4eeb-b477-afab494d596c-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Windows Service Terminated With Error</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7023</field>
    </rule>
    <rule id="900520" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_service_install_hacktools.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects installation or execution of services-->
        <!--Date: 2022/03/21-->
        <!--Status: test-->
        <!--ID: d26ce60c-2151-403c-9a42-49420d87b5e4-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>HackTool Service Registration or Execution</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045|7036</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)cachedump|DumpSvc|gsecdump|pwdump|UACBypassedService|WCE\ SERVICE|WCESERVICE|winexesvc</field>
    </rule>
    <rule id="900521" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_service_install_hacktools.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects installation or execution of services-->
        <!--Date: 2022/03/21-->
        <!--Status: test-->
        <!--ID: d26ce60c-2151-403c-9a42-49420d87b5e4-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>HackTool Service Registration or Execution</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045|7036</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)bypass</field>
    </rule>
    <rule id="900522" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_invoke_obfuscation_via_compress_services.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via COMPRESS OBFUSCATION-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: 175997c5-803c-4b08-8bb0-70b099f47595-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation COMPRESS OBFUSCATION - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)new\-object</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)text\.encoding\]::ascii</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)readtoend</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i):system\.io\.compression\.deflatestream|system\.io\.streamreader</field>
    </rule>
    <rule id="900523" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_mal_creddumper.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Teymur Kheirkhabarov, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects well-known credential dumping tools execution via service execution events-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: 4976aa50-8f41-45c6-8b15-ab3fc10e79ed-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.execution</id>
            <id>attack.t1003.001</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.004</id>
            <id>attack.t1003.005</id>
            <id>attack.t1003.006</id>
            <id>attack.t1569.002</id>
            <id>attack.s0005</id>
        </mitre>
        <description>Credential Dumping Tools Service Execution - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)cachedump|dumpsvc|fgexec|gsecdump|mimidrv|pwdump|servpw</field>
    </rule>
    <rule id="900524" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_service_install_remote_access_software.yml</info>
        <!--Sigma Rule Author: Connor Martin, Nasreddine Bencherchali-->
        <!--Description: Detects service installation of different remote access tools software. These software are often abused by threat actors to perform-->
        <!--Date: 2022/12/23-->
        <!--Status: experimental-->
        <!--ID: 1a31b18a-f00c-4061-9900-f735b96c99fc-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>Remote Access Tool Services Have Been Installed - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045|7036</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)AmmyyAdmin|Atera|BASupportExpressSrvcUpdater|BASupportExpressStandaloneService|chromoting|GoToAssist|GoToMyPC|jumpcloud|LMIGuardianSvc|LogMeIn|monblanking|Parsec|RManService|RPCPerformanceService|RPCService|SplashtopRemoteService|SSUService|TeamViewer|TightVNC|vncserver|Zoho</field>
    </rule>
    <rule id="900525" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_moriya_rootkit.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects the use of Moriya rootkit as described in the securelist's Operation TunnelSnake report-->
        <!--Date: 2021/05/06-->
        <!--Status: test-->
        <!--ID: 25b9c01c-350d-4b95-bed1-836d04a4f324-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Moriya Rootkit - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.serviceName" negate="no" type="pcre2">(?i)ZzNetSvc</field>
    </rule>
    <rule id="900526" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_susp_service_installation_folder.yml</info>
        <!--Sigma Rule Author: pH-T (Nextron Systems)-->
        <!--Description: Detects service installation in suspicious folder appdata-->
        <!--Date: 2022/03/18-->
        <!--Status: test-->
        <!--ID: 5e993621-67d4-488a-b9ae-b420d08b96cb-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>car.2013-09-005</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Service Installation in Suspicious Folder</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.imagePath" negate="no" type="pcre2">(?i)\\+AppData\\+|\\+127\.0\.0\.1|\\+localhost</field>
        <field name="win.eventdata.serviceName" negate="yes" type="pcre2">(?i)Zoom\ Sharing\ Service</field>
        <field name="win.eventdata.imagePath" negate="yes" type="pcre2">(?i)^(?:"C:\\+Program\ Files\\+Common\ Files\\+Zoom\\+Support\\+CptService\.exe)</field>
    </rule>
    <rule id="900527" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/service_control_manager/win_system_system_service_installation_by_unusal_client.yml</info>
        <!--Sigma Rule Author: Tim Rauch-->
        <!--Description: Detects a service installed by a client which has PID 0 or whose parent has PID 0-->
        <!--Date: 2022/09/15-->
        <!--Status: test-->
        <!--ID: 71c276aa-49cd-43d2-b920-2dcd3e6962d5-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543</id>
        </mitre>
        <description>Service Installed By Unusual Client - System</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Service\ Control\ Manager</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)7045</field>
        <field name="win.eventdata.processId" negate="no" type="pcre2">(?i)0</field>
    </rule>
    <rule id="900528" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/microsoft_windows_directory_services_sam/win_system_exploit_cve_2021_42287.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: The attacker creates a computer object using those permissions with a password known to her.
After that she clears the attribute ServicePrincipalName on the computer object.
Because she created the object (CREATOR OWNER), she gets granted additional permissions and can do many changes to the object.
-->
        <!--Date: 2021/12/15-->
        <!--Status: test-->
        <!--ID: e80a0fee-1a62-4419-b31e-0d0db6e6013a-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>Potential CVE-2021-42287 Exploitation Attempt</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Directory\-Services\-SAM</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)16990|16991</field>
    </rule>
    <rule id="900529" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/lsasrv/win_system_lsasrv_ntlmv1.yml</info>
        <!--Sigma Rule Author: Tim Shelton, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the reporting of NTLMv1 being used between a client and server. NTLMv1 is insecure as the underlying encryption algorithms can be brute-forced by modern hardware.-->
        <!--Date: 2022/04/26-->
        <!--Status: experimental-->
        <!--ID: e9d4ab66-a532-4ef7-a502-66a9e4a34f5d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1550.002</id>
        </mitre>
        <description>NTLMv1 Logon Between Client and Server</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)LsaSrv</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)6038|6039</field>
    </rule>
    <rule id="900530" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/ntfs/win_system_ntfs_vuln_exploit.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This the exploitation of a NTFS vulnerability as reported without many details via Twitter-->
        <!--Date: 2021/01/11-->
        <!--Status: test-->
        <!--ID: f14719ce-d3ab-4e25-9ce6-2899092260b0-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1499.001</id>
        </mitre>
        <description>NTFS Vulnerability Exploitation</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Ntfs</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)55</field>
        <field name="win.eventdata.origin" negate="no" type="pcre2">(?i)File\ System\ Driver</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)contains\ a\ corrupted\ file\ record</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)The\ name\ of\ the\ file\ is\ "\\+"</field>
    </rule>
    <rule id="900531" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/microsoft_windows_kernel_general/win_system_quarkspwdump_clearing_hive_access_history.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects QuarksPwDump clearing access history in hive-->
        <!--Date: 2017/05/15-->
        <!--Status: test-->
        <!--ID: 39f919f3-980b-4e6f-a975-8af7e507ef2b-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>QuarksPwDump Clearing Access History</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)16</field>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Kernel\-General</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+SAM</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\.dmp)</field>
    </rule>
    <rule id="900532" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/microsoft_windows_kernel_general/win_system_susp_sam_dump.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious SAM dump activity as cause by QuarksPwDump and other password dumpers-->
        <!--Date: 2018/01/27-->
        <!--Status: test-->
        <!--ID: 839dd1e8-eda8-4834-8145-01beeee33acd-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>SAM Dump to AppData</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Kernel\-General</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)16</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+SAM\-|\.dmp</field>
    </rule>
    <rule id="900533" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/microsoft_windows_windows_update_client/win_system_susp_system_update_error.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects Windows update errors including installation failures and connection issues. Defenders should observe this in case critical update KB aren't installed.-->
        <!--Date: 2021/12/04-->
        <!--Status: stable-->
        <!--ID: 13cfeb75-9e33-4d04-b0f7-ab8faaa95a59-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.resource_development</id>
            <id>attack.t1584</id>
        </mitre>
        <description>Windows Update Error</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Microsoft\-Windows\-WindowsUpdateClient</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)16|20|24|213|217</field>
    </rule>
    <rule id="900534" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/microsoft_windows_ntfs/win_system_volume_shadow_copy_mount.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g, Open Threat Research (OTR)-->
        <!--Description: Detects volume shadow copy mount via Windows event log-->
        <!--Date: 2020/10/20-->
        <!--Status: test-->
        <!--ID: f512acbf-e662-4903-843e-97ce4652b740-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>Volume Shadow Copy Mount</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Ntfs</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)98</field>
        <field name="win.eventdata.deviceName" negate="no" type="pcre2">(?i)HarddiskVolumeShadowCopy</field>
    </rule>
    <rule id="900535" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/microsoft_windows_user_profiles_service/win_system_susp_vuln_cve_2022_21919_or_cve_2021_34484.yml</info>
        <!--Sigma Rule Author: Cybex-->
        <!--Description: During exploitation of this vulnerability, two logs (Provider_Name:Microsoft-Windows-User Profiles Service) with EventID 1511 and 1515 (maybe lot of false positives with this event) are created. Moreover, it appears the directory \Users\TEMP is created may be created during the exploitation. Viewed on 2008 Server-->
        <!--Date: 2022/08/16-->
        <!--Status: experimental-->
        <!--ID: 52a85084-6989-40c3-8f32-091e12e17692-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Suspicious Usage of CVE_2021_34484 or CVE 2022_21919</description>
        <options>no_full_log</options>
        <group>windows,application,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1511</field>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Microsoft\-Windows\-User\ Profiles\ Service</field>
    </rule>
    <rule id="900536" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/netlogon/win_system_vul_cve_2020_1472.yml</info>
        <!--Sigma Rule Author: NVISO-->
        <!--Description: Detects that a vulnerable Netlogon secure channel connection was allowed, which could be an indicator of CVE-2020-1472.-->
        <!--Date: 2020/09/15-->
        <!--Status: test-->
        <!--ID: a0cb7110-edf0-47a4-9177-541a4083128a-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548</id>
        </mitre>
        <description>Vulnerable Netlogon Secure Channel Connection Allowed</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)NetLogon</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5829</field>
    </rule>
    <rule id="900537" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/netlogon/win_system_possible_zerologon_exploitation_using_wellknown_tools.yml</info>
        <!--Sigma Rule Author: Demyan Sokolin @_drd0c, Teymur Kheirkhabarov @HeirhabarovT, oscd.community-->
        <!--Description: This rule is designed to detect attempts to exploit Zerologon (CVE-2020-1472) vulnerability using mimikatz zerologon module or other exploits from machine with "kali" hostname.-->
        <!--Date: 2020/10/13-->
        <!--Status: stable-->
        <!--ID: 18f37338-b9bd-4117-a039-280c81f7a596-->
        <mitre>
            <id>attack.t1210</id>
            <id>attack.lateral_movement</id>
        </mitre>
        <description>Zerologon Exploitation Using Well-known Tools</description>
        <options>no_full_log</options>
        <group>system,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5805|5723</field>
        <field name="full_log" negate="no" type="pcre2">(?i)kali|mimikatz</field>
    </rule>
    <rule id="900538" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/microsoft_windows_kerberos_key_distribution_center/win_system_kdcsvc_rc4_downgrade.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the exploitation of a security bypass and elevation of privilege vulnerability with Authentication Negotiation by using weak RC4-HMAC negotiation-->
        <!--Date: 2022/11/09-->
        <!--Status: test-->
        <!--ID: e6f81941-b1cd-4766-87db-9fc156f658ee-->
        <mitre>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>KDC RC4-HMAC Downgrade CVE-2022-37966</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)42</field>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Kerberos\-Key\-Distribution\-Center</field>
        <field name="win.system.level" negate="no" type="pcre2">(?i)2</field>
    </rule>
    <rule id="900539" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/microsoft_windows_kerberos_key_distribution_center/win_system_kdcsvc_cert_use_no_strong_mapping.yml</info>
        <!--Sigma Rule Author: @br4dy5-->
        <!--Description: Detects a user certificate that was valid but could not be mapped to a user in a strong way (such as via explicit mapping, key trust mapping, or a SID)
This could be a sign of exploitation of the elevation of privilege vulnerabilities (CVE-2022-34691, CVE-2022-26931, CVE-2022-26923) that can occur when the KDC allows certificate spoofing by not requiring a strong mapping.
Events where the AccountName and CN of the Subject do not match, or where the CN ends in a dollar sign indicating a machine, may indicate certificate spoofing.
-->
        <!--Date: 2023/10/09-->
        <!--Status: experimental-->
        <!--ID: 993c2665-e6ef-40e3-a62a-e1a97686af79-->
        <mitre>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Certificate Use With No Strong Mapping</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Kerberos\-Key\-Distribution\-Center</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)39|41</field>
    </rule>
    <rule id="900540" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/microsoft_windows_distributed_com/win_system_lpe_indicators_tabtip.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the invocation of TabTip via CLSID as seen when JuicyPotatoNG is used on a system in brute force mode-->
        <!--Date: 2022/10/07-->
        <!--Status: experimental-->
        <!--ID: bc2e25ed-b92b-4daa-b074-b502bdd1982b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1557.001</id>
        </mitre>
        <description>Local Privilege Escalation Indicator TabTip</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Microsoft\-Windows\-DistributedCOM</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)10001</field>
        <field name="full_log" negate="no" type="pcre2">(?i)C:\\+Program\ Files\\+Common\ Files\\+microsoft\ shared\\+ink\\+TabTip\.exe</field>
        <field name="full_log" negate="no" type="pcre2">(?i)2147943140</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\{054AAE20\-4BEA\-4347\-8A35\-64A533254A9D\}</field>
    </rule>
    <rule id="900541" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/termdd/win_system_rdp_potential_cve_2019_0708.yml</info>
        <!--Sigma Rule Author: Lionel PRAT, Christophe BROCAS, @atc_project (improvements)-->
        <!--Description: Detect suspicious error on protocol RDP, potential CVE-2019-0708-->
        <!--Date: 2019/05/24-->
        <!--Status: test-->
        <!--ID: aaa5b30d-f418-420b-83a0-299cb6024885-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1210</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>Potential RDP Exploit CVE-2019-0708</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)56|50</field>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)TermDD</field>
    </rule>
    <rule id="900542" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/microsoft_windows_eventlog/win_system_susp_eventlog_cleared.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Tim Shelton, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the clearing of one of the Windows Core Eventlogs. e.g. caused by "wevtutil cl" command execution-->
        <!--Date: 2022/05/17-->
        <!--Status: experimental-->
        <!--ID: 100ef69e-3327-481c-8e5c-6d80d9507556-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.001</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>Important Windows Eventlog Cleared</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)104</field>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Eventlog</field>
        <field name="win.eventdata.channel" negate="no" type="pcre2">(?i)Application|Microsoft\-Windows\-PowerShell/Operational|Microsoft\-Windows\-Sysmon/Operational|PowerShellCore/Operational|Security|System|Windows\ PowerShell</field>
    </rule>
    <rule id="900543" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/microsoft_windows_eventlog/win_system_eventlog_cleared.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: One of the Windows Eventlogs has been cleared. e.g. caused by "wevtutil cl" command execution-->
        <!--Date: 2017/01/10-->
        <!--Status: experimental-->
        <!--ID: a62b37e0-45d3-48d9-a517-90c1a1b0186b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.001</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>Eventlog Cleared</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)104</field>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Microsoft\-Windows\-Eventlog</field>
        <field name="win.eventdata.channel" negate="yes" type="pcre2">(?i)Application</field>
        <field name="win.eventdata.channel" negate="yes" type="pcre2">(?i)Microsoft\-Windows\-PowerShell/Operational</field>
        <field name="win.eventdata.channel" negate="yes" type="pcre2">(?i)Microsoft\-Windows\-Sysmon/Operational</field>
        <field name="win.eventdata.channel" negate="yes" type="pcre2">(?i)PowerShellCore/Operational</field>
        <field name="win.eventdata.channel" negate="yes" type="pcre2">(?i)Security</field>
        <field name="win.eventdata.channel" negate="yes" type="pcre2">(?i)System</field>
        <field name="win.eventdata.channel" negate="yes" type="pcre2">(?i)Windows\ PowerShell</field>
    </rule>
    <rule id="900544" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/application_popup/win_system_application_sysmon_crash.yml</info>
        <!--Sigma Rule Author: Tim Shelton-->
        <!--Description: Detects application popup reporting a failure of the Sysmon service-->
        <!--Date: 2022/04/26-->
        <!--Status: test-->
        <!--ID: 4d7f1827-1637-4def-8d8a-fd254f9454df-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562</id>
        </mitre>
        <description>Sysmon Crash</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Application\ Popup</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)26</field>
        <field name="win.eventdata.caption" negate="no" type="pcre2">(?i)sysmon64\.exe\ \-\ Application\ Error</field>
    </rule>
    <rule id="900545" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/microsoft_windows_dhcp_server/win_system_susp_dhcp_config.yml</info>
        <!--Sigma Rule Author: Dimitrios Slamaris-->
        <!--Description: This rule detects a DHCP server in which a specified Callout DLL (in registry) was loaded-->
        <!--Date: 2017/05/15-->
        <!--Status: test-->
        <!--ID: 13fc89a9-971e-4ca6-b9dc-aa53a445bf40-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>DHCP Server Loaded the CallOut DLL</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1033</field>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Microsoft\-Windows\-DHCP\-Server</field>
    </rule>
    <rule id="900546" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/system/microsoft_windows_dhcp_server/win_system_susp_dhcp_config_failed.yml</info>
        <!--Sigma Rule Author: Dimitrios Slamaris, @atc_project (fix)-->
        <!--Description: This rule detects a DHCP server error in which a specified Callout DLL (in registry) could not be loaded-->
        <!--Date: 2017/05/15-->
        <!--Status: test-->
        <!--ID: 75edd3fd-7146-48e5-9848-3013d7f0282c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>DHCP Server Error Failed Loading the CallOut DLL</description>
        <options>no_full_log</options>
        <group>windows,system,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1031|1032|1034</field>
        <field name="win.eventdata.providerName" negate="no" type="pcre2">(?i)Microsoft\-Windows\-DHCP\-Server</field>
    </rule>
    <rule id="900547" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/firewall_as/win_firewall_as_change_rule.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects when a rule has been modified in the Windows firewall exception list-->
        <!--Date: 2022/02/19-->
        <!--Status: experimental-->
        <!--ID: 5570c4d9-8fdd-4622-965b-403a5a101aa0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>Firewall Rule Modified In The Windows Firewall Exception List</description>
        <options>no_full_log</options>
        <group>windows,firewall-as,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2005|2073</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:C:\\+Program\ Files\ \(x86\)\\+)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:C:\\+Program\ Files\\+)</field>
    </rule>
    <rule id="900548" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/firewall_as/win_firewall_as_add_rule_susp_folder.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder-->
        <!--Date: 2023/02/26-->
        <!--Status: experimental-->
        <!--ID: 9e2575e7-2cb9-4da1-adc8-ed94221dca5e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>New Firewall Exception Rule Added For A Suspicious Folder</description>
        <options>no_full_log</options>
        <group>windows,firewall-as,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2004|2071</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\\+AppData\\+|\\+Temp\\+</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)2</field>
    </rule>
    <rule id="900549" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/firewall_as/win_firewall_as_add_rule_susp_folder.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the addition of a rule to the Windows Firewall exception list where the application resides in a suspicious folder-->
        <!--Date: 2023/02/26-->
        <!--Status: experimental-->
        <!--ID: 9e2575e7-2cb9-4da1-adc8-ed94221dca5e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>New Firewall Exception Rule Added For A Suspicious Folder</description>
        <options>no_full_log</options>
        <group>windows,firewall-as,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2004|2071</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\\+AppData\\+|\\+Temp\\+</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+local\\+microsoft\\+teams\\+current\\+teams\.exe)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Keybase\\+keybase\.exe)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Programs\\+Messenger\\+Messenger\.exe)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:C:\\+Users\\+)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Programs\\+Opera\\+</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+opera\.exe)</field>
    </rule>
    <rule id="900550" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/firewall_as/win_firewall_as_reset_config.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects activity when Windows Defender Firewall has been reset to its default configuration-->
        <!--Date: 2022/02/19-->
        <!--Status: experimental-->
        <!--ID: 04b60639-39c0-412a-9fbe-e82499c881a3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>Windows Defender Firewall Has Been Reset To Its Default Configuration</description>
        <options>no_full_log</options>
        <group>windows,firewall-as,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2032|2060</field>
    </rule>
    <rule id="900551" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/firewall_as/win_firewall_as_add_rule.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects when a rule has been added to the Windows Firewall exception list-->
        <!--Date: 2022/02/19-->
        <!--Status: experimental-->
        <!--ID: cde0a575-7d3d-4a49-9817-b8004a7bf105-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>New Firewall Rule Added In Windows Firewall Exception List</description>
        <options>no_full_log</options>
        <group>windows,firewall-as,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2004|2071</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)2</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:C:\\+Program\ Files\\+)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:C:\\+Program\ Files\ \(x86\)\\+)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:C:\\+Windows\\+WinSxS\\+)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+oobe\\+Setup\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)C:\\+Windows\\+SysWOW64\\+msiexec\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+svchost\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+dllhost\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Windows\ Defender\\+MsMpEng\.exe</field>
    </rule>
    <rule id="900552" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/firewall_as/win_firewall_as_add_rule.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects when a rule has been added to the Windows Firewall exception list-->
        <!--Date: 2022/02/19-->
        <!--Status: experimental-->
        <!--ID: cde0a575-7d3d-4a49-9817-b8004a7bf105-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>New Firewall Rule Added In Windows Firewall Exception List</description>
        <options>no_full_log</options>
        <group>windows,firewall-as,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2004|2071</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:C:\\+ProgramData\\+Microsoft\\+Windows\ Defender\\+Platform\\+)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+MsMpEng\.exe)</field>
    </rule>
    <rule id="900553" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/firewall_as/win_firewall_as_delete_rule.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects when a single rules or all of the rules have been deleted from the Windows Defender Firewall-->
        <!--Date: 2022/02/19-->
        <!--Status: experimental-->
        <!--ID: c187c075-bb3e-4c62-b4fa-beae0ffc211f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>A Rule Has Been Deleted From The Windows Firewall Exception List</description>
        <options>no_full_log</options>
        <group>windows,firewall-as,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2006|2052</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:C:\\+Program\ Files\\+)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:C:\\+Program\ Files\ \(x86\)\\+)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+svchost\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)None</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)</field>
    </rule>
    <rule id="900554" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/firewall_as/win_firewall_as_delete_rule.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects when a single rules or all of the rules have been deleted from the Windows Defender Firewall-->
        <!--Date: 2022/02/19-->
        <!--Status: experimental-->
        <!--ID: c187c075-bb3e-4c62-b4fa-beae0ffc211f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>A Rule Has Been Deleted From The Windows Firewall Exception List</description>
        <options>no_full_log</options>
        <group>windows,firewall-as,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2006|2052</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:C:\\+ProgramData\\+Microsoft\\+Windows\ Defender\\+Platform\\+)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+MsMpEng\.exe)</field>
    </rule>
    <rule id="900555" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/firewall_as/win_firewall_as_failed_load_gpo.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects activity when The Windows Defender Firewall service failed to load Group Policy-->
        <!--Date: 2022/02/19-->
        <!--Status: test-->
        <!--ID: 7ec15688-fd24-4177-ba43-1a950537ee39-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>The Windows Defender Firewall Service Failed To Load Group Policy</description>
        <options>no_full_log</options>
        <group>windows,firewall-as,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2009</field>
    </rule>
    <rule id="900556" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/firewall_as/win_firewall_as_delete_all_rules.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when a all the rules have been deleted from the Windows Defender Firewall configuration-->
        <!--Date: 2023/01/17-->
        <!--Status: experimental-->
        <!--ID: 79609c82-a488-426e-abcf-9f341a39365d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>All Rules Have Been Deleted From The Windows Firewall Configuration</description>
        <options>no_full_log</options>
        <group>windows,firewall-as,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2033|2059</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:C:\\+Program\ Files\\+)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:C:\\+Program\ Files\ \(x86\)\\+)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+svchost\.exe</field>
    </rule>
    <rule id="900557" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/firewall_as/win_firewall_as_delete_all_rules.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when a all the rules have been deleted from the Windows Defender Firewall configuration-->
        <!--Date: 2023/01/17-->
        <!--Status: experimental-->
        <!--ID: 79609c82-a488-426e-abcf-9f341a39365d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>All Rules Have Been Deleted From The Windows Firewall Configuration</description>
        <options>no_full_log</options>
        <group>windows,firewall-as,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2033|2059</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:C:\\+ProgramData\\+Microsoft\\+Windows\ Defender\\+Platform\\+)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\\+MsMpEng\.exe)</field>
    </rule>
    <rule id="900558" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/firewall_as/win_firewall_as_setting_change.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects activity when the settings of the Windows firewall have been changed-->
        <!--Date: 2022/02/19-->
        <!--Status: experimental-->
        <!--ID: 00bb5bd5-1379-4fcf-a965-a5b6f7478064-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>Windows Firewall Settings Have Been Changed</description>
        <options>no_full_log</options>
        <group>windows,firewall-as,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)2002|2083|2003|2082|2008</field>
    </rule>
    <rule id="900559" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/capi2/win_capi2_acquire_certificate_private_key.yml</info>
        <!--Sigma Rule Author: Zach Mathis-->
        <!--Description: Detects when an application acquires a certificate private key-->
        <!--Date: 2023/05/13-->
        <!--Status: experimental-->
        <!--ID: e2b5163d-7deb-4566-9af3-40afea6858c3-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1649</id>
        </mitre>
        <description>Certificate Private Key Acquired</description>
        <options>no_full_log</options>
        <group>windows,capi2,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)70</field>
    </rule>
    <rule id="900560" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/wmi/win_wmi_persistence.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Gleb Sukhodolskiy, Timur Zinniatullin oscd.community-->
        <!--Description: Detects suspicious WMI event filter and command line event consumer based on WMI and Security Logs.-->
        <!--Date: 2017/08/22-->
        <!--Status: test-->
        <!--ID: 0b7889b4-5577-4521-a60a-3376ee7f9f7b-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.003</id>
        </mitre>
        <description>WMI Persistence</description>
        <options>no_full_log</options>
        <group>windows,wmi,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5861</field>
        <field name="full_log" negate="no" type="pcre2">(?i)ActiveScriptEventConsumer|CommandLineEventConsumer|CommandLineTemplate</field>
    </rule>
    <rule id="900561" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/wmi/win_wmi_persistence.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Gleb Sukhodolskiy, Timur Zinniatullin oscd.community-->
        <!--Description: Detects suspicious WMI event filter and command line event consumer based on WMI and Security Logs.-->
        <!--Date: 2017/08/22-->
        <!--Status: test-->
        <!--ID: 0b7889b4-5577-4521-a60a-3376ee7f9f7b-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.003</id>
        </mitre>
        <description>WMI Persistence</description>
        <options>no_full_log</options>
        <group>windows,wmi,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5861</field>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5859</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)SCM\ Event\ Provider</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)select\ .+\ from\ MSFT_SCMEventLogEvent</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)S\-1\-5\-32\-544</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)Permanent</field>
    </rule>
    <rule id="900562" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security_mitigations/win_security_mitigations_defender_load_unsigned_dll.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects Code Integrity (CI) engine blocking Microsoft Defender's processes (MpCmdRun and NisSrv) from loading unsigned DLLs which may be an attempt to sideload arbitrary DLL-->
        <!--Date: 2022/08/02-->
        <!--Status: test-->
        <!--ID: 0b0ea3cc-99c8-4730-9c53-45deee2a4c86-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>Microsoft Defender Blocked from Loading Unsigned DLL</description>
        <options>no_full_log</options>
        <group>windows,security-mitigations,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)11|12</field>
        <field name="win.eventdata.processPath" negate="no" type="pcre2">(?i)(?:\\+MpCmdRun\.exe|\\+NisSrv\.exe)$</field>
    </rule>
    <rule id="900563" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/security_mitigations/win_security_mitigations_unsigned_dll_from_susp_location.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects Code Integrity (CI) engine blocking processes from loading unsigned DLLs residing in suspicious locations-->
        <!--Date: 2022/08/03-->
        <!--Status: test-->
        <!--ID: 8289bf8c-4aca-4f5a-9db3-dc3d7afe5c10-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>Unsigned Binary Loaded From Suspicious Location</description>
        <options>no_full_log</options>
        <group>windows,security-mitigations,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)11|12</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\\+Users\\+Public\\+|\\+PerfLogs\\+|\\+Desktop\\+|\\+Downloads\\+|\\+AppData\\+Local\\+Temp\\+|C:\\+Windows\\+TEMP\\+</field>
    </rule>
    <rule id="900564" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/ntlm/win_susp_ntlm_auth.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects logons using NTLM, which could be caused by a legacy source or attackers-->
        <!--Date: 2018/06/08-->
        <!--Status: test-->
        <!--ID: 98c3bcf1-56f2-49dc-9d8d-c66cf190238b-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1550.002</id>
        </mitre>
        <description>NTLM Logon</description>
        <options>no_full_log</options>
        <group>windows,ntlm,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)8002</field>
        <field name="win.eventdata.processName" negate="no" type="pcre2">(?i).+</field>
    </rule>
    <rule id="900565" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/ntlm/win_susp_ntlm_rdp.yml</info>
        <!--Sigma Rule Author: James Pemberton-->
        <!--Description: Detects logons using NTLM to hosts that are potentially not part of the domain.-->
        <!--Date: 2020/05/22-->
        <!--Status: test-->
        <!--ID: ce5678bb-b9aa-4fb5-be4b-e57f686256ad-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Potential Remote Desktop Connection to Non-Domain Host</description>
        <options>no_full_log</options>
        <group>windows,ntlm,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)8001</field>
        <field name="win.eventdata.targetName" negate="no" type="pcre2">(?i)^(?:TERMSRV)</field>
    </rule>
    <rule id="900566" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/ntlm/win_susp_ntlm_brute_force.yml</info>
        <!--Sigma Rule Author: Jerry Shockley '@jsh0x'-->
        <!--Description: Detects common NTLM brute force device names-->
        <!--Date: 2022/02/02-->
        <!--Status: test-->
        <!--ID: 9c8acf1a-cbf9-4db6-b63c-74baabe03e59-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1110</id>
        </mitre>
        <description>NTLM Brute Force</description>
        <options>no_full_log</options>
        <group>windows,ntlm,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)8004</field>
        <field name="win.eventdata.workstationName" negate="no" type="pcre2">(?i)Rdesktop|Remmina|Freerdp|Windows7|Windows8|Windows2012|Windows2016|Windows2019</field>
    </rule>
    <rule id="900567" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_history_delete.yml</info>
        <!--Sigma Rule Author: Cian Heasley-->
        <!--Description: Windows Defender logs when the history of detected infections is deleted. Log file will contain the message "Windows Defender Antivirus has removed history of malware and other potentially unwanted software".-->
        <!--Date: 2020/08/13-->
        <!--Status: test-->
        <!--ID: 2afe6582-e149-11ea-87d0-0242ac130003-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Windows Defender Malware Detection History Deletion</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_sid>60005</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1013</field>
    </rule>
    <rule id="900568" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_exploit_guard_tamper.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when someone is adding or removing applications or folder from exploit guard "ProtectedFolders" and "AllowedApplications"-->
        <!--Date: 2022/08/05-->
        <!--Status: test-->
        <!--ID: a3ab73f1-bd46-4319-8f06-4b20d0617886-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Exploit Guard Tamper</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_sid>60005</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5007</field>
        <field name="win.eventdata.newValue" negate="no" type="pcre2">(?i)\\+Windows\ Defender\\+Windows\ Defender\ Exploit\ Guard\\+Controlled\ Folder\ Access\\+AllowedApplications\\+</field>
        <field name="win.eventdata.newValue" negate="no" type="pcre2">(?i)\\+Users\\+Public\\+|\\+AppData\\+Local\\+Temp\\+|\\+Desktop\\+|\\+PerfLogs\\+|\\+Windows\\+Temp\\+</field>
    </rule>
    <rule id="900569" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_exploit_guard_tamper.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when someone is adding or removing applications or folder from exploit guard "ProtectedFolders" and "AllowedApplications"-->
        <!--Date: 2022/08/05-->
        <!--Status: test-->
        <!--ID: a3ab73f1-bd46-4319-8f06-4b20d0617886-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Exploit Guard Tamper</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_sid>60005</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5007</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\\+Windows\ Defender\\+Windows\ Defender\ Exploit\ Guard\\+Controlled\ Folder\ Access\\+ProtectedFolders\\+</field>
    </rule>
    <rule id="900570" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_suspicious_features_tampering.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious changes to the Windows Defender configuration-->
        <!--Date: 2022/12/06-->
        <!--Status: stable-->
        <!--ID: 801bd44f-ceed-4eb6-887c-11544633c0aa-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Suspicious Configuration Changes</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_sid>60005</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5007</field>
        <field name="win.eventdata.newValue" negate="no" type="pcre2">(?i)(?:\\+Windows\ Defender\\+DisableAntiSpyware\ |\\+Windows\ Defender\\+Scan\\+DisableRemovableDriveScanning\ |\\+Windows\ Defender\\+Scan\\+DisableScanningMappedNetworkDrivesForFullScan\ |\\+Windows\ Defender\\+SpyNet\\+DisableBlockAtFirstSeen\ |\\+Real\-Time\ Protection\\+SpyNetReporting\ |\\+Real\-Time\ Protection\\+SubmitSamplesConsent\ )</field>
    </rule>
    <rule id="900571" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_disabled.yml</info>
        <!--Sigma Rule Author: J&#225;n Tren&#269;ansk&#253;, frack113-->
        <!--Description: Detects disabling Windows Defender threat protection-->
        <!--Date: 2020/07/28-->
        <!--Status: stable-->
        <!--ID: fe34868f-6e0e-4882-81f6-c43aa8f15b62-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Threat Detection Disabled</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_sid>60005</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5001|5010|5012|5101</field>
    </rule>
    <rule id="900572" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_tamper_protection_trigger.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj, Nasreddine Bencherchali-->
        <!--Description: Detects blocked attempts to change any of Defender's settings such as "Real Time Monitoring" and "Behavior Monitoring"-->
        <!--Date: 2021/07/05-->
        <!--Status: stable-->
        <!--ID: 49e5bc24-8b86-49f1-b743-535f332c2856-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Microsoft Defender Tamper Protection Trigger</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_sid>60005</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5013</field>
        <field name="win.evendata.value" negate="no" type="pcre2">(?i)(?:\\+Windows\ Defender\\+DisableAntiSpyware|\\+Windows\ Defender\\+DisableAntiVirus|\\+Windows\ Defender\\+Scan\\+DisableArchiveScanning|\\+Windows\ Defender\\+Scan\\+DisableScanningNetworkFiles|\\+Real\-Time\ Protection\\+DisableRealtimeMonitoring|\\+Real\-Time\ Protection\\+DisableBehaviorMonitoring|\\+Real\-Time\ Protection\\+DisableIOAVProtection|\\+Real\-Time\ Protection\\+DisableScriptScanning)$</field>
    </rule>
    <rule id="900573" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_threat.yml</info>
        <!--Sigma Rule Author: J&#225;n Tren&#269;ansk&#253;-->
        <!--Description: Detects all actions taken by Windows Defender malware detection engines-->
        <!--Date: 2020/07/28-->
        <!--Status: stable-->
        <!--ID: 57b649ef-ff42-4fb0-8bf6-62da243a1708-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Windows Defender Threat Detected</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_sid>60005</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1006|1116|1015|1117</field>
    </rule>
    <rule id="900574" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_psexec_wmi_asr.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects blocking of process creations originating from PSExec and WMI commands-->
        <!--Date: 2020/07/14-->
        <!--Status: test-->
        <!--ID: 97b9ce1e-c5ab-11ea-87d0-0242ac130003-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1047</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>PSExec and WMI Process Creations Block</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_sid>60005</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1121</field>
        <field name="win.eventdata.processName" negate="no" type="pcre2">(?i)(?:\\+wmiprvse\.exe|\\+psexesvc\.exe)$</field>
    </rule>
    <rule id="900575" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_restored_quarantine_file.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the restoration of files from the defender quarantine-->
        <!--Date: 2022/12/06-->
        <!--Status: test-->
        <!--ID: bc92ca75-cd42-4d61-9a37-9d5aa259c88b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Win Defender Restored Quarantine File</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_sid>60005</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1009</field>
    </rule>
    <rule id="900576" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_amsi_trigger.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects triggering of AMSI by Windows Defender.-->
        <!--Date: 2020/09/14-->
        <!--Status: stable-->
        <!--ID: ea9bf0fa-edec-4fb8-8b78-b119f2528186-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Windows Defender AMSI Trigger Detected</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_sid>60005</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1116</field>
        <field name="full_log" negate="no" type="pcre2">(?i)AMSI</field>
    </rule>
    <rule id="900577" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_real_time_protection_errors.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Christopher Peacock '@securepeacock' (Update)-->
        <!--Description: Detects issues with Windows Defender Real-Time Protection features-->
        <!--Date: 2023/03/28-->
        <!--Status: stable-->
        <!--ID: dd80db93-6ec2-4f4c-a017-ad40da6ffe81-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Real-Time Protection Failure/Restart</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_sid>60005</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3002|3007</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)%%886</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)%%892</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)%%858</field>
    </rule>
    <rule id="900578" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_alert_lsass_access.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects Access to LSASS Process-->
        <!--Date: 2018/08/26-->
        <!--Status: test-->
        <!--ID: a0a278fe-2c0e-4de2-ac3c-c68b08a9ba98-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>LSASS Access Detected via Attack Surface Reduction</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_sid>60005</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)1121</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+Temp\\+asgard2\-agent\\+)</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+thor64\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)(?:\\+thor\.exe)$</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+atiesrxx\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+CompatTelRunner\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+msiexec\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+nvwmi64\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+svchost\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+Taskmgr\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+wbem\\+WmiPrvSE\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)C:\\+Windows\\+SysWOW64\\+msiexec\.exe</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+DriverStore\\+)</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)^(?:C:\\+WINDOWS\\+Installer\\+)</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+)</field>
        <field name="win.eventdata.processName" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+)</field>
    </rule>
    <rule id="900579" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/windefend/win_defender_exclusions.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the Setting of Windows Defender Exclusions-->
        <!--Date: 2021/07/06-->
        <!--Status: stable-->
        <!--ID: 1321dc4e-a1fe-481d-a016-52c45f0c8b4f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Exclusions Added</description>
        <options>no_full_log</options>
        <group>windows,windefend,</group>
        <if_sid>60005</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)5007</field>
        <field name="win.eventdata.newValue" negate="no" type="pcre2">(?i)\\+Microsoft\\+Windows\ Defender\\+Exclusions</field>
    </rule>
    <rule id="900580" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/dns_client/win_dns_client__mal_cobaltstrike.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a program that invoked suspicious DNS queries known from Cobalt Strike beacons-->
        <!--Date: 2023/01/16-->
        <!--Status: test-->
        <!--ID: 0d18728b-f5bf-4381-9dcf-915539fff6c2-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.004</id>
        </mitre>
        <description>Suspicious Cobalt Strike DNS Beaconing - DNS Client</description>
        <options>no_full_log</options>
        <group>windows,dns-client,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3008</field>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)^(?:aaa\.stage\.|post\.1)</field>
    </rule>
    <rule id="900581" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/dns_client/win_dns_client__mal_cobaltstrike.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a program that invoked suspicious DNS queries known from Cobalt Strike beacons-->
        <!--Date: 2023/01/16-->
        <!--Status: test-->
        <!--ID: 0d18728b-f5bf-4381-9dcf-915539fff6c2-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.004</id>
        </mitre>
        <description>Suspicious Cobalt Strike DNS Beaconing - DNS Client</description>
        <options>no_full_log</options>
        <group>windows,dns-client,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3008</field>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)\.stage\.123456\.</field>
    </rule>
    <rule id="900582" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/dns_client/win_dns_client_ufile_io.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects DNS queries to "ufile.io", which was seen abused by malware and threat actors as a method for data exfiltration-->
        <!--Date: 2023/01/16-->
        <!--Status: experimental-->
        <!--ID: 090ffaad-c01a-4879-850c-6d57da98452d-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.002</id>
        </mitre>
        <description>DNS Query To Ufile.io - DNS Client</description>
        <options>no_full_log</options>
        <group>windows,dns-client,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3008</field>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)ufile\.io</field>
    </rule>
    <rule id="900583" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/dns_client/win_dns_client_anonymfiles_com.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects DNS queries for anonfiles.com, which is an anonymous file upload platform often used for malicious purposes-->
        <!--Date: 2023/01/16-->
        <!--Status: test-->
        <!--ID: 29f171d7-aa47-42c7-9c7b-3c87938164d9-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.002</id>
        </mitre>
        <description>DNS Query for Anonfiles.com Domain - DNS Client</description>
        <options>no_full_log</options>
        <group>windows,dns-client,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3008</field>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)\.anonfiles\.com</field>
    </rule>
    <rule id="900584" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/dns_client/win_dns_client_tor_onion.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects DNS resolution of an .onion address related to Tor routing networks-->
        <!--Date: 2022/02/20-->
        <!--Status: test-->
        <!--ID: 8384bd26-bde6-4da9-8e5d-4174a7a47ca2-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090.003</id>
        </mitre>
        <description>Query Tor Onion Address - DNS Client</description>
        <options>no_full_log</options>
        <group>windows,dns-client,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3008</field>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)\.onion</field>
    </rule>
    <rule id="900585" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/builtin/dns_client/win_dns_client_mega_nz.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects DNS queries for subdomains related to MEGA sharing website-->
        <!--Date: 2023/01/16-->
        <!--Status: test-->
        <!--ID: 66474410-b883-415f-9f8d-75345a0a66a6-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.002</id>
        </mitre>
        <description>DNS Query To MEGA Hosting Website - DNS Client</description>
        <options>no_full_log</options>
        <group>windows,dns-client,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.system.eventID" negate="no" type="pcre2">(?i)3008</field>
        <field name="win.eventdata.queryName" negate="no" type="pcre2">(?i)userstorage\.mega\.co\.nz</field>
    </rule>
    <rule id="900586" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_susp_prog_location_network_connection.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Tim Shelton-->
        <!--Description: Detects programs with network connections running in suspicious files system locations-->
        <!--Date: 2017/03/19-->
        <!--Status: test-->
        <!--ID: 7b434893-c57d-4f41-908d-6a17bf1ae98f-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Program Location with Network Connections</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+Users\\+All\ Users\\+|\\+Users\\+Default\\+|\\+Users\\+Public\\+|\\+Users\\+Contacts\\+|\\+Users\\+Searches\\+|\\+config\\+systemprofile\\+|\\+Windows\\+Fonts\\+|\\+Windows\\+IME\\+|\\+Windows\\+addins\\+</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+\$Recycle\.bin)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)^(?:C:\\+Perflogs\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Users\\+Public\\+IBM\\+ClientSolutions\\+Start_Programs\\+)</field>
    </rule>
    <rule id="900587" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_silenttrinity_stager_msbuild_activity.yml</info>
        <!--Sigma Rule Author: Kiran kumar s, oscd.community-->
        <!--Description: Detects a possible remote connections to Silenttrinity c2-->
        <!--Date: 2020/10/11-->
        <!--Status: test-->
        <!--ID: 50e54b8d-ad73-43f8-96a1-5191685b17a4-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1127.001</id>
        </mitre>
        <description>Silenttrinity Stager Msbuild Activity</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+msbuild\.exe)$</field>
        <field name="win.eventdata.destinationPort" negate="no" type="pcre2">(?i)80|443</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
    </rule>
    <rule id="900588" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_susp_outbound_kerberos_connection.yml</info>
        <!--Sigma Rule Author: Ilyas Ochkov, oscd.community-->
        <!--Description: Detects suspicious outbound network activity via kerberos default port indicating possible lateral movement or first stage PrivEsc via delegation.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: e54979bd-c5f9-4d6c-967b-a04b19ac4c74-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1550.003</id>
        </mitre>
        <description>Suspicious Outbound Kerberos Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.destinationPort" negate="no" type="pcre2">(?i)88</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+lsass\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Mozilla\ Firefox\\+firefox\.exe</field>
    </rule>
    <rule id="900589" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_winlogon_net_connections.yml</info>
        <!--Sigma Rule Author: Christopher Peacock @securepeacock, SCYTHE @scythe_io-->
        <!--Description: Detects a "winlogon.exe" process that initiate network communications with public IP addresses-->
        <!--Date: 2023/04/28-->
        <!--Status: experimental-->
        <!--ID: 7610a4ea-c06d-495f-a2ac-0a696abcfd3b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.command_and_control</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Outbound Network Connection To Public IP Via Winlogon</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+winlogon\.exe)$</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:10\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:127\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.16\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.17\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.18\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.19\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.20\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.21\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.22\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.23\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.24\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.25\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.26\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.27\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.28\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.29\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.30\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.31\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:192\.168\.)</field>
    </rule>
    <rule id="900590" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_notion_api_susp_communication.yml</info>
        <!--Sigma Rule Author: Gavin Knapp-->
        <!--Description: Detects a non-browser process communicating with the Notion API. This could indicate potential use of a covert C2 channel such as "OffensiveNotion C2"-->
        <!--Date: 2023/05/03-->
        <!--Status: experimental-->
        <!--ID: 7e9cf7b6-e827-11ed-a05b-15959c120003-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1102</id>
        </mitre>
        <description>Potentially Suspicious Network Connection To Notion API</description>
        <options>no_full_log</options>
        <group>windows,network_connection,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.destinationHostname" negate="no" type="pcre2">(?i)api\.notion\.com</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Programs\\+Notion\\+Notion\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+brave\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Mozilla\ Firefox\\+firefox\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Mozilla\ Firefox\\+firefox\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Internet\ Explorer\\+iexplore\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Internet\ Explorer\\+iexplore\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+maxthon\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+EdgeWebView\\+Application\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WindowsApps\\+MicrosoftEdge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+Edge\\+Application\\+msedge\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Microsoft\\+Edge\\+Application\\+msedge\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+EdgeCore\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Microsoft\\+EdgeCore\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedgewebview2\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+opera\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+safari\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+seamonkey\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+vivaldi\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+whale\.exe)$</field>
    </rule>
    <rule id="900591" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_excel_outbound_network_connection.yml</info>
        <!--Sigma Rule Author: Christopher Peacock '@securepeacock', SCYTHE '@scythe_io', Florian Roth '@Neo23x0", Tim Shelton-->
        <!--Description: Detects an Excel process that opens suspicious network connections to non-private IP addresses, and attempts to cover CVE-2021-42292.
You will likely have to tune this rule for your organization, but it is certainly something you should look for and could have applications for malicious activity beyond CVE-2021-42292.
-->
        <!--Date: 2021/11/10-->
        <!--Status: test-->
        <!--ID: 75e33ce3-ae32-4dcc-9aa8-a2a3029d6f84-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1203</id>
        </mitre>
        <description>Excel Network Connections</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+excel\.exe)$</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.destinationIsIpv6" negate="no" type="pcre2">(?i)false</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:10\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:192\.168\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.16\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.17\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.18\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.19\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.20\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.21\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.22\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.23\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.24\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.25\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.26\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.27\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.28\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.29\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.30\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.31\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:127\.0\.0\.1)</field>
    </rule>
    <rule id="900592" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_ngrok_tunnel.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects an executable accessing an ngrok tunneling endpoint, which could be a sign of forbidden exfiltration of data exfiltration by malicious actors-->
        <!--Date: 2022/11/03-->
        <!--Status: test-->
        <!--ID: 1d08ac94-400d-4469-a82f-daee9a908849-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.command_and_control</id>
            <id>attack.t1567</id>
            <id>attack.t1568.002</id>
            <id>attack.t1572</id>
            <id>attack.t1090</id>
            <id>attack.t1102</id>
            <id>attack.s0508</id>
        </mitre>
        <description>Communication To Ngrok Tunneling Service</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.destinationHostname" negate="no" type="pcre2">(?i)tunnel\.us\.ngrok\.com|tunnel\.eu\.ngrok\.com|tunnel\.ap\.ngrok\.com|tunnel\.au\.ngrok\.com|tunnel\.sa\.ngrok\.com|tunnel\.jp\.ngrok\.com|tunnel\.in\.ngrok\.com</field>
    </rule>
    <rule id="900593" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_certutil_initiated_connection.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth (Nextron Systems)-->
        <!--Description: Detects a network connection initiated by the certutil.exe tool.
Attackers can abuse the utility in order to download malware or additional payloads.
-->
        <!--Date: 2022/09/02-->
        <!--Status: test-->
        <!--ID: 0dba975d-a193-4ed1-a067-424df57570d1-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Connection Initiated Via Certutil.EXE</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+certutil\.exe)$</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.destinationPort" negate="no" type="pcre2">(?i)80|135|443|445</field>
    </rule>
    <rule id="900594" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_msiexec.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.
Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)
-->
        <!--Date: 2022/01/16-->
        <!--Status: test-->
        <!--ID: 8e5e38e4-5350-4c0b-895a-e872ce0dd54f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.007</id>
        </mitre>
        <description>Msiexec Initiated Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+msiexec\.exe)$</field>
    </rule>
    <rule id="900595" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_reddit_api_non_browser_access.yml</info>
        <!--Sigma Rule Author: Gavin Knapp-->
        <!--Description: Detects an a non-browser process interacting with the Reddit API which could indicate use of a covert C2 such as RedditC2-->
        <!--Date: 2023/02/16-->
        <!--Status: experimental-->
        <!--ID: d7b09985-95a3-44be-8450-b6eadf49833e-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1102</id>
        </mitre>
        <description>Suspicious Non-Browser Network Communication With Reddit API</description>
        <options>no_full_log</options>
        <group>windows,network_connection,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.destinationHostname" negate="no" type="pcre2">(?i)reddit\.com</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+brave\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Mozilla\ Firefox\\+firefox\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Mozilla\ Firefox\\+firefox\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Internet\ Explorer\\+iexplore\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Internet\ Explorer\\+iexplore\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+maxthon\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+EdgeWebView\\+Application\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WindowsApps\\+MicrosoftEdge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+Edge\\+Application\\+msedge\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Microsoft\\+Edge\\+Application\\+msedge\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+EdgeCore\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Microsoft\\+EdgeCore\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedgewebview2\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+opera\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+safari\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+seamonkey\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+vivaldi\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+whale\.exe)$</field>
    </rule>
    <rule id="900596" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_hh.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects network connections made by the "hh.exe" process, which could indicate the execution/download of remotely hosted .chm files-->
        <!--Date: 2022/10/05-->
        <!--Status: test-->
        <!--ID: 468a8cea-2920-4909-a593-0cbe1d96674a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.001</id>
        </mitre>
        <description>HH.EXE Network Connections</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+hh\.exe)$</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.destinationPort" negate="no" type="pcre2">(?i)80|443|135|445</field>
    </rule>
    <rule id="900597" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_susp_outbound_mobsync_connection.yml</info>
        <!--Sigma Rule Author: elhoim-->
        <!--Description: Detects suspicious connections from Microsoft Sync Center to non-private IPs.-->
        <!--Date: 2022/04/28-->
        <!--Status: test-->
        <!--ID: 9f2cc74d-78af-4eb2-bb64-9cd1d292b87b-->
        <mitre>
            <id>attack.t1055</id>
            <id>attack.t1218</id>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Microsoft Sync Center Suspicious Network Connections</description>
        <options>no_full_log</options>
        <group>windows,network_connection,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+mobsync\.exe)$</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:10\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:192\.168\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.16\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.17\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.18\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.19\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.20\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.21\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.22\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.23\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.24\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.25\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.26\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.27\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.28\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.29\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.30\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.31\.)</field>
        <field name="win.eventdata.destinationIsIpv6" negate="yes" type="pcre2">(?i)false</field>
    </rule>
    <rule id="900598" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_rdp_to_http.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects svchost hosting RDP termsvcs communicating to target systems on TCP port 80 or 443-->
        <!--Date: 2022/04/29-->
        <!--Status: test-->
        <!--ID: b1e5da3b-ca8e-4adf-915c-9921f3d85481-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1572</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.001</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>RDP to HTTP or HTTPS Target Ports</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+svchost\.exe)$</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.sourcePort" negate="no" type="pcre2">(?i)3389</field>
        <field name="win.eventdata.destinationPort" negate="no" type="pcre2">(?i)80|443</field>
    </rule>
    <rule id="900599" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_rundll32_net_connections.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a rundll32 that communicates with public IP addresses-->
        <!--Date: 2017/11/04-->
        <!--Status: test-->
        <!--ID: cdc8da7d-c303-42f8-b08c-b4ab47230263-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
            <id>attack.execution</id>
        </mitre>
        <description>Rundll32 Internet Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:10\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:192\.168\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.16\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.17\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.18\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.19\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.20\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.21\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.22\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.23\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.24\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.25\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.26\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.27\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.28\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.29\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.30\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.31\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:127\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:51\.103\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:51\.104\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:51\.105\.)</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)PcaSvc\.dll,PcaPatchSdbTask</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:\.internal\.cloudapp\.net)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+svchost\.exe</field>
        <field name="win.eventdata.destinationPort" negate="yes" type="pcre2">(?i)443</field>
    </rule>
    <rule id="900600" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_dllhost_net_connections.yml</info>
        <!--Sigma Rule Author: bartblaze-->
        <!--Description: Detects Dllhost that communicates with public IP addresses-->
        <!--Date: 2020/07/13-->
        <!--Status: test-->
        <!--ID: cfed2f44-16df-4bf3-833a-79405198b277-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.execution</id>
            <id>attack.t1559.001</id>
        </mitre>
        <description>Dllhost Internet Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+dllhost\.exe)$</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:10\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:192\.168\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.16\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.17\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.18\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.19\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.20\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.21\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.22\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.23\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.24\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.25\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.26\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.27\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.28\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.29\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.30\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.31\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:169\.254\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:127\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:::1)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:0:0:0:0:0:0:0:1)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:fe80:)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:fc)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:fd)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.184\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.185\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.186\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.187\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.188\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.189\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.190\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.191\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:23\.79\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:51\.10\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:51\.103\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:51\.104\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:51\.105\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:52\.239\.)</field>
    </rule>
    <rule id="900601" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_python.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects a Python process initiating a network connection. While this often relates to package installation, it can also indicate a potential malicious script communicating with a C&C server.-->
        <!--Date: 2021/12/10-->
        <!--Status: experimental-->
        <!--ID: bef0bc5a-b9ae-425d-85c6-7b2d705980c6-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1046</id>
        </mitre>
        <description>Python Initiated Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)python</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)127\.0\.0\.1</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)127\.0\.0\.1</field>
    </rule>
    <rule id="900602" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_python.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects a Python process initiating a network connection. While this often relates to package installation, it can also indicate a potential malicious script communicating with a C&C server.-->
        <!--Date: 2021/12/10-->
        <!--Status: experimental-->
        <!--ID: bef0bc5a-b9ae-425d-85c6-7b2d705980c6-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1046</id>
        </mitre>
        <description>Python Initiated Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)python</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+ProgramData\\+Anaconda3\\+Scripts\\+conda\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+ProgramData\\+Anaconda3\\+Scripts\\+conda\-script\.py</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)update</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+ProgramData\\+Anaconda3\\+python\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+ProgramData\\+Anaconda3\\+Scripts\\+jupyter\-notebook\-script\.py</field>
    </rule>
    <rule id="900603" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_eqnedt.yml</info>
        <!--Sigma Rule Author: Max Altgelt (Nextron Systems)-->
        <!--Description: Detects network connections from Equation Editor-->
        <!--Date: 2022/04/14-->
        <!--Status: test-->
        <!--ID: a66bc059-c370-472c-a0d7-f8fd1bf9d583-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1203</id>
        </mitre>
        <description>Equation Editor Network Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+eqnedt32\.exe)$</field>
    </rule>
    <rule id="900604" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_google_api_non_browser_access.yml</info>
        <!--Sigma Rule Author: Gavin Knapp-->
        <!--Description: Detects a non-browser process interacting with the Google API which could indicate the use of a covert C2 such as Google Sheet C2 (GC2-sheet)-->
        <!--Date: 2023/05/01-->
        <!--Status: experimental-->
        <!--ID: 7e9cf7b6-e827-11ed-a05b-0242ac120003-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1102</id>
        </mitre>
        <description>Suspicious Non-Browser Network Communication With Google API</description>
        <options>no_full_log</options>
        <group>windows,network_connection,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.destinationHostname" negate="no" type="pcre2">(?i)oauth2\.googleapis\.com|sheets\.googleapis\.com|drive\.googleapis\.com|www\.googleapis\.com</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+brave\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+Google\\+Chrome\\+Application\\+chrome\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\ \(x86\)\\+Google\\+Chrome\\+Application\\+chrome\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Google\\+Drive\ File\ Stream\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+GoogleDriveFS\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+Mozilla\ Firefox\\+firefox\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\ \(x86\)\\+Mozilla\ Firefox\\+firefox\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\ \(x86\)\\+Internet\ Explorer\\+iexplore\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+Internet\ Explorer\\+iexplore\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+maxthon\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+Microsoft\\+EdgeWebView\\+Application\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\ \(x86\)\\+Microsoft\\+Edge\\+Application\\+msedge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+Microsoft\\+Edge\\+Application\\+msedge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WindowsApps\\+MicrosoftEdge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+Microsoft\\+EdgeCore\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Microsoft\\+EdgeCore\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedgewebview2\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+opera\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+safari\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+seamonkey\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+vivaldi\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+whale\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+GoogleUpdate\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+outlook\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+teams\.exe)$</field>
    </rule>
    <rule id="900605" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_crypto_mining_pools.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects initiated network connections to crypto mining pools-->
        <!--Date: 2021/10/26-->
        <!--Status: stable-->
        <!--ID: fa5b1358-b040-4403-9868-15f7d9ab6329-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1496</id>
        </mitre>
        <description>Network Communication With Crypto Mining Pool</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.destinationHostname" negate="no" type="pcre2">(?i)alimabi\.cn|ap\.luckpool\.net|bcn\.pool\.minergate\.com|bcn\.vip\.pool\.minergate\.com|bohemianpool\.com|ca\.minexmr\.com|ca\.monero\.herominers\.com|cbd\.monerpool\.org|cbdv2\.monerpool\.org|cryptmonero\.com|crypto\-pool\.fr|crypto\-pool\.info|cryptonight\-hub\.miningpoolhub\.com|d1pool\.ddns\.net|d5pool\.us|daili01\.monerpool\.org|de\.minexmr\.com|dl\.nbminer\.com|donate\.graef\.in|donate\.ssl\.xmrig\.com|donate\.v2\.xmrig\.com|donate\.xmrig\.com|donate2\.graef\.in|drill\.moneroworld\.com|dwarfpool\.com|emercoin\.com|emercoin\.net|emergate\.net|ethereumpool\.co|eu\.luckpool\.net|eu\.minerpool\.pw|fcn\-xmr\.pool\.minergate\.com|fee\.xmrig\.com|fr\.minexmr\.com|hellominer\.com|herominers\.com|huadong1\-aeon\.ppxxmr\.com|iwanttoearn\.money|jw\-js1\.ppxxmr\.com|koto\-pool\.work|lhr\.nbminer\.com|lhr3\.nbminer\.com|linux\.monerpool\.org|lokiturtle\.herominers\.com|luckpool\.net|masari\.miner\.rocks|mine\.c3pool\.com|mine\.moneropool\.com|mine\.ppxxmr\.com|mine\.zpool\.ca|mine1\.ppxxmr\.com|minemonero\.gq|miner\.ppxxmr\.com|miner\.rocks|minercircle\.com|minergate\.com|minerpool\.pw|minerrocks\.com|miners\.pro|minerxmr\.ru|minexmr\.cn|minexmr\.com|mining\-help\.ru|miningpoolhub\.com|mixpools\.org|moner\.monerpool\.org|moner1min\.monerpool\.org|monero\-master\.crypto\-pool\.fr|monero\.crypto\-pool\.fr|monero\.hashvault\.pro|monero\.herominers\.com|monero\.lindon\-pool\.win|monero\.miners\.pro|monero\.riefly\.id|monero\.us\.to|monerocean\.stream|monerogb\.com|monerohash\.com|moneroocean\.stream|moneropool\.com|moneropool\.nl|monerorx\.com|monerpool\.org|moriaxmr\.com|mro\.pool\.minergate\.com|multipool\.us|myxmr\.pw|na\.luckpool\.net|nanopool\.org|nbminer\.com|node3\.luckpool\.net|noobxmr\.com|pangolinminer\.comgandalph3000\.com|pool\.4i7i\.com|pool\.armornetwork\.org|pool\.cortins\.tk|pool\.gntl\.co\.uk|pool\.hashvault\.pro|pool\.minergate\.com|pool\.minexmr\.com|pool\.monero\.hashvault\.pro|pool\.ppxxmr\.com|pool\.somec\.cc|pool\.support|pool\.supportxmr\.com|pool\.usa\-138\.com|pool\.xmr\.pt|pool\.xmrfast\.com|pool2\.armornetwork\.org|poolchange\.ppxxmr\.com|pooldd\.com|poolmining\.org|poolto\.be|ppxvip1\.ppxxmr\.com|ppxxmr\.com|prohash\.net|r\.twotouchauthentication\.online|randomx\.xmrig\.com|ratchetmining\.com|seed\.emercoin\.com|seed\.emercoin\.net|seed\.emergate\.net|seed1\.joulecoin\.org|seed2\.joulecoin\.org|seed3\.joulecoin\.org|seed4\.joulecoin\.org|seed5\.joulecoin\.org|seed6\.joulecoin\.org|seed7\.joulecoin\.org|seed8\.joulecoin\.org|sg\.minexmr\.com|sheepman\.mine\.bz|siamining\.com|sumokoin\.minerrocks\.com|supportxmr\.com|suprnova\.cc|teracycle\.net|trtl\.cnpool\.cc|trtl\.pool\.mine2gether\.com|turtle\.miner\.rocks|us\-west\.minexmr\.com|usxmrpool\.com|viaxmr\.com|webservicepag\.webhop\.net|xiazai\.monerpool\.org|xiazai1\.monerpool\.org|xmc\.pool\.minergate\.com|xmo\.pool\.minergate\.com|xmr\-asia1\.nanopool\.org|xmr\-au1\.nanopool\.org|xmr\-eu1\.nanopool\.org|xmr\-eu2\.nanopool\.org|xmr\-jp1\.nanopool\.org|xmr\-us\-east1\.nanopool\.org|xmr\-us\-west1\.nanopool\.org|xmr\-us\.suprnova\.cc|xmr\-usa\.dwarfpool\.com|xmr\.2miners\.com|xmr\.5b6b7b\.ru|xmr\.alimabi\.cn|xmr\.bohemianpool\.com|xmr\.crypto\-pool\.fr|xmr\.crypto\-pool\.info|xmr\.f2pool\.com|xmr\.hashcity\.org|xmr\.hex7e4\.ru|xmr\.ip28\.net|xmr\.monerpool\.org|xmr\.mypool\.online|xmr\.nanopool\.org|xmr\.pool\.gntl\.co\.uk|xmr\.pool\.minergate\.com|xmr\.poolto\.be|xmr\.ppxxmr\.com|xmr\.prohash\.net|xmr\.simka\.pw|xmr\.somec\.cc|xmr\.suprnova\.cc|xmr\.usa\-138\.com|xmr\.vip\.pool\.minergate\.com|xmr1min\.monerpool\.org|xmrf\.520fjh\.org|xmrf\.fjhan\.club|xmrfast\.com|xmrigcc\.graef\.in|xmrminer\.cc|xmrpool\.de|xmrpool\.eu|xmrpool\.me|xmrpool\.net|xmrpool\.xyz|xx11m\.monerpool\.org|xx11mv2\.monerpool\.org|xxx\.hex7e4\.ru|zarabotaibitok\.ru|zer0day\.ru</field>
    </rule>
    <rule id="900606" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_addinutil.yml</info>
        <!--Sigma Rule Author: Michael McKinley (@McKinleyMike), Tony Latteri (@TheLatteri)-->
        <!--Description: Detects network connections made by the Add-In deployment cache updating utility (AddInutil.exe), which could indicate command and control communication.-->
        <!--Date: 2023/09/18-->
        <!--Status: experimental-->
        <!--ID: 5205613d-2a63-4412-a895-3a2458b587b3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Network Connection Initiated By AddinUtil.EXE</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+addinutil\.exe)$</field>
    </rule>
    <rule id="900607" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_dfsvc_uncommon_ports.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects network connections from "dfsvc.exe" used to handled ClickOnce applications to uncommon ports-->
        <!--Date: 2023/06/12-->
        <!--Status: experimental-->
        <!--ID: 4c5fba4a-9ef6-4f16-823d-606246054741-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1203</id>
        </mitre>
        <description>Dfsvc.EXE Network Connection To Uncommon Ports</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+dfsvc\.exe)$</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.destinationPort" negate="yes" type="pcre2">(?i)80</field>
        <field name="win.eventdata.destinationPort" negate="yes" type="pcre2">(?i)443</field>
        <field name="win.eventdata.destinationPort" negate="yes" type="pcre2">(?i)445</field>
    </rule>
    <rule id="900608" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_office_susp_ports.yml</info>
        <!--Sigma Rule Author: X__Junior (Nextron Systems)-->
        <!--Description: Detects office suit applications communicating to target systems on uncommon ports-->
        <!--Date: 2023/07/12-->
        <!--Status: experimental-->
        <!--ID: 3b5ba899-9842-4bc2-acc2-12308498bf42-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.command_and_control</id>
        </mitre>
        <description>Suspicious Office Outbound Connections</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+excel\.exe|\\+outlook\.exe|\\+powerpnt\.exe|\\+winword\.exe|\\+wordpad\.exe|\\+wordview\.exe)$</field>
        <field name="win.eventdata.destinationPort" negate="yes" type="pcre2">(?i)80</field>
        <field name="win.eventdata.destinationPort" negate="yes" type="pcre2">(?i)139</field>
        <field name="win.eventdata.destinationPort" negate="yes" type="pcre2">(?i)443</field>
        <field name="win.eventdata.destinationPort" negate="yes" type="pcre2">(?i)445</field>
        <field name="win.eventdata.destinationPort" negate="yes" type="pcre2">(?i)465</field>
        <field name="win.eventdata.destinationPort" negate="yes" type="pcre2">(?i)587</field>
        <field name="win.eventdata.destinationPort" negate="yes" type="pcre2">(?i)993</field>
        <field name="win.eventdata.destinationPort" negate="yes" type="pcre2">(?i)995</field>
    </rule>
    <rule id="900609" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_susp_external_ip_lookup.yml</info>
        <!--Sigma Rule Author: Janantha Marasinghe, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects external IP address lookups by non-browser processes via services such as "api.ipify.org". This could be indicative of potential post compromise internet test activity.-->
        <!--Date: 2023/04/24-->
        <!--Status: experimental-->
        <!--ID: edf3485d-dac4-4d50-90e4-b0e5813f7e60-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1016</id>
        </mitre>
        <description>Suspicious Network Connection to IP Lookup Service APIs</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.destinationHostname" negate="no" type="pcre2">(?i)api\.2ip\.ua|api\.bigdatacloud\.net|api\.ipify\.org|bot\.whatismyipaddress\.com|canireachthe\.net|checkip\.amazonaws\.com|checkip\.dyndns\.org|curlmyip\.com|db\-ip\.com|edns\.ip\-api\.com|eth0\.me|freegeoip\.app|geoipy\.com|getip\.pro|icanhazip\.com|ident\.me|ifconfig\.io|ifconfig\.me|ipapi\.co|ip\-api\.com|ip\.anysrc\.net|ip\.tyk\.nu|ipaddressworld\.com|ipecho\.net|ipinfo\.io|ipof\.in|ipv4\.icanhazip\.com|ipv4bot\.whatismyipaddress\.com|ipwho\.is|l2\.io|myexternalip\.com|wgetip\.com|whatismyip\.akamai\.com|wtfismyip\.com</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+brave\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Mozilla\ Firefox\\+firefox\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Mozilla\ Firefox\\+firefox\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Internet\ Explorer\\+iexplore\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Internet\ Explorer\\+iexplore\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+maxthon\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+EdgeWebView\\+Application\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WindowsApps\\+MicrosoftEdge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+Edge\\+Application\\+msedge\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Microsoft\\+Edge\\+Application\\+msedge\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+EdgeCore\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Microsoft\\+EdgeCore\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedgewebview2\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+opera\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+safari\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+seamonkey\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+vivaldi\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+whale\.exe)$</field>
    </rule>
    <rule id="900610" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_wuauclt_network_connection.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects the use of the Windows Update Client binary (wuauclt.exe) to proxy execute code and making network connections.
One could easily make the DLL spawn a new process and inject to it to proxy the network connection and bypass this rule.
-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: c649a6c7-cd8c-4a78-9c04-000fc76df954-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Potentially Suspicious Wuauclt Network Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)wuauclt</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /RunHandlerComServer</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:10\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:127\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:169\.254\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.16)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.17)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.18)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.19)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.20)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.21)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.22)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.23)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.24)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.25)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.26)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.27)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.28)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.29)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.30)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.31)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:192\.168)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:::1)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:0:0:0:0:0:0:0:1)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:fe80:)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:fc)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:fd)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.184\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.185\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.186\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.187\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.188\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.189\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.190\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.191\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.220\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.221\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:23\.79\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:51\.10\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:51\.103\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:51\.104\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:51\.105\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:52\.239\.)</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+Windows\\+UUS\\+Packages\\+Preview\\+amd64\\+updatedeploy\.dll\ /ClassId</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+Windows\\+UUS\\+amd64\\+UpdateDeploy\.dll\ /ClassId</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+Windows\\+WinSxS\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\\+UpdateDeploy\.dll\ /ClassId\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)None</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)</field>
    </rule>
    <rule id="900611" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_vscode_tunnel_connection.yml</info>
        <!--Sigma Rule Author: Kamran Saifullah-->
        <!--Description: Detects network connections to Visual Studio Code tunnel domains initiated by a process on a system. Attackers can abuse that feature to establish a reverse shell or persistence on a machine.
-->
        <!--Date: 2023/11/20-->
        <!--Status: experimental-->
        <!--ID: 4b657234-038e-4ad5-997c-4be42340bce4-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.001</id>
        </mitre>
        <description>Network Connection Initiated To Visual Studio Code Tunnels Domain</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.destinationHostname" negate="no" type="pcre2">(?i)(?:\.tunnels\.api\.visualstudio\.com)$</field>
    </rule>
    <rule id="900612" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_script.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects a script interpreter wscript/cscript opening a network connection. Adversaries may use script to download malicious payloads.-->
        <!--Date: 2022/08/28-->
        <!--Status: test-->
        <!--ID: 08249dc0-a28d-4555-8ba5-9255a198e08c-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Script Initiated Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wscript\.exe|\\+cscript\.exe)$</field>
    </rule>
    <rule id="900613" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_telegram_api_non_browser_access.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects an a non-browser process interacting with the Telegram API which could indicate use of a covert C2-->
        <!--Date: 2023/05/19-->
        <!--Status: experimental-->
        <!--ID: c3dbbc9f-ef1d-470a-a90a-d343448d5875-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1102</id>
        </mitre>
        <description>Suspicious Non-Browser Network Communication With Telegram API</description>
        <options>no_full_log</options>
        <group>windows,network_connection,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.destinationHostname" negate="no" type="pcre2">(?i)api\.telegram\.org</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+brave\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Mozilla\ Firefox\\+firefox\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Mozilla\ Firefox\\+firefox\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Internet\ Explorer\\+iexplore\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Internet\ Explorer\\+iexplore\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+maxthon\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+EdgeWebView\\+Application\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WindowsApps\\+MicrosoftEdge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+Edge\\+Application\\+msedge\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Microsoft\\+Edge\\+Application\\+msedge\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+EdgeCore\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Microsoft\\+EdgeCore\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedgewebview2\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+opera\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+safari\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+seamonkey\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+vivaldi\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+whale\.exe)$</field>
    </rule>
    <rule id="900614" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_susp_epmap.yml</info>
        <!--Sigma Rule Author: frack113, Tim Shelton (fps)-->
        <!--Description: Detects suspicious "epmap" connection to a remote computer via remote procedure call (RPC)-->
        <!--Date: 2022/07/14-->
        <!--Status: experimental-->
        <!--ID: 628d7a0b-7b84-4466-8552-e6138bc03b43-->
        <mitre>
            <id>attack.lateral_movement</id>
        </mitre>
        <description>Suspicious Epmap Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)tcp</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.destinationPort" negate="no" type="pcre2">(?i)135</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+ProgramData\\+Amazon\\+SSM\\+Update\\+amazon\-ssm\-agent\-updater)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)None</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)&lt;unknown\ process&gt;</field>
    </rule>
    <rule id="900615" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_susp_dropbox_api.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects an executable that isn't dropbox but communicates with the Dropbox API-->
        <!--Date: 2022/04/20-->
        <!--Status: test-->
        <!--ID: 25eabf56-22f0-4915-a1ed-056b8dae0a68-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Dropbox API Usage</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.destinationHostname" negate="no" type="pcre2">(?i)(?:api\.dropboxapi\.com|content\.dropboxapi\.com)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Dropbox</field>
    </rule>
    <rule id="900616" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_susp_cmstp.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious network connection by Cmstp-->
        <!--Date: 2022/08/30-->
        <!--Status: test-->
        <!--ID: efafe0bf-4238-479e-af8f-797bd3490d2d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.003</id>
        </mitre>
        <description>Cmstp Making Network Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmstp\.exe)$</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
    </rule>
    <rule id="900617" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_mega_nz.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects an executable accessing mega.co.nz, which could be a sign of forbidden file sharing use of data exfiltration by malicious actors-->
        <!--Date: 2021/12/06-->
        <!--Status: test-->
        <!--ID: fdeebdf0-9f3f-4d08-84a6-4c4d13e39fe4-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.001</id>
        </mitre>
        <description>Communication To Mega.nz</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.destinationHostname" negate="no" type="pcre2">(?i)(?:api\.mega\.co\.nz)$</field>
    </rule>
    <rule id="900618" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_rdp_reverse_tunnel.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detects svchost hosting RDP termsvcs communicating with the loopback address and on TCP port 3389-->
        <!--Date: 2019/02/16-->
        <!--Status: test-->
        <!--ID: 5f699bc5-5446-4a4a-a0b7-5ef2885a3eb4-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1572</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.001</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>RDP Over Reverse SSH Tunnel</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+svchost\.exe)$</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.sourcePort" negate="no" type="pcre2">(?i)3389</field>
        <field name="win.eventdata.destinationIp" negate="no" type="pcre2">(?i)^(?:127\.)</field>
        <field name="win.eventdata.destinationIp" negate="no" type="pcre2">(?i)::1</field>
    </rule>
    <rule id="900619" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_script_wan.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth-->
        <!--Description: Detects a script interpreter wscript/cscript opening a network connection to a non-local network. Adversaries may use script to download malicious payloads.-->
        <!--Date: 2022/08/28-->
        <!--Status: test-->
        <!--ID: 992a6cae-db6a-43c8-9cec-76d7195c96fc-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Script Initiated Connection to Non-Local Network</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wscript\.exe|\\+cscript\.exe)$</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:127\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:10\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:192\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:169\.254\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:::1)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:0:0:0:0:0:0:0:1)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:fe80:)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:fc)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:fd)</field>
    </rule>
    <rule id="900620" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_powershell_network_connection.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a PowerShell process that initiates network connections. Check for suspicious target ports and target systems.-->
        <!--Date: 2017/03/13-->
        <!--Status: experimental-->
        <!--ID: 1f21ec3f-810d-4b0e-8045-322202e22b4b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell Initiated Network Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:10\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:192\.168\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.16\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.17\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.18\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.19\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.20\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.21\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.22\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.23\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.24\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.25\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.26\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.27\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.28\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.29\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.30\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.31\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:127\.0\.0\.1)</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)AUTHORI</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)AUTORI</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:::1)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:0:0:0:0:0:0:0:1)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:fe80:)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:fc)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:fd)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.184\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.185\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.186\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.187\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.188\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.189\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.190\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:20\.191\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:23\.79\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:51\.10\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:51\.103\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:51\.104\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:51\.105\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:52\.239\.)</field>
    </rule>
    <rule id="900621" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_remote_powershell_session_network.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects remote PowerShell connections by monitoring network outbound connections to ports 5985 or 5986 from a non-network service account.-->
        <!--Date: 2019/09/12-->
        <!--Status: test-->
        <!--ID: c539afac-c12a-46ed-b1bd-5a5567c9f045-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.006</id>
        </mitre>
        <description>Remote PowerShell Session (Network)</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.destinationPort" negate="no" type="pcre2">(?i)5985|5986</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)NETWORK\ SERVICE</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)NETZWERKDIENST</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)SERVIZIO\ DI\ RETE</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)SERVICIO\ DE\ RED</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)SERVICE\ R</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)SEAU</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:0:0:)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Avast\ Software\\+Avast\\+AvastSvc\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Avast\ Software\\+Avast\\+AvastSvc\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)::1</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)127\.0\.0\.1</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)::1</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)127\.0\.0\.1</field>
    </rule>
    <rule id="900622" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_dead_drop_resolvers.yml</info>
        <!--Sigma Rule Author: Sorina Ionescu, X__Junior (Nextron Systems)-->
        <!--Description: Detects an executable, which is not an internet browser, making DNS request to legit popular websites, which were seen to be used as dead drop resolvers in previous attacks.-->
        <!--Date: 2022/08/17-->
        <!--Status: test-->
        <!--ID: 297ae038-edc2-4b2e-bb3e-7c5fc94dd5c7-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1102</id>
            <id>attack.t1102.001</id>
        </mitre>
        <description>Potential Dead Drop Resolvers</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.destinationHostname" negate="no" type="pcre2">(?i)(?:\.t\.me|4shared\.com|anonfiles\.com|cdn\.discordapp\.com|cloudflare\.com|ddns\.net|discord\.com|docs\.google\.com|drive\.google\.com|dropbox\.com|dropmefiles\.com|facebook\.com|feeds\.rapidfeeds\.com|fotolog\.com|ghostbin\.co/|githubusercontent\.com|gofile\.io|hastebin\.com|imgur\.com|livejournal\.com|mediafire\.com|mega\.nz|onedrive\.com|paste\.ee|pastebin\.com|pastebin\.pl|pastetext\.net|privatlab\.com|privatlab\.net|reddit\.com|send\.exploit\.in|sendspace\.com|steamcommunity\.com|storage\.googleapis\.com|technet\.microsoft\.com|temp\.sh|transfer\.sh|twitter\.com|ufile\.io|vimeo\.com|wetransfer\.com|youtube\.com)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Users\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Google\\+Chrome\\+Application\\+chrome\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Mozilla\ Firefox\\+firefox\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Mozilla\ Firefox\\+firefox\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Users\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Mozilla\ Firefox\\+firefox\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Internet\ Explorer\\+iexplore\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Internet\ Explorer\\+iexplore\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+EdgeWebView\\+Application\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WindowsApps\\+MicrosoftEdge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+Edge\\+Application\\+msedge\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Microsoft\\+Edge\\+Application\\+msedge\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+EdgeCore\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Microsoft\\+EdgeCore\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedgewebview2\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+safari\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+MsMpEng\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+MsSense\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:C:\\+Program\ Files\ \(x86\)\\+PRTG\ Network\ Monitor\\+PRTG\ Probe\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:C:\\+Program\ Files\\+PRTG\ Network\ Monitor\\+PRTG\ Probe\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+brave\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+BraveSoftware\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Maxthon\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+maxthon\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Programs\\+Opera\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+opera\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+SeaMonkey\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+SeaMonkey\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+seamonkey\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Vivaldi\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+vivaldi\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Naver\\+Naver\ Whale\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Naver\\+Naver\ Whale\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+whale\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Tor\ Browser\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Waterfox\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Waterfox\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Waterfox\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Programs\\+midori\-ng\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Midori\ Next\ Generation\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+SlimBrowser\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+SlimBrowser\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+slimbrowser\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Flock\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Flock\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Phoebe\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Phoebe\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Falkon\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Falkon\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+falkon\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+QtWeb\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+QtWeb\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+QtWeb\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Avant\ Browser\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Avant\ Browser\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+avant\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+WindowsApps\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+WindowsApps\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:WhatsApp\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Roaming\\+Telegram\ Desktop\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Telegram\.exe)$</field>
        <field name="win.eventdata.destinationHostname" negate="yes" type="pcre2">(?i)(?:\.t\.me)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Microsoft\\+OneDrive\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+OneDrive\.exe)$</field>
        <field name="win.eventdata.destinationHostname" negate="yes" type="pcre2">(?i)(?:onedrive\.com)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Dropbox\\+Client\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Dropbox\\+Client\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Dropbox\.exe)$</field>
        <field name="win.eventdata.destinationHostname" negate="yes" type="pcre2">(?i)(?:dropbox\.com)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+MEGAsync\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:MEGAsync\.exe)$</field>
        <field name="win.eventdata.destinationHostname" negate="yes" type="pcre2">(?i)(?:mega\.nz)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Google\\+Drive\ File\ Stream\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Google\\+Drive\ File\ Stream\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:GoogleDriveFS\.exe)$</field>
        <field name="win.eventdata.destinationHostname" negate="yes" type="pcre2">(?i)(?:drive\.google\.com)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Discord\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Discord\.exe)$</field>
        <field name="win.eventdata.destinationHostname" negate="yes" type="pcre2">(?i)(?:discord\.com)$</field>
        <field name="win.eventdata.destinationHostname" negate="yes" type="pcre2">(?i)(?:cdn\.discordapp\.com)$</field>
    </rule>
    <rule id="900623" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_susp_binary_no_cmdline.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious network connections made by a well-known Windows binary run with no command line parameters-->
        <!--Date: 2022/07/03-->
        <!--Status: test-->
        <!--ID: 20384606-a124-4fec-acbb-8bd373728613-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious Network Connection Binary No CommandLine</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+regsvr32\.exe|\\+rundll32\.exe|\\+dllhost\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\\+regsvr32\.exe|\\+rundll32\.exe|\\+dllhost\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="900624" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_regsvr32_network_activity.yml</info>
        <!--Sigma Rule Author: Dmitriy Lifanov, oscd.community-->
        <!--Description: Detects network connections initiated by Regsvr32.exe-->
        <!--Date: 2019/10/25-->
        <!--Status: test-->
        <!--ID: c7e91a02-d771-4a6d-a700-42587e0b1095-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1559.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.010</id>
        </mitre>
        <description>Network Connection Initiated By Regsvr32.EXE</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+regsvr32\.exe)$</field>
    </rule>
    <rule id="900625" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_ngrok_domains.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects an executable accessing ngrok domains, which could be a sign of forbidden data exfiltration by malicious actors-->
        <!--Date: 2022/07/16-->
        <!--Status: test-->
        <!--ID: 18249279-932f-45e2-b37a-8925f2597670-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.001</id>
        </mitre>
        <description>Communication To Ngrok Domains</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.destinationHostname" negate="no" type="pcre2">(?i)(?:\.ngrok\-free\.app|\.ngrok\-free\.dev|\.ngrok\.app|\.ngrok\.dev|\.ngrok\.io)$</field>
    </rule>
    <rule id="900626" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_imewdbld.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects network connections initiated by IMEWDBLD. This might indicate potential abuse to download arbitrary files via this utility-->
        <!--Date: 2022/01/22-->
        <!--Status: test-->
        <!--ID: 8d7e392e-9b28-49e1-831d-5949c6281228-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Network Connection Initiated By IMEWDBLD.EXE</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+IMEWDBLD\.exe)$</field>
    </rule>
    <rule id="900627" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_rdp_outbound_over_non_standard_tools.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects Non-Standard Tools Connecting to TCP port 3389 indicating possible lateral movement-->
        <!--Date: 2019/05/15-->
        <!--Status: test-->
        <!--ID: ed74fe75-7594-4b4b-ae38-e38e3fd2eb23-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.001</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>Outbound RDP Connections Over Non-Standard Tools</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.destinationPort" negate="no" type="pcre2">(?i)3389</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+mstsc\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+SysWOW64\\+mstsc\.exe</field>
    </rule>
    <rule id="900628" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_rdp_outbound_over_non_standard_tools.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects Non-Standard Tools Connecting to TCP port 3389 indicating possible lateral movement-->
        <!--Date: 2019/05/15-->
        <!--Status: test-->
        <!--ID: ed74fe75-7594-4b4b-ae38-e38e3fd2eb23-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.001</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>Outbound RDP Connections Over Non-Standard Tools</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.destinationPort" negate="no" type="pcre2">(?i)3389</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+dns\.exe</field>
        <field name="win.eventdata.sourcePort" negate="yes" type="pcre2">(?i)53</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)udp</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Avast\ Software\\+Avast\\+AvastSvc\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Avast\\+AvastSvc\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+RDCMan\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Google\\+Chrome\\+Application\\+chrome\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+FSAssessment\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+FSDiscovery\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+MobaRTE\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+mRemote\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+mRemoteNG\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+Passwordstate\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+RemoteDesktopManager\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+RemoteDesktopManager64\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+RemoteDesktopManagerFree\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+RSSensor\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+RTS2App\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+RTSApp\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+spiceworks\-finder\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+Terminals\.exe</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)\\+ws_TunnelService\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+thor\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+thor64\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+SplunkUniversalForwarder\\+bin\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Ranger\\+SentinelRanger\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Mozilla\ Firefox\\+firefox\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)None</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)&lt;unknown\ process&gt;</field>
    </rule>
    <rule id="900629" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_notepad_network_connection.yml</info>
        <!--Sigma Rule Author: EagleEye Team-->
        <!--Description: Detects suspicious network connection by Notepad-->
        <!--Date: 2020/05/14-->
        <!--Status: test-->
        <!--ID: e81528db-fc02-45e8-8e98-4e84aba1f10b-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1055</id>
        </mitre>
        <description>Notepad Making Network Connection</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+notepad\.exe)$</field>
        <field name="win.eventdata.destinationPort" negate="yes" type="pcre2">(?i)9100</field>
    </rule>
    <rule id="900630" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_devtunnel_connection.yml</info>
        <!--Sigma Rule Author: Kamran Saifullah-->
        <!--Description: Detects network connections to Devtunnels domains initiated by a process on a system. Attackers can abuse that feature to establish a reverse shell or persistence on a machine.
-->
        <!--Date: 2023/11/20-->
        <!--Status: experimental-->
        <!--ID: 9501f8e6-8e3d-48fc-a8a6-1089dd5d7ef4-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.001</id>
        </mitre>
        <description>Network Connection Initiated To DevTunnels Domain</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.destinationHostname" negate="no" type="pcre2">(?i)(?:\.devtunnels\.ms)$</field>
    </rule>
    <rule id="900631" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_malware_backconnect_ports.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects programs that connect to typical malware back connect ports based on statistical analysis from two different sandbox system databases-->
        <!--Date: 2017/03/19-->
        <!--Status: test-->
        <!--ID: 4b89abaa-99fe-4232-afdd-8f9aa4d20382-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.command_and_control</id>
            <id>attack.t1571</id>
        </mitre>
        <description>Suspicious Typical Malware Back Connect Ports</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.destinationPort" negate="no" type="pcre2">(?i)100|198|200|243|473|666|700|743|777|1443|1515|1777|1817|1904|1960|2443|2448|3360|3675|3939|4040|4433|4438|4443|4444|4455|5445|5552|5649|6625|7210|8080|8143|8843|8888|9631|9943|10101|12102|12103|12322|13145|13394|13504|13505|13506|13507|14102|14103|14154|49180|65520|65535</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:10\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:127\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.16\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.17\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.18\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.19\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.20\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.21\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.22\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.23\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.24\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.25\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.26\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.27\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.28\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.29\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.30\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:172\.31\.)</field>
        <field name="win.eventdata.destinationIp" negate="yes" type="pcre2">(?i)^(?:192\.168\.)</field>
    </rule>
    <rule id="900632" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_malware_backconnect_ports.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects programs that connect to typical malware back connect ports based on statistical analysis from two different sandbox system databases-->
        <!--Date: 2017/03/19-->
        <!--Status: test-->
        <!--ID: 4b89abaa-99fe-4232-afdd-8f9aa4d20382-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.command_and_control</id>
            <id>attack.t1571</id>
        </mitre>
        <description>Suspicious Typical Malware Back Connect Ports</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.destinationPort" negate="no" type="pcre2">(?i)100|198|200|243|473|666|700|743|777|1443|1515|1777|1817|1904|1960|2443|2448|3360|3675|3939|4040|4433|4438|4443|4444|4455|5445|5552|5649|6625|7210|8080|8143|8843|8888|9631|9943|10101|12102|12103|12322|13145|13394|13504|13505|13506|13507|14102|14103|14154|49180|65520|65535</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+)</field>
    </rule>
    <rule id="900633" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/network_connection/net_connection_win_susp_outbound_smtp_connections.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may steal data by exfiltrating it over an un-encrypted network protocol other than that of the existing command and control channel.
The data may also be sent to an alternate network location from the main command and control server.
-->
        <!--Date: 2022/01/07-->
        <!--Status: test-->
        <!--ID: 9976fa64-2804-423c-8a5b-646ade840773-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048.003</id>
        </mitre>
        <description>Suspicious Outbound SMTP Connections</description>
        <options>no_full_log</options>
        <group>network_connection,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.destinationPort" negate="no" type="pcre2">(?i)25|587|465|2525</field>
        <field name="win.eventdata.initiated" negate="no" type="pcre2">(?i)true</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+thunderbird\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+outlook\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Microsoft\\+Exchange\ Server\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+WindowsApps\\+microsoft\.windowscommunicationsapps_)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+HxTsr\.exe)$</field>
    </rule>
    <rule id="900634" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_crackmapexec_execution_patterns.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects various execution patterns of the CrackMapExec pentesting framework-->
        <!--Date: 2020/05/22-->
        <!--Status: stable-->
        <!--ID: 058f4380-962d-40a5-afce-50207d36d7e2-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
            <id>attack.t1053</id>
            <id>attack.t1059.003</id>
            <id>attack.t1059.001</id>
            <id>attack.s0106</id>
        </mitre>
        <description>HackTool - CrackMapExec Execution Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:cmd\.exe\ /Q\ /c\ .+\ 1&gt;\ \\+.+\\+.+\\+.+\ 2&gt;\&amp;1|cmd\.exe\ /C\ .+\ &gt;\ \\+.+\\+.+\\+.+\ 2&gt;\&amp;1|cmd\.exe\ /C\ .+\ &gt;\ .+\\+Temp\\+.+\ 2&gt;\&amp;1|powershell\.exe\ \-exec\ bypass\ \-noni\ \-nop\ \-w\ 1\ \-C\ "|powershell\.exe\ \-noni\ \-nop\ \-w\ 1\ \-enc\ )</field>
    </rule>
    <rule id="900635" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dumpminitool_susp_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious ways to use the "DumpMinitool.exe" binary-->
        <!--Date: 2022/04/06-->
        <!--Status: experimental-->
        <!--ID: eb1c4225-1c23-4241-8dd4-051389fde4ce-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Suspicious DumpMinitool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+DumpMinitool\.exe|\\+DumpMinitool\.x86\.exe|\\+DumpMinitool\.arm64\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)DumpMinitool\.exe|DumpMinitool\.x86\.exe|DumpMinitool\.arm64\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Microsoft\ Visual\ Studio\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Extensions\\+</field>
    </rule>
    <rule id="900636" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dumpminitool_susp_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious ways to use the "DumpMinitool.exe" binary-->
        <!--Date: 2022/04/06-->
        <!--Status: experimental-->
        <!--ID: eb1c4225-1c23-4241-8dd4-051389fde4ce-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Suspicious DumpMinitool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+DumpMinitool\.exe|\\+DumpMinitool\.x86\.exe|\\+DumpMinitool\.arm64\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)DumpMinitool\.exe|DumpMinitool\.x86\.exe|DumpMinitool\.arm64\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.txt</field>
    </rule>
    <rule id="900637" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dumpminitool_susp_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious ways to use the "DumpMinitool.exe" binary-->
        <!--Date: 2022/04/06-->
        <!--Status: experimental-->
        <!--ID: eb1c4225-1c23-4241-8dd4-051389fde4ce-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Suspicious DumpMinitool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+DumpMinitool\.exe|\\+DumpMinitool\.x86\.exe|\\+DumpMinitool\.arm64\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)DumpMinitool\.exe|DumpMinitool\.x86\.exe|DumpMinitool\.arm64\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ Full</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ Mini</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ WithHeap</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\-\-dumpType</field>
    </rule>
    <rule id="900638" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mmc_mmc20_lateral_movement.yml</info>
        <!--Sigma Rule Author: @2xxeformyshirt (Security Risk Advisors) - rule; Teymur Kheirkhabarov (idea)-->
        <!--Description: Detects MMC20.Application Lateral Movement; specifically looks for the spawning of the parent MMC.exe with a command line of "-Embedding" as a child of svchost.exe-->
        <!--Date: 2020/03/04-->
        <!--Status: test-->
        <!--ID: f1f3bf22-deb2-418d-8cce-e1a45e46a5bd-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1021.003</id>
        </mitre>
        <description>MMC20 Lateral Movement</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+svchost\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+mmc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-Embedding</field>
    </rule>
    <rule id="900639" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_desktopimgdownldr_susp_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a suspicious Microsoft desktopimgdownldr execution with parameters used to download files from the Internet-->
        <!--Date: 2020/07/03-->
        <!--Status: test-->
        <!--ID: bb58aa4a-b80b-415a-a2c0-2f65a4c81009-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Desktopimgdownldr Command</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /lockscreenurl:</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.jpg</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.jpeg</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.png</field>
    </rule>
    <rule id="900640" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_desktopimgdownldr_susp_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a suspicious Microsoft desktopimgdownldr execution with parameters used to download files from the Internet-->
        <!--Date: 2020/07/03-->
        <!--Status: test-->
        <!--ID: bb58aa4a-b80b-415a-a2c0-2f65a4c81009-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Desktopimgdownldr Command</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg\ delete</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+PersonalizationCSP</field>
    </rule>
    <rule id="900641" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_svchost_termserv_proc_spawn.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a process spawned by the terminal service server process (this could be an indicator for an exploitation of CVE-2019-0708)-->
        <!--Date: 2019/05/22-->
        <!--Status: test-->
        <!--ID: 1012f107-b8f1-4271-af30-5aed2de89b39-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1190</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1210</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>Terminal Service Process Spawn</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\\+svchost\.exe</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)termsvcs</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+rdpclip\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+csrss\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+wininit\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+winlogon\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="900642" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_iex_patterns.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious ways to run Invoke-Execution using IEX alias-->
        <!--Date: 2022/03/24-->
        <!--Status: test-->
        <!--ID: 09576804-7a05-458e-a817-eb718ca91f54-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell IEX Execution Patterns</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \|\ iex;|\ \|\ iex\ |\ \|\ iex\}|\ \|\ IEX\ ;|\ \|\ IEX\ \-Error|\ \|\ IEX\ \(new|\);IEX\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)::FromBase64String|\.GetString\(\[System\.Convert\]::</field>
    </rule>
    <rule id="900643" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_iex_patterns.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious ways to run Invoke-Execution using IEX alias-->
        <!--Date: 2022/03/24-->
        <!--Status: test-->
        <!--ID: 09576804-7a05-458e-a817-eb718ca91f54-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell IEX Execution Patterns</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\)\|iex;\$|\);iex\(\$|\);iex\ \$|\ \|\ IEX\ \|\ )</field>
    </rule>
    <rule id="900644" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_rdp_keys_tamper.yml</info>
        <!--Sigma Rule Author: pH-T (Nextron Systems), @Kostastsale, @TheDFIRReport-->
        <!--Description: Detects the execution of "reg.exe" for enabling/disabling the RDP service on the host by tampering with the 'CurrentControlSet\Control\Terminal Server' values-->
        <!--Date: 2022/02/12-->
        <!--Status: experimental-->
        <!--ID: 0d5675be-bc88-4172-86d3-1e96a4476536-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.001</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Potential Tampering With RDP Related Registry Keys Via Reg.EXE</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+reg\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)reg\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ add\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+CurrentControlSet\\+Control\\+Terminal\ Server</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)REG_DWORD</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /f</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Licensing\ Core</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)EnableConcurrentSessions</field>
    </rule>
    <rule id="900645" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_rdp_keys_tamper.yml</info>
        <!--Sigma Rule Author: pH-T (Nextron Systems), @Kostastsale, @TheDFIRReport-->
        <!--Description: Detects the execution of "reg.exe" for enabling/disabling the RDP service on the host by tampering with the 'CurrentControlSet\Control\Terminal Server' values-->
        <!--Date: 2022/02/12-->
        <!--Status: experimental-->
        <!--ID: 0d5675be-bc88-4172-86d3-1e96a4476536-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.001</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Potential Tampering With RDP Related Registry Keys Via Reg.EXE</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+reg\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)reg\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ add\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+CurrentControlSet\\+Control\\+Terminal\ Server</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)REG_DWORD</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /f</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)WinStations\\+RDP\-Tcp|MaxInstanceCount|fEnableWinStation|TSUserEnabled|TSEnabled|TSAppCompat|IdleWinStationPoolCount|TSAdvertise|AllowTSConnections|fSingleSessionPerUser|fDenyTSConnections</field>
    </rule>
    <rule id="900646" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_sticky_keys_replace.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: By replacing the sticky keys executable with the local admins CMD executable, an attacker is able to access a privileged windows console session without authenticating to the system.
When the sticky keys are "activated" the privilleged shell is launched.
-->
        <!--Date: 2020/02/18-->
        <!--Status: experimental-->
        <!--ID: 1070db9a-3e5d-412e-8e7b-7183b616e1b3-->
        <mitre>
            <id>attack.t1546.008</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Persistence Via Sticky Key Backdoor</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:copy\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/y\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\+windows\\+system32\\+cmd\.exe\ C:\\+windows\\+system32\\+sethc\.exe</field>
    </rule>
    <rule id="900647" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_adfind_enumeration.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects active directory enumeration activity using known AdFind CLI flags-->
        <!--Date: 2021/12/13-->
        <!--Status: experimental-->
        <!--ID: 455b9d50-15a1-4b99-853f-8d37655a4c1b-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1087.002</id>
        </mitre>
        <description>PUA - Suspicious ActiveDirectory Enumeration Via AdFind.EXE</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)lockoutduration|lockoutthreshold|lockoutobservationwindow|maxpwdage|minpwdage|minpwdlength|pwdhistorylength|pwdproperties</field>
    </rule>
    <rule id="900648" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_adfind_enumeration.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects active directory enumeration activity using known AdFind CLI flags-->
        <!--Date: 2021/12/13-->
        <!--Status: experimental-->
        <!--ID: 455b9d50-15a1-4b99-853f-8d37655a4c1b-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1087.002</id>
        </mitre>
        <description>PUA - Suspicious ActiveDirectory Enumeration Via AdFind.EXE</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-sc\ admincountdmp</field>
    </rule>
    <rule id="900649" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_adfind_enumeration.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects active directory enumeration activity using known AdFind CLI flags-->
        <!--Date: 2021/12/13-->
        <!--Status: experimental-->
        <!--ID: 455b9d50-15a1-4b99-853f-8d37655a4c1b-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1087.002</id>
        </mitre>
        <description>PUA - Suspicious ActiveDirectory Enumeration Via AdFind.EXE</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-sc\ exchaddresses</field>
    </rule>
    <rule id="900650" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_setupapi_installhinfsection.yml</info>
        <!--Sigma Rule Author: Konstantin Grishchenko, oscd.community-->
        <!--Description: setupapi.dll library provide InstallHinfSection function for processing INF files. INF file may contain instructions allowing to create values in the registry, modify files and install drivers. This technique could be used to obtain persistence via modifying one of Run or RunOnce registry keys, run process or use other DLLs chain calls (see references) InstallHinfSection function in setupapi.dll calls runonce.exe executable regardless of actual content of INF file.-->
        <!--Date: 2020/10/07-->
        <!--Status: test-->
        <!--ID: 285b85b1-a555-4095-8652-a8a4106af63f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Suspicious Rundll32 Setupapi.dll Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+runonce\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)setupapi\.dll</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)InstallHinfSection</field>
    </rule>
    <rule id="900651" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_msexchange_transport_agent.yml</info>
        <!--Sigma Rule Author: Tobias Michalski (Nextron Systems)-->
        <!--Description: Detects the Installation of a Exchange Transport Agent-->
        <!--Date: 2021/06/08-->
        <!--Status: test-->
        <!--ID: 83809e84-4475-4b69-bc3e-4aad8568612f-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.002</id>
        </mitre>
        <description>MSExchange Transport Agent Installation</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Install\-TransportAgent</field>
    </rule>
    <rule id="900652" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_wce.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of Windows Credential Editor (WCE)-->
        <!--Date: 2019/12/31-->
        <!--Status: test-->
        <!--ID: 7aa7009a-28b9-4344-8c1f-159489a390df-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0005</id>
        </mitre>
        <description>HackTool - Windows Credential Editor (WCE) Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)a53a02b997935fd8eedcb5f7abab9b9f|e96a73c7bf33a464c510ede582318bf2</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=a53a02b997935fd8eedcb5f7abab9b9f|IMPHASH=e96a73c7bf33a464c510ede582318bf2</field>
    </rule>
    <rule id="900653" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_wce.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of Windows Credential Editor (WCE)-->
        <!--Date: 2019/12/31-->
        <!--Status: test-->
        <!--ID: 7aa7009a-28b9-4344-8c1f-159489a390df-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0005</id>
        </mitre>
        <description>HackTool - Windows Credential Editor (WCE) Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.exe\ \-S)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+services\.exe)$</field>
    </rule>
    <rule id="900654" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_wce.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of Windows Credential Editor (WCE)-->
        <!--Date: 2019/12/31-->
        <!--Status: test-->
        <!--ID: 7aa7009a-28b9-4344-8c1f-159489a390df-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0005</id>
        </mitre>
        <description>HackTool - Windows Credential Editor (WCE) Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+clussvc\.exe)$</field>
    </rule>
    <rule id="900655" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vscode_child_processes_anomalies.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects uncommon or suspicious child processes spawning from a VsCode "code.exe" process. This could indicate an attempt of persistence via VsCode tasks or terminal profiles.-->
        <!--Date: 2023/01/26-->
        <!--Status: experimental-->
        <!--ID: 5a3164f2-b373-4152-93cf-090b13c12d27-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Potentially Suspicious Child Process Of VsCode</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+code\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+calc\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+cscript\.exe|\\+wscript\.exe)$</field>
    </rule>
    <rule id="900656" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vscode_child_processes_anomalies.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects uncommon or suspicious child processes spawning from a VsCode "code.exe" process. This could indicate an attempt of persistence via VsCode tasks or terminal profiles.-->
        <!--Date: 2023/01/26-->
        <!--Status: experimental-->
        <!--ID: 5a3164f2-b373-4152-93cf-090b13c12d27-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Potentially Suspicious Child Process Of VsCode</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+code\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe|\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Invoke\-Expressions|IEX|Invoke\-Command|ICM|DownloadString|rundll32|regsvr32|wscript|cscript</field>
    </rule>
    <rule id="900657" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vscode_child_processes_anomalies.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects uncommon or suspicious child processes spawning from a VsCode "code.exe" process. This could indicate an attempt of persistence via VsCode tasks or terminal profiles.-->
        <!--Date: 2023/01/26-->
        <!--Status: experimental-->
        <!--ID: 5a3164f2-b373-4152-93cf-090b13c12d27-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Potentially Suspicious Child Process Of VsCode</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+code\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i):\\+Users\\+Public\\+|:\\+Windows\\+Temp\\+|:\\+Temp\\+</field>
    </rule>
    <rule id="900658" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_non_priv_reg_or_ps.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Ryan Plas (rule), oscd.community-->
        <!--Description: Search for usage of reg or Powershell by non-privileged users to modify service configuration in registry-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: 8f02c935-effe-45b3-8fc9-ef8696a9e41d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Non-privileged Usage of Reg or Powershell</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:reg\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
    </rule>
    <rule id="900659" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_non_priv_reg_or_ps.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Ryan Plas (rule), oscd.community-->
        <!--Description: Search for usage of reg or Powershell by non-privileged users to modify service configuration in registry-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: 8f02c935-effe-45b3-8fc9-ef8696a9e41d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Non-privileged Usage of Reg or Powershell</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell|set\-itemproperty|\ sp\ |new\-itemproperty</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)Medium</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ControlSet</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Services</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ImagePath|FailureCommand|ServiceDLL</field>
    </rule>
    <rule id="900660" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_set_policies_to_unsecure_level.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects use of executionpolicy option to set insecure policies-->
        <!--Date: 2021/11/01-->
        <!--Status: test-->
        <!--ID: 87e3c4e8-a6a8-4ad9-bb4f-46e7ff99a180-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Change PowerShell Policies to an Insecure Level</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-executionpolicy\ |\ \-ep\ |\ \-exec\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Unrestricted|bypass|RemoteSigned</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+Program\ Files</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+ProgramData</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+AppData\\+Roaming\\+Code\\+</field>
    </rule>
    <rule id="900661" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_purplesharp_indicators.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of the PurpleSharp adversary simulation tool-->
        <!--Date: 2021/06/18-->
        <!--Status: test-->
        <!--ID: ff23ffbc-3378-435e-992f-0624dcf93ab4-->
        <mitre>
            <id>attack.t1587</id>
            <id>attack.resource_development</id>
        </mitre>
        <description>HackTool - PurpleSharp Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+purplesharp</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PurpleSharp\.exe</field>
    </rule>
    <rule id="900662" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_purplesharp_indicators.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of the PurpleSharp adversary simulation tool-->
        <!--Date: 2021/06/18-->
        <!--Status: test-->
        <!--ID: ff23ffbc-3378-435e-992f-0624dcf93ab4-->
        <mitre>
            <id>attack.t1587</id>
            <id>attack.resource_development</id>
        </mitre>
        <description>HackTool - PurpleSharp Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)xyz123456\.exe|PurpleSharp</field>
    </rule>
    <rule id="900663" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_java_keytool_susp_child_process.yml</info>
        <!--Sigma Rule Author: Andreas Hunkeler (@Karneades)-->
        <!--Description: Detects suspicious shell spawn from Java utility keytool process (e.g. adselfservice plus exploitation)-->
        <!--Date: 2021/12/22-->
        <!--Status: test-->
        <!--ID: 90fb5e62-ca1f-4e22-b42e-cc521874c938-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Suspicious Shells Spawn by Java Utility Keytool</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+keytool\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+sh\.exe|\\+bash\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+schtasks\.exe|\\+certutil\.exe|\\+whoami\.exe|\\+bitsadmin\.exe|\\+wscript\.exe|\\+cscript\.exe|\\+scrcons\.exe|\\+regsvr32\.exe|\\+hh\.exe|\\+wmic\.exe|\\+mshta\.exe|\\+rundll32\.exe|\\+forfiles\.exe|\\+scriptrunner\.exe|\\+mftrace\.exe|\\+AppVLP\.exe|\\+systeminfo\.exe|\\+reg\.exe|\\+query\.exe)$</field>
    </rule>
    <rule id="900664" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_visualuiaverifynative.yml</info>
        <!--Sigma Rule Author: Christopher Peacock @SecurePeacock, SCYTHE @scythe_io-->
        <!--Description: VisualUiaVerifyNative.exe is a Windows SDK that can be used for AWL bypass and is listed in Microsoft's recommended block rules.-->
        <!--Date: 2022/06/01-->
        <!--Status: test-->
        <!--ID: b30a8bc5-e21b-4ca2-9420-0a94019ac56a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Use of VisualUiaVerifyNative.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+VisualUiaVerifyNative\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)VisualUiaVerifyNative\.exe</field>
    </rule>
    <rule id="900665" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_chcp_codepage_switch.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects a code page switch in command line or batch scripts to a rare language-->
        <!--Date: 2019/10/14-->
        <!--Status: test-->
        <!--ID: c7942406-33dd-4377-a564-0f62db0593a3-->
        <mitre>
            <id>attack.t1036</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious CodePage Switch Via CHCP</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+chcp\.com)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ 936|\ 1258)$</field>
    </rule>
    <rule id="900666" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rdrleakdiag_process_dumping.yml</info>
        <!--Sigma Rule Author: Cedric MAURUGEON, Florian Roth (Nextron Systems), Swachchhanda Shrawan Poudel, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of the Microsoft Windows Resource Leak Diagnostic tool "rdrleakdiag.exe" to dump process memory-->
        <!--Date: 2021/09/24-->
        <!--Status: test-->
        <!--ID: edadb1e5-5919-4e4c-8462-a9e643b02c4b-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Process Memory Dump via RdrLeakDiag.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)fullmemdmp|/memdmp|\-memdmp</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-o\ |\ /o\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-p\ |\ /p\ )</field>
    </rule>
    <rule id="900667" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rdrleakdiag_process_dumping.yml</info>
        <!--Sigma Rule Author: Cedric MAURUGEON, Florian Roth (Nextron Systems), Swachchhanda Shrawan Poudel, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of the Microsoft Windows Resource Leak Diagnostic tool "rdrleakdiag.exe" to dump process memory-->
        <!--Date: 2021/09/24-->
        <!--Status: test-->
        <!--ID: edadb1e5-5919-4e4c-8462-a9e643b02c4b-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Process Memory Dump via RdrLeakDiag.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rdrleakdiag\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)RdrLeakDiag\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)fullmemdmp|/memdmp|\-memdmp</field>
    </rule>
    <rule id="900668" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_sysinternals_sdelete.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of a renamed SysInternals Sdelete, which is something an administrator shouldn't do (the renaming)-->
        <!--Date: 2022/09/06-->
        <!--Status: test-->
        <!--ID: c1d867fe-8d95-4487-aab4-e53f2d339f90-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1485</id>
        </mitre>
        <description>Renamed Sysinternals Sdelete Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)sdelete\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+sdelete\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+sdelete64\.exe)$</field>
    </rule>
    <rule id="900669" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_extrac32_ads.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Extract data from cab file and hide it in an alternate data stream-->
        <!--Date: 2021/11/26-->
        <!--Status: test-->
        <!--ID: 4b13db67-0c45-40f1-aba8-66a1a7198a1e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Suspicious Extrac32 Alternate Data Stream Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)extrac32\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.cab</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):[^\\+]</field>
    </rule>
    <rule id="900670" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysinternals_psexec_execution.yml</info>
        <!--Sigma Rule Author: omkar72-->
        <!--Description: Detects user accept agreement execution in psexec commandline-->
        <!--Date: 2020/10/30-->
        <!--Status: test-->
        <!--ID: 730fc21b-eaff-474b-ad23-90fd265d4988-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569</id>
            <id>attack.t1021</id>
        </mitre>
        <description>Psexec Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+psexec\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)psexec\.c</field>
    </rule>
    <rule id="900671" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_schtasks_delete_all.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the usage of schtasks with the delete flag and the asterisk symbol to delete all tasks from the schedule of the local computer, including tasks scheduled by other users.-->
        <!--Date: 2022/09/09-->
        <!--Status: test-->
        <!--ID: 220457c1-1c9f-4c2e-afe6-9598926222c1-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1489</id>
        </mitre>
        <description>Delete All Scheduled Tasks</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /delete\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/tn\ \\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /f</field>
    </rule>
    <rule id="900672" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_empire_powershell_launch.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious powershell command line parameters used in Empire-->
        <!--Date: 2019/04/20-->
        <!--Status: test-->
        <!--ID: 79f4ede3-402e-41c8-bc3e-ebbf5f162581-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>HackTool - Empire PowerShell Launch Parameters</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-NoP\ \-sta\ \-NonI\ \-W\ Hidden\ \-Enc\ |\ \-noP\ \-sta\ \-w\ 1\ \-enc\ |\ \-NoP\ \-NonI\ \-W\ Hidden\ \-enc\ |\ \-noP\ \-sta\ \-w\ 1\ \-enc|\ \-enc\ \ SQB|\ \-nop\ \-exec\ bypass\ \-EncodedCommand\ )</field>
    </rule>
    <rule id="900673" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_msra_process_injection.yml</info>
        <!--Sigma Rule Author: Alexander McDonald-->
        <!--Description: Detects potential process injection via Microsoft Remote Asssistance (Msra.exe) by looking at suspicious child processes spawned from the aforementioned process. It has been a target used by many threat actors and used for discovery and persistence tactics-->
        <!--Date: 2022/06/24-->
        <!--Status: test-->
        <!--ID: 744a188b-0415-4792-896f-11ddb0588dbc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1055</id>
        </mitre>
        <description>Potential Process Injection Via Msra.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+msra\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)(?:msra\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+arp\.exe|\\+cmd\.exe|\\+net\.exe|\\+netstat\.exe|\\+nslookup\.exe|\\+route\.exe|\\+schtasks\.exe|\\+whoami\.exe)$</field>
    </rule>
    <rule id="900674" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_takeown_recursive_own.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries can interact with the DACLs using built-in Windows commands takeown which can grant adversaries higher permissions on specific files and folders-->
        <!--Date: 2022/01/30-->
        <!--Status: test-->
        <!--ID: 554601fb-9b71-4bcc-abf4-21a611be4fde-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1222.001</id>
        </mitre>
        <description>Suspicious Recursive Takeown</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+takeown\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/f\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/r</field>
    </rule>
    <rule id="900675" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_iis_susp_module_registration.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Microsoft (idea)-->
        <!--Description: Detects a suspicious IIS module registration as described in Microsoft threat report on IIS backdoors-->
        <!--Date: 2022/08/04-->
        <!--Status: test-->
        <!--ID: 043c4b8b-3a54-4780-9682-081cb6b8185c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.004</id>
        </mitre>
        <description>Suspicious IIS Module Registration</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+w3wp\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)appcmd\.exe\ add\ module</field>
    </rule>
    <rule id="900676" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_iis_susp_module_registration.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Microsoft (idea)-->
        <!--Description: Detects a suspicious IIS module registration as described in Microsoft threat report on IIS backdoors-->
        <!--Date: 2022/08/04-->
        <!--Status: test-->
        <!--ID: 043c4b8b-3a54-4780-9682-081cb6b8185c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.004</id>
        </mitre>
        <description>Suspicious IIS Module Registration</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+w3wp\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ system\.enterpriseservices\.internal\.publish</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe)$</field>
    </rule>
    <rule id="900677" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_iis_susp_module_registration.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Microsoft (idea)-->
        <!--Description: Detects a suspicious IIS module registration as described in Microsoft threat report on IIS backdoors-->
        <!--Date: 2022/08/04-->
        <!--Status: test-->
        <!--ID: 043c4b8b-3a54-4780-9682-081cb6b8185c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.004</id>
        </mitre>
        <description>Suspicious IIS Module Registration</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+w3wp\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)gacutil</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /I</field>
    </rule>
    <rule id="900678" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_execution_via_pe_metadata.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of different Windows based hacktools via PE metadata (company, product, etc.) even if the files have been renamed-->
        <!--Date: 2022/04/27-->
        <!--Status: test-->
        <!--ID: 37c1333a-a0db-48be-b64b-7393b2386e3b-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1588.002</id>
            <id>attack.t1003</id>
        </mitre>
        <description>Suspicious Hacktool Execution - PE Metadata</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)Cube0x0</field>
    </rule>
    <rule id="900679" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_use_of_vsjitdebugger_bin.yml</info>
        <!--Sigma Rule Author: Agro (@agro_sev), Ensar &#350;amil (@sblmsrsn), oscd.community-->
        <!--Description: There is an option for a MS VS Just-In-Time Debugger "vsjitdebugger.exe" to launch specified executable and attach a debugger.
This option may be used adversaries to execute malicious code by signed verified binary.
The debugger is installed alongside with Microsoft Visual Studio package.
-->
        <!--Date: 2020/10/14-->
        <!--Status: test-->
        <!--ID: 15c7904e-6ad1-4a45-9b46-5fb25df37fd2-->
        <mitre>
            <id>attack.t1218</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Malicious PE Execution by Microsoft Visual Studio Debugger</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+vsjitdebugger\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+vsimmersiveactivatehelper.+\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+devenv\.exe)$</field>
    </rule>
    <rule id="900680" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_double_extension.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), @blu3_team (idea), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious use of an .exe extension after a non-executable file extension like .pdf.exe, a set of spaces or underlines to cloak the executable file in spear phishing campaigns-->
        <!--Date: 2019/06/26-->
        <!--Status: stable-->
        <!--ID: 1cdd9a09-06c9-4769-99ff-626e2b3991b8-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1566.001</id>
        </mitre>
        <description>Suspicious Double Extension File Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\.doc\.exe|\.docx\.exe|\.xls\.exe|\.xlsx\.exe|\.ppt\.exe|\.pptx\.exe|\.rtf\.exe|\.pdf\.exe|\.txt\.exe|\ \ \ \ \ \ \.exe|______\.exe|\.doc\.js|\.docx\.js|\.xls\.js|\.xlsx\.js|\.ppt\.js|\.pptx\.js|\.rtf\.js|\.pdf\.js|\.txt\.js)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.doc\.exe|\.docx\.exe|\.xls\.exe|\.xlsx\.exe|\.ppt\.exe|\.pptx\.exe|\.rtf\.exe|\.pdf\.exe|\.txt\.exe|\ \ \ \ \ \ \.exe|______\.exe|\.doc\.js|\.docx\.js|\.xls\.js|\.xlsx\.js|\.ppt\.js|\.pptx\.js|\.rtf\.js|\.pdf\.js|\.txt\.js</field>
    </rule>
    <rule id="900681" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_system_informer.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of System Informer, a task manager tool to view and manipulate processes, kernel options and other low level operations-->
        <!--Date: 2023/05/08-->
        <!--Status: experimental-->
        <!--ID: 5722dff1-4bdd-4949-86ab-fbaf707e767a-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.discovery</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1082</id>
            <id>attack.t1564</id>
            <id>attack.t1543</id>
        </mitre>
        <description>PUA - System Informer Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+SystemInformer\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)SystemInformer\.exe</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)System\ Informer</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)System\ Informer</field>
    </rule>
    <rule id="900682" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_system_informer.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of System Informer, a task manager tool to view and manipulate processes, kernel options and other low level operations-->
        <!--Date: 2023/05/08-->
        <!--Status: experimental-->
        <!--ID: 5722dff1-4bdd-4949-86ab-fbaf707e767a-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.discovery</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1082</id>
            <id>attack.t1564</id>
            <id>attack.t1543</id>
        </mitre>
        <description>PUA - System Informer Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)MD5=19426363A37C03C3ED6FEDF57B6696EC|SHA1=8B12C6DA8FAC0D5E8AB999C31E5EA04AF32D53DC|SHA256=8EE9D84DE50803545937A63C686822388A3338497CDDB660D5D69CF68B68F287|IMPHASH=B68908ADAEB5D662F87F2528AF318F12</field>
    </rule>
    <rule id="900683" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_system_informer.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of System Informer, a task manager tool to view and manipulate processes, kernel options and other low level operations-->
        <!--Date: 2023/05/08-->
        <!--Status: experimental-->
        <!--ID: 5722dff1-4bdd-4949-86ab-fbaf707e767a-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.discovery</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1082</id>
            <id>attack.t1564</id>
            <id>attack.t1543</id>
        </mitre>
        <description>PUA - System Informer Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)19426363A37C03C3ED6FEDF57B6696EC</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)8B12C6DA8FAC0D5E8AB999C31E5EA04AF32D53DC</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)8EE9D84DE50803545937A63C686822388A3338497CDDB660D5D69CF68B68F287</field>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)B68908ADAEB5D662F87F2528AF318F12</field>
    </rule>
    <rule id="900684" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rasdial_execution.yml</info>
        <!--Sigma Rule Author: juju4-->
        <!--Description: Detects suspicious process related to rasdial.exe-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 6bba49bf-7f8c-47d6-a1bb-6b4dece4640e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Suspicious RASdial Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:rasdial\.exe)$</field>
    </rule>
    <rule id="900685" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_frp.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth-->
        <!--Description: Detects the use of Fast Reverse Proxy. frp is a fast reverse proxy to help you expose a local server behind a NAT or firewall to the Internet.-->
        <!--Date: 2022/09/02-->
        <!--Status: test-->
        <!--ID: 32410e29-5f94-4568-b6a3-d91a8adad863-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>PUA - Fast Reverse Proxy (FRP) Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+frpc\.exe|\\+frps\.exe)$</field>
    </rule>
    <rule id="900686" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_frp.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth-->
        <!--Description: Detects the use of Fast Reverse Proxy. frp is a fast reverse proxy to help you expose a local server behind a NAT or firewall to the Internet.-->
        <!--Date: 2022/09/02-->
        <!--Status: test-->
        <!--ID: 32410e29-5f94-4568-b6a3-d91a8adad863-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>PUA - Fast Reverse Proxy (FRP) Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+frpc\.ini</field>
    </rule>
    <rule id="900687" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_frp.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth-->
        <!--Description: Detects the use of Fast Reverse Proxy. frp is a fast reverse proxy to help you expose a local server behind a NAT or firewall to the Internet.-->
        <!--Date: 2022/09/02-->
        <!--Status: test-->
        <!--ID: 32410e29-5f94-4568-b6a3-d91a8adad863-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>PUA - Fast Reverse Proxy (FRP) Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)MD5=7D9C233B8C9E3F0EA290D2B84593C842|SHA1=06DDC9280E1F1810677935A2477012960905942F|SHA256=57B0936B8D336D8E981C169466A15A5FD21A7D5A2C7DAF62D5E142EE860E387C</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)7d9c233b8c9e3f0ea290d2b84593c842</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)06ddc9280e1f1810677935a2477012960905942f</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)57b0936b8d336d8e981c169466a15a5fd21a7d5a2c7daf62d5e142ee860e387c</field>
    </rule>
    <rule id="900688" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_registry_provlaunch_provisioning_command.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Swachchhanda Shrawan Poudel-->
        <!--Description: Detects potential abuse of the provisioning registry key for indirect command execution through "Provlaunch.exe".-->
        <!--Date: 2023/08/08-->
        <!--Status: experimental-->
        <!--ID: 2a4b3e61-9d22-4e4a-b60f-6e8f0cde6f25-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Potential Provisioning Registry Key Abuse For Binary Proxy Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SOFTWARE\\+Microsoft\\+Provisioning\\+Commands\\+</field>
    </rule>
    <rule id="900689" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_disable_sec_services.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), John Lambert (idea), elhoim-->
        <!--Description: Detects execution of "reg.exe" to disable security services such as Windows Defender.-->
        <!--Date: 2021/07/14-->
        <!--Status: test-->
        <!--ID: 5e95028c-5229-4214-afae-d653d573d0ec-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Security Service Disabled Via Reg.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)d\ 4</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)v\ Start</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+AppIDSvc|\\+MsMpSvc|\\+NisSrv|\\+SecurityHealthService|\\+Sense|\\+UsoSvc|\\+WdBoot|\\+WdFilter|\\+WdNisDrv|\\+WdNisSvc|\\+WinDefend|\\+wscsvc|\\+wuauserv</field>
    </rule>
    <rule id="900690" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_base64_reflection_assembly_load.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems), pH-T (Nextron Systems)-->
        <!--Description: Detects base64 encoded .NET reflective loading of Assembly-->
        <!--Date: 2022/03/01-->
        <!--Status: test-->
        <!--ID: 62b7ccc9-23b4-471e-aa15-6da3663c4d59-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.t1620</id>
        </mitre>
        <description>PowerShell Base64 Encoded Reflective Assembly Load</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA|sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA|bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA|AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC|BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp|AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK|WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ|sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA|bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA|WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA|sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA|bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA</field>
    </rule>
    <rule id="900691" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_browsers_tor_execution.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the use of Tor or Tor-Browser to connect to onion routing networks-->
        <!--Date: 2022/02/20-->
        <!--Status: test-->
        <!--ID: 62f7c9bf-9135-49b2-8aeb-1e54a6ecc13c-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090.003</id>
        </mitre>
        <description>Tor Client/Browser Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+tor\.exe|\\+Tor\ Browser\\+Browser\\+firefox\.exe)$</field>
    </rule>
    <rule id="900692" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_certutil_download_direct_ip.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of certutil with certain flags that allow the utility to download files from direct IPs.-->
        <!--Date: 2023/02/15-->
        <!--Status: experimental-->
        <!--ID: 13e6fe51-d478-4c7e-b0f2-6da9b400a829-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Suspicious File Downloaded From Direct IP Via Certutil.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+certutil\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)CertUtil\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:urlcache\ |verifyctl\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)://1|://2|://3|://4|://5|://6|://7|://8|://9</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://7\-</field>
    </rule>
    <rule id="900693" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_shutdown_execution.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Use of the commandline to shutdown or reboot windows-->
        <!--Date: 2022/01/01-->
        <!--Status: test-->
        <!--ID: 34ebb878-1b15-4895-b352-ca2eeb99b274-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1529</id>
        </mitre>
        <description>Suspicious Execution of Shutdown</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+shutdown\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/r\ |/s\ )</field>
    </rule>
    <rule id="900694" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_csi_use_of_csharp_console.yml</info>
        <!--Sigma Rule Author: Michael R. (@nahamike01)-->
        <!--Description: Detects the execution of CSharp interactive console by PowerShell-->
        <!--Date: 2020/03/08-->
        <!--Status: test-->
        <!--ID: a9e416a8-e613-4f8b-88b8-a7d1d1af2f61-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1127</id>
        </mitre>
        <description>Suspicious Use of CSharp Interactive Console</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+csi\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe|\\+powershell_ise\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)csi\.exe</field>
    </rule>
    <rule id="900695" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remote_access_tools_gotoopener.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/02/13-->
        <!--Status: test-->
        <!--ID: b6d98a4f-cef0-4abf-bbf6-24132854a83d-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Remote Access Tool - GoToAssist Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)GoTo\ Opener</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)GoTo\ Opener</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)LogMeIn,\ Inc\.</field>
    </rule>
    <rule id="900696" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_bginfo_uncommon_child_process.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Beyu Denis, oscd.community-->
        <!--Description: Detects uncommon child processes of "BgInfo.exe" which could be a sign of potential abuse of the binary to proxy execution via external VBScript-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: aaf46cdc-934e-4284-b329-34aa701e3771-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Uncommon Child Process Of BgInfo.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+bginfo\.exe|\\+bginfo64\.exe)$</field>
    </rule>
    <rule id="900697" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wuauclt_dll_loading.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research), Florian Roth (Nextron Systems), Sreeman, FPT.EagleEye Team-->
        <!--Description: Detects the use of the Windows Update Client binary (wuauclt.exe) for proxy execution.-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: af77cf95-c469-471c-b6a0-946c685c4798-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.execution</id>
        </mitre>
        <description>Proxy Execution Via Wuauclt.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wuauclt\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)wuauclt\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)UpdateDeploymentProvider</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)RunHandlerComServer</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ /UpdateDeploymentProvider\ UpdateDeploymentProvider\.dll\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ wuaueng\.dll\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+Windows\\+UUS\\+Packages\\+Preview\\+amd64\\+updatedeploy\.dll\ /ClassId</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+Windows\\+UUS\\+amd64\\+UpdateDeploy\.dll\ /ClassId</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+Windows\\+WinSxS\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\\+UpdateDeploy\.dll\ /ClassId\ )</field>
    </rule>
    <rule id="900698" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_data_exfiltration_via_cli.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of various CLI utilities exfiltrating data via web requests-->
        <!--Date: 2022/08/02-->
        <!--Status: experimental-->
        <!--ID: 7d1aaf3d-4304-425c-b7c3-162055e0b3ab-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Potential Data Exfiltration Activity Via CommandLine Tools</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe|\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:Invoke\-WebRequest|iwr\ |wget\ |curl\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-ur</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-me</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-b</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ POST\ )</field>
    </rule>
    <rule id="900699" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_data_exfiltration_via_cli.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of various CLI utilities exfiltrating data via web requests-->
        <!--Date: 2022/08/02-->
        <!--Status: experimental-->
        <!--ID: 7d1aaf3d-4304-425c-b7c3-162055e0b3ab-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Potential Data Exfiltration Activity Via CommandLine Tools</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+curl\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-ur</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-d\ |\ \-\-data\ )</field>
    </rule>
    <rule id="900700" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_data_exfiltration_via_cli.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of various CLI utilities exfiltrating data via web requests-->
        <!--Date: 2022/08/02-->
        <!--Status: experimental-->
        <!--ID: 7d1aaf3d-4304-425c-b7c3-162055e0b3ab-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Potential Data Exfiltration Activity Via CommandLine Tools</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wget\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-post\-data|\-\-post\-file</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Get\-Content|GetBytes|hostname|ifconfig|ipconfig|net\ view|netstat|nltest|qprocess|sc\ query|systeminfo|tasklist|ToBase64String|whoami</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:type\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ &gt;\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ C:\\+</field>
    </rule>
    <rule id="900701" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_java_sysaidserver_susp_child_process.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious child processes of SysAidServer (as seen in MERCURY threat actor intrusions)-->
        <!--Date: 2022/08/26-->
        <!--Status: test-->
        <!--ID: 60bfeac3-0d35-4302-8efb-1dd16f715bc6-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1210</id>
        </mitre>
        <description>Suspicious SysAidServer Child</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+java\.exe|\\+javaw\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)SysAidServer</field>
    </rule>
    <rule id="900702" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_vmnat.yml</info>
        <!--Sigma Rule Author: elhoim-->
        <!--Description: Detects renamed vmnat.exe or portable version that can be used for DLL side-loading-->
        <!--Date: 2022/09/09-->
        <!--Status: test-->
        <!--ID: 7b4f794b-590a-4ad4-ba18-7964a2832205-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>Renamed Vmnat.exe Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)vmnat\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:vmnat\.exe)$</field>
    </rule>
    <rule id="900703" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_assoc_tamper_exe_file_association.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when a program changes the default file association of any extension to an executable.
When a file is opened, the default program used to open the file (also called the file association or handler) is checked. File association selections are stored in the Windows Registry and can be edited by users, administrators, or programs that have Registry access or by administrators using the built-in assoc utility. Applications can modify the file association for a given file extension to call an arbitrary program when a file with the given extension is opened.
-->
        <!--Date: 2022/06/28-->
        <!--Status: experimental-->
        <!--ID: ae6f14e6-14de-45b0-9f44-c0986f50dc89-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.001</id>
        </mitre>
        <description>Change Default File Association To Executable Via Assoc</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Cmd\.Exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:assoc\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)exefile</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.exe=exefile</field>
    </rule>
    <rule id="900704" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_3proxy_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of 3proxy, a tiny free proxy server-->
        <!--Date: 2022/09/13-->
        <!--Status: experimental-->
        <!--ID: f38a82d2-fba3-4781-b549-525efbec8506-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1572</id>
        </mitre>
        <description>PUA - 3Proxy Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+3proxy\.exe)$</field>
    </rule>
    <rule id="900705" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_3proxy_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of 3proxy, a tiny free proxy server-->
        <!--Date: 2022/09/13-->
        <!--Status: experimental-->
        <!--ID: f38a82d2-fba3-4781-b549-525efbec8506-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1572</id>
        </mitre>
        <description>PUA - 3Proxy Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)3proxy\ \-\ tiny\ proxy\ server</field>
    </rule>
    <rule id="900706" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_3proxy_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of 3proxy, a tiny free proxy server-->
        <!--Date: 2022/09/13-->
        <!--Status: experimental-->
        <!--ID: f38a82d2-fba3-4781-b549-525efbec8506-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1572</id>
        </mitre>
        <description>PUA - 3Proxy Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe\ \-i127\.0\.0\.1\ \-p</field>
    </rule>
    <rule id="900707" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_class_exec_xwizard.yml</info>
        <!--Sigma Rule Author: Ensar &#350;amil, @sblmsrsn, @oscd_initiative-->
        <!--Description: Detects the execution of Xwizard tool with specific arguments which utilized to run custom class properties.-->
        <!--Date: 2020/10/07-->
        <!--Status: test-->
        <!--ID: 53d4bb30-3f36-4e8a-b078-69d36c4a79ff-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Custom Class Execution via Xwizard</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+xwizard\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\{[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}\}</field>
    </rule>
    <rule id="900708" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmi_backdoor_exchange_transport_agent.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a WMI backdoor in Exchange Transport Agents via WMI event filters-->
        <!--Date: 2019/10/11-->
        <!--Status: test-->
        <!--ID: 797011dc-44f4-4e6f-9f10-a8ceefbe566b-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.003</id>
        </mitre>
        <description>WMI Backdoor Exchange Transport Agent</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+EdgeTransport\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+conhost\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Microsoft\\+Exchange\ Server\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Bin\\+OleConverter\.exe)$</field>
    </rule>
    <rule id="900709" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_shell_spawn_susp_program.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Tim Shelton-->
        <!--Description: Detects suspicious child processes of a Windows shell and scripting processes such as wscript, rundll32, powershell, mshta...etc.-->
        <!--Date: 2018/04/06-->
        <!--Status: test-->
        <!--ID: 3a6586ad-127a-4d3b-a677-1e6eacdf8fde-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.001</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Windows Shell/Scripting Processes Spawning Suspicious Programs</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+mshta\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+rundll32\.exe|\\+cscript\.exe|\\+wscript\.exe|\\+wmiprvse\.exe|\\+regsvr32\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+schtasks\.exe|\\+nslookup\.exe|\\+certutil\.exe|\\+bitsadmin\.exe|\\+mshta\.exe)$</field>
        <field name="win.eventdata.currentDirectory" negate="yes" type="pcre2">(?i)\\+ccmcache\\+</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\\+Program\ Files\\+Amazon\\+WorkSpacesConfig\\+Scripts\\+setup\-scheduledtask\.ps1</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\\+Program\ Files\\+Amazon\\+WorkSpacesConfig\\+Scripts\\+set\-selfhealing\.ps1</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\\+Program\ Files\\+Amazon\\+WorkSpacesConfig\\+Scripts\\+check\-workspacehealth\.ps1</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\\+nessus_</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+nessus_</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+mshta\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+mshta\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)C:\\+MEM_Configmgr_</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\\+splash\.hta</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\{1E460BD7\-F1C3\-4B2E\-88BF\-4E770A288AF5\}</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+MEM_Configmgr_</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+SMSSETUP\\+BIN\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+autorun\.hta</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\{1E460BD7\-F1C3\-4B2E\-88BF\-4E770A288AF5\}</field>
    </rule>
    <rule id="900710" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_encode.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Commandline to launch powershell with a base64 payload-->
        <!--Date: 2022/01/02-->
        <!--Status: test-->
        <!--ID: fb843269-508c-4b76-8b8d-88679db22ce7-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious Execution of Powershell with Base64</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-e\ |\ \-en\ |\ \-enc\ |\ \-enco|\ \-ec\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ \-Encoding\ )</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Packages\\+Plugins\\+Microsoft\.GuestConfiguration\.ConfigurationforWindows\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+gc_worker\.exe</field>
    </rule>
    <rule id="900711" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_kd_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of the Windows Kernel Debugger "kd.exe".-->
        <!--Date: 2023/05/15-->
        <!--Status: experimental-->
        <!--ID: 27ee9438-90dc-4bef-904b-d3ef927f5e7e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Windows Kernel Debugger Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+kd\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)kd\.exe</field>
    </rule>
    <rule id="900712" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmiprvse_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Vadim Khrykov (ThreatIntel), Cyb3rEng, Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious and uncommon child processes of WmiPrvSE-->
        <!--Date: 2021/08/23-->
        <!--Status: test-->
        <!--ID: 8a582fe2-0882-4b89-a82a-da6b2dc32937-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1047</id>
            <id>attack.t1204.002</id>
            <id>attack.t1218.010</id>
        </mitre>
        <description>Suspicious WmiPrvSE Child Process</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+wbem\\+WmiPrvSE\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+certutil\.exe|\\+cscript\.exe|\\+mshta\.exe|\\+msiexec\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+verclsid\.exe|\\+wscript\.exe)$</field>
    </rule>
    <rule id="900713" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmiprvse_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Vadim Khrykov (ThreatIntel), Cyb3rEng, Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious and uncommon child processes of WmiPrvSE-->
        <!--Date: 2021/08/23-->
        <!--Status: test-->
        <!--ID: 8a582fe2-0882-4b89-a82a-da6b2dc32937-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1047</id>
            <id>attack.t1204.002</id>
            <id>attack.t1218.010</id>
        </mitre>
        <description>Suspicious WmiPrvSE Child Process</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+wbem\\+WmiPrvSE\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cscript|mshta|powershell|pwsh|regsvr32|rundll32|wscript</field>
    </rule>
    <rule id="900714" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmiprvse_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Vadim Khrykov (ThreatIntel), Cyb3rEng, Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious and uncommon child processes of WmiPrvSE-->
        <!--Date: 2021/08/23-->
        <!--Status: test-->
        <!--ID: 8a582fe2-0882-4b89-a82a-da6b2dc32937-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1047</id>
            <id>attack.t1204.002</id>
            <id>attack.t1218.010</id>
        </mitre>
        <description>Suspicious WmiPrvSE Child Process</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+wbem\\+WmiPrvSE\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WerFault\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WmiPrvSE\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msiexec\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:/i\ )</field>
    </rule>
    <rule id="900715" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_openconsole.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of OpenConsole binary as a LOLBIN to launch other binaries to bypass application Whitelisting-->
        <!--Date: 2022/06/16-->
        <!--Status: test-->
        <!--ID: 814c95cc-8192-4378-a70a-f1aafd877af1-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Use of OpenConsole</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)OpenConsole\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+OpenConsole\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+WindowsApps\\+Microsoft\.WindowsTerminal)</field>
    </rule>
    <rule id="900716" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_susp_atbroker.yml</info>
        <!--Sigma Rule Author: Mateusz Wydra, oscd.community-->
        <!--Description: Atbroker executing non-deafualt Assistive Technology applications-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: f24bcaea-0cd1-11eb-adc1-0242ac120002-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Suspicious Atbroker Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:AtBroker\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)start</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)animations</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)audiodescription</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)caretbrowsing</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)caretwidth</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)colorfiltering</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)cursorscheme</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)filterkeys</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)focusborderheight</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)focusborderwidth</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)highcontrast</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)keyboardcues</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)keyboardpref</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)magnifierpane</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)messageduration</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)minimumhitradius</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)mousekeys</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Narrator</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)osk</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)overlappedcontent</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)showsounds</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)soundsentry</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)stickykeys</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)togglekeys</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)windowarranging</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)windowtracking</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)windowtrackingtimeout</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)windowtrackingzorder</field>
    </rule>
    <rule id="900717" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_python_pty_spawn.yml</info>
        <!--Sigma Rule Author: Nextron Systems-->
        <!--Description: Detects python spawning a pretty tty-->
        <!--Date: 2022/06/03-->
        <!--Status: test-->
        <!--ID: 480e7e51-e797-47e3-8d72-ebfce65b6d8d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Python Spawning Pretty TTY on Windows</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:python\.exe|python3\.exe|python2\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)import\ pty</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.spawn\(</field>
    </rule>
    <rule id="900718" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_python_pty_spawn.yml</info>
        <!--Sigma Rule Author: Nextron Systems-->
        <!--Description: Detects python spawning a pretty tty-->
        <!--Date: 2022/06/03-->
        <!--Status: test-->
        <!--ID: 480e7e51-e797-47e3-8d72-ebfce65b6d8d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Python Spawning Pretty TTY on Windows</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:python\.exe|python3\.exe|python2\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)from\ pty\ import\ spawn</field>
    </rule>
    <rule id="900719" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_email_exfil.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems),  Azure-Sentinel (idea)-->
        <!--Description: Detects email exfiltration via powershell cmdlets-->
        <!--Date: 2022/09/09-->
        <!--Status: test-->
        <!--ID: 312d0384-401c-4b8b-abdf-685ffba9a332-->
        <mitre>
            <id>attack.exfiltration</id>
        </mitre>
        <description>Email Exifiltration Via Powershell</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Add\-PSSnapin</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Get\-Recipient</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-ExpandProperty</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)EmailAddresses</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SmtpAddress</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-hidetableheaders</field>
    </rule>
    <rule id="900720" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_net_default_accounts_manipulation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious manipulations of default accounts such as 'administrator' and 'guest'. For example 'enable' or 'disable' accounts or change the password...etc-->
        <!--Date: 2022/09/01-->
        <!--Status: experimental-->
        <!--ID: 5b768e71-86f2-4879-b448-81061cbae951-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1560.001</id>
        </mitre>
        <description>Suspicious Manipulation Of Default Accounts Via Net.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+net\.exe|\\+net1\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)net\.exe|net1\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ user\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ Järjestelmänvalvoja\ |\ Rendszergazda\ |\ Администратор\ |\ Administrateur\ |\ Administrador\ |\ Administratör\ |\ Administrator\ |\ guest\ |\ DefaultAccount\ |\ "Järjestelmänvalvoja"\ |\ "Rendszergazda"\ |\ "Администратор"\ |\ "Administrateur"\ |\ "Administrador"\ |\ "Administratör"\ |\ "Administrator"\ |\ "guest"\ |\ "DefaultAccount"\ |\ 'Järjestelmänvalvoja'\ |\ 'Rendszergazda'\ |\ 'Администратор'\ |\ 'Administrateur'\ |\ 'Administrador'\ |\ 'Administratör'\ |\ 'Administrator'\ |\ 'guest'\ |\ 'DefaultAccount'\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)guest</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/active\ no</field>
    </rule>
    <rule id="900721" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_proc_wrong_parent.yml</info>
        <!--Sigma Rule Author: vburov-->
        <!--Description: Detect suspicious parent processes of well-known Windows processes-->
        <!--Date: 2019/02/23-->
        <!--Status: test-->
        <!--ID: 96036718-71cc-4027-a538-d1587e0006a7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
            <id>attack.t1036.005</id>
        </mitre>
        <description>Windows Processes Suspicious Parent Directory</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+svchost\.exe|\\+taskhost\.exe|\\+lsm\.exe|\\+lsass\.exe|\\+services\.exe|\\+lsaiso\.exe|\\+csrss\.exe|\\+wininit\.exe|\\+winlogon\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+SavService\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+ngen\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+System32\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+SysWOW64\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+Windows\ Defender\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+Microsoft\ Security\ Client\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+MsMpEng\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)None</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\-</field>
    </rule>
    <rule id="900722" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sharp_ldap_monitor.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of the SharpLDAPmonitor. Which can monitor the creation, deletion and changes to LDAP objects.-->
        <!--Date: 2022/12/30-->
        <!--Status: experimental-->
        <!--ID: 9f8fc146-1d1a-4dbf-b8fd-dfae15e08541-->
        <mitre>
            <id>attack.discovery</id>
        </mitre>
        <description>HackTool - SharpLDAPmonitor Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+SharpLDAPmonitor\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)SharpLDAPmonitor\.exe</field>
    </rule>
    <rule id="900723" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sharp_ldap_monitor.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of the SharpLDAPmonitor. Which can monitor the creation, deletion and changes to LDAP objects.-->
        <!--Date: 2022/12/30-->
        <!--Status: experimental-->
        <!--ID: 9f8fc146-1d1a-4dbf-b8fd-dfae15e08541-->
        <mitre>
            <id>attack.discovery</id>
        </mitre>
        <description>HackTool - SharpLDAPmonitor Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/user:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/pass:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/dcip:</field>
    </rule>
    <rule id="900724" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_mailboxexport_share.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects usage of the powerShell New-MailboxExportRequest Cmdlet to exports a mailbox to a remote or local share, as used in ProxyShell exploitations-->
        <!--Date: 2021/08/07-->
        <!--Status: test-->
        <!--ID: 889719ef-dd62-43df-86c3-768fb08dc7c0-->
        <mitre>
            <id>attack.exfiltration</id>
        </mitre>
        <description>Suspicious PowerShell Mailbox Export to Share</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)New\-MailboxExportRequest</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-Mailbox\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-FilePath\ \\+</field>
    </rule>
    <rule id="900725" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_registry_enumeration_for_credentials_cli.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects processes that query known 3rd party registry keys that holds credentials via commandline-->
        <!--Date: 2022/06/20-->
        <!--Status: test-->
        <!--ID: 87a476dc-0079-4583-a985-dee7a20a03de-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.002</id>
        </mitre>
        <description>Enumeration for 3rd Party Creds From CLI</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Software\\+SimonTatham\\+PuTTY\\+Sessions|\\+Software\\+SimonTatham\\+PuTTY\\+SshHostKeys\\+|\\+Software\\+Mobatek\\+MobaXterm\\+|\\+Software\\+WOW6432Node\\+Radmin\\+v3\.0\\+Server\\+Parameters\\+Radmin|\\+Software\\+Aerofox\\+FoxmailPreview|\\+Software\\+Aerofox\\+Foxmail\\+V3\.1|\\+Software\\+IncrediMail\\+Identities|\\+Software\\+Qualcomm\\+Eudora\\+CommandLine|\\+Software\\+RimArts\\+B2\\+Settings|\\+Software\\+OpenVPN\-GUI\\+configs|\\+Software\\+Martin\ Prikryl\\+WinSCP\ 2\\+Sessions|\\+Software\\+FTPWare\\+COREFTP\\+Sites|\\+Software\\+DownloadManager\\+Passwords|\\+Software\\+OpenSSH\\+Agent\\+Keys|\\+Software\\+TightVNC\\+Server|\\+Software\\+ORL\\+WinVNC3\\+Password|\\+Software\\+RealVNC\\+WinVNC4</field>
    </rule>
    <rule id="900726" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_msdt.yml</info>
        <!--Sigma Rule Author: pH-T (Nextron Systems)-->
        <!--Description: Detects the execution of a renamed "Msdt.exe" binary-->
        <!--Date: 2022/06/03-->
        <!--Status: test-->
        <!--ID: bd1c6866-65fc-44b2-be51-5588fcff82b9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Renamed Msdt.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)msdt\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msdt\.exe)$</field>
    </rule>
    <rule id="900727" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dnscmd_install_new_server_level_plugin_dll.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the installation of a DNS plugin DLL via ServerLevelPluginDll parameter in registry, which can be used to execute code in context of the DNS server (restart required)-->
        <!--Date: 2017/05/08-->
        <!--Status: test-->
        <!--ID: f63b56ee-3f79-4b8a-97fb-5c48007e8573-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
            <id>attack.t1112</id>
        </mitre>
        <description>New DNS ServerLevelPluginDll Installed Via Dnscmd.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+dnscmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/config</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/serverlevelplugindll</field>
    </rule>
    <rule id="900728" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_cl_invocation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), oscd.community, Natalia Shornikova-->
        <!--Description: Detects calls to "SyncInvoke" that is part of the "CL_Invocation.ps1" script to proxy execution using "System.Diagnostics.Process"-->
        <!--Date: 2020/10/14-->
        <!--Status: test-->
        <!--ID: a0459f02-ac51-4c09-b511-b8c9203fc429-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>Potential Process Execution Proxy Via CL_Invocation.ps1</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:SyncInvoke\ )</field>
    </rule>
    <rule id="900729" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_cleanwipe.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of CleanWipe a tool usually used to delete Symantec antivirus.-->
        <!--Date: 2021/12/18-->
        <!--Status: experimental-->
        <!--ID: f44800ac-38ec-471f-936e-3fa7d9c53100-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>PUA - CleanWipe Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+SepRemovalToolNative_x64\.exe)$</field>
    </rule>
    <rule id="900730" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_cleanwipe.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of CleanWipe a tool usually used to delete Symantec antivirus.-->
        <!--Date: 2021/12/18-->
        <!--Status: experimental-->
        <!--ID: f44800ac-38ec-471f-936e-3fa7d9c53100-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>PUA - CleanWipe Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+CATClean\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-uninstall</field>
    </rule>
    <rule id="900731" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_cleanwipe.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of CleanWipe a tool usually used to delete Symantec antivirus.-->
        <!--Date: 2021/12/18-->
        <!--Status: experimental-->
        <!--ID: f44800ac-38ec-471f-936e-3fa7d9c53100-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>PUA - CleanWipe Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+NetInstaller\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-r</field>
    </rule>
    <rule id="900732" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_cleanwipe.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of CleanWipe a tool usually used to delete Symantec antivirus.-->
        <!--Date: 2021/12/18-->
        <!--Status: experimental-->
        <!--ID: f44800ac-38ec-471f-936e-3fa7d9c53100-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>PUA - CleanWipe Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+WFPUnins\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/uninstall</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/enterprise</field>
    </rule>
    <rule id="900733" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_ieinstal.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using IEInstal.exe (UACMe 64)-->
        <!--Date: 2021/08/30-->
        <!--Status: test-->
        <!--ID: 80fc36aa-945e-4181-89f2-2f907ab6775d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using IEInstal - Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+ieinstal\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:consent\.exe)$</field>
    </rule>
    <rule id="900734" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_ssm_agent_abuse.yml</info>
        <!--Sigma Rule Author: Muhammad Faisal-->
        <!--Description: Detects potential Amazon SSM agent hijack attempts as outlined in the Mitiga research report.-->
        <!--Date: 2023/08/02-->
        <!--Status: experimental-->
        <!--ID: d20ee2f4-822c-4827-9e15-41500b1fff10-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.persistence</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Potential Amazon SSM Agent Hijacking</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+amazon\-ssm\-agent\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-register\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-code\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-id\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-region\ )</field>
    </rule>
    <rule id="900735" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_msdt_answer_file.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of "msdt.exe" using an answer file which is simulating the legitimate way of calling msdt via "pcwrun.exe" (For example from the compatibility tab)-->
        <!--Date: 2022/06/13-->
        <!--Status: test-->
        <!--ID: 9c8c7000-3065-44a8-a555-79bcba5d9955-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.execution</id>
        </mitre>
        <description>Execute MSDT Via Answer File</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+msdt\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+WINDOWS\\+diagnostics\\+index\\+PCWDiagnostic\.xml</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-af\ |\ /af\ )</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+pcwrun\.exe)$</field>
    </rule>
    <rule id="900736" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hwp_exploits.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious Hangul Word Processor (Hanword) sub processes that could indicate an exploitation-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 023394c4-29d5-46ab-92b8-6a534c6f447b-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1566.001</id>
            <id>attack.execution</id>
            <id>attack.t1203</id>
            <id>attack.t1059.003</id>
            <id>attack.g0032</id>
        </mitre>
        <description>Suspicious HWP Sub Processes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+Hwp\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+gbb\.exe)$</field>
    </rule>
    <rule id="900737" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_odbcconf_register_dll_regsvr_susp.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of "odbcconf" with the "REGSVR" action where the DLL in question doesn't contain a ".dll" extension. Which is often used as a method to evade defenses.-->
        <!--Date: 2023/05/22-->
        <!--Status: experimental-->
        <!--ID: ba4cfc11-d0fa-4d94-bf20-7c332c412e76-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.008</id>
        </mitre>
        <description>Potentially Suspicious DLL Registered Via Odbcconf.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+odbcconf\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)odbcconf\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:REGSVR\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.dll</field>
    </rule>
    <rule id="900738" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_electron_app_children.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious child processes of electron apps (teams, discord, slack, etc.). This could be a potential sign of ".asar" file tampering (See reference section for more information) or binary execution proxy through specific CLI arguments (see related rule)
-->
        <!--Date: 2022/10/21-->
        <!--Status: experimental-->
        <!--ID: f26eb764-fd89-464b-85e2-dc4a8e6e77b8-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Suspicious Electron Application Child Processes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+chrome\.exe|\\+discord\.exe|\\+GitHubDesktop\.exe|\\+keybase\.exe|\\+msedge\.exe|\\+msedgewebview2\.exe|\\+msteams\.exe|\\+slack\.exe|\\+Teams\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+cscript\.exe|\\+mshta\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+regsvr32\.exe|\\+wscript\.exe)$</field>
    </rule>
    <rule id="900739" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_electron_app_children.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious child processes of electron apps (teams, discord, slack, etc.). This could be a potential sign of ".asar" file tampering (See reference section for more information) or binary execution proxy through specific CLI arguments (see related rule)
-->
        <!--Date: 2022/10/21-->
        <!--Status: experimental-->
        <!--ID: f26eb764-fd89-464b-85e2-dc4a8e6e77b8-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Suspicious Electron Application Child Processes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+chrome\.exe|\\+discord\.exe|\\+GitHubDesktop\.exe|\\+keybase\.exe|\\+msedge\.exe|\\+msedgewebview2\.exe|\\+msteams\.exe|\\+slack\.exe|\\+Teams\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+|\\+Users\\+Public\\+|\\+Windows\\+Temp\\+|:\\+Temp\\+</field>
    </rule>
    <rule id="900740" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_electron_app_children.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious child processes of electron apps (teams, discord, slack, etc.). This could be a potential sign of ".asar" file tampering (See reference section for more information) or binary execution proxy through specific CLI arguments (see related rule)
-->
        <!--Date: 2022/10/21-->
        <!--Status: experimental-->
        <!--ID: f26eb764-fd89-464b-85e2-dc4a8e6e77b8-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Suspicious Electron Application Child Processes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+chrome\.exe|\\+discord\.exe|\\+GitHubDesktop\.exe|\\+keybase\.exe|\\+msedge\.exe|\\+msedgewebview2\.exe|\\+msteams\.exe|\\+slack\.exe|\\+Teams\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+chrome\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+chrome\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+discord\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+discord\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+GitHubDesktop\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+GitHubDesktop\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+keybase\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+keybase\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+msedge\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedge\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+msedgewebview2\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msedgewebview2\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+msteams\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msteams\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+slack\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+slack\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+teams\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+teams\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+SysWOW64\\+WerFault\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+WerFault\.exe</field>
    </rule>
    <rule id="900741" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_electron_app_children.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious child processes of electron apps (teams, discord, slack, etc.). This could be a potential sign of ".asar" file tampering (See reference section for more information) or binary execution proxy through specific CLI arguments (see related rule)
-->
        <!--Date: 2022/10/21-->
        <!--Status: experimental-->
        <!--ID: f26eb764-fd89-464b-85e2-dc4a8e6e77b8-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Suspicious Electron Application Child Processes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+chrome\.exe|\\+discord\.exe|\\+GitHubDesktop\.exe|\\+keybase\.exe|\\+msedge\.exe|\\+msedgewebview2\.exe|\\+msteams\.exe|\\+slack\.exe|\\+Teams\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+Discord\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+NVSMI\\+nvidia\-smi\.exe</field>
    </rule>
    <rule id="900742" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_diantz_ads.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Compress target file into a cab file stored in the Alternate Data Stream (ADS) of the target file.-->
        <!--Date: 2021/11/26-->
        <!--Status: test-->
        <!--ID: 6b369ced-4b1d-48f1-b427-fdc0de0790bd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Suspicious Diantz Alternate Data Stream Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)diantz\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.cab</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):[^\\+]</field>
    </rule>
    <rule id="900743" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remote_access_tools_screenconnect_access.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects ScreenConnect program starts that establish a remote access to that system (not meeting, not remote support)-->
        <!--Date: 2021/02/11-->
        <!--Status: test-->
        <!--ID: 75bfe6e6-cd8e-429e-91d3-03921e1d7962-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1133</id>
        </mitre>
        <description>Remote Access Tool - ScreenConnect Suspicious Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)e=Access\&amp;</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)y=Guest\&amp;</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\&amp;p=</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\&amp;c=</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\&amp;k=</field>
    </rule>
    <rule id="900744" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_msdt_arbitrary_command_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects processes leveraging the "ms-msdt" handler or the "msdt.exe" binary to execute arbitrary commands as seen in the follina (CVE-2022-30190) vulnerability-->
        <!--Date: 2022/05/29-->
        <!--Status: experimental-->
        <!--ID: 258fc8ce-8352-443a-9120-8a11e4857fa5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Potential Arbitrary Command Execution Using Msdt.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+msdt\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)msdt\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)IT_BrowseForFile=</field>
    </rule>
    <rule id="900745" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_audio_capture.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects audio capture via PowerShell Cmdlet.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 932fb0d8-692b-4b0f-a26e-5643a50fe7d6-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1123</id>
        </mitre>
        <description>Audio Capture via PowerShell</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:WindowsAudioDevice\-Powershell\-Cmdlet|Toggle\-AudioDevice|Get\-AudioDevice\ |Set\-AudioDevice\ |Write\-AudioDevice\ )</field>
    </rule>
    <rule id="900746" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_schtasks_reg_loader.yml</info>
        <!--Sigma Rule Author: X__Junior (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of a schtasks that potentially executes a payload stored in the Windows Registry using PowerShell.-->
        <!--Date: 2023/07/18-->
        <!--Status: experimental-->
        <!--ID: 86588b36-c6d3-465f-9cee-8f9093e07798-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.t1053.005</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Scheduled Task Executing Payload from Registry</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+schtasks\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)schtasks\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/Create</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:Get\-ItemProperty|\ gp\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKCU:|HKLM:|registry::|HKEY_</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)FromBase64String</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)encodedcommand</field>
    </rule>
    <rule id="900747" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_conhost_susp_child_process.yml</info>
        <!--Sigma Rule Author: omkar72-->
        <!--Description: Detects uncommon "conhost" child processes. This could be a sign of "conhost" usage as a LOLBIN or potential process injection activity.-->
        <!--Date: 2020/10/25-->
        <!--Status: experimental-->
        <!--ID: 7dc2dedd-7603-461a-bc13-15803d132355-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Uncommon Child Process Of Conhost.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+conhost\.exe)$</field>
        <field name="win.eventdata.providerName" negate="yes" type="pcre2">(?i)SystemTraceProvider\-Process</field>
        <field name="win.eventdata.providerName" negate="yes" type="pcre2">(?i)Microsoft\-Windows\-Kernel\-Process</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+git\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)(?:\ show\ \-\-textconv\ )</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)(?:\ cat\-file\ \-s\ )</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)C:\\+WINDOWS\\+system32\\+conhost\.exe\ 0x4</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ show\ \-\-textconv\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ cat\-file\ \-s\ )</field>
        <field name="win.eventdata.providerName" negate="yes" type="pcre2">(?i)Microsoft\-Windows\-Kernel\-Process</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)(?:\ cat\-file\ \-s\ )</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)show\ \-\-textconv</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+conhost\.exe</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\\+.\\+.\\+C:\\+WINDOWS\\+system32\\+conhost\.exe\ 0x4</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\\+.\\+.\\+C:\\+WINDOWS\\+system32\\+conhost\.exe\ 0xffffffff\ \-ForceV1</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+conhost\.exe</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\\+.\\+.\\+C:\\+WINDOWS\\+system32\\+conhost\.exe\ 0xffffffff\ \-ForceV1'</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\\+.\\+.\\+C:\\+WINDOWS\\+system32\\+conhost\.exe\ 0x4'</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Git\\+mingw64\\+bin\\+git\.exe</field>
    </rule>
    <rule id="900748" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_download_dll.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Hieu Tran-->
        <!--Description: Detects potential DLL files being downloaded using the PowerShell Invoke-WebRequest cmdlet-->
        <!--Date: 2023/03/13-->
        <!--Status: experimental-->
        <!--ID: 0f0450f3-8b47-441e-a31b-15a91dc243e2-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Potential DLL File Download Via PowerShell Invoke-WebRequest</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:Invoke\-WebRequest\ |IWR\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)OutFile</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dll</field>
    </rule>
    <rule id="900749" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_finger_usage.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), omkar72, oscd.community-->
        <!--Description: Detects suspicious aged finger.exe tool execution often used in malware attacks nowadays-->
        <!--Date: 2021/02/24-->
        <!--Status: test-->
        <!--ID: af491bca-e752-4b44-9c86-df5680533dbc-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Finger.exe Suspicious Invocation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)finger\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+finger\.exe)$</field>
    </rule>
    <rule id="900750" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_run_script_from_input_stream.yml</info>
        <!--Sigma Rule Author: Moriarty Meng (idea), Anton Kutepov (rule), oscd.community-->
        <!--Description: Detects PowerShell script execution via input stream redirect-->
        <!--Date: 2020/10/17-->
        <!--Status: test-->
        <!--ID: c83bf4b5-cdf0-437c-90fa-43d734f7c476-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Run PowerShell Script from Redirected Input Stream</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\s-\s*&lt;</field>
    </rule>
    <rule id="900751" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_node_adobe_creative_cloud_abuse.yml</info>
        <!--Sigma Rule Author: Max Altgelt (Nextron Systems)-->
        <!--Description: Detects the execution of other scripts using the Node executable packaged with Adobe Creative Cloud-->
        <!--Date: 2022/04/06-->
        <!--Status: test-->
        <!--ID: df1f26d3-bea7-4700-9ea2-ad3e990cf90e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1127</id>
            <id>attack.t1059.007</id>
        </mitre>
        <description>Node Process Executions</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Adobe\ Creative\ Cloud\ Experience\\+libs\\+node\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Adobe\ Creative\ Cloud\ Experience\\+js</field>
    </rule>
    <rule id="900752" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_alternate_data_streams.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection-->
        <!--Date: 2021/09/01-->
        <!--Status: test-->
        <!--ID: 7f43c430-5001-4f8b-aaa9-c3b88f18fa5c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Execute From Alternate Data Streams</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)txt:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:type\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ &gt;\ )</field>
    </rule>
    <rule id="900753" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_alternate_data_streams.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection-->
        <!--Date: 2021/09/01-->
        <!--Status: test-->
        <!--ID: 7f43c430-5001-4f8b-aaa9-c3b88f18fa5c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Execute From Alternate Data Streams</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)txt:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:makecab\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.cab</field>
    </rule>
    <rule id="900754" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_alternate_data_streams.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection-->
        <!--Date: 2021/09/01-->
        <!--Status: test-->
        <!--ID: 7f43c430-5001-4f8b-aaa9-c3b88f18fa5c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Execute From Alternate Data Streams</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)txt:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:reg\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ export\ )</field>
    </rule>
    <rule id="900755" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_alternate_data_streams.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection-->
        <!--Date: 2021/09/01-->
        <!--Status: test-->
        <!--ID: 7f43c430-5001-4f8b-aaa9-c3b88f18fa5c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Execute From Alternate Data Streams</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)txt:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:regedit\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /E\ )</field>
    </rule>
    <rule id="900756" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_alternate_data_streams.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects execution from an Alternate Data Stream (ADS). Adversaries may use NTFS file attributes to hide their malicious data in order to evade detection-->
        <!--Date: 2021/09/01-->
        <!--Status: test-->
        <!--ID: 7f43c430-5001-4f8b-aaa9-c3b88f18fa5c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Execute From Alternate Data Streams</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)txt:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:esentutl\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /y\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /d\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /o\ )</field>
    </rule>
    <rule id="900757" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_browsers_chromium_headless_file_download.yml</info>
        <!--Sigma Rule Author: Sreeman, Florian Roth (Nextron Systems)-->
        <!--Description: Detects execution of chromium based browser in headless mode using the "dump-dom" command line to download files-->
        <!--Date: 2022/01/04-->
        <!--Status: test-->
        <!--ID: 0e8cfe08-02c9-4815-a2f8-0d157b7ed33e-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>File Download with Headless Browser</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+brave\.exe|\\+chrome\.exe|\\+msedge\.exe|\\+opera\.exe|\\+vivaldi\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-headless</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)dump\-dom</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http</field>
    </rule>
    <rule id="900758" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_addinutil_uncommon_dir_exec.yml</info>
        <!--Sigma Rule Author: Michael McKinley (@McKinleyMike), Tony Latteri (@TheLatteri)-->
        <!--Description: Detects execution of the Add-In deployment cache updating utility (AddInutil.exe) from a non-standard directory.-->
        <!--Date: 2023/09/18-->
        <!--Status: experimental-->
        <!--ID: 6120ac2a-a34b-42c0-a9bd-1fb9f459f348-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>AddinUtil.EXE Execution From Uncommon Directory</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+addinutil\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)AddInUtil\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+Microsoft\.NET\\+Framework\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+Microsoft\.NET\\+Framework64\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+WinSxS\\+</field>
    </rule>
    <rule id="900759" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_system_exe_anomaly.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Patrick Bareiss, Anton Kutepov, oscd.community, Nasreddine Bencherchali-->
        <!--Description: Detects a Windows program executable started from a suspicious folder-->
        <!--Date: 2017/11/27-->
        <!--Status: experimental-->
        <!--ID: e4a6b256-3e47-40fc-89d2-7a477edd6915-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>System File Execution Location Anomaly</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+svchost\.exe|\\+rundll32\.exe|\\+services\.exe|\\+powershell\.exe|\\+powershell_ise\.exe|\\+pwsh\.exe|\\+regsvr32\.exe|\\+spoolsv\.exe|\\+lsass\.exe|\\+smss\.exe|\\+csrss\.exe|\\+conhost\.exe|\\+wininit\.exe|\\+lsm\.exe|\\+winlogon\.exe|\\+explorer\.exe|\\+taskhost\.exe|\\+Taskmgr\.exe|\\+sihost\.exe|\\+RuntimeBroker\.exe|\\+smartscreen\.exe|\\+dllhost\.exe|\\+audiodg\.exe|\\+wlanext\.exe|\\+dashost\.exe|\\+schtasks\.exe|\\+cscript\.exe|\\+wscript\.exe|\\+wsl\.exe|\\+bitsadmin\.exe|\\+atbroker\.exe|\\+bcdedit\.exe|\\+certutil\.exe|\\+certreq\.exe|\\+cmstp\.exe|\\+consent\.exe|\\+defrag\.exe|\\+dism\.exe|\\+dllhst3g\.exe|\\+eventvwr\.exe|\\+msiexec\.exe|\\+runonce\.exe|\\+winver\.exe|\\+logonui\.exe|\\+userinit\.exe|\\+dwm\.exe|\\+LsaIso\.exe|\\+ntoskrnl\.exe|\\+wsmprovhost\.exe|\\+dfrgui\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+SysWOW64\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+WinSxS\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+SystemRoot\\+System32\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+explorer\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+PowerShell\\+7\\+pwsh\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+PowerShell\\+7\-preview\\+pwsh\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+WindowsApps\\+MicrosoftCorporationII\.WindowsSubsystemForLinux)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+wsl\.exe)$</field>
    </rule>
    <rule id="900760" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sliver_c2_execution_pattern.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Florian Roth (Nextron Systems)-->
        <!--Description: Detects process activity patterns as seen being used by Sliver C2 framework implants-->
        <!--Date: 2022/08/25-->
        <!--Status: experimental-->
        <!--ID: 42333b2c-b425-441c-b70e-99404a17170f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>HackTool - Sliver C2 Implant Activity Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-NoExit\ \-Command\ \[Console\]::OutputEncoding=\[Text\.UTF8Encoding\]::UTF8</field>
    </rule>
    <rule id="900761" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_token_obfuscation.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects TOKEN OBFUSCATION technique from Invoke-Obfuscation-->
        <!--Date: 2022/12/27-->
        <!--Status: test-->
        <!--ID: deb9b646-a508-44ee-b7c9-d8965921c6b6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027.009</id>
        </mitre>
        <description>Powershell Token Obfuscation - Process Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\w+`(\w+|-|.)`[\w+|\s]</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)"(\{\d\})+"\s*-f</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\$\{((e|n|v)*`(e|n|v)*)+:path\}|\$\{((e|n|v)*`(e|n|v)*)+:((p|a|t|h)*`(p|a|t|h)*)+\}|\$\{env:((p|a|t|h)*`(p|a|t|h)*)+\}</field>
    </rule>
    <rule id="900762" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_download_cradles.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious ways to download files or content using PowerShell-->
        <!--Date: 2022/03/24-->
        <!--Status: test-->
        <!--ID: 6e897651-f157-4d8f-aaeb-df8151488385-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.t1105</id>
        </mitre>
        <description>PowerShell Web Download</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.DownloadString\(|\.DownloadFile\(|Invoke\-WebRequest\ |iwr\ )</field>
    </rule>
    <rule id="900763" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_infdefaultinstall_execute_sct_scripts.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Executes SCT script using scrobj.dll from a command in entered into a specially prepared INF file.-->
        <!--Date: 2021/07/13-->
        <!--Status: test-->
        <!--ID: ce7cf472-6fcc-490a-9481-3786840b5d9b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>InfDefaultInstall.exe .inf Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:InfDefaultInstall\.exe\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.inf</field>
    </rule>
    <rule id="900764" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_systeminfo_execution.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects usage of the "systeminfo" command to retrieve information-->
        <!--Date: 2022/01/01-->
        <!--Status: test-->
        <!--ID: 0ef56343-059e-4cb6-adc1-4c3c967c5e46-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1082</id>
        </mitre>
        <description>Suspicious Execution of Systeminfo</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+systeminfo\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)sysinfo\.exe</field>
    </rule>
    <rule id="900765" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pktmon_execution.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects execution of PktMon, a tool that captures network packets.-->
        <!--Date: 2022/03/17-->
        <!--Status: test-->
        <!--ID: f956c7c1-0f60-4bc5-b7d7-b39ab3c08908-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1040</id>
        </mitre>
        <description>PktMon.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+pktmon\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PktMon\.exe</field>
    </rule>
    <rule id="900766" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_taskkill_sep.yml</info>
        <!--Sigma Rule Author: Ilya Krestinichev, Florian Roth (Nextron Systems)-->
        <!--Description: Detects one of the possible scenarios for disabling Symantec Endpoint Protection.
Symantec Endpoint Protection antivirus software services incorrectly implement the protected service mechanism.
As a result, the NT AUTHORITY/SYSTEM user can execute the taskkill /im command several times ccSvcHst.exe /f, thereby killing the process belonging to the service, and thus shutting down the service.
-->
        <!--Date: 2022/09/13-->
        <!--Status: test-->
        <!--ID: 4a6713f6-3331-11ed-a261-0242ac120002-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Taskkill Symantec Endpoint Protection</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)taskkill</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /F\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /IM\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ccSvcHst\.exe</field>
    </rule>
    <rule id="900767" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_execution_from_public_folder_as_parent.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This rule detects suspicious processes with parent images located in the C:\Users\Public folder-->
        <!--Date: 2022/02/25-->
        <!--Status: test-->
        <!--ID: 69bd9b97-2be2-41b6-9816-fb08757a4d1a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1564</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Parent in Public Folder Suspicious Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)^(?:C:\\+Users\\+Public\\+)</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell|cmd\.exe\ /c\ |cmd\.exe\ /r\ |cmd\.exe\ /k\ |cmd\ /c\ |cmd\ /r\ |cmd\ /k\ |wscript\.exe|cscript\.exe|bitsadmin|certutil|mshta\.exe</field>
    </rule>
    <rule id="900768" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_plink.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of a renamed version of the Plink binary-->
        <!--Date: 2022/06/06-->
        <!--Status: test-->
        <!--ID: 1c12727d-02bf-45ff-a9f3-d49806a3cf43-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Renamed Plink Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Plink</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-l\ forward</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-P\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-R\ )</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+plink\.exe)$</field>
    </rule>
    <rule id="900769" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cloudflared_tunnel_cleanup.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of the "cloudflared" tool with the tunnel "cleanup" flag in order to cleanup tunnel connections.-->
        <!--Date: 2023/05/17-->
        <!--Status: experimental-->
        <!--ID: 7050bba1-1aed-454e-8f73-3f46f09ce56a-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1102</id>
            <id>attack.t1090</id>
            <id>attack.t1572</id>
        </mitre>
        <description>Cloudflared Tunnel Connections Cleanup</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ tunnel\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:cleanup\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-config\ |\-connector\-id\ )</field>
    </rule>
    <rule id="900770" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_at_interactive_execution.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community-->
        <!--Description: Detects an interactive AT job, which may be used as a form of privilege escalation.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 60fc936d-2eb0-4543-8a13-911c750a1dfc-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1053.002</id>
        </mitre>
        <description>Interactive AT Job</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+at\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)interactive</field>
    </rule>
    <rule id="900771" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_provlaunch_potential_abuse.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Swachchhanda Shrawan Poudel-->
        <!--Description: Detects child processes of "provlaunch.exe" which might indicate potential abuse to proxy execution.-->
        <!--Date: 2023/08/08-->
        <!--Status: experimental-->
        <!--ID: 7f5d1c9a-3e83-48df-95a7-2b98aae6c13c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Potential Provlaunch.EXE Binary Proxy Execution Abuse</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+provlaunch\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+calc\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cscript\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+mshta\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+notepad\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+powershell\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+pwsh\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+regsvr32\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+wscript\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+PerfLogs\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Temp\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Users\\+Public\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Temp\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Windows\\+System32\\+Tasks\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Windows\\+Tasks\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Windows\\+Temp\\+</field>
    </rule>
    <rule id="900772" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_http_appdata.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects a suspicious command line execution that includes an URL and AppData string in the command line parameters as used by several droppers (js/vbs > powershell)-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 1ac8666b-046f-4201-8aba-1951aaec03a3-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.command_and_control</id>
            <id>attack.t1059.003</id>
            <id>attack.t1059.001</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Command Line Execution with Suspicious URL and AppData Strings</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)://</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)%AppData%</field>
    </rule>
    <rule id="900773" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_tapinstall_execution.yml</info>
        <!--Sigma Rule Author: Daniil Yugoslavskiy, Ian Davis, oscd.community-->
        <!--Description: Well-known TAP software installation. Possible preparation for data exfiltration using tunneling techniques-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 99793437-3e16-439b-be0f-078782cf953d-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048</id>
        </mitre>
        <description>Tap Installer Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+tapinstall\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Avast\ Software\\+SecureLine\ VPN\\+tapinstall\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Avast\ Software\\+SecureLine\ VPN\\+tapinstall\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+OpenVPN\ Connect\\+drivers\\+tap\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Proton\ Technologies\\+ProtonVPNTap\\+installer\\+)</field>
    </rule>
    <rule id="900774" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_secutyxploded.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of SecurityXploded Tools-->
        <!--Date: 2018/12/19-->
        <!--Status: stable-->
        <!--ID: 7679d464-4f74-45e2-9e01-ac66c5eb041a-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1555</id>
        </mitre>
        <description>HackTool - SecurityXploded Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)SecurityXploded</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:PasswordDump\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)(?:PasswordDump\.exe)$</field>
    </rule>
    <rule id="900775" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_covenant.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects suspicious command lines used in Covenant luanchers-->
        <!--Date: 2020/06/04-->
        <!--Status: test-->
        <!--ID: c260b6db-48ba-4b4a-a76f-2f67644e99d2-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1059.001</id>
            <id>attack.t1564.003</id>
        </mitre>
        <description>HackTool - Covenant PowerShell Launcher</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-Sta</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-Nop</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-Window</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Hidden</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-Command|\-EncodedCommand</field>
    </rule>
    <rule id="900776" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_covenant.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects suspicious command lines used in Covenant luanchers-->
        <!--Date: 2020/06/04-->
        <!--Status: test-->
        <!--ID: c260b6db-48ba-4b4a-a76f-2f67644e99d2-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1059.001</id>
            <id>attack.t1564.003</id>
        </mitre>
        <description>HackTool - Covenant PowerShell Launcher</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)sv\ o\ \(New\-Object\ IO\.MemorySteam\);sv\ d\ |mshta\ file\.hta|GruntHTTP|\-EncodedCommand\ cwB2ACAAbwAgA</field>
    </rule>
    <rule id="900777" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_winrar_uncommon_folder_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Tigzy-->
        <!--Description: Detects a suspicious winrar execution in a folder which is not the default installation folder-->
        <!--Date: 2021/11/17-->
        <!--Status: test-->
        <!--ID: 4ede543c-e098-43d9-a28f-dd784a13132f-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1560.001</id>
        </mitre>
        <description>Winrar Execution in Non-Standard Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rar\.exe|\\+winrar\.exe)$</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Command\ line\ RAR</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+UnRAR\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+WinRAR\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+WinRAR\\+</field>
    </rule>
    <rule id="900778" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_winrar_uncommon_folder_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Tigzy-->
        <!--Description: Detects a suspicious winrar execution in a folder which is not the default installation folder-->
        <!--Date: 2021/11/17-->
        <!--Status: test-->
        <!--ID: 4ede543c-e098-43d9-a28f-dd784a13132f-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1560.001</id>
        </mitre>
        <description>Winrar Execution in Non-Standard Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rar\.exe|\\+winrar\.exe)$</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Command\ line\ RAR</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+Temp\\+</field>
    </rule>
    <rule id="900779" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_local_system_owner_account_discovery.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Local accounts, System Owner/User discovery using operating systems utilities-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: 502b42de-4306-40b4-9596-6f590c81f073-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>attack.t1087.001</id>
        </mitre>
        <description>Local Accounts Discovery</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /c</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:dir\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ rmdir\ )</field>
    </rule>
    <rule id="900780" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_local_system_owner_account_discovery.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Local accounts, System Owner/User discovery using operating systems utilities-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: 502b42de-4306-40b4-9596-6f590c81f073-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>attack.t1087.001</id>
        </mitre>
        <description>Local Accounts Discovery</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /c</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:dir\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Users\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+net\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+net1\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)user</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/domain</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/add</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/delete</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/active</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/expires</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/passwordreq</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/scriptpath</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/times</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/workstations</field>
    </rule>
    <rule id="900781" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_local_system_owner_account_discovery.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Local accounts, System Owner/User discovery using operating systems utilities-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: 502b42de-4306-40b4-9596-6f590c81f073-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>attack.t1087.001</id>
        </mitre>
        <description>Local Accounts Discovery</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+whoami\.exe|\\+quser\.exe|\\+qwinsta\.exe)$</field>
    </rule>
    <rule id="900782" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_local_system_owner_account_discovery.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Local accounts, System Owner/User discovery using operating systems utilities-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: 502b42de-4306-40b4-9596-6f590c81f073-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>attack.t1087.001</id>
        </mitre>
        <description>Local Accounts Discovery</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wmic\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)useraccount</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)get</field>
    </rule>
    <rule id="900783" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_local_system_owner_account_discovery.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Local accounts, System Owner/User discovery using operating systems utilities-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: 502b42de-4306-40b4-9596-6f590c81f073-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>attack.t1087.001</id>
        </mitre>
        <description>Local Accounts Discovery</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmdkey\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /l</field>
    </rule>
    <rule id="900784" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_paexec.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jason Lynch-->
        <!--Description: Detects execution of renamed version of PAExec. Often used by attackers-->
        <!--Date: 2021/05/22-->
        <!--Status: test-->
        <!--ID: c4e49831-1496-40cf-8ce1-b53f942b02f9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Renamed PAExec Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)PAExec\ Application</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PAExec\.exe</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)PAExec</field>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)11D40A7B7876288F919AB819CC2D9802|6444f8a34e99b8f7d9647de66aabe516|dfd6aa3f7b2b1035b76b718f1ddc689f|1a6cca4d5460b1710a12dea39e4a592c</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=11D40A7B7876288F919AB819CC2D9802|IMPHASH=6444f8a34e99b8f7d9647de66aabe516|IMPHASH=dfd6aa3f7b2b1035b76b718f1ddc689f|IMPHASH=1a6cca4d5460b1710a12dea39e4a592c</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+paexec\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+PAExec\-)</field>
    </rule>
    <rule id="900785" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_pchunter.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali-->
        <!--Description: Detects suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options and other low level stuff-->
        <!--Date: 2022/10/10-->
        <!--Status: experimental-->
        <!--ID: fca949cc-79ca-446e-8064-01aa7e52ece5-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.discovery</id>
            <id>attack.t1082</id>
            <id>attack.t1057</id>
            <id>attack.t1012</id>
            <id>attack.t1083</id>
            <id>attack.t1007</id>
        </mitre>
        <description>HackTool - PCHunter Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+PCHunter64\.exe|\\+PCHunter32\.exe)$</field>
    </rule>
    <rule id="900786" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_pchunter.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali-->
        <!--Description: Detects suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options and other low level stuff-->
        <!--Date: 2022/10/10-->
        <!--Status: experimental-->
        <!--ID: fca949cc-79ca-446e-8064-01aa7e52ece5-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.discovery</id>
            <id>attack.t1082</id>
            <id>attack.t1057</id>
            <id>attack.t1012</id>
            <id>attack.t1083</id>
            <id>attack.t1007</id>
        </mitre>
        <description>HackTool - PCHunter Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PCHunter\.exe</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Epoolsoft\ Windows\ Information\ View\ Tools</field>
    </rule>
    <rule id="900787" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_pchunter.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali-->
        <!--Description: Detects suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options and other low level stuff-->
        <!--Date: 2022/10/10-->
        <!--Status: experimental-->
        <!--ID: fca949cc-79ca-446e-8064-01aa7e52ece5-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.discovery</id>
            <id>attack.t1082</id>
            <id>attack.t1057</id>
            <id>attack.t1012</id>
            <id>attack.t1083</id>
            <id>attack.t1007</id>
        </mitre>
        <description>HackTool - PCHunter Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)SHA1=5F1CBC3D99558307BC1250D084FA968521482025|MD5=987B65CD9B9F4E9A1AFD8F8B48CF64A7|SHA256=2B214BDDAAB130C274DE6204AF6DBA5AEEC7433DA99AA950022FA306421A6D32|IMPHASH=444D210CEA1FF8112F256A4997EED7FF|SHA1=3FB89787CB97D902780DA080545584D97FB1C2EB|MD5=228DD0C2E6287547E26FFBD973A40F14|SHA256=55F041BF4E78E9BFA6D4EE68BE40E496CE3A1353E1CA4306598589E19802522C|IMPHASH=0479F44DF47CFA2EF1CCC4416A538663</field>
    </rule>
    <rule id="900788" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_pchunter.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali-->
        <!--Description: Detects suspicious use of PCHunter, a tool like Process Hacker to view and manipulate processes, kernel options and other low level stuff-->
        <!--Date: 2022/10/10-->
        <!--Status: experimental-->
        <!--ID: fca949cc-79ca-446e-8064-01aa7e52ece5-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.discovery</id>
            <id>attack.t1082</id>
            <id>attack.t1057</id>
            <id>attack.t1012</id>
            <id>attack.t1083</id>
            <id>attack.t1007</id>
        </mitre>
        <description>HackTool - PCHunter Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)228dd0c2e6287547e26ffbd973a40f14|987b65cd9b9f4e9a1afd8f8b48cf64a7</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)5f1cbc3d99558307bc1250d084fa968521482025|3fb89787cb97d902780da080545584d97fb1c2eb</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)2b214bddaab130c274de6204af6dba5aeec7433da99aa950022fa306421a6d32|55f041bf4e78e9bfa6d4ee68be40e496ce3a1353e1ca4306598589e19802522c</field>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)444d210cea1ff8112f256a4997eed7ff|0479f44df47cfa2ef1ccc4416a538663</field>
    </rule>
    <rule id="900789" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_bitsadmin_download_direct_ip.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects usage of bitsadmin downloading a file using an URL that contains an IP-->
        <!--Date: 2022/06/28-->
        <!--Status: experimental-->
        <!--ID: 99c840f2-2012-46fd-9141-c761987550ef-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1197</id>
            <id>attack.s0190</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Suspicious Download From Direct IP Via Bitsadmin</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+bitsadmin\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)bitsadmin\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /transfer\ |\ /create\ |\ /addfile\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)://1|://2|://3|://4|://5|://6|://7|://8|://9</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://7\-</field>
    </rule>
    <rule id="900790" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_hydra.yml</info>
        <!--Sigma Rule Author: Vasiliy Burov-->
        <!--Description: Detects command line parameters used by Hydra password guessing hack tool-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: aaafa146-074c-11eb-adc1-0242ac120002-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1110</id>
            <id>attack.t1110.001</id>
        </mitre>
        <description>HackTool - Hydra Password Bruteforce Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-u\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-p\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\^USER\^|\^PASS\^</field>
    </rule>
    <rule id="900791" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_dctask64_proc_inject.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious process injection using ZOHO's dctask64.exe-->
        <!--Date: 2020/01/28-->
        <!--Status: test-->
        <!--ID: 6345b048-8441-43a7-9bed-541133633d7a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1055.001</id>
        </mitre>
        <description>ZOHO Dctask64 Process Injection</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+dctask64\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)DesktopCentral_Agent\\+agent</field>
    </rule>
    <rule id="900792" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_netsh_fw_add_rule.yml</info>
        <!--Sigma Rule Author: Markus Neis, Sander Wiebing-->
        <!--Description: Detects the addition of a new rule to the Windows firewall via netsh-->
        <!--Date: 2019/01/29-->
        <!--Status: test-->
        <!--ID: cd5cfd80-aa5f-44c0-9c20-108c4ae12e3c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
            <id>attack.s0246</id>
        </mitre>
        <description>New Firewall Rule Added Via Netsh.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+netsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)netsh\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ firewall\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ add\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+netsh\.exe\ advfirewall\ firewall\ add\ rule\ name=Dropbox\ dir=in\ action=allow\ "program=C:\\+Program\ Files\ \(x86\)\\+Dropbox\\+Client\\+Dropbox\.exe"\ enable=yes\ profile=Any</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+netsh\.exe\ advfirewall\ firewall\ add\ rule\ name=Dropbox\ dir=in\ action=allow\ "program=C:\\+Program\ Files\\+Dropbox\\+Client\\+Dropbox\.exe"\ enable=yes\ profile=Any</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+Temp\\+asgard2\-agent\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+thor64\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)advfirewall\ firewall\ show\ rule\ name=all</field>
    </rule>
    <rule id="900793" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_adcspwn.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects command line parameters used by ADCSPwn, a tool to escalate privileges in an active directory network by coercing authenticate from machine accounts and relaying to the certificate service-->
        <!--Date: 2021/07/31-->
        <!--Status: test-->
        <!--ID: cd8c163e-a19b-402e-bdd5-419ff5859f12-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1557.001</id>
        </mitre>
        <description>HackTool - ADCSPwn Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-\-adcs\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-\-port\ )</field>
    </rule>
    <rule id="900794" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_redirection_susp_folder.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects inline Windows shell commands redirecting output via the ">" symbol to a suspicious location-->
        <!--Date: 2022/07/12-->
        <!--Status: experimental-->
        <!--ID: 8e0bb260-d4b2-4fff-bb8d-3f82118e6892-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Suspicious CMD Shell Output Redirect</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Cmd\.Exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)&gt;\ \\+Users\\+Public\\+|&gt;\ %APPDATA%\\+|&gt;\ %TEMP%\\+|&gt;\ %TMP%\\+|&gt;\ %USERPROFILE%\\+|&gt;\ C:\\+Temp\\+|&gt;\ C:\\+Users\\+Public\\+|&gt;\ C:\\+Windows\\+Temp\\+|&gt;\\+Users\\+Public\\+|&gt;%APPDATA%\\+|&gt;%TEMP%\\+|&gt;%TMP%\\+|&gt;%USERPROFILE%\\+|&gt;C:\\+Temp\\+|&gt;C:\\+Users\\+Public\\+|&gt;C:\\+Windows\\+Temp\\+</field>
    </rule>
    <rule id="900795" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_redirection_susp_folder.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects inline Windows shell commands redirecting output via the ">" symbol to a suspicious location-->
        <!--Date: 2022/07/12-->
        <!--Status: experimental-->
        <!--ID: 8e0bb260-d4b2-4fff-bb8d-3f82118e6892-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Suspicious CMD Shell Output Redirect</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Cmd\.Exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ &gt;|"&gt;|'&gt;</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+</field>
    </rule>
    <rule id="900796" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_wfc.yml</info>
        <!--Sigma Rule Author: Christopher Peacock @SecurePeacock, SCYTHE @scythe_io-->
        <!--Description: The Workflow Command-line Compiler can be used for AWL bypass and is listed in Microsoft's recommended block rules.-->
        <!--Date: 2022/06/01-->
        <!--Status: test-->
        <!--ID: 49be8799-7b4d-4fda-ad23-cafbefdebbc5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1127</id>
        </mitre>
        <description>Use of Wfc.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wfc\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)wfc\.exe</field>
    </rule>
    <rule id="900797" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_nslookup_domain_discovery.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a set of suspicious network related commands often used in recon stages-->
        <!--Date: 2022/02/07-->
        <!--Status: test-->
        <!--ID: e6313acd-208c-44fc-a0ff-db85d572e90e-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1087</id>
            <id>attack.t1082</id>
            <id>car.2016-03-001</id>
        </mitre>
        <description>Network Reconnaissance Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)nslookup</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)_ldap\._tcp\.dc\._msdcs\.</field>
    </rule>
    <rule id="900798" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_pcalua.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community-->
        <!--Description: Detects execition of commands and binaries from the context of The program compatibility assistant (Pcalua.exe). This can be used as a LOLBIN in order to bypass application whitelisting.-->
        <!--Date: 2022/06/14-->
        <!--Status: test-->
        <!--ID: 0955e4e1-c281-4fb9-9ee1-5ee7b4b754d2-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Use of Pcalua For Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+pcalua\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-a</field>
    </rule>
    <rule id="900799" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ms_appinstaller_download.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Swachchhanda Shrawan Poudel-->
        <!--Description: Detects usage of the "ms-appinstaller" protocol handler via command line to potentially download arbitrary files via AppInstaller.EXE
The downloaded files are temporarly stored in ":\Users\%username%\AppData\Local\Packages\Microsoft.DesktopAppInstaller_8wekyb3d8bbwe\AC\INetCache\<RANDOM-8-CHAR-DIRECTORY>"
-->
        <!--Date: 2023/11/09-->
        <!--Status: experimental-->
        <!--ID: 180c7c5c-d64b-4a63-86e9-68910451bc8b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Potential File Download Via MS-AppInstaller Protocol Handler</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ms\-appinstaller://.source=</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http</field>
    </rule>
    <rule id="900800" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_no_space_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects Windows command lines that miss a space before or after the /c flag when running a command using the cmd.exe.
This could be a sign of obfuscation of a fat finger problem (typo by the developer).
-->
        <!--Date: 2022/08/23-->
        <!--Status: experimental-->
        <!--ID: a16980c2-0c56-4de0-9a79-17971979efdd-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Cmd.EXE Missing Space Characters Execution Anomaly</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cmd\.exe/c|\\+cmd/c|"cmd/c|cmd\.exe/k|\\+cmd/k|"cmd/k|cmd\.exe/r|\\+cmd/r|"cmd/r</field>
    </rule>
    <rule id="900801" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_no_space_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects Windows command lines that miss a space before or after the /c flag when running a command using the cmd.exe.
This could be a sign of obfuscation of a fat finger problem (typo by the developer).
-->
        <!--Date: 2022/08/23-->
        <!--Status: experimental-->
        <!--ID: a16980c2-0c56-4de0-9a79-17971979efdd-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Cmd.EXE Missing Space Characters Execution Anomaly</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/cwhoami|/cpowershell|/cschtasks|/cbitsadmin|/ccertutil|/kwhoami|/kpowershell|/kschtasks|/kbitsadmin|/kcertutil</field>
    </rule>
    <rule id="900802" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_no_space_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects Windows command lines that miss a space before or after the /c flag when running a command using the cmd.exe.
This could be a sign of obfuscation of a fat finger problem (typo by the developer).
-->
        <!--Date: 2022/08/23-->
        <!--Status: experimental-->
        <!--ID: a16980c2-0c56-4de0-9a79-17971979efdd-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Cmd.EXE Missing Space Characters Execution Anomaly</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cmd\.exe\ /c|cmd\ /c|cmd\.exe\ /k|cmd\ /k|cmd\.exe\ /r|cmd\ /r</field>
    </rule>
    <rule id="900803" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_no_space_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects Windows command lines that miss a space before or after the /c flag when running a command using the cmd.exe.
This could be a sign of obfuscation of a fat finger problem (typo by the developer).
-->
        <!--Date: 2022/08/23-->
        <!--Status: experimental-->
        <!--ID: a16980c2-0c56-4de0-9a79-17971979efdd-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Cmd.EXE Missing Space Characters Execution Anomaly</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:cmd\.exe\ /c\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:cmd\ /c\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:cmd\.exe\ /k\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:cmd\ /k\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:cmd\.exe\ /r\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:cmd\ /r\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)AppData\\+Local\\+Programs\\+Microsoft\ VS\ Code\\+resources\\+app\\+node_modules</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:cmd\.exe/c\ \.)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)cmd\.exe\ /c</field>
    </rule>
    <rule id="900804" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_print_remote_file_copy.yml</info>
        <!--Sigma Rule Author: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative-->
        <!--Description: Attackers can use print.exe for remote file copy-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: bafac3d6-7de9-4dd9-8874-4a1194b493ed-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Abusing Print Executable</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+print\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)^(?:print)</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/D</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)print\.exe</field>
    </rule>
    <rule id="900805" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_software_discovery.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Adversaries may attempt to enumerate software for a variety of reasons, such as figuring out what security measures are present or if the compromised system has a version of software that is vulnerable.-->
        <!--Date: 2020/10/16-->
        <!--Status: test-->
        <!--ID: e13f668e-7f95-443d-98d2-1816a7648a7b-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1518</id>
        </mitre>
        <description>Detected Windows Software Discovery</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)query</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+software\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/v</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)svcversion</field>
    </rule>
    <rule id="900806" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_schtasks_appdata_local_system.yml</info>
        <!--Sigma Rule Author: pH-T (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of a schtask that executes a file from C:\Users\<USER>\AppData\Local-->
        <!--Date: 2022/03/15-->
        <!--Status: test-->
        <!--ID: c5c00f49-b3f9-45a6-997e-cfdecc6e1967-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.t1053.005</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious Schtasks Execution AppData Folder</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/Create</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/RU</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/TR</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:NT\ AUT|\ SYSTEM\ )</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)TeamViewer_\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/TN\ TVInstallRestore</field>
    </rule>
    <rule id="900807" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_bloodhound_sharphound.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects command line parameters used by Bloodhound and Sharphound hack tools-->
        <!--Date: 2019/12/20-->
        <!--Status: test-->
        <!--ID: f376c8a7-a2d0-4ddc-aa0c-16c17236d962-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1087.001</id>
            <id>attack.t1087.002</id>
            <id>attack.t1482</id>
            <id>attack.t1069.001</id>
            <id>attack.t1069.002</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>HackTool - Bloodhound/Sharphound Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)SharpHound</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)SharpHound</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)SpecterOps|evil\ corp</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+Bloodhound\.exe|\\+SharpHound\.exe</field>
    </rule>
    <rule id="900808" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_bloodhound_sharphound.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects command line parameters used by Bloodhound and Sharphound hack tools-->
        <!--Date: 2019/12/20-->
        <!--Status: test-->
        <!--ID: f376c8a7-a2d0-4ddc-aa0c-16c17236d962-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1087.001</id>
            <id>attack.t1087.002</id>
            <id>attack.t1482</id>
            <id>attack.t1069.001</id>
            <id>attack.t1069.002</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>HackTool - Bloodhound/Sharphound Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-CollectionMethod\ All\ |\ \-\-CollectionMethods\ Session\ |\ \-\-Loop\ \-\-Loopduration\ |\ \-\-PortScanTimeout\ |\.exe\ \-c\ All\ \-d\ |Invoke\-Bloodhound|Get\-BloodHoundData</field>
    </rule>
    <rule id="900809" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_bloodhound_sharphound.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects command line parameters used by Bloodhound and Sharphound hack tools-->
        <!--Date: 2019/12/20-->
        <!--Status: test-->
        <!--ID: f376c8a7-a2d0-4ddc-aa0c-16c17236d962-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1087.001</id>
            <id>attack.t1087.002</id>
            <id>attack.t1482</id>
            <id>attack.t1069.001</id>
            <id>attack.t1069.002</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>HackTool - Bloodhound/Sharphound Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-JsonFolder\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-ZipFileName\ )</field>
    </rule>
    <rule id="900810" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_bloodhound_sharphound.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects command line parameters used by Bloodhound and Sharphound hack tools-->
        <!--Date: 2019/12/20-->
        <!--Status: test-->
        <!--ID: f376c8a7-a2d0-4ddc-aa0c-16c17236d962-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1087.001</id>
            <id>attack.t1087.002</id>
            <id>attack.t1482</id>
            <id>attack.t1069.001</id>
            <id>attack.t1069.002</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>HackTool - Bloodhound/Sharphound Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ DCOnly\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-\-NoSaveCache\ )</field>
    </rule>
    <rule id="900811" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_chisel.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects usage of the Chisel tunneling tool via the commandline arguments-->
        <!--Date: 2022/09/13-->
        <!--Status: experimental-->
        <!--ID: 8b0e12da-d3c3-49db-bb4f-256703f380e5-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090.001</id>
        </mitre>
        <description>PUA - Chisel Tunneling Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+chisel\.exe)$</field>
    </rule>
    <rule id="900812" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vscode_tunnel_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), citron_ninja-->
        <!--Description: Detects Visual Studio Code tunnel execution. Attackers can abuse this functionality to establish a C2 channel-->
        <!--Date: 2023/10/25-->
        <!--Status: experimental-->
        <!--ID: 90d6bd71-dffb-4989-8d86-a827fedd6624-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Visual Studio Code Tunnel Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)None</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.exe\ tunnel)$</field>
    </rule>
    <rule id="900813" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vscode_tunnel_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), citron_ninja-->
        <!--Description: Detects Visual Studio Code tunnel execution. Attackers can abuse this functionality to establish a C2 channel-->
        <!--Date: 2023/10/25-->
        <!--Status: experimental-->
        <!--ID: 90d6bd71-dffb-4989-8d86-a827fedd6624-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Visual Studio Code Tunnel Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe\ tunnel</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-\-name\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-accept\-server\-license\-terms</field>
    </rule>
    <rule id="900814" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vscode_tunnel_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), citron_ninja-->
        <!--Description: Detects Visual Studio Code tunnel execution. Attackers can abuse this functionality to establish a C2 channel-->
        <!--Date: 2023/10/25-->
        <!--Status: experimental-->
        <!--ID: 90d6bd71-dffb-4989-8d86-a827fedd6624-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Visual Studio Code Tunnel Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)(?:\ tunnel)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/d\ /c\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+servers\\+Stable\-</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)code\-server\.cmd</field>
    </rule>
    <rule id="900815" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_replace.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the use of Replace.exe which can be used to replace file with another file-->
        <!--Date: 2022/03/06-->
        <!--Status: test-->
        <!--ID: 9292293b-8496-4715-9db6-37028dcda4b3-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Replace.exe Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+replace\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/a|\-a</field>
    </rule>
    <rule id="900816" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_homoglyph_cyrillic_lookalikes.yml</info>
        <!--Sigma Rule Author: Micah Babinski, @micahbabinski-->
        <!--Description: Detects the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.
This is used as an obfuscation and masquerading techniques. Only "perfect" homoglyphs are included; these are characters that
are indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.
-->
        <!--Date: 2023/05/07-->
        <!--Status: experimental-->
        <!--ID: 32e280f1-8ad4-46ef-9e80-910657611fbc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Potential Homoglyph Attack Using Lookalike Characters</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)А|В|Е|К|М|Н|О|Р|С|Т|Х|Ѕ|І|Ј|Ү|Ӏ|Ԍ|Ԛ|Ԝ|Α|Β|Ε|Ζ|Η|Ι|Κ|Μ|Ν|Ο|Ρ|Τ|Υ|Χ</field>
    </rule>
    <rule id="900817" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_homoglyph_cyrillic_lookalikes.yml</info>
        <!--Sigma Rule Author: Micah Babinski, @micahbabinski-->
        <!--Description: Detects the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.
This is used as an obfuscation and masquerading techniques. Only "perfect" homoglyphs are included; these are characters that
are indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.
-->
        <!--Date: 2023/05/07-->
        <!--Status: experimental-->
        <!--ID: 32e280f1-8ad4-46ef-9e80-910657611fbc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Potential Homoglyph Attack Using Lookalike Characters</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)а|е|о|р|с|х|ѕ|і|ӏ|ј|һ|ԁ|ԛ|ԝ|ο</field>
    </rule>
    <rule id="900818" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_schtasks_schedule_type.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects scheduled task creations or modification on a suspicious schedule type-->
        <!--Date: 2022/09/09-->
        <!--Status: test-->
        <!--ID: 24c8392b-aa3c-46b7-a545-43f71657fe98-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Suspicious Schtasks Schedule Types</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+schtasks\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)schtasks\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ ONLOGON\ |\ ONSTART\ |\ ONCE\ |\ ONIDLE\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)NT\ AUT</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ SYSTEM</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)HIGHEST</field>
    </rule>
    <rule id="900819" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_virtualbox_execution.yml</info>
        <!--Sigma Rule Author: Janantha Marasinghe-->
        <!--Description: Adversaries can carry out malicious operations using a virtual instance to avoid detection. This rule is built to detect the registration of the Virtualbox driver or start of a Virtualbox VM.-->
        <!--Date: 2020/09/26-->
        <!--Status: test-->
        <!--ID: bab049ca-7471-4828-9024-38279a4c04da-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.006</id>
            <id>attack.t1564</id>
        </mitre>
        <description>Detect Virtualbox Driver Installation OR Starting Of VMs</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)VBoxRT\.dll,RTR3Init|VBoxC\.dll|VBoxDrv\.sys</field>
    </rule>
    <rule id="900820" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_virtualbox_execution.yml</info>
        <!--Sigma Rule Author: Janantha Marasinghe-->
        <!--Description: Adversaries can carry out malicious operations using a virtual instance to avoid detection. This rule is built to detect the registration of the Virtualbox driver or start of a Virtualbox VM.-->
        <!--Date: 2020/09/26-->
        <!--Status: test-->
        <!--ID: bab049ca-7471-4828-9024-38279a4c04da-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.006</id>
            <id>attack.t1564</id>
        </mitre>
        <description>Detect Virtualbox Driver Installation OR Starting Of VMs</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)startvm|controlvm</field>
    </rule>
    <rule id="900821" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmic_recon_process.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the execution of "wmic" with the "process" flag, which adversary might use to list processes running on the compromised host or list installed software hotfixes and patches.-->
        <!--Date: 2022/01/01-->
        <!--Status: experimental-->
        <!--ID: 221b251a-357a-49a9-920a-271802777cc0-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
        </mitre>
        <description>Process Reconnaissance Via Wmic.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+WMIC\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)wmic\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)process</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)call</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)create</field>
    </rule>
    <rule id="900822" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ntfs_short_name_path_use_cli.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali-->
        <!--Description: Detect use of the Windows 8.3 short name. Which could be used as a method to avoid command-line detection-->
        <!--Date: 2022/08/07-->
        <!--Status: test-->
        <!--ID: 349d891d-fef0-4fe4-bc53-eee623a15969-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Use Short Name Path in Command Line</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\~1\\+|\~2\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+Dism\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+cleanmgr\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+GPSoftware\\+Directory\ Opus\\+dopus\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+WebEx\\+WebexHost\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+thor\\+thor64\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+veam\.backup\.shell\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+winget\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+Everything\\+Everything\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+WinGet\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+appdata\\+local\\+webex\\+webex64\\+meetings\\+wbxreport\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Git\\+post\-install\.bat</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Git\\+cmd\\+scalar\.exe</field>
    </rule>
    <rule id="900823" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_cl_loadassembly.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects calls to "LoadAssemblyFromPath" or "LoadAssemblyFromNS" that are part of the "CL_LoadAssembly.ps1" script. This can be abused to load different assemblies and bypass App locker controls.-->
        <!--Date: 2022/05/21-->
        <!--Status: experimental-->
        <!--ID: c57872c7-614f-4d7f-a40d-b78c8df2d30d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>Assembly Loading Via CL_LoadAssembly.ps1</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:LoadAssemblyFromPath\ |LoadAssemblyFromNS\ )</field>
    </rule>
    <rule id="900824" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_pkgmgr_dism.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using pkgmgr.exe and dism.exe (UACMe 23)-->
        <!--Date: 2021/08/23-->
        <!--Status: test-->
        <!--ID: a743ceba-c771-4d75-97eb-8a90f7f4844c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using PkgMgr and DISM</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+pkgmgr\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+dism\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
    </rule>
    <rule id="900825" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_crypto_mining_monero.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects command line parameters or strings often used by crypto miners-->
        <!--Date: 2021/10/26-->
        <!--Status: stable-->
        <!--ID: 66c3b204-9f88-4d0a-a7f7-8a57d521ca55-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1496</id>
        </mitre>
        <description>Potential Crypto Mining Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-\-cpu\-priority=|\-\-donate\-level=0|\ \-o\ pool\.|\ \-\-nicehash|\ \-\-algo=rx/0\ |stratum\+tcp://|stratum\+udp://|LS1kb25hdGUtbGV2ZWw9|0tZG9uYXRlLWxldmVsP|tLWRvbmF0ZS1sZXZlbD|c3RyYXR1bSt0Y3A6Ly|N0cmF0dW0rdGNwOi8v|zdHJhdHVtK3RjcDovL|c3RyYXR1bSt1ZHA6Ly|N0cmF0dW0rdWRwOi8v|zdHJhdHVtK3VkcDovL</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ pool\.c\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ pool\.o\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)gcc\ \-</field>
    </rule>
    <rule id="900826" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_import_cert_susp_locations.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Adversaries may install a root certificate on a compromised system to avoid warnings when connecting to adversary controlled web servers.-->
        <!--Date: 2022/09/09-->
        <!--Status: test-->
        <!--ID: 5f6a601c-2ecb-498b-9c33-660362323afa-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1553.004</id>
        </mitre>
        <description>Root Certificate Installed From Susp Locations</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Import\-Certificate</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-FilePath\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Cert:\\+LocalMachine\\+Root</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+|:\\+Windows\\+TEMP\\+|\\+Desktop\\+|\\+Downloads\\+|\\+Perflogs\\+|:\\+Users\\+Public\\+</field>
    </rule>
    <rule id="900827" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sc_change_sevice_image_path_by_non_admin.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov-->
        <!--Description: Detection of sc.exe utility spawning by user with Medium integrity level to change service ImagePath or FailureCommand-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: d937b75f-a665-4480-88a5-2f20e9f9b22a-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1574.011</id>
        </mitre>
        <description>Possible Privilege Escalation via Weak Service Permissions</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+sc\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)Medium</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)config</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)binPath</field>
    </rule>
    <rule id="900828" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sc_change_sevice_image_path_by_non_admin.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov-->
        <!--Description: Detection of sc.exe utility spawning by user with Medium integrity level to change service ImagePath or FailureCommand-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: d937b75f-a665-4480-88a5-2f20e9f9b22a-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1574.011</id>
        </mitre>
        <description>Possible Privilege Escalation via Weak Service Permissions</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+sc\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)Medium</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)failure</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)command</field>
    </rule>
    <rule id="900829" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_control_panel_item.yml</info>
        <!--Sigma Rule Author: Kyaw Min Thein, Furkan Caliskan (@caliskanfurkan_)-->
        <!--Description: Detects the malicious use of a control panel item-->
        <!--Date: 2020/06/22-->
        <!--Status: test-->
        <!--ID: 0ba863e6-def5-4e50-9cea-4dd8c7dc46a4-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.002</id>
            <id>attack.persistence</id>
            <id>attack.t1546</id>
        </mitre>
        <description>Control Panel Items</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+reg\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)reg\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)CurrentVersion\\+Control\ Panel\\+CPLs</field>
    </rule>
    <rule id="900830" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_control_panel_item.yml</info>
        <!--Sigma Rule Author: Kyaw Min Thein, Furkan Caliskan (@caliskanfurkan_)-->
        <!--Description: Detects the malicious use of a control panel item-->
        <!--Date: 2020/06/22-->
        <!--Status: test-->
        <!--ID: 0ba863e6-def5-4e50-9cea-4dd8c7dc46a4-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.002</id>
            <id>attack.persistence</id>
            <id>attack.t1546</id>
        </mitre>
        <description>Control Panel Items</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.cpl)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+System32\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)%System%</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\|C:\\+Windows\\+system32\|</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:regsvr32\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ /s\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)igfxCPL\.cpl</field>
    </rule>
    <rule id="900831" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_gfxdownloadwrapper_arbitrary_file_download.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, oscd.community-->
        <!--Description: Detects execution of GfxDownloadWrapper.exe with a URL as an argument to download file.-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: eee00933-a761-4cd0-be70-c42fe91731e7-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Arbitrary File Download Via GfxDownloadWrapper.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+GfxDownloadWrapper\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http://|https://</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)https://gameplayapi\.intel\.com/</field>
    </rule>
    <rule id="900832" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pdqdeploy_execution.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect use of PDQ Deploy remote admin tool-->
        <!--Date: 2022/10/01-->
        <!--Status: test-->
        <!--ID: d679950c-abb7-43a6-80fb-2a480c4fc450-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1072</id>
        </mitre>
        <description>PDQ Deploy Remote Adminstartion Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)PDQ\ Deploy\ Console</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)PDQ\ Deploy</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)PDQ\.com</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PDQDeployConsole\.exe</field>
    </rule>
    <rule id="900833" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_runexehelper.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect usage of the "runexehelper.exe" binary as a proxy to launch other programs-->
        <!--Date: 2022/12/29-->
        <!--Status: test-->
        <!--ID: cd71385d-fd9b-4691-9b98-2b1f7e508714-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Lolbin Runexehelper Use As Proxy</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+runexehelper\.exe)$</field>
    </rule>
    <rule id="900834" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_browsers_chromium_load_extension.yml</info>
        <!--Sigma Rule Author: Aedan Russell, frack113, X__Junior (Nextron Systems)-->
        <!--Description: Detects a Chromium based browser process with the 'load-extension' flag to start a instance with a custom extension-->
        <!--Date: 2022/06/19-->
        <!--Status: experimental-->
        <!--ID: 88d6e60c-759d-4ac1-a447-c0f1466c2d21-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1176</id>
        </mitre>
        <description>Chromium Browser Instance Executed With Custom Extension</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+brave\.exe|\\+chrome\.exe|\\+msedge\.exe|\\+opera\.exe|\\+vivaldi\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-load\-extension=</field>
    </rule>
    <rule id="900835" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_addinutil_uncommon_cmdline.yml</info>
        <!--Sigma Rule Author: Michael McKinley (@McKinleyMike), Tony Latteri (@TheLatteri)-->
        <!--Description: Detects execution of the Add-In deployment cache updating utility (AddInutil.exe) with uncommon Addinroot or Pipelineroot paths. An adversary may execute AddinUtil.exe with uncommon Addinroot/Pipelineroot paths that point to the adversaries Addins.Store payload.
-->
        <!--Date: 2023/09/18-->
        <!--Status: experimental-->
        <!--ID: 4f2cd9b6-4a17-440f-bb2a-687abb65993a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Uncommon AddinUtil.EXE CommandLine Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+addinutil\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)AddInUtil\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-AddInRoot:|\-PipelineRoot:</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\-AddInRoot:"C:\\+Program\ Files\ \(x86\)\\+Common\ Files\\+Microsoft\ Shared\\+VSTA</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\-AddInRoot:C:\\+Program\ Files\ \(x86\)\\+Common\ Files\\+Microsoft\ Shared\\+VSTA</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\-PipelineRoot:"C:\\+Program\ Files\ \(x86\)\\+Common\ Files\\+Microsoft\ Shared\\+VSTA</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\-PipelineRoot:C:\\+Program\ Files\ \(x86\)\\+Common\ Files\\+Microsoft\ Shared\\+VSTA</field>
    </rule>
    <rule id="900836" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_lolbin_exec_from_non_c_drive.yml</info>
        <!--Sigma Rule Author: Christopher Peacock '@securepeacock', SCYTHE '@scythe_io', Angelo Violetti - SEC Consult '@angelo_violetti', Aaron Herman-->
        <!--Description: Detects LOLBINs executing from an abnormal or uncommon drive such as a mounted ISO.-->
        <!--Date: 2022/01/25-->
        <!--Status: test-->
        <!--ID: d4ca7c59-e9e4-42d8-bf57-91a776efcb87-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>LOLBIN Execution From Abnormal Drive</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+calc\.exe|\\+certutil\.exe|\\+cmstp\.exe|\\+cscript\.exe|\\+installutil\.exe|\\+mshta\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+wscript\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)CALC\.EXE|CertUtil\.exe|CMSTP\.EXE|cscript\.exe|installutil\.exe|MSHTA\.EXE|REGSVR32\.EXE|RUNDLL32\.EXE|wscript\.exe</field>
        <field name="win.eventdata.currentDirectory" negate="yes" type="pcre2">(?i)C:\\+</field>
        <field name="win.eventdata.currentDirectory" negate="yes" type="pcre2">(?i)</field>
        <field name="win.eventdata.currentDirectory" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="900837" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_ultravnc_susp_execution.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects suspicious UltraVNC command line flag combination that indicate a auto reconnect upon execution, e.g. startup (as seen being used by Gamaredon threat group)-->
        <!--Date: 2022/03/04-->
        <!--Status: test-->
        <!--ID: 871b9555-69ca-4993-99d3-35a59f9f3599-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.g0047</id>
            <id>attack.t1021.005</id>
        </mitre>
        <description>Suspicious UltraVNC Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-autoreconnect\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-connect\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-id:</field>
    </rule>
    <rule id="900838" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rar_susp_greedy_compression.yml</info>
        <!--Sigma Rule Author: X__Junior (Nextron Systems), Florian Roth (Nextron Systems)-->
        <!--Description: Detects RAR usage that creates an archive from a suspicious folder, either a system folder or one of the folders often used by attackers for staging purposes-->
        <!--Date: 2022/12/15-->
        <!--Status: experimental-->
        <!--ID: afe52666-401e-4a02-b4ff-5d128990b8cb-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Suspicious Greedy Compression Using Rar.EXE</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rar\.exe)$</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Command\ line\ RAR</field>
    </rule>
    <rule id="900839" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rar_susp_greedy_compression.yml</info>
        <!--Sigma Rule Author: X__Junior (Nextron Systems), Florian Roth (Nextron Systems)-->
        <!--Description: Detects RAR usage that creates an archive from a suspicious folder, either a system folder or one of the folders often used by attackers for staging purposes-->
        <!--Date: 2022/12/15-->
        <!--Status: experimental-->
        <!--ID: afe52666-401e-4a02-b4ff-5d128990b8cb-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Suspicious Greedy Compression Using Rar.EXE</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe\ a\ |\ a\ \-m</field>
    </rule>
    <rule id="900840" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sc_stop_service.yml</info>
        <!--Sigma Rule Author: Jakob Weinzettl, oscd.community, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the stopping of a Windows service-->
        <!--Date: 2023/03/05-->
        <!--Status: experimental-->
        <!--ID: 81bcb81b-5b1f-474b-b373-52c871aaa7b1-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1489</id>
        </mitre>
        <description>Stop Windows Service Via Sc.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)sc\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+sc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ stop\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)sc\ \ stop\ KSCWebConsoleMessageQueue</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)sc\ \ stop\ LGHUBUpdaterService</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)AUTHORI</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)AUTORI</field>
    </rule>
    <rule id="900841" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mofcomp_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of the "mofcomp" utility as a child of a suspicious shell or script running utility or by having a suspicious path in the commandline.
The "mofcomp" utility parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository.
Attackers abuse this utility to install malicious MOF scripts
-->
        <!--Date: 2022/07/12-->
        <!--Status: experimental-->
        <!--ID: 1dd05363-104e-4b4a-b963-196a534b03a1-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Potential Suspicious Mofcomp Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+mofcomp\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)mofcomp\.exe</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+wsl\.exe|\\+wscript\.exe|\\+cscript\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp|\\+Users\\+Public\\+|\\+WINDOWS\\+Temp\\+|%temp%|%tmp%|%appdata%</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+wbem\\+WmiPrvSE\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+Windows\\+TEMP\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.mof)$</field>
    </rule>
    <rule id="900842" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mofcomp_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of the "mofcomp" utility as a child of a suspicious shell or script running utility or by having a suspicious path in the commandline.
The "mofcomp" utility parses a file containing MOF statements and adds the classes and class instances defined in the file to the WMI repository.
Attackers abuse this utility to install malicious MOF scripts
-->
        <!--Date: 2022/07/12-->
        <!--Status: experimental-->
        <!--ID: 1dd05363-104e-4b4a-b963-196a534b03a1-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Potential Suspicious Mofcomp Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+mofcomp\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)mofcomp\.exe</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+wsl\.exe|\\+wscript\.exe|\\+cscript\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp|\\+Users\\+Public\\+|\\+WINDOWS\\+Temp\\+|%temp%|%tmp%|%appdata%</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+Windows\\+TEMP\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.mof)$</field>
    </rule>
    <rule id="900843" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remote_access_tools_screenconnect_anomaly.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious sub processes started by the ScreenConnect client service, which indicates the use of the so-called Backstage mode-->
        <!--Date: 2022/02/25-->
        <!--Status: experimental-->
        <!--ID: 7b582f1a-b318-4c6a-bf4e-66fe49bf55a5-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Remote Access Tool - ScreenConnect Backstage Mode Anomaly</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:ScreenConnect\.ClientService\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+powershell\.exe|\\+pwsh\.exe)$</field>
    </rule>
    <rule id="900844" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webdav_lnk_execution.yml</info>
        <!--Sigma Rule Author: Micah Babinski-->
        <!--Description: Detects possible execution via LNK file accessed on a WebDAV server.-->
        <!--Date: 2023/08/21-->
        <!--Status: experimental-->
        <!--ID: 1412aa78-a24c-4abd-83df-767dfb2c5bbe-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.t1204</id>
        </mitre>
        <description>Potentially Suspicious WebDAV LNK Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+explorer\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+cscript\.exe|\\+mshta\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+wscript\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+DavWWWRoot\\+</field>
    </rule>
    <rule id="900845" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_expand_cabinet_files.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj, X__Junior (Nextron Systems)-->
        <!--Description: Detects the expansion or decompression of cabinet files from potentially suspicious or uncommon locations, e.g. seen in Iranian MeteorExpress related attacks-->
        <!--Date: 2021/07/30-->
        <!--Status: test-->
        <!--ID: 9f107a84-532c-41af-b005-8d12a607639f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Potentially Suspicious Cabinet File Expansion</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+expand\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/F:|\-F:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):\\+Perflogs\\+|:\\+Users\\+Public\\+|\\+Temporary\ Internet|:\\+ProgramData|\\+AppData\\+Local\\+Temp|\\+AppData\\+Roaming\\+Temp|:\\+Windows\\+Temp</field>
    </rule>
    <rule id="900846" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_expand_cabinet_files.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj, X__Junior (Nextron Systems)-->
        <!--Description: Detects the expansion or decompression of cabinet files from potentially suspicious or uncommon locations, e.g. seen in Iranian MeteorExpress related attacks-->
        <!--Date: 2021/07/30-->
        <!--Status: test-->
        <!--ID: 9f107a84-532c-41af-b005-8d12a607639f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Potentially Suspicious Cabinet File Expansion</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+expand\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/F:|\-F:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Favorites\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Favourites\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Contacts\\+</field>
    </rule>
    <rule id="900847" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_expand_cabinet_files.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj, X__Junior (Nextron Systems)-->
        <!--Description: Detects the expansion or decompression of cabinet files from potentially suspicious or uncommon locations, e.g. seen in Iranian MeteorExpress related attacks-->
        <!--Date: 2021/07/30-->
        <!--Status: test-->
        <!--ID: 9f107a84-532c-41af-b005-8d12a607639f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Potentially Suspicious Cabinet File Expansion</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+expand\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/F:|\-F:</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Dell\\+UpdateService\\+ServiceShell\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+ProgramData\\+Dell\\+UpdateService\\+Temp\\+</field>
    </rule>
    <rule id="900848" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mshta_susp_pattern.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious mshta process execution patterns-->
        <!--Date: 2021/07/17-->
        <!--Status: experimental-->
        <!--ID: e32f92d1-523e-49c3-9374-bdb13b46a3ba-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1106</id>
        </mitre>
        <description>Suspicious Mshta.EXE Execution Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+mshta\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)MSHTA\.EXE</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+cscript\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+wscript\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+|C:\\+ProgramData\\+|C:\\+Users\\+Public\\+|C:\\+Windows\\+Temp\\+</field>
    </rule>
    <rule id="900849" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mshta_susp_pattern.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious mshta process execution patterns-->
        <!--Date: 2021/07/17-->
        <!--Status: experimental-->
        <!--ID: e32f92d1-523e-49c3-9374-bdb13b46a3ba-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1106</id>
        </mitre>
        <description>Suspicious Mshta.EXE Execution Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+mshta\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)MSHTA\.EXE</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+SysWOW64\\+)</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.htm</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.hta</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:mshta\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:mshta)$</field>
    </rule>
    <rule id="900850" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_by_ordinal.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious calls of DLLs in rundll32.dll exports by ordinal-->
        <!--Date: 2019/10/22-->
        <!--Status: stable-->
        <!--ID: e79a9e79-eb72-4e78-a628-0e7e8f59e89c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Suspicious Call by Ordinal</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)RUNDLL32\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i),\#|,\ \#|\.dll\ \#|\.ocx\ \#</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)EDGEHTML\.dll</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\#141</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+Msbuild\\+Current\\+Bin\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+VC\\+Tools\\+MSVC\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+Tracker\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+FileTracker32\.dll,\#1</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+FileTracker32\.dll",\#1</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+FileTracker64\.dll,\#1</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+FileTracker64\.dll",\#1</field>
    </rule>
    <rule id="900851" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uninstall_crowdstrike_falcon.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may disable security tools to avoid possible detection of their tools and activities by uninstalling Crowdstrike Falcon-->
        <!--Date: 2021/07/12-->
        <!--Status: test-->
        <!--ID: f0f7be61-9cf5-43be-9836-99d6ef448a18-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Uninstall Crowdstrike Falcon Sensor</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+WindowsSensor\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /uninstall</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /quiet</field>
    </rule>
    <rule id="900852" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_dump64.yml</info>
        <!--Sigma Rule Author: Austin Songer @austinsonger, Florian Roth-->
        <!--Description: Detects when a user bypasses Defender by renaming a tool to dump64.exe and placing it in a Visual Studio folder-->
        <!--Date: 2021/11/26-->
        <!--Status: test-->
        <!--ID: 129966c9-de17-4334-a123-8b58172e664d-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Suspicious Dump64.exe Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+dump64\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Installer\\+Feedback\\+dump64\.exe</field>
    </rule>
    <rule id="900853" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_dump64.yml</info>
        <!--Sigma Rule Author: Austin Songer @austinsonger, Florian Roth-->
        <!--Description: Detects when a user bypasses Defender by renaming a tool to dump64.exe and placing it in a Visual Studio folder-->
        <!--Date: 2021/11/26-->
        <!--Status: test-->
        <!--ID: 129966c9-de17-4334-a123-8b58172e664d-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Suspicious Dump64.exe Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+dump64\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+dump64\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-ma\ |accepteula</field>
    </rule>
    <rule id="900854" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_workfolders.yml</info>
        <!--Sigma Rule Author: Maxime Thiebaut (@0xThiebaut)-->
        <!--Description: Detects using WorkFolders.exe to execute an arbitrary control.exe-->
        <!--Date: 2021/10/21-->
        <!--Status: test-->
        <!--ID: 0bbc6369-43e3-453d-9944-cae58821c173-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Execution via WorkFolders.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+control\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+WorkFolders\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+control\.exe</field>
    </rule>
    <rule id="900855" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_explorer_nouaccheck.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious starts of explorer.exe that use the /NOUACCHECK flag that allows to run all sub processes of that newly started explorer.exe without any UAC checks-->
        <!--Date: 2022/02/23-->
        <!--Status: test-->
        <!--ID: 534f2ef7-e8a2-4433-816d-c91bccde289b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Explorer NOUACCHECK Flag</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+explorer\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/NOUACCHECK</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)C:\\+Windows\\+system32\\+svchost\.exe\ \-k\ netsvcs\ \-p\ \-s\ Schedule</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+svchost\.exe</field>
    </rule>
    <rule id="900856" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_explorer_break_process_tree.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), @gott_cyber-->
        <!--Description: Detects a command line process that uses explorer.exe to launch arbitrary commands or binaries,
which is similar to cmd.exe /c, only it breaks the process tree and makes its parent a new instance of explorer spawning from "svchost"
-->
        <!--Date: 2019/06/29-->
        <!--Status: test-->
        <!--ID: 949f1ffb-6e85-4f00-ae1e-c3c5b190d605-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Explorer Process Tree Break</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/factory,\{75dff2b7\-6936\-4c06\-a8bb\-676a7b00b24b\}</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)explorer\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /root,</field>
    </rule>
    <rule id="900857" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_susp_ps_downloadfile.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of powershell, a WebClient object creation and the invocation of DownloadFile in a single command line-->
        <!--Date: 2020/08/28-->
        <!--Status: test-->
        <!--ID: 8f70ac5f-1f6f-4f8e-b454-db19561216c5-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.command_and_control</id>
            <id>attack.t1104</id>
            <id>attack.t1105</id>
        </mitre>
        <description>PowerShell DownloadFile</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.DownloadFile</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)System\.Net\.WebClient</field>
    </rule>
    <rule id="900858" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_executable_invalid_extension.yml</info>
        <!--Sigma Rule Author: Tim Shelton, Florian Roth (Nextron Systems), Yassine Oukessou (fix + fp)-->
        <!--Description: Detects the execution of rundll32 with a command line that doesn't contain a .dll file-->
        <!--Date: 2022/01/13-->
        <!--Status: experimental-->
        <!--ID: c3a99af4-35a9-4668-879e-c09aeb4f2bdf-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Rundll32 Execution Without DLL File</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)RUNDLL32\.EXE</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)None</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.dll</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+system32\\+rundll32\.exe\ C:\\+Windows\\+system32\\+inetcpl\.cpl,ClearMyTracksByProcess)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+Internet\ Explorer\\+iexplore\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.cpl</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+SysWOW64\\+msiexec\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+syswow64\\+MsiExec\.exe\ \-Embedding)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+msiexec\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+system32\\+MsiExec\.exe\ \-Embedding)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+cmd\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\ C:\\+Program\ Files\\+SplunkUniversalForwarder\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ \-localserver\ )</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+system32\\+rundll32\.exe"\ "C:\\+Program\ Files\\+McAfee\\+MSC\\+mcmscins\.dll",DllUninstallFunction\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+system32\\+rundll32\.exe"\ /uninstall\ /longpath\ "C:\\+Program\ Files\\+McAfee\\+MSC\\+mscrem\.inf)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Users\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Microsoft\\+EdgeUpdate\\+Install\\+\{</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+setup\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+Windows\\+Installer\\+MSI</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.tmp</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)zzzzInvokeManagedCustomActionOutOfProc</field>
    </rule>
    <rule id="900859" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_rundll32_dllregisterserver.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when 'DllRegisterServer' is called in the commandline and the image is not rundll32. This could mean that the 'rundll32' utility has been renamed in order to avoid detection-->
        <!--Date: 2022/08/22-->
        <!--Status: test-->
        <!--ID: 2569ed8c-1147-498a-9b8c-2ad3656b10ed-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Potential Renamed Rundll32 Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)DllRegisterServer</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
    </rule>
    <rule id="900860" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_winrm_awl_bypass.yml</info>
        <!--Sigma Rule Author: Julia Fomina, oscd.community-->
        <!--Description: Detects execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed)-->
        <!--Date: 2020/10/06-->
        <!--Status: test-->
        <!--ID: 074e0ded-6ced-4ebd-8b4d-53f55908119d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>AWL Bypass with Winrm.vbs and Malicious WsmPty.xsl/WsmTxt.xsl</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)winrm</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)format:pretty|format:"pretty"|format:"text"|format:text</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+SysWOW64\\+)</field>
    </rule>
    <rule id="900861" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_inline_base64_mz_header.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects encoded base64 MZ header in the commandline-->
        <!--Date: 2022/07/12-->
        <!--Status: test-->
        <!--ID: 22e58743-4ac8-4a9f-bf19-00a0428d8c5f-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Base64 MZ Header In CommandLine</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)TVqQAAMAAAAEAAAA|TVpQAAIAAAAEAA8A|TVqAAAEAAAAEABAA|TVoAAAAAAAAAAAAA|TVpTAQEAAAAEAAAA</field>
    </rule>
    <rule id="900862" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_ultravnc.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software,to establish an interactive command and control channel to target systems within networks-->
        <!--Date: 2022/10/02-->
        <!--Status: test-->
        <!--ID: 145322e4-0fd3-486b-81ca-9addc75736d8-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Use of UltraVNC Remote Access Software</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)VNCViewer</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)UltraVNC\ VNCViewer</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)UltraVNC</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)VNCViewer\.exe</field>
    </rule>
    <rule id="900863" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regsvr32_uncommon_extension.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a "regsvr32" execution where the DLL doesn't contain a common file extension.-->
        <!--Date: 2019/07/17-->
        <!--Status: test-->
        <!--ID: 50919691-7302-437f-8e10-1fe088afa145-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574</id>
            <id>attack.execution</id>
        </mitre>
        <description>Regsvr32 DLL Execution With Uncommon Extension</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+regsvr32\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)REGSVR32\.EXE</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.ax</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.cpl</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.dll</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.ocx</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)None</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)</field>
    </rule>
    <rule id="900864" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regsvr32_uncommon_extension.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a "regsvr32" execution where the DLL doesn't contain a common file extension.-->
        <!--Date: 2019/07/17-->
        <!--Status: test-->
        <!--ID: 50919691-7302-437f-8e10-1fe088afa145-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574</id>
            <id>attack.execution</id>
        </mitre>
        <description>Regsvr32 DLL Execution With Uncommon Extension</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+regsvr32\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)REGSVR32\.EXE</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.ppl</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.bav</field>
    </rule>
    <rule id="900865" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_seatbelt.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of the PUA/Recon tool Seatbelt via PE information of command line parameters-->
        <!--Date: 2022/10/18-->
        <!--Status: test-->
        <!--ID: 38646daa-e78f-4ace-9de0-55547b2d30da-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1526</id>
            <id>attack.t1087</id>
            <id>attack.t1083</id>
        </mitre>
        <description>PUA - Seatbelt Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Seatbelt\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Seatbelt\.exe</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Seatbelt</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ DpapiMasterKeys|\ InterestingProcesses|\ InterestingFiles|\ CertificateThumbprints|\ ChromiumBookmarks|\ ChromiumHistory|\ ChromiumPresence|\ CloudCredentials|\ CredEnum|\ CredGuard|\ FirefoxHistory|\ ProcessCreationEvents</field>
    </rule>
    <rule id="900866" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_cloudflared.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of a renamed "cloudflared" binary.-->
        <!--Date: 2023/12/20-->
        <!--Status: experimental-->
        <!--ID: e0c69ebd-b54f-4aed-8ae3-e3467843f3f0-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090.001</id>
        </mitre>
        <description>Renamed Cloudflared.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ tunnel\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:cleanup\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-config\ |\-connector\-id\ )</field>
    </rule>
    <rule id="900867" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_cloudflared.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of a renamed "cloudflared" binary.-->
        <!--Date: 2023/12/20-->
        <!--Status: experimental-->
        <!--ID: e0c69ebd-b54f-4aed-8ae3-e3467843f3f0-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090.001</id>
        </mitre>
        <description>Renamed Cloudflared.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ tunnel\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ run\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-config\ |\-credentials\-contents\ |\-credentials\-file\ |\-token\ )</field>
    </rule>
    <rule id="900868" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_cloudflared.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of a renamed "cloudflared" binary.-->
        <!--Date: 2023/12/20-->
        <!--Status: experimental-->
        <!--ID: e0c69ebd-b54f-4aed-8ae3-e3467843f3f0-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090.001</id>
        </mitre>
        <description>Renamed Cloudflared.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-url</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)tunnel</field>
    </rule>
    <rule id="900869" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_cloudflared.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of a renamed "cloudflared" binary.-->
        <!--Date: 2023/12/20-->
        <!--Status: experimental-->
        <!--ID: e0c69ebd-b54f-4aed-8ae3-e3467843f3f0-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090.001</id>
        </mitre>
        <description>Renamed Cloudflared.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)SHA256=2fb6c04c4f95fb8d158af94c137f90ac820716deaf88d8ebec956254e046cb29|SHA256=b3d21940a10fdef5e415ad70331ce257c24fe3bcf7722262302e0421791f87e8|SHA256=1fbd8362b2d2d2e6a5750ae3db69cd1815e6c1d31da48a98b796450971a8e039|SHA256=0409c9b12f9d0eda86e461ed9bdabeefb00172b26322079681a0bdf48e68dc28|SHA256=7cfb411d04bac42ef93d1f0c93c0a481e38c6f4612b97ae89d4702595988edc7|SHA256=5b3c2d846ab162dc6bc595cce3a49de5731afde5d6060be7066d21b013a28373|SHA256=ce95df7f69664c3df19b76028e115931919a71517b776da7b42d353e2ff4a670|SHA256=1293525a19cfe3bc8296b62fbfe19f083632ed644a1c18c10b045a1d3030d81a|SHA256=af2b9161cfcb654b16408cd6b098afe9d1fb61a037d18d7090a119d4c0c8e0f0|SHA256=39ddceb56a15798826a5fc4892fa2b474c444bb4d7a8bf2fa95e41cab10fa7a1|SHA256=ccd11f2328023a0e7929e845d5b6e7bc783fb4650d65faef3ae090239d4bbce2|SHA256=b6e5c5d2567ae8c69cc012ebcae30e6c9b5359d64a58d17ba75ec89f8bce71ac|SHA256=f813484ea441404f18caad96f28138e8aaf0cb256163c09c2ab8a3acab87f69f|SHA256=fc4a0802ab9c7409b892ca00636bec61e2acfc911bccfdeb9978b8ab5a2f828d|SHA256=083150724b49604c8765c1ba19541fa260b133be0acb0647fcd936d81f054499|SHA256=44303d6572956f28a0f2e4b188934fb9874f2584f5c81fa431a463cfbf28083b|SHA256=5d38c46032a58e28ae5f7d174d8761ec3d64d186677f3ec53af5f51afb9bfd2f|SHA256=e1e70fa42059911bc6685fafef957f9a73fc66f214d0704a9b932683a5204032|SHA256=c01356092a365b84f84f0e66870bd1a05ba3feb53cafd973fa5fea2534bee234|SHA256=b3f9c06151e30ee43d39e788a79cd918a314f24e04fe87f3de8272a2057b624f|SHA256=cd81b2792f0739f473c31c9cb7cf2313154bfa28b839975802b90e8790bb5058|SHA256=9ec7e6c8e1bfd883663d8d9d62c9e4f9ae373b731407181e32491b27a7218a2c|SHA256=c2cfd23fdc6c0e1b1ffa0e545cbe556f18d11b362b4a89ba0713f6ab01c4827f|SHA256=53f8adbd76c0eb16f5e43cadde422474d8a06f9c8f959389c1930042ad8beaa5|SHA256=648c8d2f8001c113d2986dd00b7bbd181593d462bef73522cee212c4f71f95b3|SHA256=ae047e2095e46c3f9c518b2be67ec753f4f0aad23b261a361fcb6144dcdb63b4|SHA256=3153d2baa462978dd22ab33d1c2274ecc88c200225d6a3327f98d5b752d08f5c|SHA256=f49cde976e628012c9db73e1c8d76081944ecf2297cdafeb78bb13290da274c4|SHA256=d2513e58bb03ccc83affde685c6ef987924c37ce6707d8e9857e2524b0d7e90f|SHA256=bb67c7623ba92fe64ffd9816b8d5b3b1ea3013960a30bd4cf6e295b3eb5b1bad|SHA256=b34b3c3a91e3165d1481f0b3ec23eab93a1cfba94345a6cbfe5b18ddbd48eac7|SHA256=f7848034e010d55f15e474ca998f96391e320ff29b00cfcc4c5e536529703e75|SHA256=b6fc9493778cbe3bfc062d73f5cc604bc0ff058bc5e5dc6aac87f3a4008b54b6|SHA256=f5c5e962577e2293c4ad10603816dce7cc273585969615fbf4e4bfa9eaff1688|SHA256=d14c52d9220b606f428a8fe9f7c108b0d6f14cf71e7384749e98e6a95962e68f|SHA256=d3a0e1a79158f3985cd49607ebe0cdfcc49cb9af96b8f43aefd0cdfe2f22e663|SHA256=2fbbfc8299537ff80cadf9d0e27c223fe0ccb9052bf9d8763ad717bbfa521c77|SHA256=19074674c6fbdaa573b3081745e5e26144fdf7a086d14e0e220d1814f1f13078</field>
    </rule>
    <rule id="900870" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_cloudflared.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of a renamed "cloudflared" binary.-->
        <!--Date: 2023/12/20-->
        <!--Status: experimental-->
        <!--ID: e0c69ebd-b54f-4aed-8ae3-e3467843f3f0-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090.001</id>
        </mitre>
        <description>Renamed Cloudflared.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cloudflared\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cloudflared\-windows\-386\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cloudflared\-windows\-amd64\.exe)$</field>
    </rule>
    <rule id="900871" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_image_missing.yml</info>
        <!--Sigma Rule Author: Max Altgelt (Nextron Systems)-->
        <!--Description: Checks whether the image specified in a process creation event is not a full, absolute path (caused by process ghosting or other unorthodox methods to start a process)-->
        <!--Date: 2021/12/09-->
        <!--Status: test-->
        <!--ID: 71158e3f-df67-472b-930e-7d287acaa3e1-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Execution Of Non-Existing File</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)None</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\-</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)System</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)Registry</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)MemCompression</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)vmmem</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Registry</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)MemCompression</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)vmmem</field>
    </rule>
    <rule id="900872" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sdclt_child_process.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: A General detection for sdclt spawning new processes. This could be an indicator of sdclt being used for bypass UAC techniques.-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: da2738f2-fadb-4394-afa7-0a0674885afa-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Sdclt Child Processes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+sdclt\.exe)$</field>
    </rule>
    <rule id="900873" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dllhost_no_cli_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a "dllhost" process spawning with no commandline arguments which is very rare to happen and could indicate process injection activity or malware mimicking similar system processes.-->
        <!--Date: 2022/06/27-->
        <!--Status: experimental-->
        <!--ID: e7888eb1-13b0-4616-bd99-4bc0c2b054b9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1055</id>
        </mitre>
        <description>Dllhost.EXE Execution Anomaly</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+dllhost\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)dllhost\.exe|dllhost</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="900874" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_winrm_susp_child_process.yml</info>
        <!--Sigma Rule Author: Andreas Hunkeler (@Karneades), Markus Neis-->
        <!--Description: Detects suspicious processes including shells spawnd from WinRM host process-->
        <!--Date: 2021/05/20-->
        <!--Status: test-->
        <!--ID: 5cc2cda8-f261-4d88-a2de-e9e193c86716-->
        <mitre>
            <id>attack.t1190</id>
            <id>attack.initial_access</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Suspicious Processes Spawned by WinRM</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+wsmprovhost\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+sh\.exe|\\+bash\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+wsl\.exe|\\+schtasks\.exe|\\+certutil\.exe|\\+whoami\.exe|\\+bitsadmin\.exe)$</field>
    </rule>
    <rule id="900875" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmiprvse_spawning_process.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects WmiPrvSE spawning a process-->
        <!--Date: 2019/08/15-->
        <!--Status: stable-->
        <!--ID: d21374ff-f574-44a7-9998-4a8c8bf33d7d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
        </mitre>
        <description>WmiPrvSE Spawned A Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+WmiPrvSe\.exe)$</field>
        <field name="win.eventdata.logonId" negate="yes" type="pcre2">(?i)0x3e7</field>
        <field name="win.eventdata.logonId" negate="yes" type="pcre2">(?i)null</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)AUTHORI</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)AUTORI</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WmiPrvSE\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WerFault\.exe)$</field>
        <field name="win.eventdata.logonId" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="900876" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_desktopimgdownldr_remote_file_download.yml</info>
        <!--Sigma Rule Author: Tim Rauch-->
        <!--Description: Detects the desktopimgdownldr utility being used to download a remote file. An adversary may use desktopimgdownldr to download arbitrary files as an alternative to certutil.-->
        <!--Date: 2022/09/27-->
        <!--Status: test-->
        <!--ID: 214641c2-c579-4ecb-8427-0cf19df6842e-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Remote File Download Via Desktopimgdownldr Utility</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+desktopimgdownldr\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+desktopimgdownldr\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/lockscreenurl:http</field>
    </rule>
    <rule id="900877" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_changepk_slui.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects an UAC bypass that uses changepk.exe and slui.exe (UACMe 61)-->
        <!--Date: 2021/08/23-->
        <!--Status: test-->
        <!--ID: 503d581c-7df0-4bbe-b9be-5840c0ecc1fc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using ChangePK and SLUI</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+changepk\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+slui\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
    </rule>
    <rule id="900878" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_parent_explorer.yml</info>
        <!--Sigma Rule Author: CD_ROM_-->
        <!--Description: Detects execution of "rundll32.exe" with a parent process of Explorer.exe. This has been observed by variants of Raspberry Robin, as first reported by Red Canary.-->
        <!--Date: 2022/05/21-->
        <!--Status: experimental-->
        <!--ID: 1723e720-616d-4ddc-ab02-f7e3685a4713-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Rundll32 Spawned Via Explorer.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+explorer\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)RUNDLL32\.EXE</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ C:\\+Windows\\+System32\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ \-localserver\ 22d8c27b\-47a1\-48d1\-ad08\-7da7abd79617)$</field>
    </rule>
    <rule id="900879" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_taskmgr_susp_child_process.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the creation of a process from Windows task manager-->
        <!--Date: 2018/03/13-->
        <!--Status: test-->
        <!--ID: 3d7679bd-0c00-440c-97b0-3f204273e6c7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Taskmgr as Parent</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+taskmgr\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+resmon\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+mmc\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+taskmgr\.exe)$</field>
    </rule>
    <rule id="900880" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_userinit_child.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Samir Bousseaden (idea)-->
        <!--Description: Detects a suspicious child process of userinit-->
        <!--Date: 2019/06/17-->
        <!--Status: test-->
        <!--ID: b655a06a-31c0-477a-95c2-3726b83d649d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1055</id>
        </mitre>
        <description>Suspicious Userinit Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+userinit\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+netlogon\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+explorer\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="yes" type="pcre2">(?i)explorer\.exe</field>
    </rule>
    <rule id="900881" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_susp_process_spawned_from_webserver.yml</info>
        <!--Sigma Rule Author: Thomas Patzke, Florian Roth (Nextron Systems), Zach Stanford @svch0st, Tim Shelton, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potentially suspicious processes being spawned by a web server process which could be the result of a successfully placed web shell or exploitation
-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 8202070f-edeb-4d31-a010-a26c72ac5600-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1190</id>
        </mitre>
        <description>Suspicious Process By Web Server Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+caddy\.exe|\\+httpd\.exe|\\+nginx\.exe|\\+php\-cgi\.exe|\\+php\.exe|\\+tomcat\.exe|\\+UMWorkerProcess\.exe|\\+w3wp\.exe|\\+ws_TomcatService\.exe)$</field>
    </rule>
    <rule id="900882" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_susp_process_spawned_from_webserver.yml</info>
        <!--Sigma Rule Author: Thomas Patzke, Florian Roth (Nextron Systems), Zach Stanford @svch0st, Tim Shelton, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potentially suspicious processes being spawned by a web server process which could be the result of a successfully placed web shell or exploitation
-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 8202070f-edeb-4d31-a010-a26c72ac5600-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1190</id>
        </mitre>
        <description>Suspicious Process By Web Server Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+java\.exe|\\+javaw\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\-tomcat\-|\\+tomcat</field>
    </rule>
    <rule id="900883" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_susp_process_spawned_from_webserver.yml</info>
        <!--Sigma Rule Author: Thomas Patzke, Florian Roth (Nextron Systems), Zach Stanford @svch0st, Tim Shelton, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potentially suspicious processes being spawned by a web server process which could be the result of a successfully placed web shell or exploitation
-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 8202070f-edeb-4d31-a010-a26c72ac5600-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1190</id>
        </mitre>
        <description>Suspicious Process By Web Server Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+java\.exe|\\+javaw\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)CATALINA_HOME|catalina\.home|catalina\.jar</field>
    </rule>
    <rule id="900884" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_susp_process_spawned_from_webserver.yml</info>
        <!--Sigma Rule Author: Thomas Patzke, Florian Roth (Nextron Systems), Zach Stanford @svch0st, Tim Shelton, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potentially suspicious processes being spawned by a web server process which could be the result of a successfully placed web shell or exploitation
-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 8202070f-edeb-4d31-a010-a26c72ac5600-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1190</id>
        </mitre>
        <description>Suspicious Process By Web Server Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+arp\.exe|\\+at\.exe|\\+bash\.exe|\\+bitsadmin\.exe|\\+certutil\.exe|\\+cmd\.exe|\\+cscript\.exe|\\+dsget\.exe|\\+hostname\.exe|\\+nbtstat\.exe|\\+net\.exe|\\+net1\.exe|\\+netdom\.exe|\\+netsh\.exe|\\+nltest\.exe|\\+ntdutil\.exe|\\+powershell_ise\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+qprocess\.exe|\\+query\.exe|\\+qwinsta\.exe|\\+reg\.exe|\\+rundll32\.exe|\\+sc\.exe|\\+sh\.exe|\\+wmic\.exe|\\+wscript\.exe|\\+wusa\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+java\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:Windows\\+system32\\+cmd\.exe\ /c\ C:\\+ManageEngine\\+ADManager\ "Plus\\+ES\\+bin\\+elasticsearch\.bat\ \-Enode\.name=RMP\-NODE1\ \-pelasticsearch\-pid\.txt)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+java\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)sc\ query</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)ADManager\ Plus</field>
    </rule>
    <rule id="900885" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sysmoneop.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of the PoC that can be used to exploit Sysmon CVE-2022-41120-->
        <!--Date: 2022/12/04-->
        <!--Status: test-->
        <!--ID: 8a7e90c5-fe6e-45dc-889e-057fe4378bd9-->
        <mitre>
            <id>cve.2022.41120</id>
            <id>attack.t1068</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>HackTool - SysmonEOP Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+SysmonEOP\.exe)$</field>
    </rule>
    <rule id="900886" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sysmoneop.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of the PoC that can be used to exploit Sysmon CVE-2022-41120-->
        <!--Date: 2022/12/04-->
        <!--Status: test-->
        <!--ID: 8a7e90c5-fe6e-45dc-889e-057fe4378bd9-->
        <mitre>
            <id>cve.2022.41120</id>
            <id>attack.t1068</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>HackTool - SysmonEOP Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=22F4089EB8ABA31E1BB162C6D9BF72E5|IMPHASH=5123FA4C4384D431CD0D893EEB49BBEC</field>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)22f4089eb8aba31e1bb162c6d9bf72e5|5123fa4c4384d431cd0d893eeb49bbec</field>
    </rule>
    <rule id="900887" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_sysinternals_procdump.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of a renamed ProcDump executable often used by attackers or malware-->
        <!--Date: 2019/11/18-->
        <!--Status: test-->
        <!--ID: 4a0b2c7e-7cb2-495d-8b63-5f268e7bfd67-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Renamed ProcDump Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)procdump</field>
    </rule>
    <rule id="900888" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_sysinternals_procdump.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of a renamed ProcDump executable often used by attackers or malware-->
        <!--Date: 2019/11/18-->
        <!--Status: test-->
        <!--ID: 4a0b2c7e-7cb2-495d-8b63-5f268e7bfd67-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Renamed ProcDump Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-ma\ |\ /ma\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-accepteula\ |\ /accepteula\ )</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+procdump\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+procdump64\.exe)$</field>
    </rule>
    <rule id="900889" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vscode_tunnel_renamed_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects renamed Visual Studio Code tunnel execution. Attackers can abuse this functionality to establish a C2 channel-->
        <!--Date: 2023/09/28-->
        <!--Status: experimental-->
        <!--ID: 2cf29f11-e356-4f61-98c0-1bdb9393d6da-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Renamed Visual Studio Code Tunnel Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)None</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.exe\ tunnel)$</field>
    </rule>
    <rule id="900890" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vscode_tunnel_renamed_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects renamed Visual Studio Code tunnel execution. Attackers can abuse this functionality to establish a C2 channel-->
        <!--Date: 2023/09/28-->
        <!--Status: experimental-->
        <!--ID: 2cf29f11-e356-4f61-98c0-1bdb9393d6da-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Renamed Visual Studio Code Tunnel Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe\ tunnel</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-\-name\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-accept\-server\-license\-terms</field>
    </rule>
    <rule id="900891" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vscode_tunnel_renamed_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects renamed Visual Studio Code tunnel execution. Attackers can abuse this functionality to establish a C2 channel-->
        <!--Date: 2023/09/28-->
        <!--Status: experimental-->
        <!--ID: 2cf29f11-e356-4f61-98c0-1bdb9393d6da-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Renamed Visual Studio Code Tunnel Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:tunnel\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)service</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)internal\-run</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)tunnel\-service\.log</field>
    </rule>
    <rule id="900892" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vscode_tunnel_renamed_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects renamed Visual Studio Code tunnel execution. Attackers can abuse this functionality to establish a C2 channel-->
        <!--Date: 2023/09/28-->
        <!--Status: experimental-->
        <!--ID: 2cf29f11-e356-4f61-98c0-1bdb9393d6da-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Renamed Visual Studio Code Tunnel Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+code\-tunnel\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+code\.exe)$</field>
    </rule>
    <rule id="900893" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vscode_tunnel_renamed_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects renamed Visual Studio Code tunnel execution. Attackers can abuse this functionality to establish a C2 channel-->
        <!--Date: 2023/09/28-->
        <!--Status: experimental-->
        <!--ID: 2cf29f11-e356-4f61-98c0-1bdb9393d6da-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Renamed Visual Studio Code Tunnel Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)(?:\ tunnel)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/d\ /c\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+servers\\+Stable\-</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)code\-server\.cmd</field>
    </rule>
    <rule id="900894" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vscode_tunnel_renamed_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects renamed Visual Studio Code tunnel execution. Attackers can abuse this functionality to establish a C2 channel-->
        <!--Date: 2023/09/28-->
        <!--Status: experimental-->
        <!--ID: 2cf29f11-e356-4f61-98c0-1bdb9393d6da-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Renamed Visual Studio Code Tunnel Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+code\-tunnel\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+code\.exe)$</field>
    </rule>
    <rule id="900895" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_progname.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious patterns in program names or folders that are often found in malicious samples or hacktools-->
        <!--Date: 2022/02/11-->
        <!--Status: test-->
        <!--ID: efdd8dd5-cee8-4e59-9390-7d4d5e4dd6f6-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Suspicious Program Names</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+CVE\-202|\\+CVE202</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+poc\.exe|\\+artifact\.exe|\\+artifact64\.exe|\\+artifact_protected\.exe|\\+artifact32\.exe|\\+artifact32big\.exe|obfuscated\.exe|obfusc\.exe|\\+meterpreter)$</field>
    </rule>
    <rule id="900896" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_progname.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious patterns in program names or folders that are often found in malicious samples or hacktools-->
        <!--Date: 2022/02/11-->
        <!--Status: test-->
        <!--ID: efdd8dd5-cee8-4e59-9390-7d4d5e4dd6f6-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Suspicious Program Names</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)inject\.ps1|Invoke\-CVE|pupy\.ps1|payload\.ps1|beacon\.ps1|PowerView\.ps1|bypass\.ps1|obfuscated\.ps1|obfusc\.ps1|obfus\.ps1|obfs\.ps1|evil\.ps1|MiniDogz\.ps1|_enc\.ps1|\\+shell\.ps1|\\+rshell\.ps1|revshell\.ps1|\\+av\.ps1|\\+av_test\.ps1|adrecon\.ps1|mimikatz\.ps1|\\+PowerUp_|powerup\.ps1|\\+Temp\\+a\.ps1|\\+Temp\\+p\.ps1|\\+Temp\\+1\.ps1|Hound\.ps1|encode\.ps1|powercat\.ps1</field>
    </rule>
    <rule id="900897" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_msdeploy.yml</info>
        <!--Sigma Rule Author: Beyu Denis, oscd.community-->
        <!--Description: Detects file execution using the msdeploy.exe lolbin-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: 646bc99f-6682-4b47-a73a-17b1b64c9d34-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Execute Files with Msdeploy.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)verb:sync</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-source:RunCommand</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-dest:runCommand</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+msdeploy\.exe)$</field>
    </rule>
    <rule id="900898" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_arbitrary_shell_execution_via_settingcontent.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: The .SettingContent-ms file type was introduced in Windows 10 and allows a user to create "shortcuts" to various Windows 10 setting pages. These files are simply XML and contain paths to various Windows 10 settings binaries.-->
        <!--Date: 2020/03/13-->
        <!--Status: test-->
        <!--ID: 24de4f3b-804c-4165-b442-5a06a2302c7e-->
        <mitre>
            <id>attack.t1204</id>
            <id>attack.t1566.001</id>
            <id>attack.execution</id>
            <id>attack.initial_access</id>
        </mitre>
        <description>Arbitrary Shell Command Execution Via Settingcontent-Ms</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.SettingContent\-ms</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)immersivecontrolpanel</field>
    </rule>
    <rule id="900899" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_pester_1.yml</info>
        <!--Sigma Rule Author: Julia Fomina, oscd.community-->
        <!--Description: Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)-->
        <!--Date: 2020/10/08-->
        <!--Status: test-->
        <!--ID: 59e938ff-0d6d-4dc3-b13f-36cc28734d4e-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>Execute Code with Pester.bat</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Pester</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Get\-Help</field>
    </rule>
    <rule id="900900" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_pester_1.yml</info>
        <!--Sigma Rule Author: Julia Fomina, oscd.community-->
        <!--Description: Detects code execution via Pester.bat (Pester - Powershell Modulte for testing)-->
        <!--Date: 2020/10/08-->
        <!--Status: test-->
        <!--ID: 59e938ff-0d6d-4dc3-b13f-36cc28734d4e-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>Execute Code with Pester.bat</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)pester</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i);</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)help|\\+.</field>
    </rule>
    <rule id="900901" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_binary.yml</info>
        <!--Sigma Rule Author: Matthew Green @mgreen27, Ecco, James Pemberton @4A616D6573, oscd.community, Andreas Hunkeler (@Karneades)-->
        <!--Description: Detects the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.-->
        <!--Date: 2019/06/15-->
        <!--Status: test-->
        <!--ID: 36480ae1-a1cb-4eaa-a0d6-29801d7e9142-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Potential Defense Evasion Via Binary Rename</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Cmd\.Exe|CONHOST\.EXE|7z\.exe|WinRAR\.exe|wevtutil\.exe|net\.exe|net1\.exe|netsh\.exe|InstallUtil\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+conhost\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+7z\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WinRAR\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+wevtutil\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+net\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+net1\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+netsh\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+InstallUtil\.exe)$</field>
    </rule>
    <rule id="900902" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_without_parameters.yml</info>
        <!--Sigma Rule Author: Bartlomiej Czyz, Relativity-->
        <!--Description: Detects rundll32 execution without parameters as observed when running Metasploit windows/smb/psexec exploit module-->
        <!--Date: 2021/01/31-->
        <!--Status: test-->
        <!--ID: 5bb68627-3198-40ca-b458-49f973db8752-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1570</id>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>Rundll32 Execution Without Parameters</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32\.exe|rundll32</field>
    </rule>
    <rule id="900903" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_hashcat.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against-->
        <!--Date: 2021/12/27-->
        <!--Status: test-->
        <!--ID: 39b31e81-5f5f-4898-9c0e-2160cfc0f9bf-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1110.002</id>
        </mitre>
        <description>HackTool - Hashcat Password Cracker Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+hashcat\.exe)$</field>
    </rule>
    <rule id="900904" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_hashcat.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Execute Hashcat.exe with provided SAM file from registry of Windows and Password list to crack against-->
        <!--Date: 2021/12/27-->
        <!--Status: test-->
        <!--ID: 39b31e81-5f5f-4898-9c0e-2160cfc0f9bf-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1110.002</id>
        </mitre>
        <description>HackTool - Hashcat Password Cracker Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-a\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-m\ 1000\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-r\ )</field>
    </rule>
    <rule id="900905" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_schtasks_env_folder.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects Schtask creations that point to a suspicious folder or an environment variable often used by malware-->
        <!--Date: 2022/02/21-->
        <!--Status: experimental-->
        <!--ID: 81325ce1-be01-4250-944f-b4789644556f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Suspicious Schtasks From Env Var Folder</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /create\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)%AppData%|\\+AppData\\+Local\\+|\\+AppData\\+Roaming\\+|%Public%|\\+Users\\+Public|C:\\+Windows\\+Temp|C:\\+Perflogs</field>
    </rule>
    <rule id="900906" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_schtasks_env_folder.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects Schtask creations that point to a suspicious folder or an environment variable often used by malware-->
        <!--Date: 2022/02/21-->
        <!--Status: experimental-->
        <!--ID: 81325ce1-be01-4250-944f-b4789644556f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Suspicious Schtasks From Env Var Folder</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)(?:\\+svchost\.exe\ \-k\ netsvcs\ \-p\ \-s\ Schedule)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)%Public%|\\+Users\\+Public|C:\\+Windows\\+Temp|C:\\+Perflogs</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)update_task\.xml</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/Create\ /TN\ TVInstallRestore\ /TR</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)unattended\.ini</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/Create\ /Xml\ "C:\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+\.CR\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Avira_Security_Installation\.xml</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/Create\ /F\ /TN</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:/Xml\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+is\-</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Avira_</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.tmp\\+UpdateFallbackTask\.xml</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.tmp\\+WatchdogServiceControlManagerTimeout\.xml</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.tmp\\+SystrayAutostart\.xml</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.tmp\\+MaintenanceTask\.xml</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:/Create\ /TN\ "klcp_update"\ /XML\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+klcp_update_task\.xml</field>
    </rule>
    <rule id="900907" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_fsharp_interpreters.yml</info>
        <!--Sigma Rule Author: Christopher Peacock @SecurePeacock, SCYTHE @scythe_io-->
        <!--Description: The FSharp Interpreters, FsiAnyCpu.exe and FSi.exe, can be used for AWL bypass and is listed in Microsoft recommended block rules.-->
        <!--Date: 2022/06/02-->
        <!--Status: test-->
        <!--ID: b96b2031-7c17-4473-afe7-a30ce714db29-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Use of FSharp Interpreters</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+fsianycpu\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)fsianycpu\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+fsi\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)fsi\.exe</field>
    </rule>
    <rule id="900908" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Tim Shelton-->
        <!--Description: Detects potentially suspicious child processes spawned by PowerShell-->
        <!--Date: 2022/04/26-->
        <!--Status: experimental-->
        <!--ID: e4b6d2a7-d8a4-4f19-acbd-943c16d90647-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Potentially Suspicious PowerShell Child Processes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+powershell_ise\.exe|\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+bash\.exe|\\+bitsadmin\.exe|\\+certutil\.exe|\\+cscript\.exe|\\+forfiles\.exe|\\+hh\.exe|\\+mshta\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+schtasks\.exe|\\+scrcons\.exe|\\+scriptrunner\.exe|\\+sh\.exe|\\+wmic\.exe|\\+wscript\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\\+Program\ Files\\+Amazon\\+WorkspacesConfig\\+Scripts\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+Program\ Files\\+Amazon\\+WorkspacesConfig\\+Scripts\\+</field>
    </rule>
    <rule id="900909" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_bitsadmin_download.yml</info>
        <!--Sigma Rule Author: Michael Haag, FPT.EagleEye-->
        <!--Description: Detects usage of bitsadmin downloading a file-->
        <!--Date: 2017/03/09-->
        <!--Status: test-->
        <!--ID: d059842b-6b9d-4ed1-b5c3-5b89143c6ede-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1197</id>
            <id>attack.s0190</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>File Download Via Bitsadmin</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+bitsadmin\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)bitsadmin\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /transfer\ )</field>
    </rule>
    <rule id="900910" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_evil_winrm.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may use Valid Accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.-->
        <!--Date: 2022/01/07-->
        <!--Status: test-->
        <!--ID: a197e378-d31b-41c0-9635-cfdf1c1bb423-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.006</id>
        </mitre>
        <description>HackTool - WinRM Access Via Evil-WinRM</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ruby\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-i\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-u\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-p\ )</field>
    </rule>
    <rule id="900911" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_idiagnostic_profile.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the "IDiagnosticProfileUAC" UAC bypass technique-->
        <!--Date: 2022/07/03-->
        <!--Status: test-->
        <!--ID: 4cbef972-f347-4170-b62a-8253f6168e6d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using IDiagnostic Profile</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+DllHost\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\ /Processid:\{12C21EA7\-2EB8\-4B55\-9249\-AC243DA8C666\}</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
    </rule>
    <rule id="900912" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_impacket_lateral_movement.yml</info>
        <!--Sigma Rule Author: Ecco, oscd.community, Jonhnathan Ribeiro, Tim Rauch-->
        <!--Description: Detects wmiexec/dcomexec/atexec/smbexec from Impacket framework-->
        <!--Date: 2019/09/03-->
        <!--Status: stable-->
        <!--ID: 10c14723-61c7-4c75-92ca-9af245723ad2-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.003</id>
        </mitre>
        <description>HackTool - Potential Impacket Lateral Movement Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+wmiprvse\.exe|\\+mmc\.exe|\\+explorer\.exe|\\+services\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cmd\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/Q</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+127\.0\.0\.1\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\&amp;1</field>
    </rule>
    <rule id="900913" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_impacket_lateral_movement.yml</info>
        <!--Sigma Rule Author: Ecco, oscd.community, Jonhnathan Ribeiro, Tim Rauch-->
        <!--Description: Detects wmiexec/dcomexec/atexec/smbexec from Impacket framework-->
        <!--Date: 2019/09/03-->
        <!--Status: stable-->
        <!--ID: 10c14723-61c7-4c75-92ca-9af245723ad2-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.003</id>
        </mitre>
        <description>HackTool - Potential Impacket Lateral Movement Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)svchost\.exe\ \-k\ netsvcs|taskeng\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cmd\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/C</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Windows\\+Temp\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\&amp;1</field>
    </rule>
    <rule id="900914" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_x509enrollment.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect use of X509Enrollment-->
        <!--Date: 2022/12/23-->
        <!--Status: test-->
        <!--ID: 114de787-4eb2-48cc-abdb-c0b449f93ea4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1553.004</id>
        </mitre>
        <description>Suspicious X509Enrollment - Process Creation</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)X509Enrollment\.CBinaryConverter|884e2002\-217d\-11da\-b2a4\-000e7bbb2b09</field>
    </rule>
    <rule id="900915" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wsl_child_processes_anomalies.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects uncommon or suspicious child processes spawning from a WSL process. This could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL-->
        <!--Date: 2023/01/23-->
        <!--Status: experimental-->
        <!--ID: 2267fe65-0681-42ad-9a6d-46553d3f3480-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1202</id>
        </mitre>
        <description>WSL Child Process Anomaly</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+wsl\.exe|\\+wslhost\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+calc\.exe|\\+cmd\.exe|\\+cscript\.exe|\\+mshta\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+wscript\.exe)$</field>
    </rule>
    <rule id="900916" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wsl_child_processes_anomalies.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects uncommon or suspicious child processes spawning from a WSL process. This could indicate an attempt to evade parent/child relationship detections or persistence attempts via cron using WSL-->
        <!--Date: 2023/01/23-->
        <!--Status: experimental-->
        <!--ID: 2267fe65-0681-42ad-9a6d-46553d3f3480-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1202</id>
        </mitre>
        <description>WSL Child Process Anomaly</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+wsl\.exe|\\+wslhost\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+|C:\\+Users\\+Public\\+|C:\\+Windows\\+Temp\\+|C:\\+Temp\\+|\\+Downloads\\+|\\+Desktop\\+</field>
    </rule>
    <rule id="900917" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_odbcconf_response_file_susp.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of "odbcconf" with the "-f" flag in order to load a response file with a non-".rsp" extension.-->
        <!--Date: 2023/05/22-->
        <!--Status: experimental-->
        <!--ID: 2d32dd6f-3196-4093-b9eb-1ad8ab088ca5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.008</id>
        </mitre>
        <description>Suspicious Response File Execution Via Odbcconf.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+odbcconf\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)odbcconf\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-f\ |\ /f\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.rsp</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+runonce\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+odbcconf\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.exe\ /E\ /F\ "C:\\+WINDOWS\\+system32\\+odbcconf\.tmp"</field>
    </rule>
    <rule id="900918" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_registry_ie_security_zone_protocol_defaults_downgrade.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects changes to Internet Explorer's (IE / Windows Internet properties) ZoneMap configuration of the "HTTP" and "HTTPS" protocols to point to the "My Computer" zone. This allows downloaded files from the Internet to be granted the same level of trust as files stored locally.
-->
        <!--Date: 2023/09/05-->
        <!--Status: experimental-->
        <!--ID: 10344bb3-7f65-46c2-b915-2d00d47be5b0-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>IE ZoneMap Setting Downgraded To MyComputer Zone For HTTP Protocols Via CLI</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Microsoft\\+Windows\\+CurrentVersion\\+Internet\ Settings\\+ZoneMap\\+ProtocolDefaults</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ 0</field>
    </rule>
    <rule id="900919" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ntfs_short_name_path_use_image.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali-->
        <!--Description: Detect use of the Windows 8.3 short name. Which could be used as a method to avoid Image detection-->
        <!--Date: 2022/08/07-->
        <!--Status: experimental-->
        <!--ID: a96970af-f126-420d-90e1-d37bf25e50e1-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Use Short Name Path in Image</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\~1\\+|\~2\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+Dism\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+cleanmgr\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+WebEx\\+WebexHost\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+thor\\+thor64\.exe)$</field>
        <field name="win.eventdata.product" negate="yes" type="pcre2">(?i)InstallShield\ \(R\)</field>
        <field name="win.eventdata.description" negate="yes" type="pcre2">(?i)InstallShield\ \(R\)\ Setup\ Engine</field>
        <field name="win.eventdata.company" negate="yes" type="pcre2">(?i)InstallShield\ Software\ Corporation</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Temp\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\~1\\+unzip\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\~1\\+7zG\.exe)$</field>
    </rule>
    <rule id="900920" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_gup_arbitrary_binary_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of the Notepad++ updater (gup) to launch other commands or executables-->
        <!--Date: 2022/06/10-->
        <!--Status: experimental-->
        <!--ID: d65aee4d-2292-4cea-b832-83accd6cfa43-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Arbitrary Binary Execution Using GUP Utility</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+gup\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+explorer\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+explorer\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+Notepad\+\+\\+notepad\+\+\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+Notepad\+\+\\+updater\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="900921" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sc_create_service.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects the creation of a new service using the "sc.exe" utility.-->
        <!--Date: 2023/02/20-->
        <!--Status: test-->
        <!--ID: 85ff530b-261d-48c6-a441-facaa2e81e48-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>New Service Creation Using Sc.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+sc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)create</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)binPath</field>
    </rule>
    <rule id="900922" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_diskshadow_child_process_susp.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potentially suspicious child processes of "Diskshadow.exe". This could be an attempt to bypass parent/child relationship detection or application whitelisting rules.-->
        <!--Date: 2023/09/15-->
        <!--Status: experimental-->
        <!--ID: 9f546b25-5f12-4c8d-8532-5893dcb1e4b8-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Potentially Suspicious Child Process Of DiskShadow.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+diskshadow\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+certutil\.exe|\\+cscript\.exe|\\+mshta\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+wscript\.exe)$</field>
    </rule>
    <rule id="900923" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_certify.yml</info>
        <!--Sigma Rule Author: pH-T (Nextron Systems)-->
        <!--Description: Detects Certify a tool for Active Directory certificate abuse based on PE metadata characteristics and common command line arguments.-->
        <!--Date: 2023/04/17-->
        <!--Status: experimental-->
        <!--ID: 762f2482-ff21-4970-8939-0aa317a886bb-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.credential_access</id>
            <id>attack.t1649</id>
        </mitre>
        <description>HackTool - Certify Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Certify\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Certify\.exe</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Certify</field>
    </rule>
    <rule id="900924" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_gup_download.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of the Notepad++ updater (gup) from a process other than Notepad++ to download files.-->
        <!--Date: 2022/06/10-->
        <!--Status: experimental-->
        <!--ID: 44143844-0631-49ab-97a0-96387d6b2d7c-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>File Download Using Notepad++ GUP Utility</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+GUP\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)gup\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-unzipTo\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+notepad\+\+\.exe)$</field>
    </rule>
    <rule id="900925" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_browsers_chromium_headless_exec.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of Chromium based browser in headless mode-->
        <!--Date: 2023/09/12-->
        <!--Status: test-->
        <!--ID: ef9dcfed-690c-4c5d-a9d1-482cd422225c-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Browser Execution In Headless Mode</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+brave\.exe|\\+chrome\.exe|\\+msedge\.exe|\\+opera\.exe|\\+vivaldi\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-headless</field>
    </rule>
    <rule id="900926" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_imagingdevices_unusual_parents.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity-->
        <!--Date: 2022/09/27-->
        <!--Status: test-->
        <!--ID: f11f2808-adb4-46c0-802a-8660db50fa99-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
        </mitre>
        <description>ImagingDevices Unusual Parent/Child Processes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+WmiPrvSE\.exe|\\+svchost\.exe|\\+dllhost\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ImagingDevices\.exe)$</field>
    </rule>
    <rule id="900927" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_imagingdevices_unusual_parents.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects unusual parent or children of the ImagingDevices.exe (Windows Contacts) process as seen being used with Bumblebee activity-->
        <!--Date: 2022/09/27-->
        <!--Status: test-->
        <!--ID: f11f2808-adb4-46c0-802a-8660db50fa99-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
        </mitre>
        <description>ImagingDevices Unusual Parent/Child Processes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+ImagingDevices\.exe)$</field>
    </rule>
    <rule id="900928" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_base64_mppreference.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects base64 encoded "MpPreference" PowerShell cmdlet code that tries to modifies or tamper with Windows Defender AV-->
        <!--Date: 2022/03/04-->
        <!--Status: test-->
        <!--ID: c6fb44c6-71f5-49e6-9462-1425d328aee3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Powershell Base64 Encoded MpPreference Cmdlet</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?:Add\-MpPreference\ |Set\-MpPreference\ |add\-mppreference\ |set\-mppreference\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)QQBkAGQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgA|EAZABkAC0ATQBwAFAAcgBlAGYAZQByAGUAbgBjAGUAIA|BAGQAZAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAA|UwBlAHQALQBNAHAAUAByAGUAZgBlAHIAZQBuAGMAZQAgA|MAZQB0AC0ATQBwAFAAcgBlAGYAZQByAGUAbgBjAGUAIA|TAGUAdAAtAE0AcABQAHIAZQBmAGUAcgBlAG4AYwBlACAA|YQBkAGQALQBtAHAAcAByAGUAZgBlAHIAZQBuAGMAZQAgA|EAZABkAC0AbQBwAHAAcgBlAGYAZQByAGUAbgBjAGUAIA|hAGQAZAAtAG0AcABwAHIAZQBmAGUAcgBlAG4AYwBlACAA|cwBlAHQALQBtAHAAcAByAGUAZgBlAHIAZQBuAGMAZQAgA|MAZQB0AC0AbQBwAHAAcgBlAGYAZQByAGUAbgBjAGUAIA|zAGUAdAAtAG0AcABwAHIAZQBmAGUAcgBlAG4AYwBlACAA</field>
    </rule>
    <rule id="900929" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_aspnet_compiler_susp_paths.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of "aspnet_compiler.exe" with potentially suspicious paths for compilation.-->
        <!--Date: 2023/08/14-->
        <!--Status: experimental-->
        <!--ID: 9f50fe98-fe5c-4a2d-86c7-fad7f63ed622-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1127</id>
        </mitre>
        <description>Potentially Suspicious ASP.NET Compilation Via AspNetCompiler</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\+Windows\\+Microsoft\.NET\\+Framework\\+|C:\\+Windows\\+Microsoft\.NET\\+Framework64\\+</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+aspnet_compiler\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Users\\+Public\\+|\\+AppData\\+Local\\+Temp\\+|\\+AppData\\+Local\\+Roaming\\+|:\\+Temp\\+|:\\+Windows\\+Temp\\+|:\\+Windows\\+System32\\+Tasks\\+|:\\+Windows\\+Tasks\\+</field>
    </rule>
    <rule id="900930" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_scrcons_susp_child_process.yml</info>
        <!--Sigma Rule Author: Sittikorn S-->
        <!--Description: Detects a suspicious child process of Script Event Consumer (scrcons.exe).-->
        <!--Date: 2021/06/21-->
        <!--Status: test-->
        <!--ID: f6d1dd2f-b8ce-40ca-bc23-062efb686b34-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
        </mitre>
        <description>Script Event Consumer Spawning Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+scrcons\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+svchost\.exe|\\+dllhost\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+wscript\.exe|\\+cscript\.exe|\\+schtasks\.exe|\\+regsvr32\.exe|\\+mshta\.exe|\\+rundll32\.exe|\\+msiexec\.exe|\\+msbuild\.exe)$</field>
    </rule>
    <rule id="900931" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mssql_veaam_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious child processes of the Veeam service process. This could indicate potential RCE or SQL Injection.-->
        <!--Date: 2023/05/04-->
        <!--Status: experimental-->
        <!--ID: d55b793d-f847-4eea-b59a-5ab09908ac90-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Suspicious Child Process Of Veeam Dabatase</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+sqlservr\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)VEEAMSQL</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+wsl\.exe|\\+wt\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-ex\ |bypass|cscript|DownloadString|http://|https://|mshta|regsvr32|rundll32|wscript|copy\ )</field>
    </rule>
    <rule id="900932" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mssql_veaam_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious child processes of the Veeam service process. This could indicate potential RCE or SQL Injection.-->
        <!--Date: 2023/05/04-->
        <!--Status: experimental-->
        <!--ID: d55b793d-f847-4eea-b59a-5ab09908ac90-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Suspicious Child Process Of Veeam Dabatase</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+sqlservr\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)VEEAMSQL</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+net\.exe|\\+net1\.exe|\\+netstat\.exe|\\+nltest\.exe|\\+ping\.exe|\\+tasklist\.exe|\\+whoami\.exe)$</field>
    </rule>
    <rule id="900933" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_netcat.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth (Nextron Systems)-->
        <!--Description: Detects execution of Netcat. Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network-->
        <!--Date: 2021/07/21-->
        <!--Status: experimental-->
        <!--ID: e31033fc-33f0-4020-9a16-faf9b31cbf08-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1095</id>
        </mitre>
        <description>PUA - Netcat Suspicious Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+nc\.exe|\\+ncat\.exe|\\+netcat\.exe)$</field>
    </rule>
    <rule id="900934" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_netcat.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth (Nextron Systems)-->
        <!--Description: Detects execution of Netcat. Adversaries may use a non-application layer protocol for communication between host and C2 server or among infected hosts within a network-->
        <!--Date: 2021/07/21-->
        <!--Status: experimental-->
        <!--ID: e31033fc-33f0-4020-9a16-faf9b31cbf08-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1095</id>
        </mitre>
        <description>PUA - Netcat Suspicious Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-lvp\ |\ \-lvnp|\ \-l\ \-v\ \-p\ |\ \-lv\ \-p\ |\ \-l\ \-\-proxy\-type\ http\ |\ \-vnl\ \-\-exec\ |\ \-vnl\ \-e\ |\ \-\-lua\-exec\ |\ \-\-sh\-exec\ )</field>
    </rule>
    <rule id="900935" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_mouselock_execution.yml</info>
        <!--Sigma Rule Author: Cian Heasley-->
        <!--Description: In Kaspersky's 2020 Incident Response Analyst Report they listed legitimate tool "Mouse Lock" as being used for both credential access and collection in security incidents.-->
        <!--Date: 2020/08/13-->
        <!--Status: test-->
        <!--ID: c9192ad9-75e5-43eb-8647-82a0a5b493e3-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.collection</id>
            <id>attack.t1056.002</id>
        </mitre>
        <description>PUA - Mouse Lock Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)Mouse\ Lock</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)Misc314</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Mouse\ Lock_</field>
    </rule>
    <rule id="900936" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_schtasks_creation_temp_folder.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the creation of scheduled tasks that involves a temporary folder and runs only once-->
        <!--Date: 2021/03/11-->
        <!--Status: test-->
        <!--ID: 39019a4e-317f-4ce3-ae63-309a8c6b53c5-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Suspicious Scheduled Task Creation Involving Temp Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /create\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /sc\ once\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Temp\\+</field>
    </rule>
    <rule id="900937" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_computerdefaults.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects tools such as UACMe used to bypass UAC with computerdefaults.exe (UACMe 59)-->
        <!--Date: 2021/08/31-->
        <!--Status: test-->
        <!--ID: 3c05e90d-7eba-4324-9972-5d7f711a60a8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Tools Using ComputerDefaults</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\+Windows\\+System32\\+ComputerDefaults\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\+Windows\\+System32</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\+Program\ Files</field>
    </rule>
    <rule id="900938" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_dctask64.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a renamed dctask64.exe used for process injection, command execution, process creation with a signed binary by ZOHO Corporation-->
        <!--Date: 2020/01/28-->
        <!--Status: test-->
        <!--ID: 340a090b-c4e9-412e-bb36-b4b16fe96f9b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1055.001</id>
            <id>attack.t1202</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Renamed ZOHO Dctask64 Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)6834B1B94E49701D77CCB3C0895E1AFD</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+dctask64\.exe)$</field>
    </rule>
    <rule id="900939" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remote_access_tools_anydesk.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/02/11-->
        <!--Status: test-->
        <!--ID: b52e84a3-029e-4529-b09b-71d19dd27e94-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Remote Access Tool - AnyDesk Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+AnyDesk\.exe)$</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)AnyDesk</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)AnyDesk</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)AnyDesk\ Software\ GmbH</field>
    </rule>
    <rule id="900940" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wpbbin_potential_persistence.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of the binary "wpbbin" which is used as part of the UEFI based persistence method described in the reference section-->
        <!--Date: 2022/07/18-->
        <!--Status: test-->
        <!--ID: 4abc0ec4-db5a-412f-9632-26659cddf145-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1542.001</id>
        </mitre>
        <description>UEFI Persistence Via Wpbbin - ProcessCreation</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\+Windows\\+System32\\+wpbbin\.exe</field>
    </rule>
    <rule id="900941" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_selectmyparent.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of parent process ID spoofing tools like Didier Stevens tool SelectMyParent-->
        <!--Date: 2022/07/23-->
        <!--Status: test-->
        <!--ID: 52ff7941-8211-46f9-84f8-9903efb7077d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1134.004</id>
        </mitre>
        <description>HackTool - PPID Spoofing SelectMyParent Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+SelectMyParent\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:PPID\-spoof|ppid_spoof|spoof\-ppid|spoof_ppid|ppidspoof|spoofppid|spoofedppid|\ \-spawnto\ )</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PPID\-spoof|ppid_spoof|spoof\-ppid|spoof_ppid|ppidspoof|spoofppid|spoofedppid</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)SelectMyParent</field>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)04d974875bd225f00902b4cad9af3fbc|a782af154c9e743ddf3f3eb2b8f3d16e|89059503d7fbf470e68f7e63313da3ad|ca28337632625c8281ab8a130b3d6bad</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=04D974875BD225F00902B4CAD9AF3FBC|IMPHASH=A782AF154C9E743DDF3F3EB2B8F3D16E|IMPHASH=89059503D7FBF470E68F7E63313DA3AD|IMPHASH=CA28337632625C8281AB8A130B3D6BAD</field>
    </rule>
    <rule id="900942" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_defaultpack.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect usage of the "defaultpack.exe" binary as a proxy to launch other programs-->
        <!--Date: 2022/12/31-->
        <!--Status: test-->
        <!--ID: b2309017-4235-44fe-b5af-b15363011957-->
        <mitre>
            <id>attack.t1218</id>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
        </mitre>
        <description>Lolbin Defaultpack.exe Use As Proxy</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+defaultpack\.exe)$</field>
    </rule>
    <rule id="900943" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_schtasks_system.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation or update of a scheduled task to run with "NT AUTHORITY\SYSTEM" privileges-->
        <!--Date: 2022/07/28-->
        <!--Status: experimental-->
        <!--ID: 89ca78fd-b37c-4310-b3d3-81a023f83936-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Schtasks Creation Or Modification With SYSTEM Privileges</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /change\ |\ /create\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/ru\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:NT\ AUT|\ SYSTEM\ )</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/TN\ TVInstallRestore</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+TeamViewer_\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:/Create\ /F\ /RU\ System\ /SC\ WEEKLY\ /TN\ AviraSystemSpeedupVerify\ /TR\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+Avira\\+System\ Speedup\\+setup\\+avira_speedup_setup\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/VERIFY\ /VERYSILENT\ /NOSTART\ /NODOTNET\ /NORESTART"\ /RL\ HIGHEST</field>
    </rule>
    <rule id="900944" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_import_module_susp_dirs.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects powershell scripts that import modules from suspicious directories-->
        <!--Date: 2023/01/10-->
        <!--Status: test-->
        <!--ID: c31364f7-8be6-4b77-8483-dd2b5a7b69a3-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Import PowerShell Modules From Suspicious Directories - ProcCreation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Import\-Module\ "\$Env:Temp\\+|Import\-Module\ '\$Env:Temp\\+|Import\-Module\ \$Env:Temp\\+|Import\-Module\ "\$Env:Appdata\\+|Import\-Module\ '\$Env:Appdata\\+|Import\-Module\ \$Env:Appdata\\+|Import\-Module\ C:\\+Users\\+Public\\+|ipmo\ "\$Env:Temp\\+|ipmo\ '\$Env:Temp\\+|ipmo\ \$Env:Temp\\+|ipmo\ "\$Env:Appdata\\+|ipmo\ '\$Env:Appdata\\+|ipmo\ \$Env:Appdata\\+|ipmo\ C:\\+Users\\+Public\\+</field>
    </rule>
    <rule id="900945" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_conhost_path_traversal.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: detects the usage of path traversal in conhost.exe indicating possible command/argument confusion/hijacking-->
        <!--Date: 2022/06/14-->
        <!--Status: test-->
        <!--ID: ee5e119b-1f75-4b34-add8-3be976961e39-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.003</id>
        </mitre>
        <description>Conhost.exe CommandLine Path Traversal</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)conhost</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/\.\./\.\./</field>
    </rule>
    <rule id="900946" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_xordump.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious use of XORDump process memory dumping utility-->
        <!--Date: 2022/01/28-->
        <!--Status: test-->
        <!--ID: 66e563f9-1cbd-4a22-a957-d8b7c0f44372-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>HackTool - XORDump Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+xordump\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-process\ lsass\.exe\ |\ \-m\ comsvcs\ |\ \-m\ dbghelp\ |\ \-m\ dbgcore\ )</field>
    </rule>
    <rule id="900947" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_network_command.yml</info>
        <!--Sigma Rule Author: frack113, Christopher Peacock '@securepeacock', SCYTHE '@scythe_io'-->
        <!--Description: Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems-->
        <!--Date: 2021/12/07-->
        <!--Status: test-->
        <!--ID: a29c1813-ab1f-4dde-b489-330b952e91ae-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1016</id>
        </mitre>
        <description>Suspicious Network Command</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ipconfig\ /all|netsh\ interface\ show\ interface|arp\ \-a|nbtstat\ \-n|net\ config|route\ print</field>
    </rule>
    <rule id="900948" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_web_request_cmd_and_cmdlets.yml</info>
        <!--Sigma Rule Author: James Pemberton / @4A616D6573, Endgame, JHasenbusch, oscd.community, Austin Songer @austinsonger-->
        <!--Description: Detects the use of various web request commands with commandline tools and Windows PowerShell cmdlets (including aliases) via CommandLine-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 9fc51a3c-81b3-4fa7-b35f-7c02cf10fd2d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Usage Of Web Request Commands And Cmdlets</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\[System\.Net\.WebRequest\]::create|curl\ |Invoke\-RestMethod|Invoke\-WebRequest|iwr\ |Net\.WebClient|Resume\-BitsTransfer|Start\-BitsTransfer|wget\ |WinHttp\.WinHttpRequest</field>
    </rule>
    <rule id="900949" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_inline_win_api_access.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of WinAPI Functions via the commandline. As seen used by threat actors via the tool winapiexec-->
        <!--Date: 2022/09/06-->
        <!--Status: test-->
        <!--ID: ba3f5c1b-6272-4119-9dbd-0bc8d21c2702-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1106</id>
        </mitre>
        <description>Potential WinAPI Calls Via CommandLine</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)AddSecurityPackage|AdjustTokenPrivileges|Advapi32|CloseHandle|CreateProcessWithToken|CreatePseudoConsole|CreateRemoteThread|CreateThread|CreateUserThread|DangerousGetHandle|DuplicateTokenEx|EnumerateSecurityPackages|FreeHGlobal|FreeLibrary|GetDelegateForFunctionPointer|GetLogonSessionData|GetModuleHandle|GetProcAddress|GetProcessHandle|GetTokenInformation|ImpersonateLoggedOnUser|kernel32|LoadLibrary|memcpy|MiniDumpWriteDump|ntdll|OpenDesktop|OpenProcess|OpenProcessToken|OpenThreadToken|OpenWindowStation|PtrToString|QueueUserApc|ReadProcessMemory|RevertToSelf|RtlCreateUserThread|secur32|SetThreadToken|VirtualAlloc|VirtualFree|VirtualProtect|WaitForSingleObject|WriteInt32|WriteProcessMemory|ZeroFreeGlobalAllocUnicode</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+MpCmdRun\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)GetLoadLibraryWAddress32</field>
    </rule>
    <rule id="900950" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_dumpert.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of Dumpert process dumper, which dumps the lsass.exe process memory-->
        <!--Date: 2020/02/04-->
        <!--Status: test-->
        <!--ID: 2704ab9e-afe2-4854-a3b1-0c0706d03578-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>HackTool - Dumpert Process Dumper Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)09D278F9DE118EF09163C6140255C690</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Dumpert\.dll</field>
    </rule>
    <rule id="900951" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_malware_script_dropper.yml</info>
        <!--Sigma Rule Author: Margaritis Dimitrios (idea), Florian Roth (Nextron Systems), oscd.community-->
        <!--Description: Detects wscript/cscript executions of scripts located in user directories-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: cea72823-df4d-4567-950c-0b579eaf0846-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
        </mitre>
        <description>WScript or CScript Dropper</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wscript\.exe|\\+cscript\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\+Users\\+|C:\\+ProgramData\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.jse|\.vbe|\.js|\.vba|\.vbs</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+winzip</field>
    </rule>
    <rule id="900952" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_registry_cimprovider_dll_load.yml</info>
        <!--Sigma Rule Author: Ivan Dyachkov, Yulia Fomina, oscd.community-->
        <!--Description: Detects using register-cimprovider.exe to execute arbitrary dll file.-->
        <!--Date: 2020/10/07-->
        <!--Status: test-->
        <!--ID: a2910908-e86f-4687-aeba-76a5f996e652-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574</id>
        </mitre>
        <description>DLL Execution Via Register-cimprovider.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+register\-cimprovider\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-path</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)dll</field>
    </rule>
    <rule id="900953" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_presentationhost_uncommon_location_exec.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of ".xbap" (Browser Applications) files via PresentationHost.EXE from an uncommon location. These files can be abused to run malicious ".xbap" files any bypass AWL
-->
        <!--Date: 2022/07/01-->
        <!--Status: test-->
        <!--ID: d22e2925-cfd8-463f-96f6-89cec9d9bc5f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>XBAP Execution From Uncommon Locations Via PresentationHost.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+presentationhost\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PresentationHost\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.xbap</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ C:\\+Windows\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ C:\\+Program\ Files</field>
    </rule>
    <rule id="900954" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mshta_susp_execution.yml</info>
        <!--Sigma Rule Author: Diego Perez (@darkquassar), Markus Neis, Swisscom (Improve Rule)-->
        <!--Description: Detection for mshta.exe suspicious execution patterns sometimes involving file polyglotism-->
        <!--Date: 2019/02/22-->
        <!--Status: test-->
        <!--ID: cc7abbd0-762b-41e3-8a26-57ad50d2eea3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1140</id>
            <id>attack.t1218.005</id>
            <id>attack.execution</id>
            <id>attack.t1059.007</id>
            <id>cve.2020.1599</id>
        </mitre>
        <description>MSHTA Suspicious Execution 01</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+mshta\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)vbscript|\.jpg|\.png|\.lnk|\.xls|\.doc|\.zip|\.dll</field>
    </rule>
    <rule id="900955" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_python_adidnsdump.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: This tool enables enumeration and exporting of all DNS records in the zone for recon purposes of internal networks Python 3 and python.exe must be installed,
Usee to Query/modify DNS records for Active Directory integrated DNS via LDAP
-->
        <!--Date: 2022/01/01-->
        <!--Status: test-->
        <!--ID: 26d3f0a2-f514-4a3f-a8a7-e7e48a8d9160-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1018</id>
        </mitre>
        <description>PUA - Adidnsdump Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+python\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)adidnsdump</field>
    </rule>
    <rule id="900956" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_msxsl_execution.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects the execution of the MSXSL utility. This can be used to execute Extensible Stylesheet Language (XSL) files. These files are commonly used to describe the processing and rendering of data within XML files.
Adversaries can abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.
-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: 9e50a8b3-dd05-4eb8-9153-bdb6b79d50b0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1220</id>
        </mitre>
        <description>Msxsl.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+msxsl\.exe)$</field>
    </rule>
    <rule id="900957" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_service_dir.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a service binary running in a suspicious directory-->
        <!--Date: 2021/03/09-->
        <!--Status: test-->
        <!--ID: 883faa95-175a-4e22-8181-e5761aeb373c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Suspicious Service Binary Directory</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+Users\\+Public\\+|\\+\$Recycle\.bin|\\+Users\\+All\ Users\\+|\\+Users\\+Default\\+|\\+Users\\+Contacts\\+|\\+Users\\+Searches\\+|C:\\+Perflogs\\+|\\+config\\+systemprofile\\+|\\+Windows\\+Fonts\\+|\\+Windows\\+IME\\+|\\+Windows\\+addins\\+</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+services\.exe|\\+svchost\.exe)$</field>
    </rule>
    <rule id="900958" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_getprocess_lsass.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a "Get-Process" cmdlet and it's aliases on lsass process, which is in almost all cases a sign of malicious activity-->
        <!--Date: 2021/04/23-->
        <!--Status: test-->
        <!--ID: b2815d0d-7481-4bf0-9b6c-a4c48a94b349-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.004</id>
        </mitre>
        <description>PowerShell Get-Process LSASS</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Get\-Process\ lsas|ps\ lsas|gps\ lsas</field>
    </rule>
    <rule id="900959" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_gpg4win.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), frack113-->
        <!--Description: Detects the execution of a renamed "gpg.exe". Often used by ransomware and loaders to decrypt/encrypt data.-->
        <!--Date: 2023/08/09-->
        <!--Status: experimental-->
        <!--ID: ec0722a3-eb5c-4a56-8ab2-bf6f20708592-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1486</id>
        </mitre>
        <description>Renamed Gpg.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)gpg\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+gpg\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+gpg2\.exe)$</field>
    </rule>
    <rule id="900960" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_child_process_as_system_.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Roberto Rodriguez (@Cyb3rWard0g), Open Threat Research (OTR)-->
        <!--Description: Detection of child processes spawned with SYSTEM privileges by parents with LOCAL SERVICE or NETWORK SERVICE accounts-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: 590a5f4c-6c8c-4f10-8307-89afe9453a9d-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1134.002</id>
        </mitre>
        <description>Suspicious Child Process Created as System</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentUser" negate="no" type="pcre2">(?i)AUTHORI|AUTORI</field>
        <field name="win.eventdata.parentUser" negate="no" type="pcre2">(?i)(?:\\+NETWORK\ SERVICE|\\+LOCAL\ SERVICE)$</field>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)AUTHORI|AUTORI</field>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)(?:\\+SYSTEM|\\+Système|\\+СИСТЕМА)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)System</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)DavSetCookie</field>
    </rule>
    <rule id="900961" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_rurat.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of renamed Remote Utilities (RURAT) via Product PE header field-->
        <!--Date: 2022/09/19-->
        <!--Status: test-->
        <!--ID: 9ef27c24-4903-4192-881a-3adde7ff92a5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.collection</id>
            <id>attack.command_and_control</id>
            <id>attack.discovery</id>
            <id>attack.s0592</id>
        </mitre>
        <description>Renamed Remote Utilities RAT (RURAT) Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)Remote\ Utilities</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+rutserv\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+rfusclient\.exe)$</field>
    </rule>
    <rule id="900962" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_consent_comctl32.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)-->
        <!--Date: 2021/08/23-->
        <!--Status: test-->
        <!--ID: 1ca6bd18-0ba0-44ca-851c-92ed89a61085-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using Consent and Comctl32 - Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+consent\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+werfault\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
    </rule>
    <rule id="900963" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_process_hacker.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of Process Hacker based on binary metadata information (Image, Hash, Imphash, etc). Process Hacker is a tool to view and manipulate processes, kernel options and other low level options. Threat actors regularly abuse it to manipulate system processes.-->
        <!--Date: 2022/10/10-->
        <!--Status: experimental-->
        <!--ID: 811e0002-b13b-4a15-9d00-a613fce66e42-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.discovery</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1622</id>
            <id>attack.t1564</id>
            <id>attack.t1543</id>
        </mitre>
        <description>PUA - Process Hacker Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+ProcessHacker_</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ProcessHacker\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)ProcessHacker\.exe|Process\ Hacker</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Process\ Hacker</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)Process\ Hacker</field>
    </rule>
    <rule id="900964" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_process_hacker.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of Process Hacker based on binary metadata information (Image, Hash, Imphash, etc). Process Hacker is a tool to view and manipulate processes, kernel options and other low level options. Threat actors regularly abuse it to manipulate system processes.-->
        <!--Date: 2022/10/10-->
        <!--Status: experimental-->
        <!--ID: 811e0002-b13b-4a15-9d00-a613fce66e42-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.discovery</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1622</id>
            <id>attack.t1564</id>
            <id>attack.t1543</id>
        </mitre>
        <description>PUA - Process Hacker Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)MD5=68F9B52895F4D34E74112F3129B3B00D|MD5=B365AF317AE730A67C936F21432B9C71|SHA1=A0BDFAC3CE1880B32FF9B696458327CE352E3B1D|SHA1=C5E2018BF7C0F314FED4FD7FE7E69FA2E648359E|SHA256=D4A0FE56316A2C45B9BA9AC1005363309A3EDC7ACF9E4DF64D326A0FF273E80F|SHA256=BD2C2CF0631D881ED382817AFCCE2B093F4E412FFB170A719E2762F250ABFEA4|IMPHASH=3695333C60DEDECDCAFF1590409AA462|IMPHASH=04DE0AD9C37EB7BD52043D2ECAC958DF</field>
    </rule>
    <rule id="900965" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_process_hacker.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of Process Hacker based on binary metadata information (Image, Hash, Imphash, etc). Process Hacker is a tool to view and manipulate processes, kernel options and other low level options. Threat actors regularly abuse it to manipulate system processes.-->
        <!--Date: 2022/10/10-->
        <!--Status: experimental-->
        <!--ID: 811e0002-b13b-4a15-9d00-a613fce66e42-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.discovery</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1622</id>
            <id>attack.t1564</id>
            <id>attack.t1543</id>
        </mitre>
        <description>PUA - Process Hacker Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)68f9b52895f4d34e74112f3129b3b00d|b365af317ae730a67c936f21432b9c71</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)c5e2018bf7c0f314fed4fd7fe7e69fa2e648359e|a0bdfac3ce1880b32ff9b696458327ce352e3b1d</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)d4a0fe56316a2c45b9ba9ac1005363309a3edc7acf9e4df64d326a0ff273e80f|bd2c2cf0631d881ed382817afcce2b093f4e412ffb170a719e2762f250abfea4</field>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)04de0ad9c37eb7bd52043d2ecac958df|3695333c60dedecdcaff1590409aa462</field>
    </rule>
    <rule id="900966" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_wsudo_susp_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of wsudo (Windows Sudo Utility). Which is a tool that let the user execute programs with different permissions (System, Trusted Installer, Administrator...etc)-->
        <!--Date: 2022/12/02-->
        <!--Status: experimental-->
        <!--ID: bdeeabc9-ff2a-4a51-be59-bb253aac7891-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1059</id>
        </mitre>
        <description>PUA - Wsudo Suspicious Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wsudo\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)wsudo\.exe</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Windows\ sudo\ utility</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+wsudo\-bridge\.exe)$</field>
    </rule>
    <rule id="900967" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_wsudo_susp_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of wsudo (Windows Sudo Utility). Which is a tool that let the user execute programs with different permissions (System, Trusted Installer, Administrator...etc)-->
        <!--Date: 2022/12/02-->
        <!--Status: experimental-->
        <!--ID: bdeeabc9-ff2a-4a51-be59-bb253aac7891-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1059</id>
        </mitre>
        <description>PUA - Wsudo Suspicious Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-u\ System|\-uSystem|\-u\ TrustedInstaller|\-uTrustedInstaller|\ \-\-ti\ )</field>
    </rule>
    <rule id="900968" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_devtoolslauncher.yml</info>
        <!--Sigma Rule Author: Beyu Denis, oscd.community (rule), @_felamos (idea)-->
        <!--Description: The Devtoolslauncher.exe executes other binary-->
        <!--Date: 2019/10/12-->
        <!--Status: test-->
        <!--ID: cc268ac1-42d9-40fd-9ed3-8c4e1a5b87e6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Devtoolslauncher.exe Executes Specified Binary</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+devtoolslauncher\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)LaunchForDeploy</field>
    </rule>
    <rule id="900969" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_msiexec_execute_dll.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.
Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)
-->
        <!--Date: 2022/01/16-->
        <!--Status: test-->
        <!--ID: 6f4191bb-912b-48a8-9ce7-682769541e6d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.007</id>
        </mitre>
        <description>Suspicious Msiexec Execute Arbitrary DLL</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+msiexec\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /y|\ \-y</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+MsiExec\.exe"\ /Y\ "C:\\+Program\ Files\\+Bonjour\\+mdnsNSP\.dll</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+MsiExec\.exe"\ /Y\ "C:\\+Program\ Files\ \(x86\)\\+Bonjour\\+mdnsNSP\.dll</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+MsiExec\.exe"\ /Y\ "C:\\+Program\ Files\ \(x86\)\\+Apple\ Software\ Update\\+ScriptingObjectModel\.dll</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+MsiExec\.exe"\ /Y\ "C:\\+Program\ Files\ \(x86\)\\+Apple\ Software\ Update\\+SoftwareUpdateAdmin\.dll</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+MsiExec\.exe"\ /Y\ "C:\\+Windows\\+CCM\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+MsiExec\.exe"\ /Y\ C:\\+Windows\\+CCM\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+MsiExec\.exe"\ \-Y\ "C:\\+Program\ Files\\+Bonjour\\+mdnsNSP\.dll</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+MsiExec\.exe"\ \-Y\ "C:\\+Program\ Files\ \(x86\)\\+Bonjour\\+mdnsNSP\.dll</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+MsiExec\.exe"\ \-Y\ "C:\\+Program\ Files\ \(x86\)\\+Apple\ Software\ Update\\+ScriptingObjectModel\.dll</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+MsiExec\.exe"\ \-Y\ "C:\\+Program\ Files\ \(x86\)\\+Apple\ Software\ Update\\+SoftwareUpdateAdmin\.dll</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+MsiExec\.exe"\ \-Y\ "C:\\+Windows\\+CCM\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+MsiExec\.exe"\ \-Y\ C:\\+Windows\\+CCM\\+</field>
    </rule>
    <rule id="900970" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_spawn_exe_from_users_directory.yml</info>
        <!--Sigma Rule Author: Jason Lynch-->
        <!--Description: Detects an executable in the users directory started from one of the Microsoft Office suite applications (Word, Excel, PowerPoint, Publisher, Visio)-->
        <!--Date: 2019/04/02-->
        <!--Status: test-->
        <!--ID: aa3a6f94-890e-4e22-b634-ffdfd54792cc-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204.002</id>
            <id>attack.g0046</id>
            <id>car.2013-05-002</id>
        </mitre>
        <description>Suspicious Binary In User Directory Spawned From Office Application</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+WINWORD\.EXE|\\+EXCEL\.EXE|\\+POWERPNT\.exe|\\+MSPUB\.exe|\\+VISIO\.exe|\\+MSACCESS\.exe|\\+EQNEDT32\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)^(?:C:\\+users\\+)</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Teams\.exe)$</field>
    </rule>
    <rule id="900971" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysinternals_procdump.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects usage of the SysInternals Procdump utility-->
        <!--Date: 2021/08/16-->
        <!--Status: experimental-->
        <!--ID: 2e65275c-8288-4ab4-aeb7-6274f58b6b20-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Procdump Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+procdump\.exe|\\+procdump64\.exe)$</field>
    </rule>
    <rule id="900972" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sharpevtmute.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of SharpEvtHook, a tool that tampers with the Windows event logs-->
        <!--Date: 2022/09/07-->
        <!--Status: experimental-->
        <!--ID: bedfc8ad-d1c7-4e37-a20e-e2b0dbee759c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>HackTool - SharpEvtMute Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+SharpEvtMute\.exe)$</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)SharpEvtMute</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-Filter\ "rule\ |\-\-Encoded\ \-\-Filter\ \\+"</field>
    </rule>
    <rule id="900973" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_handlekatz.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of HandleKatz, a tool that demonstrates the usage of cloned handles to Lsass in order to create an obfuscated memory dump of the same-->
        <!--Date: 2022/08/18-->
        <!--Status: test-->
        <!--ID: ca621ba5-54ab-4035-9942-d378e6fcde3c-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>HackTool - HandleKatz LSASS Dumper Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+loader\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-pid:</field>
    </rule>
    <rule id="900974" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_handlekatz.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of HandleKatz, a tool that demonstrates the usage of cloned handles to Lsass in order to create an obfuscated memory dump of the same-->
        <!--Date: 2022/08/18-->
        <!--Status: test-->
        <!--ID: ca621ba5-54ab-4035-9942-d378e6fcde3c-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>HackTool - HandleKatz LSASS Dumper Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)38d9e015591bbfd4929e0d0f47fa0055|0e2216679ca6e1094d63322e3412d650</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=38D9E015591BBFD4929E0D0F47FA0055|IMPHASH=0E2216679CA6E1094D63322E3412D650</field>
    </rule>
    <rule id="900975" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_handlekatz.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of HandleKatz, a tool that demonstrates the usage of cloned handles to Lsass in order to create an obfuscated memory dump of the same-->
        <!--Date: 2022/08/18-->
        <!--Status: test-->
        <!--ID: ca621ba5-54ab-4035-9942-d378e6fcde3c-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>HackTool - HandleKatz LSASS Dumper Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-pid:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-outfile:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dmp|lsass|\.obf|dump</field>
    </rule>
    <rule id="900976" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_advanced_port_scanner.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of Advanced Port Scanner.-->
        <!--Date: 2021/12/18-->
        <!--Status: experimental-->
        <!--ID: 54773c5f-f1cc-4703-9126-2f797d96a69d-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1046</id>
            <id>attack.t1135</id>
        </mitre>
        <description>PUA - Advanced Port Scanner Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+advanced_port_scanner</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)advanced_port_scanner</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Advanced\ Port\ Scanner</field>
    </rule>
    <rule id="900977" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_advanced_port_scanner.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of Advanced Port Scanner.-->
        <!--Date: 2021/12/18-->
        <!--Status: experimental-->
        <!--ID: 54773c5f-f1cc-4703-9126-2f797d96a69d-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1046</id>
            <id>attack.t1135</id>
        </mitre>
        <description>PUA - Advanced Port Scanner Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/portable</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/lng</field>
    </rule>
    <rule id="900978" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wsl_windows_binaries_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of Windows binaries from within a WSL instance. This could be used to masquerade parent-child relationships-->
        <!--Date: 2023/02/14-->
        <!--Status: experimental-->
        <!--ID: ed825c86-c009-4014-b413-b76003e33d35-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Windows Binary Executed From WSL</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)[a-zA-Z]:\\+</field>
        <field name="win.eventdata.currentDirectory" negate="no" type="pcre2">(?i)\\+wsl\.localhost</field>
    </rule>
    <rule id="900979" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_empire_powershell_uac_bypass.yml</info>
        <!--Sigma Rule Author: Ecco-->
        <!--Description: Detects some Empire PowerShell UAC bypass methods-->
        <!--Date: 2019/08/30-->
        <!--Status: stable-->
        <!--ID: 3268b746-88d8-4cd3-bffc-30077d02c787-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
            <id>car.2019-04-001</id>
        </mitre>
        <description>HackTool - Empire PowerShell UAC Bypass</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-NoP\ \-NonI\ \-w\ Hidden\ \-c\ \$x=\$\(\(gp\ HKCU:Software\\+Microsoft\\+Windows\ Update\)\.Update\)|\ \-NoP\ \-NonI\ \-c\ \$x=\$\(\(gp\ HKCU:Software\\+Microsoft\\+Windows\ Update\)\.Update\);</field>
    </rule>
    <rule id="900980" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_findstr_recon_everyone.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of findstr with the "EVERYONE" or "BUILTIN" keywords. This is seen being used in combination with "icacls" to look for misconfigured files or folders permissions-->
        <!--Date: 2022/08/12-->
        <!--Status: experimental-->
        <!--ID: 47e4bab7-c626-47dc-967b-255608c9a920-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.006</id>
        </mitre>
        <description>Permission Misconfiguration Reconnaissance Via Findstr.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+find\.exe|\\+findstr\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)FIND\.EXE|FINDSTR\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)"Everyone"|'Everyone'|"BUILTIN\\+"|'BUILTIN\\+'</field>
    </rule>
    <rule id="900981" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_findstr_recon_everyone.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of findstr with the "EVERYONE" or "BUILTIN" keywords. This is seen being used in combination with "icacls" to look for misconfigured files or folders permissions-->
        <!--Date: 2022/08/12-->
        <!--Status: experimental-->
        <!--ID: 47e4bab7-c626-47dc-967b-255608c9a920-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.006</id>
        </mitre>
        <description>Permission Misconfiguration Reconnaissance Via Findstr.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:icacls\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:findstr\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Everyone</field>
    </rule>
    <rule id="900982" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_svchost_susp_parent_process.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a suspicious svchost process start-->
        <!--Date: 2017/08/15-->
        <!--Status: test-->
        <!--ID: 01d2e2a1-5f09-44f7-9fc1-24faa7479b6d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.005</id>
        </mitre>
        <description>Suspicious Svchost Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+svchost\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+services\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+MsMpEng\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+Mrt\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+rpcnet\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+ngen\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+TiWorker\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)None</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\-</field>
    </rule>
    <rule id="900983" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_rubeus.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of the hacktool Rubeus via PE information of command line parameters-->
        <!--Date: 2018/12/19-->
        <!--Status: stable-->
        <!--ID: 7ec2c172-dceb-4c10-92c9-87c1881b7e18-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
            <id>attack.t1558.003</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1550.003</id>
        </mitre>
        <description>HackTool - Rubeus Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Rubeus\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Rubeus\.exe</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Rubeus</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)asreproast\ |dump\ /service:krbtgt\ |dump\ /luid:0x|kerberoast\ |createnetonly\ /program:|ptt\ /ticket:|/impersonateuser:|renew\ /ticket:|asktgt\ /user:|harvest\ /interval:|s4u\ /user:|s4u\ /ticket:|hash\ /password:|golden\ /aes256:|silver\ /user:</field>
    </rule>
    <rule id="900984" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_ngrok.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available.
Involved domains are bin.equinox.io for download and *.ngrok.io for connections.
-->
        <!--Date: 2021/05/14-->
        <!--Status: test-->
        <!--ID: ee37eb7c-a4e7-4cd5-8fa4-efa27f1c3f31-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1572</id>
        </mitre>
        <description>PUA - Ngrok Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ tcp\ 139|\ tcp\ 445|\ tcp\ 3389|\ tcp\ 5985|\ tcp\ 5986</field>
    </rule>
    <rule id="900985" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_ngrok.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available.
Involved domains are bin.equinox.io for download and *.ngrok.io for connections.
-->
        <!--Date: 2021/05/14-->
        <!--Status: test-->
        <!--ID: ee37eb7c-a4e7-4cd5-8fa4-efa27f1c3f31-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1572</id>
        </mitre>
        <description>PUA - Ngrok Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ start\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-all</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-config</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.yml</field>
    </rule>
    <rule id="900986" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_ngrok.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available.
Involved domains are bin.equinox.io for download and *.ngrok.io for connections.
-->
        <!--Date: 2021/05/14-->
        <!--Status: test-->
        <!--ID: ee37eb7c-a4e7-4cd5-8fa4-efa27f1c3f31-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1572</id>
        </mitre>
        <description>PUA - Ngrok Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:ngrok\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ tcp\ |\ http\ |\ authtoken\ )</field>
    </rule>
    <rule id="900987" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_ngrok.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of Ngrok, a utility used for port forwarding and tunneling, often used by threat actors to make local protected services publicly available.
Involved domains are bin.equinox.io for download and *.ngrok.io for connections.
-->
        <!--Date: 2021/05/14-->
        <!--Status: test-->
        <!--ID: ee37eb7c-a4e7-4cd5-8fa4-efa27f1c3f31-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1572</id>
        </mitre>
        <description>PUA - Ngrok Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe\ authtoken\ |\.exe\ start\ \-\-all</field>
    </rule>
    <rule id="900988" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_java_remote_debugging.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a JAVA process running with remote debugging allowing more than just localhost to connect-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 8f88e3f6-2a49-48f5-a5c4-2f7eedf78710-->
        <mitre>
            <id>attack.t1203</id>
            <id>attack.execution</id>
        </mitre>
        <description>Java Running with Remote Debugging</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)transport=dt_socket,address=</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)jre1\.|jdk1\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)address=127\.0\.0\.1</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)address=localhost</field>
    </rule>
    <rule id="900989" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_kavremover.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of a signed binary dropped by Kaspersky Lab Products Remover (kavremover) which can be abused as a LOLBIN to execute arbitrary commands and binaries.-->
        <!--Date: 2022/11/01-->
        <!--Status: test-->
        <!--ID: d047726b-c71c-4048-a99b-2e2f50dc107d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1127</id>
        </mitre>
        <description>Kavremover Dropped Binary LOLBIN Usage</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ run\ run\-cmd\ )</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+kavremover\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+cleanapi\.exe)$</field>
    </rule>
    <rule id="900990" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_non_exe_image.yml</info>
        <!--Sigma Rule Author: Max Altgelt (Nextron Systems)-->
        <!--Description: Checks whether the image specified in a process creation event doesn't refer to an .exe file (caused by process ghosting or other unorthodox methods to start a process)-->
        <!--Date: 2021/12/09-->
        <!--Status: experimental-->
        <!--ID: c09dad97-1c78-4f71-b127-7edb2b8e491a-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Execution of Suspicious File Type Extension</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\.tmp)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\.scr)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)System</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)Registry</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)MemCompression</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)vmmem</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+Installer\\+MSI)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+DriverStore\\+FileRepository\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Config\.Msi\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\.rbf)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\.rbs)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+Temp\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+Temp\\+Helper\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+SysWOW64\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\.com)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+\$Extend\\+\$Deleted\\+)</field>
    </rule>
    <rule id="900991" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_non_exe_image.yml</info>
        <!--Sigma Rule Author: Max Altgelt (Nextron Systems)-->
        <!--Description: Checks whether the image specified in a process creation event doesn't refer to an .exe file (caused by process ghosting or other unorthodox methods to start a process)-->
        <!--Date: 2021/12/09-->
        <!--Status: experimental-->
        <!--ID: c09dad97-1c78-4f71-b127-7edb2b8e491a-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Execution of Suspicious File Type Extension</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\.tmp)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\.scr)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\-</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)None</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+ProgramData\\+Avira\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)NVIDIA\\+NvBackend\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\.dat)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WinSCP\.com)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Users\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\.tmp</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)CodeSetup</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+program\\+soffice\.bin)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+program\\+unopkg\.bin)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+EMC\ NetWorker\\+Management\\+GST\\+apache\\+cgi\-bin\\+update_jnlp\.cgi</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+EMC\ NetWorker\\+Management\\+GST\\+apache\\+cgi\-bin\\+update_jnlp\.cgi</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+WINPAKPRO\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+WINPAKPRO\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\.ngn)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+MyQ\\+Server\\+pcltool\.dll</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+MyQ\\+Server\\+pcltool\.dll</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Microsoft\ Visual\ Studio\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\ Visual\ Studio)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\.com)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Packages\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+LocalState\\+rootfs\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+LZMA_EXE)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+Temp\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+TBT_Dock_Firmware\\+GetDockVer32W\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Mozilla\ Firefox\\+tobedeleted\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+UUS\\+amd64\\+MoUsoCoreWorker\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+\$Extend\\+\$Deleted\\+)</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Common\ Files\\+Microsoft\ Shared\\+ClickToRun\\+OfficeC2RClient\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/update\ UPDATEORCHESTRATOR\ displaylevel=False</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+services\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:com\.docker\.service)$</field>
    </rule>
    <rule id="900992" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_susp_download_patterns.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious PowerShell download patterns that are often used in malicious scripts, stagers or downloaders (make sure that your backend applies the strings case-insensitive)-->
        <!--Date: 2022/02/28-->
        <!--Status: test-->
        <!--ID: e6c54d94-498c-4562-a37c-b469d8e9a275-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Download and Execute Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)IEX\ \(\(New\-Object\ Net\.WebClient\)\.DownloadString|IEX\ \(New\-Object\ Net\.WebClient\)\.DownloadString|IEX\(\(New\-Object\ Net\.WebClient\)\.DownloadString|IEX\(New\-Object\ Net\.WebClient\)\.DownloadString|\ \-command\ \(New\-Object\ System\.Net\.WebClient\)\.DownloadFile\(|\ \-c\ \(New\-Object\ System\.Net\.WebClient\)\.DownloadFile\(</field>
    </rule>
    <rule id="900993" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dns_susp_child_process.yml</info>
        <!--Sigma Rule Author: Tim Rauch-->
        <!--Description: Detects an unexpected process spawning from dns.exe which may indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed)-->
        <!--Date: 2022/09/27-->
        <!--Status: experimental-->
        <!--ID: a4e3d776-f12e-42c2-8510-9e6ed1f43ec3-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1133</id>
        </mitre>
        <description>Unusual Child Process of dns.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+dns\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+conhost\.exe)$</field>
    </rule>
    <rule id="900994" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_execution_via_imphashes.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of different Windows based hacktools via their import hash (imphash) even if the files have been renamed-->
        <!--Date: 2022/03/04-->
        <!--Status: test-->
        <!--ID: 24e3e58a-646b-4b50-adef-02ef935b9fc8-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1588.002</id>
            <id>attack.t1003</id>
        </mitre>
        <description>Suspicious Hacktool Execution - Imphash</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)bcca3c247b619dcd13c8cdff5f123932|3a19059bd7688cb88e70005f18efc439|bf6223a49e45d99094406777eb6004ba|0c106686a31bfe2ba931ae1cf6e9dbc6|0d1447d4b3259b3c2a1d4cfb7ece13c3|1b0369a1e06271833f78ffa70ffb4eaf|4c1b52a19748428e51b14c278d0f58e3|4d927a711f77d62cebd4f322cb57ec6f|66ee036df5fc1004d9ed5e9a94a1086a|672b13f4a0b6f27d29065123fe882dfc|6bbd59cea665c4afcc2814c1327ec91f|725bb81dc24214f6ecacc0cfb36ad30d|9528a0e91e28fbb88ad433feabca2456|9da6d5d77be11712527dcab86df449a3|a6e01bc1ab89f8d91d9eab72032aae88|b24c5eddaea4fe50c6a96a2a133521e4|d21bbc50dcc169d7b4d0f01962793154|fcc251cceae90d22c392215cc9a2d5d6|23867a89c2b8fc733be6cf5ef902f2d1|a37ff327f8d48e8a4d2f757e1b6e70bc|f9a28c458284584a93b14216308d31bd|6118619783fc175bc7ebecff0769b46e|959a83047e80ab68b368fdb3f4c6e4ea|563233bfa169acc7892451f71ad5850a|87575cb7a0e0700eb37f2e3668671a08|13f08707f759af6003837a150a371ba1|1781f06048a7e58b323f0b9259be798b|233f85f2d4bc9d6521a6caae11a1e7f5|24af2584cbf4d60bbe5c6d1b31b3be6d|632969ddf6dbf4e0f53424b75e4b91f2|713c29b396b907ed71a72482759ed757|749a7bb1f0b4c4455949c0b2bf7f9e9f|8628b2608957a6b0c6330ac3de28ce2e|8b114550386e31895dfab371e741123d|94cb940a1a6b65bed4d5a8f849ce9793|9d68781980370e00e0bd939ee5e6c141|b18a1401ff8f444056d29450fbc0a6ce|cb567f9498452721d77a451374955f5f|730073214094cd328547bf1f72289752|17b461a082950fc6332228572138b80c|dc25ee78e2ef4d36faa0badf1e7461c9|819b19d53ca6736448f9325a85736792|829da329ce140d873b4a8bde2cbfaa7e|c547f2e66061a8dffb6f5a3ff63c0a74|0588081ab0e63ba785938467e1b10cca|0d9ec08bac6c07d9987dfd0f1506587c|bc129092b71c89b4d4c8cdf8ea590b29|4da924cf622d039d58bce71cdf05d242|e7a3a5c377e2d29324093377d7db1c66|9a9dbec5c62f0380b4fa5fd31deffedf|af8a3976ad71e5d5fdfb67ddb8dadfce|0c477898bbf137bbd6f2a54e3b805ff4|0ca9f02b537bcea20d4ea5eb1a9fe338|3ab3655e5a14d4eefc547f4781bf7f9e|e6f9d5152da699934b30daab206471f6|3ad59991ccf1d67339b319b15a41b35d|ffdd59e0318b85a3e480874d9796d872|0cf479628d7cc1ea25ec7998a92f5051|07a2d4dcbd6cb2c6a45e6b101f0b6d51|d6d0f80386e1380d05cb78e871bc72b1|38d9e015591bbfd4929e0d0f47fa0055|0e2216679ca6e1094d63322e3412d650|ada161bf41b8e5e9132858cb54cab5fb|2a1bc4913cd5ecb0434df07cb675b798|11083e75553baae21dc89ce8f9a195e4|a23d29c9e566f2fa8ffbb79267f5df80|4a07f944a83e8a7c2525efa35dd30e2f|767637c23bb42cd5d7397cf58b0be688|14c4e4c72ba075e9069ee67f39188ad8|3c782813d4afce07bbfc5a9772acdbdc|7d010c6bb6a3726f327f7e239166d127|89159ba4dd04e4ce5559f132a9964eb3|6f33f4a5fc42b8cec7314947bd13f30f|5834ed4291bdeb928270428ebbaf7604|5a8a8a43f25485e7ee1b201edcbc7a38|dc7d30b90b2d8abf664fbed2b1b59894|41923ea1f824fe63ea5beb84db7a3e74|3de09703c8e79ed2ca3f01074719906b|a53a02b997935fd8eedcb5f7abab9b9f|e96a73c7bf33a464c510ede582318bf2|32089b8851bbf8bc2d014e9f37288c83|09D278F9DE118EF09163C6140255C690|03866661686829d806989e2fc5a72606|e57401fbdadcd4571ff385ab82bd5d6d|84B763C45C0E4A3E7CA5548C710DB4EE|19584675d94829987952432e018d5056|330768a4f172e10acb6287b87289d83b</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=BCCA3C247B619DCD13C8CDFF5F123932|IMPHASH=3A19059BD7688CB88E70005F18EFC439|IMPHASH=bf6223a49e45d99094406777eb6004ba|IMPHASH=0C106686A31BFE2BA931AE1CF6E9DBC6|IMPHASH=0D1447D4B3259B3C2A1D4CFB7ECE13C3|IMPHASH=1B0369A1E06271833F78FFA70FFB4EAF|IMPHASH=4C1B52A19748428E51B14C278D0F58E3|IMPHASH=4D927A711F77D62CEBD4F322CB57EC6F|IMPHASH=66EE036DF5FC1004D9ED5E9A94A1086A|IMPHASH=672B13F4A0B6F27D29065123FE882DFC|IMPHASH=6BBD59CEA665C4AFCC2814C1327EC91F|IMPHASH=725BB81DC24214F6ECACC0CFB36AD30D|IMPHASH=9528A0E91E28FBB88AD433FEABCA2456|IMPHASH=9DA6D5D77BE11712527DCAB86DF449A3|IMPHASH=A6E01BC1AB89F8D91D9EAB72032AAE88|IMPHASH=B24C5EDDAEA4FE50C6A96A2A133521E4|IMPHASH=D21BBC50DCC169D7B4D0F01962793154|IMPHASH=FCC251CCEAE90D22C392215CC9A2D5D6|IMPHASH=23867A89C2B8FC733BE6CF5EF902F2D1|IMPHASH=A37FF327F8D48E8A4D2F757E1B6E70BC|IMPHASH=F9A28C458284584A93B14216308D31BD|IMPHASH=6118619783FC175BC7EBECFF0769B46E|IMPHASH=959A83047E80AB68B368FDB3F4C6E4EA|IMPHASH=563233BFA169ACC7892451F71AD5850A|IMPHASH=87575CB7A0E0700EB37F2E3668671A08|IMPHASH=13F08707F759AF6003837A150A371BA1|IMPHASH=1781F06048A7E58B323F0B9259BE798B|IMPHASH=233F85F2D4BC9D6521A6CAAE11A1E7F5|IMPHASH=24AF2584CBF4D60BBE5C6D1B31B3BE6D|IMPHASH=632969DDF6DBF4E0F53424B75E4B91F2|IMPHASH=713C29B396B907ED71A72482759ED757|IMPHASH=749A7BB1F0B4C4455949C0B2BF7F9E9F|IMPHASH=8628B2608957A6B0C6330AC3DE28CE2E|IMPHASH=8B114550386E31895DFAB371E741123D|IMPHASH=94CB940A1A6B65BED4D5A8F849CE9793|IMPHASH=9D68781980370E00E0BD939EE5E6C141|IMPHASH=B18A1401FF8F444056D29450FBC0A6CE|IMPHASH=CB567F9498452721D77A451374955F5F|IMPHASH=730073214094CD328547BF1F72289752|IMPHASH=17B461A082950FC6332228572138B80C|IMPHASH=DC25EE78E2EF4D36FAA0BADF1E7461C9|IMPHASH=819B19D53CA6736448F9325A85736792|IMPHASH=829DA329CE140D873B4A8BDE2CBFAA7E|IMPHASH=C547F2E66061A8DFFB6F5A3FF63C0A74|IMPHASH=0588081AB0E63BA785938467E1B10CCA|IMPHASH=0D9EC08BAC6C07D9987DFD0F1506587C|IMPHASH=BC129092B71C89B4D4C8CDF8EA590B29|IMPHASH=4DA924CF622D039D58BCE71CDF05D242|IMPHASH=E7A3A5C377E2D29324093377D7DB1C66|IMPHASH=9A9DBEC5C62F0380B4FA5FD31DEFFEDF|IMPHASH=AF8A3976AD71E5D5FDFB67DDB8DADFCE|IMPHASH=0C477898BBF137BBD6F2A54E3B805FF4|IMPHASH=0CA9F02B537BCEA20D4EA5EB1A9FE338|IMPHASH=3AB3655E5A14D4EEFC547F4781BF7F9E|IMPHASH=E6F9D5152DA699934B30DAAB206471F6|IMPHASH=3AD59991CCF1D67339B319B15A41B35D|IMPHASH=FFDD59E0318B85A3E480874D9796D872|IMPHASH=0CF479628D7CC1EA25EC7998A92F5051|IMPHASH=07A2D4DCBD6CB2C6A45E6B101F0B6D51|IMPHASH=D6D0F80386E1380D05CB78E871BC72B1|IMPHASH=38D9E015591BBFD4929E0D0F47FA0055|IMPHASH=0E2216679CA6E1094D63322E3412D650|IMPHASH=ADA161BF41B8E5E9132858CB54CAB5FB|IMPHASH=2A1BC4913CD5ECB0434DF07CB675B798|IMPHASH=11083E75553BAAE21DC89CE8F9A195E4|IMPHASH=A23D29C9E566F2FA8FFBB79267F5DF80|IMPHASH=4A07F944A83E8A7C2525EFA35DD30E2F|IMPHASH=767637C23BB42CD5D7397CF58B0BE688|IMPHASH=14C4E4C72BA075E9069EE67F39188AD8|IMPHASH=3C782813D4AFCE07BBFC5A9772ACDBDC|IMPHASH=7D010C6BB6A3726F327F7E239166D127|IMPHASH=89159BA4DD04E4CE5559F132A9964EB3|IMPHASH=6F33F4A5FC42B8CEC7314947BD13F30F|IMPHASH=5834ED4291BDEB928270428EBBAF7604|IMPHASH=5A8A8A43F25485E7EE1B201EDCBC7A38|IMPHASH=DC7D30B90B2D8ABF664FBED2B1B59894|IMPHASH=41923EA1F824FE63EA5BEB84DB7A3E74|IMPHASH=3DE09703C8E79ED2CA3F01074719906B|IMPHASH=A53A02B997935FD8EEDCB5F7ABAB9B9F|IMPHASH=E96A73C7BF33A464C510EDE582318BF2|IMPHASH=32089B8851BBF8BC2D014E9F37288C83|IMPHASH=09D278F9DE118EF09163C6140255C690|IMPHASH=03866661686829d806989e2fc5a72606|IMPHASH=e57401fbdadcd4571ff385ab82bd5d6d|IMPHASH=84B763C45C0E4A3E7CA5548C710DB4EE|IMPHASH=19584675D94829987952432E018D5056|IMPHASH=330768A4F172E10ACB6287B87289D83B</field>
    </rule>
    <rule id="900995" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_stracciatella_execution.yml</info>
        <!--Sigma Rule Author: pH-T (Nextron Systems)-->
        <!--Description: Detects Stracciatella which executes a Powershell runspace from within C# (aka SharpPick technique) with AMSI, ETW and Script Block Logging disabled based on PE metadata characteristics.-->
        <!--Date: 2023/04/17-->
        <!--Status: experimental-->
        <!--ID: 7a4d9232-92fc-404d-8ce1-4c92e7caf539-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1059</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>HackTool - Stracciatella Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Stracciatella\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Stracciatella\.exe</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Stracciatella</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)SHA256=9d25e61ec1527e2a69d7c2a4e3fe2fe15890710c198a66a9f25d99fdf6c7b956|SHA256=fd16609bd9830c63b9413671678bb159b89c357d21942ddbb6b93add808d121a</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)9d25e61ec1527e2a69d7c2a4e3fe2fe15890710c198a66a9f25d99fdf6c7b956|fd16609bd9830c63b9413671678bb159b89c357d21942ddbb6b93add808d121a</field>
    </rule>
    <rule id="900996" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sndvol_susp_child_processes.yml</info>
        <!--Sigma Rule Author: X__Junior (Nextron Systems)-->
        <!--Description: Detects potentially uncommon child processes of SndVol.exe (the Windows volume mixer)-->
        <!--Date: 2023/06/09-->
        <!--Status: experimental-->
        <!--ID: ba42babc-0666-4393-a4f7-ceaf5a69191e-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Uncommon Child Processes Of SndVol.exe</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+SndVol\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ shell32\.dll,Control_RunDLL\ )</field>
    </rule>
    <rule id="900997" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_base64_reflection_assembly_load_obfusc.yml</info>
        <!--Sigma Rule Author: pH-T (Nextron Systems)-->
        <!--Description: Detects suspicious base64 encoded and obfuscated "LOAD" keyword used in .NET "reflection.assembly"-->
        <!--Date: 2022/03/01-->
        <!--Status: test-->
        <!--ID: 9c0295ce-d60d-40bd-bd74-84673b7592b1-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1059.001</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Suspicious Encoded And Obfuscated Reflection Assembly Load Function Call</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)OgA6ACgAIgBMACIAKwAiAG8AYQBkACIAKQ|oAOgAoACIATAAiACsAIgBvAGEAZAAiACkA|6ADoAKAAiAEwAIgArACIAbwBhAGQAIgApA|OgA6ACgAIgBMAG8AIgArACIAYQBkACIAKQ|oAOgAoACIATABvACIAKwAiAGEAZAAiACkA|6ADoAKAAiAEwAbwAiACsAIgBhAGQAIgApA|OgA6ACgAIgBMAG8AYQAiACsAIgBkACIAKQ|oAOgAoACIATABvAGEAIgArACIAZAAiACkA|6ADoAKAAiAEwAbwBhACIAKwAiAGQAIgApA|OgA6ACgAJwBMACcAKwAnAG8AYQBkACcAKQ|oAOgAoACcATAAnACsAJwBvAGEAZAAnACkA|6ADoAKAAnAEwAJwArACcAbwBhAGQAJwApA|OgA6ACgAJwBMAG8AJwArACcAYQBkACcAKQ|oAOgAoACcATABvACcAKwAnAGEAZAAnACkA|6ADoAKAAnAEwAbwAnACsAJwBhAGQAJwApA|OgA6ACgAJwBMAG8AYQAnACsAJwBkACcAKQ|oAOgAoACcATABvAGEAJwArACcAZAAnACkA|6ADoAKAAnAEwAbwBhACcAKwAnAGQAJwApA</field>
    </rule>
    <rule id="900998" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_open_command.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Threat actors performed dumping of SAM, SECURITY and SYSTEM registry hives using DelegateExecute key-->
        <!--Date: 2021/12/20-->
        <!--Status: test-->
        <!--ID: dd3ee8cc-f751-41c9-ba53-5a32ed47e563-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
        </mitre>
        <description>Suspicious Reg Add Open Command</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)hkcu\\+software\\+classes\\+ms\-settings\\+shell\\+open\\+command</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/ve\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/d</field>
    </rule>
    <rule id="900999" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_open_command.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Threat actors performed dumping of SAM, SECURITY and SYSTEM registry hives using DelegateExecute key-->
        <!--Date: 2021/12/20-->
        <!--Status: test-->
        <!--ID: dd3ee8cc-f751-41c9-ba53-5a32ed47e563-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
        </mitre>
        <description>Suspicious Reg Add Open Command</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)hkcu\\+software\\+classes\\+ms\-settings\\+shell\\+open\\+command</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/v</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)DelegateExecute</field>
    </rule>
    <rule id="901000" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_open_command.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Threat actors performed dumping of SAM, SECURITY and SYSTEM registry hives using DelegateExecute key-->
        <!--Date: 2021/12/20-->
        <!--Status: test-->
        <!--ID: dd3ee8cc-f751-41c9-ba53-5a32ed47e563-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
        </mitre>
        <description>Suspicious Reg Add Open Command</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)delete</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)hkcu\\+software\\+classes\\+ms\-settings</field>
    </rule>
    <rule id="901001" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remote_time_discovery.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community-->
        <!--Description: Identifies use of various commands to query a systems time. This technique may be used before executing a scheduled task or to discover the time zone of a target system.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: b243b280-65fe-48df-ba07-6ddea7646427-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1124</id>
        </mitre>
        <description>Discovery of a System Time</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+net\.exe|\\+net1\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)time</field>
    </rule>
    <rule id="901002" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remote_time_discovery.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community-->
        <!--Description: Identifies use of various commands to query a systems time. This technique may be used before executing a scheduled task or to discover the time zone of a target system.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: b243b280-65fe-48df-ba07-6ddea7646427-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1124</id>
        </mitre>
        <description>Discovery of a System Time</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+w32tm\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)tz</field>
    </rule>
    <rule id="901003" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_service_creation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects creation of a new service via "sc" command or the powershell "new-service" cmdlet with suspicious binary paths-->
        <!--Date: 2022/07/14-->
        <!--Status: test-->
        <!--ID: 17a1be64-8d88-40bf-b5ff-a4f7a50ebcc8-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Suspicious New Service Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+sc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)create</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)binPath=</field>
    </rule>
    <rule id="901004" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_service_creation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects creation of a new service via "sc" command or the powershell "new-service" cmdlet with suspicious binary paths-->
        <!--Date: 2022/07/14-->
        <!--Status: test-->
        <!--ID: 17a1be64-8d88-40bf-b5ff-a4f7a50ebcc8-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Suspicious New Service Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)New\-Service</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-BinaryPathName</field>
    </rule>
    <rule id="901005" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_service_creation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects creation of a new service via "sc" command or the powershell "new-service" cmdlet with suspicious binary paths-->
        <!--Date: 2022/07/14-->
        <!--Status: test-->
        <!--ID: 17a1be64-8d88-40bf-b5ff-a4f7a50ebcc8-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Suspicious New Service Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell|mshta|wscript|cscript|svchost|dllhost|cmd\ |cmd\.exe\ /c|cmd\.exe\ /k|cmd\.exe\ /r|rundll32|C:\\+Users\\+Public|\\+Downloads\\+|\\+Desktop\\+|\\+Microsoft\\+Windows\\+Start\ Menu\\+Programs\\+Startup\\+|C:\\+Windows\\+TEMP\\+|\\+AppData\\+Local\\+Temp</field>
    </rule>
    <rule id="901006" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_registry_typed_paths_persistence.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects modification addition to the 'TypedPaths' key in the user or admin registry via the commandline. Which might indicate persistence attempt-->
        <!--Date: 2022/08/22-->
        <!--Status: test-->
        <!--ID: ec88289a-7e1a-4cc3-8d18-bd1f60e4b9ba-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Persistence Via TypedPaths - CommandLine</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Software\\+Microsoft\\+Windows\\+CurrentVersion\\+Explorer\\+TypedPaths</field>
    </rule>
    <rule id="901007" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remote_access_tools_rurat_non_default_location.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of Remote Utilities RAT (RURAT) from an unusual location (outside of 'C:\Program Files')-->
        <!--Date: 2022/09/19-->
        <!--Status: experimental-->
        <!--ID: e01fa958-6893-41d4-ae03-182477c5e77d-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Remote Access Tool - RURAT Execution From Unusual Location</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rutserv\.exe|\\+rfusclient\.exe)$</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)Remote\ Utilities</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Remote\ Utilities)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Remote\ Utilities)</field>
    </rule>
    <rule id="901008" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_susp_grpconv.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the suspicious execution of a utility to convert Windows 3.x .grp files or for persistence purposes by malicious software or actors-->
        <!--Date: 2022/05/19-->
        <!--Status: test-->
        <!--ID: f14e169e-9978-4c69-acb3-1cff8200bc36-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547</id>
        </mitre>
        <description>Suspicious GrpConv Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)grpconv\.exe\ \-o|grpconv\ \-o</field>
    </rule>
    <rule id="901009" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_shadow_copies_deletion.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Michael Haag, Teymur Kheirkhabarov, Daniil Yugoslavskiy, oscd.community, Andreas Hunkeler (@Karneades)-->
        <!--Description: Shadow Copies deletion using operating systems utilities-->
        <!--Date: 2019/10/22-->
        <!--Status: stable-->
        <!--ID: c947b146-0abc-4c87-9c64-b17e9d7274a2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.impact</id>
            <id>attack.t1070</id>
            <id>attack.t1490</id>
        </mitre>
        <description>Shadow Copies Deletion Using Operating Systems Utilities</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe|\\+wmic\.exe|\\+vssadmin\.exe|\\+diskshadow\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll|wmic\.exe|VSSADMIN\.EXE|diskshadow\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shadow</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)delete</field>
    </rule>
    <rule id="901010" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_shadow_copies_deletion.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Michael Haag, Teymur Kheirkhabarov, Daniil Yugoslavskiy, oscd.community, Andreas Hunkeler (@Karneades)-->
        <!--Description: Shadow Copies deletion using operating systems utilities-->
        <!--Date: 2019/10/22-->
        <!--Status: stable-->
        <!--ID: c947b146-0abc-4c87-9c64-b17e9d7274a2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.impact</id>
            <id>attack.t1070</id>
            <id>attack.t1490</id>
        </mitre>
        <description>Shadow Copies Deletion Using Operating Systems Utilities</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wbadmin\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)WBADMIN\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)delete</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)catalog</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)quiet</field>
    </rule>
    <rule id="901011" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_parents.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious parent processes that should not have any children or should only have a single possible child program-->
        <!--Date: 2022/03/21-->
        <!--Status: test-->
        <!--ID: cbec226f-63d9-4eca-9f52-dfb6652f24df-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Suspicious Process Parents</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+minesweeper\.exe|\\+winver\.exe|\\+bitsadmin\.exe)$</field>
    </rule>
    <rule id="901012" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_parents.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious parent processes that should not have any children or should only have a single possible child program-->
        <!--Date: 2022/03/21-->
        <!--Status: test-->
        <!--ID: cbec226f-63d9-4eca-9f52-dfb6652f24df-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Suspicious Process Parents</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+csrss\.exe|\\+certutil\.exe|\\+eventvwr\.exe|\\+calc\.exe|\\+notepad\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WerFault\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+wermgr\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+conhost\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+mmc\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+win32calc\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+notepad\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="901013" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wusa_cab_files_extraction.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of the "wusa.exe" (Windows Update Standalone Installer) utility to extract cab using the "/extract" argument which is not longer supported. This could indicate an attacker using an old technique-->
        <!--Date: 2022/08/04-->
        <!--Status: test-->
        <!--ID: 59b39960-5f9d-4a49-9cef-1e4d2c1d0cb9-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Wusa Extracting Cab Files</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wusa\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/extract:</field>
    </rule>
    <rule id="901014" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_recon_commands_and_processes.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, Anton Kutepov, oscd.community-->
        <!--Description: Detects certain command line parameters often used during reconnaissance activity via web shells-->
        <!--Date: 2017/01/01-->
        <!--Status: test-->
        <!--ID: bed2a484-9348-4143-8a8a-b801c979301c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Detection With Command Line Keywords</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+w3wp\.exe|\\+php\-cgi\.exe|\\+nginx\.exe|\\+httpd\.exe|\\+caddy\.exe|\\+ws_tomcatservice\.exe)$</field>
    </rule>
    <rule id="901015" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_recon_commands_and_processes.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, Anton Kutepov, oscd.community-->
        <!--Description: Detects certain command line parameters often used during reconnaissance activity via web shells-->
        <!--Date: 2017/01/01-->
        <!--Status: test-->
        <!--ID: bed2a484-9348-4143-8a8a-b801c979301c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Detection With Command Line Keywords</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+java\.exe|\\+javaw\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\-tomcat\-|\\+tomcat</field>
    </rule>
    <rule id="901016" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_recon_commands_and_processes.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, Anton Kutepov, oscd.community-->
        <!--Description: Detects certain command line parameters often used during reconnaissance activity via web shells-->
        <!--Date: 2017/01/01-->
        <!--Status: test-->
        <!--ID: bed2a484-9348-4143-8a8a-b801c979301c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Detection With Command Line Keywords</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+java\.exe|\\+javaw\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)catalina\.jar|CATALINA_HOME</field>
    </rule>
    <rule id="901017" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_recon_commands_and_processes.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, Anton Kutepov, oscd.community-->
        <!--Description: Detects certain command line parameters often used during reconnaissance activity via web shells-->
        <!--Date: 2017/01/01-->
        <!--Status: test-->
        <!--ID: bed2a484-9348-4143-8a8a-b801c979301c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Detection With Command Line Keywords</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)net\.exe|net1\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ user\ |\ use\ |\ group\ )</field>
    </rule>
    <rule id="901018" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_recon_commands_and_processes.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, Anton Kutepov, oscd.community-->
        <!--Description: Detects certain command line parameters often used during reconnaissance activity via web shells-->
        <!--Date: 2017/01/01-->
        <!--Status: test-->
        <!--ID: bed2a484-9348-4143-8a8a-b801c979301c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Detection With Command Line Keywords</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)ping\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-n\ )</field>
    </rule>
    <rule id="901019" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_recon_commands_and_processes.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, Anton Kutepov, oscd.community-->
        <!--Description: Detects certain command line parameters often used during reconnaissance activity via web shells-->
        <!--Date: 2017/01/01-->
        <!--Status: test-->
        <!--ID: bed2a484-9348-4143-8a8a-b801c979301c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Detection With Command Line Keywords</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\&amp;cd\&amp;echo|cd\ /d\ )</field>
    </rule>
    <rule id="901020" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_recon_commands_and_processes.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, Anton Kutepov, oscd.community-->
        <!--Description: Detects certain command line parameters often used during reconnaissance activity via web shells-->
        <!--Date: 2017/01/01-->
        <!--Status: test-->
        <!--ID: bed2a484-9348-4143-8a8a-b801c979301c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Detection With Command Line Keywords</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)wmic\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /node:</field>
    </rule>
    <rule id="901021" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_recon_commands_and_processes.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, Anton Kutepov, oscd.community-->
        <!--Description: Detects certain command line parameters often used during reconnaissance activity via web shells-->
        <!--Date: 2017/01/01-->
        <!--Status: test-->
        <!--ID: bed2a484-9348-4143-8a8a-b801c979301c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Detection With Command Line Keywords</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+dsquery\.exe|\\+find\.exe|\\+findstr\.exe|\\+ipconfig\.exe|\\+netstat\.exe|\\+nslookup\.exe|\\+pathping\.exe|\\+quser\.exe|\\+schtasks\.exe|\\+systeminfo\.exe|\\+tasklist\.exe|\\+tracert\.exe|\\+ver\.exe|\\+wevtutil\.exe|\\+whoami\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)dsquery\.exe|find\.exe|findstr\.exe|ipconfig\.exe|netstat\.exe|nslookup\.exe|pathping\.exe|quser\.exe|schtasks\.exe|sysinfo\.exe|tasklist\.exe|tracert\.exe|ver\.exe|VSSADMIN\.EXE|wevtutil\.exe|whoami\.exe</field>
    </rule>
    <rule id="901022" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_recon_commands_and_processes.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Jonhnathan Ribeiro, Anton Kutepov, oscd.community-->
        <!--Description: Detects certain command line parameters often used during reconnaissance activity via web shells-->
        <!--Date: 2017/01/01-->
        <!--Status: test-->
        <!--ID: bed2a484-9348-4143-8a8a-b801c979301c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Detection With Command Line Keywords</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ Test\-NetConnection\ |dir\ \\+</field>
    </rule>
    <rule id="901023" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_abusing_debug_privilege.yml</info>
        <!--Sigma Rule Author: Semanur Guneysu @semanurtg, oscd.community-->
        <!--Description: Detection of unusual child processes by different system processes-->
        <!--Date: 2020/10/28-->
        <!--Status: test-->
        <!--ID: d522eca2-2973-4391-a3e0-ef0374321dae-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548</id>
        </mitre>
        <description>Abused Debug Privilege by Arbitrary Parent Processes</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+winlogon\.exe|\\+services\.exe|\\+lsass\.exe|\\+csrss\.exe|\\+smss\.exe|\\+wininit\.exe|\\+spoolsv\.exe|\\+searchindexer\.exe)$</field>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)AUTHORI|AUTORI</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe|\\+cmd\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll|Cmd\.Exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ route\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ ADD\ )</field>
    </rule>
    <rule id="901024" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmic_xsl_script_processing.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community, Swachchhanda Shrawan Poudel-->
        <!--Description: Detects the execution of WMIC with the "format" flag to potentially load XSL files.
Adversaries abuse this functionality to execute arbitrary files while potentially bypassing application whitelisting defenses.
Extensible Stylesheet Language (XSL) files are commonly used to describe the processing and rendering of data within XML files.
-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: 05c36dd6-79d6-4a9a-97da-3db20298ab2d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1220</id>
        </mitre>
        <description>XSL Script Execution Via WMIC.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wmic\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/format|\-format</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Format:List</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Format:htable</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Format:hform</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Format:table</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Format:mof</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Format:value</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Format:rawxml</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Format:xml</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Format:csv</field>
    </rule>
    <rule id="901025" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vslsagent_agentextensionpath_load.yml</info>
        <!--Sigma Rule Author: bohops-->
        <!--Description: Detects Microsoft Visual Studio vsls-agent.exe lolbin execution with a suspicious library load using the  - agentExtensionPath parameter-->
        <!--Date: 2022/10/30-->
        <!--Status: test-->
        <!--ID: 43103702-5886-11ed-9b6a-0242ac120002-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Suspicious Vsls-Agent Command With AgentExtensionPath Load</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+vsls\-agent\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-agentExtensionPath</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Microsoft\.VisualStudio\.LiveShare\.Agent\.</field>
    </rule>
    <rule id="901026" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_base64_wmi_classes.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects calls to base64 encoded WMI class such as "Win32_Shadowcopy", "Win32_ScheduledJob", etc.-->
        <!--Date: 2023/01/30-->
        <!--Status: test-->
        <!--ID: 1816994b-42e1-4fb1-afd2-134d88184f71-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>PowerShell Base64 Encoded WMI Classes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQ|cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkA|XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5A|V2luMzJfU2hhZG93Y29we|dpbjMyX1NoYWRvd2NvcH|XaW4zMl9TaGFkb3djb3B5</field>
    </rule>
    <rule id="901027" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_base64_wmi_classes.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects calls to base64 encoded WMI class such as "Win32_Shadowcopy", "Win32_ScheduledJob", etc.-->
        <!--Date: 2023/01/30-->
        <!--Status: test-->
        <!--ID: 1816994b-42e1-4fb1-afd2-134d88184f71-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>PowerShell Base64 Encoded WMI Classes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)VwBpAG4AMwAyAF8AUwBjAGgAZQBkAHUAbABlAGQASgBvAGIA|cAaQBuADMAMgBfAFMAYwBoAGUAZAB1AGwAZQBkAEoAbwBiA|XAGkAbgAzADIAXwBTAGMAaABlAGQAdQBsAGUAZABKAG8AYg|V2luMzJfU2NoZWR1bGVkSm9i|dpbjMyX1NjaGVkdWxlZEpvY|XaW4zMl9TY2hlZHVsZWRKb2</field>
    </rule>
    <rule id="901028" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_base64_wmi_classes.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects calls to base64 encoded WMI class such as "Win32_Shadowcopy", "Win32_ScheduledJob", etc.-->
        <!--Date: 2023/01/30-->
        <!--Status: test-->
        <!--ID: 1816994b-42e1-4fb1-afd2-134d88184f71-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>PowerShell Base64 Encoded WMI Classes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)VwBpAG4AMwAyAF8AUAByAG8AYwBlAHMAcw|cAaQBuADMAMgBfAFAAcgBvAGMAZQBzAHMA|XAGkAbgAzADIAXwBQAHIAbwBjAGUAcwBzA|V2luMzJfUHJvY2Vzc|dpbjMyX1Byb2Nlc3|XaW4zMl9Qcm9jZXNz</field>
    </rule>
    <rule id="901029" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_base64_wmi_classes.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects calls to base64 encoded WMI class such as "Win32_Shadowcopy", "Win32_ScheduledJob", etc.-->
        <!--Date: 2023/01/30-->
        <!--Status: test-->
        <!--ID: 1816994b-42e1-4fb1-afd2-134d88184f71-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>PowerShell Base64 Encoded WMI Classes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)VwBpAG4AMwAyAF8AVQBzAGUAcgBBAGMAYwBvAHUAbgB0A|cAaQBuADMAMgBfAFUAcwBlAHIAQQBjAGMAbwB1AG4AdA|XAGkAbgAzADIAXwBVAHMAZQByAEEAYwBjAG8AdQBuAHQA|V2luMzJfVXNlckFjY291bn|dpbjMyX1VzZXJBY2NvdW50|XaW4zMl9Vc2VyQWNjb3Vud</field>
    </rule>
    <rule id="901030" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_base64_wmi_classes.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects calls to base64 encoded WMI class such as "Win32_Shadowcopy", "Win32_ScheduledJob", etc.-->
        <!--Date: 2023/01/30-->
        <!--Status: test-->
        <!--ID: 1816994b-42e1-4fb1-afd2-134d88184f71-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>PowerShell Base64 Encoded WMI Classes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)VwBpAG4AMwAyAF8ATABvAGcAZwBlAGQATwBuAFUAcwBlAHIA|cAaQBuADMAMgBfAEwAbwBnAGcAZQBkAE8AbgBVAHMAZQByA|XAGkAbgAzADIAXwBMAG8AZwBnAGUAZABPAG4AVQBzAGUAcg|V2luMzJfTG9nZ2VkT25Vc2Vy|dpbjMyX0xvZ2dlZE9uVXNlc|XaW4zMl9Mb2dnZWRPblVzZX</field>
    </rule>
    <rule id="901031" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_file_characteristics.yml</info>
        <!--Sigma Rule Author: Markus Neis, Sander Wiebing-->
        <!--Description: Detects Executables in the Downloads folder without FileVersion,Description,Product,Company likely created with py2exe-->
        <!--Date: 2018/11/22-->
        <!--Status: test-->
        <!--ID: 9637e8a5-7131-4f7f-bdc7-2b05d8670c43-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.006</id>
        </mitre>
        <description>Suspicious File Characteristics Due to Missing Fields</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)\\+.</field>
        <field name="win.eventdata.fileVersion" negate="no" type="pcre2">(?i)\\+.</field>
    </rule>
    <rule id="901032" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_file_characteristics.yml</info>
        <!--Sigma Rule Author: Markus Neis, Sander Wiebing-->
        <!--Description: Detects Executables in the Downloads folder without FileVersion,Description,Product,Company likely created with py2exe-->
        <!--Date: 2018/11/22-->
        <!--Status: test-->
        <!--ID: 9637e8a5-7131-4f7f-bdc7-2b05d8670c43-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.006</id>
        </mitre>
        <description>Suspicious File Characteristics Due to Missing Fields</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)\\+.</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)\\+.</field>
    </rule>
    <rule id="901033" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_file_characteristics.yml</info>
        <!--Sigma Rule Author: Markus Neis, Sander Wiebing-->
        <!--Description: Detects Executables in the Downloads folder without FileVersion,Description,Product,Company likely created with py2exe-->
        <!--Date: 2018/11/22-->
        <!--Status: test-->
        <!--ID: 9637e8a5-7131-4f7f-bdc7-2b05d8670c43-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.006</id>
        </mitre>
        <description>Suspicious File Characteristics Due to Missing Fields</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)\\+.</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)\\+.</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+Downloads\\+</field>
    </rule>
    <rule id="901034" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_tscon_rdp_redirect.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a suspicious RDP session redirect using tscon.exe-->
        <!--Date: 2018/03/17-->
        <!--Status: test-->
        <!--ID: f72aa3e8-49f9-4c7d-bd74-f8ab84ff9bbb-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1563.002</id>
            <id>attack.t1021.001</id>
            <id>car.2013-07-002</id>
        </mitre>
        <description>Suspicious RDP Redirect Using TSCON</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /dest:rdp\-tcp\#</field>
    </rule>
    <rule id="901035" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_aspnet_compiler_exectuion.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects execution of "aspnet_compiler.exe" which can be abused to compile and execute C# code.-->
        <!--Date: 2021/11/24-->
        <!--Status: test-->
        <!--ID: a01b8329-5953-4f73-ae2d-aa01e1f35f00-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1127</id>
        </mitre>
        <description>AspNetCompiler Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\+Windows\\+Microsoft\.NET\\+Framework\\+|C:\\+Windows\\+Microsoft\.NET\\+Framework64\\+</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+aspnet_compiler\.exe)$</field>
    </rule>
    <rule id="901036" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_addinutil_uncommon_child_process.yml</info>
        <!--Sigma Rule Author: Michael McKinley (@McKinleyMike), Tony Latteri (@TheLatteri)-->
        <!--Description: Detects uncommon child processes of the Add-In deployment cache updating utility (AddInutil.exe) which could be a sign of potential abuse of the binary to proxy execution via a custom Addins.Store payload.
-->
        <!--Date: 2023/09/18-->
        <!--Status: experimental-->
        <!--ID: b5746143-59d6-4603-8d06-acbd60e166ee-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Uncommon Child Process Of AddinUtil.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+addinutil\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+conhost\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+werfault\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+SysWOW64\\+werfault\.exe)$</field>
    </rule>
    <rule id="901037" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_invoke_obfuscation_via_use_mhsta.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use MSHTA in Scripts-->
        <!--Date: 2020/10/08-->
        <!--Status: test-->
        <!--ID: ac20ae82-8758-4f38-958e-b44a3140ca88-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use MSHTA</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)set</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)mshta</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)vbscript:createobject</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.run</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\(window\.close\)</field>
    </rule>
    <rule id="901038" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remote_access_tools_anydesk_susp_exec.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/05/20-->
        <!--Status: experimental-->
        <!--ID: 065b00ca-5d5c-4557-ac95-64a6d0b64d86-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Remote Access Tool - Anydesk Execution From Suspicious Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+AnyDesk\.exe)$</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)AnyDesk</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)AnyDesk</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)AnyDesk\ Software\ GmbH</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)Program\ Files\ \(x86\)\\+AnyDesk</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)Program\ Files\\+AnyDesk</field>
    </rule>
    <rule id="901039" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_impersonate.yml</info>
        <!--Sigma Rule Author: Sai Prashanth Pulisetti @pulisettis-->
        <!--Description: Detects execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively-->
        <!--Date: 2022/12/21-->
        <!--Status: experimental-->
        <!--ID: cf0c254b-22f1-4b2b-8221-e137b3c0af94-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1134.001</id>
            <id>attack.t1134.003</id>
        </mitre>
        <description>HackTool - Impersonate Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)impersonate\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ list\ |\ exec\ |\ adduser\ )</field>
    </rule>
    <rule id="901040" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_impersonate.yml</info>
        <!--Sigma Rule Author: Sai Prashanth Pulisetti @pulisettis-->
        <!--Description: Detects execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively-->
        <!--Date: 2022/12/21-->
        <!--Status: experimental-->
        <!--ID: cf0c254b-22f1-4b2b-8221-e137b3c0af94-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1134.001</id>
            <id>attack.t1134.003</id>
        </mitre>
        <description>HackTool - Impersonate Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)MD5=9520714AB576B0ED01D1513691377D01|SHA256=E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A|IMPHASH=0A358FFC1697B7A07D0E817AC740DF62</field>
    </rule>
    <rule id="901041" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_impersonate.yml</info>
        <!--Sigma Rule Author: Sai Prashanth Pulisetti @pulisettis-->
        <!--Description: Detects execution of the Impersonate tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively-->
        <!--Date: 2022/12/21-->
        <!--Status: experimental-->
        <!--ID: cf0c254b-22f1-4b2b-8221-e137b3c0af94-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1134.001</id>
            <id>attack.t1134.003</id>
        </mitre>
        <description>HackTool - Impersonate Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)9520714AB576B0ED01D1513691377D01</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)E81CC96E2118DC4FBFE5BAD1604E0AC7681960143E2101E1A024D52264BB0A8A</field>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)0A358FFC1697B7A07D0E817AC740DF62</field>
    </rule>
    <rule id="901042" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_odbcconf_driver_install_susp.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of "odbcconf" with the "INSTALLDRIVER" action where the driver doesn't contain a ".dll" extension. This is often used as a defense evasion method.-->
        <!--Date: 2023/05/23-->
        <!--Status: experimental-->
        <!--ID: cb0fe7c5-f3a3-484d-aa25-d350a7912729-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.008</id>
        </mitre>
        <description>Suspicious Driver/DLL Installation Via Odbcconf.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+odbcconf\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)odbcconf\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:INSTALLDRIVER\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.dll</field>
    </rule>
    <rule id="901043" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_dir_execution.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects usage of the "dir" command that is part of Windows batch/cmd to collect information about directories-->
        <!--Date: 2021/12/13-->
        <!--Status: experimental-->
        <!--ID: 7c9340a9-e2ee-4e43-94c5-c54ebbea1006-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1217</id>
        </mitre>
        <description>Files And Subdirectories Listing Using Dir</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:dir\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /s</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /b</field>
    </rule>
    <rule id="901044" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_nolmhash.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects changes to the "NoLMHash" registry value in order to allow Windows to store LM Hashes.
By setting this registry value to "0" (DWORD), Windows will be allowed to store a LAN manager hash of your password in Active Directory and local SAM databases.
-->
        <!--Date: 2023/12/15-->
        <!--Status: test-->
        <!--ID: 98dedfdd-8333-49d4-9f23-d7018cccae53-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Enable LM Hash Storage - ProcCreation</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+System\\+CurrentControlSet\\+Control\\+Lsa\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)NoLMHash</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ 0</field>
    </rule>
    <rule id="901045" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remote_access_tools_screenconnect.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/02/13-->
        <!--Status: test-->
        <!--ID: 57bff678-25d1-4d6c-8211-8ca106d12053-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Remote Access Tool - ScreenConnect Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)ScreenConnect\ Service</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)ScreenConnect</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)ScreenConnect\ Software</field>
    </rule>
    <rule id="901046" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_addinutil_suspicious_cmdline.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Michael McKinley (@McKinleyMike), Tony Latteri (@TheLatteri)-->
        <!--Description: Detects execution of the Add-In deployment cache updating utility (AddInutil.exe) with suspicious Addinroot or Pipelineroot paths. An adversary may execute AddinUtil.exe with uncommon Addinroot/Pipelineroot paths that point to the adversaries Addins.Store payload.
-->
        <!--Date: 2023/09/18-->
        <!--Status: experimental-->
        <!--ID: 631b22a4-70f4-4e2f-9ea8-42f84d9df6d8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Suspicious AddinUtil.EXE CommandLine Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+addinutil\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)AddInUtil\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-AddInRoot:|\-PipelineRoot:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+|\\+Desktop\\+|\\+Downloads\\+|\\+Users\\+Public\\+|\\+Windows\\+Temp\\+</field>
    </rule>
    <rule id="901047" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_addinutil_suspicious_cmdline.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Michael McKinley (@McKinleyMike), Tony Latteri (@TheLatteri)-->
        <!--Description: Detects execution of the Add-In deployment cache updating utility (AddInutil.exe) with suspicious Addinroot or Pipelineroot paths. An adversary may execute AddinUtil.exe with uncommon Addinroot/Pipelineroot paths that point to the adversaries Addins.Store payload.
-->
        <!--Date: 2023/09/18-->
        <!--Status: experimental-->
        <!--ID: 631b22a4-70f4-4e2f-9ea8-42f84d9df6d8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Suspicious AddinUtil.EXE CommandLine Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+addinutil\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)AddInUtil\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-AddInRoot:|\-PipelineRoot:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-AddInRoot:\.|\-AddInRoot:"\."|\-PipelineRoot:\.|\-PipelineRoot:"\."</field>
        <field name="win.eventdata.currentDirectory" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+|\\+Desktop\\+|\\+Downloads\\+|\\+Users\\+Public\\+|\\+Windows\\+Temp\\+</field>
    </rule>
    <rule id="901048" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regedit_import_keys_ads.yml</info>
        <!--Sigma Rule Author: Oddvar Moe, Sander Wiebing, oscd.community-->
        <!--Description: Detects the import of a alternate datastream to the registry with regedit.exe.-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: 0b80ade5-6997-4b1d-99a1-71701778ea61-->
        <mitre>
            <id>attack.t1112</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Imports Registry Key From an ADS</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+regedit\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)REGEDIT\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /i\ |\.reg</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):[^ \\+]</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ /e\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ /a\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ /c\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ \-e\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ \-a\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ \-c\ )</field>
    </rule>
    <rule id="901049" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysinternals_sdelete.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the use of SDelete to erase a file not the free space-->
        <!--Date: 2021/06/03-->
        <!--Status: experimental-->
        <!--ID: a4824fca-976f-4964-b334-0621379e84c4-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1485</id>
        </mitre>
        <description>Potential File Overwrite Via Sysinternals SDelete</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)sdelete\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ \-h</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ \-c</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ \-z</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ /\\+.</field>
    </rule>
    <rule id="901050" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_cli_obfuscation_unicode.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth (Nextron Systems)-->
        <!--Description: Detects potential commandline obfuscation using unicode characters.
Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit.
-->
        <!--Date: 2022/01/15-->
        <!--Status: test-->
        <!--ID: e0552b19-5a83-4222-b141-b36184bb8d79-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Potential Commandline Obfuscation Using Unicode Characters</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ˣ|˪|ˢ</field>
    </rule>
    <rule id="901051" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_cli_obfuscation_unicode.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth (Nextron Systems)-->
        <!--Description: Detects potential commandline obfuscation using unicode characters.
Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit.
-->
        <!--Date: 2022/01/15-->
        <!--Status: test-->
        <!--ID: e0552b19-5a83-4222-b141-b36184bb8d79-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Potential Commandline Obfuscation Using Unicode Characters</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)∕|⁄</field>
    </rule>
    <rule id="901052" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_cli_obfuscation_unicode.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth (Nextron Systems)-->
        <!--Description: Detects potential commandline obfuscation using unicode characters.
Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit.
-->
        <!--Date: 2022/01/15-->
        <!--Status: test-->
        <!--ID: e0552b19-5a83-4222-b141-b36184bb8d79-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Potential Commandline Obfuscation Using Unicode Characters</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)―|—</field>
    </rule>
    <rule id="901053" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_cli_obfuscation_unicode.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth (Nextron Systems)-->
        <!--Description: Detects potential commandline obfuscation using unicode characters.
Adversaries may attempt to make an executable or file difficult to discover or analyze by encrypting, encoding, or otherwise obfuscating its contents on the system or in transit.
-->
        <!--Date: 2022/01/15-->
        <!--Status: test-->
        <!--ID: e0552b19-5a83-4222-b141-b36184bb8d79-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Potential Commandline Obfuscation Using Unicode Characters</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)â|€|£|¯|®|µ|¶</field>
    </rule>
    <rule id="901054" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_msconfig_gui.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)-->
        <!--Date: 2021/08/30-->
        <!--Status: test-->
        <!--ID: ad92e3f9-7eb6-460e-96b1-582b0ccbb980-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using MSConfig Token Modification - Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Temp\\+pkgmgr\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)"C:\\+Windows\\+system32\\+msconfig\.exe"\ \-5</field>
    </rule>
    <rule id="901055" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_curl_download_exec_combo.yml</info>
        <!--Sigma Rule Author: Sreeman, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Adversaries can use curl to download payloads remotely and execute them. Curl is included by default in Windows 10 build 17063 and later.-->
        <!--Date: 2020/01/13-->
        <!--Status: test-->
        <!--ID: 21dd6d38-2b18-4453-9404-a0fe4a0cc288-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218</id>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Curl Download And Execute Combination</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /c\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:curl\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-o</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\&amp;</field>
    </rule>
    <rule id="901056" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_windows_terminal_susp_children.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious children spawned via the Windows Terminal application which could be a sign of persistence via WindowsTerminal (see references section)-->
        <!--Date: 2022/07/25-->
        <!--Status: experimental-->
        <!--ID: 8de89e52-f6e1-4b5b-afd1-41ecfa300d48-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
        </mitre>
        <description>Suspicious WindowsTerminal Child Processes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+WindowsTerminal\.exe|\\+wt\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe|\\+regsvr32\.exe|\\+certutil\.exe|\\+cscript\.exe|\\+wscript\.exe|\\+csc\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\+Users\\+Public\\+|\\+Downloads\\+|\\+Desktop\\+|\\+AppData\\+Local\\+Temp\\+|\\+Windows\\+TEMP\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ iex\ |\ icm|Invoke\-|Import\-Module\ |ipmo\ |DownloadString\(|\ /c\ |\ /k\ |\ /r\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Import\-Module</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Microsoft\.VisualStudio\.DevShell\.dll</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Enter\-VsDevShell</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Packages\\+Microsoft\.WindowsTerminal_</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+LocalState\\+settings\.json</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Microsoft\ Visual\ Studio\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+Common7\\+Tools\\+VsDevCmd\.bat</field>
    </rule>
    <rule id="901057" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_office_token_search.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects possible search for office tokens via CLI by looking for the string "eyJ0eX". This string is used as an anchor to look for the start of the JWT token used by office and similar apps.-->
        <!--Date: 2022/10/25-->
        <!--Status: test-->
        <!--ID: 6d3a3952-6530-44a3-8554-cf17c116c615-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1528</id>
        </mitre>
        <description>Suspicious Office Token Search Via CLI</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)eyJ0eXAiOi|\ eyJ0eX|\ "eyJ0eX"|\ 'eyJ0eX'</field>
    </rule>
    <rule id="901058" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_susp_control_dll_load.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious Rundll32 execution from control.exe as used by Equation Group and Exploit Kits-->
        <!--Date: 2017/04/15-->
        <!--Status: test-->
        <!--ID: d7eb979b-c2b5-4a6f-a3a7-c87ce6763819-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Suspicious Control Panel DLL Load</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+System32\\+control\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)RUNDLL32\.EXE</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Shell32\.dll</field>
    </rule>
    <rule id="901059" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_cobaltstrike_process_patterns.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potential process patterns related to Cobalt Strike beacon activity-->
        <!--Date: 2021/07/27-->
        <!--Status: experimental-->
        <!--ID: f35c5d71-b489-4e22-a115-f003df287317-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Potential CobaltStrike Process Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:cmd\.exe\ /C\ whoami)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)^(?:C:\\+Temp\\+)</field>
    </rule>
    <rule id="901060" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_cobaltstrike_process_patterns.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potential process patterns related to Cobalt Strike beacon activity-->
        <!--Date: 2021/07/27-->
        <!--Status: experimental-->
        <!--ID: f35c5d71-b489-4e22-a115-f003df287317-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Potential CobaltStrike Process Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+runonce\.exe|\\+dllhost\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cmd\.exe\ /c\ echo</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)&gt;\ \\+\.\\+pipe</field>
    </rule>
    <rule id="901061" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_cobaltstrike_process_patterns.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potential process patterns related to Cobalt Strike beacon activity-->
        <!--Date: 2021/07/27-->
        <!--Status: experimental-->
        <!--ID: f35c5d71-b489-4e22-a115-f003df287317-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Potential CobaltStrike Process Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)cmd\.exe\ /C\ echo</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\ &gt;\ \\+\.\\+pipe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:conhost\.exe\ 0xffffffff\ \-ForceV1)$</field>
    </rule>
    <rule id="901062" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_cobaltstrike_process_patterns.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potential process patterns related to Cobalt Strike beacon activity-->
        <!--Date: 2021/07/27-->
        <!--Status: experimental-->
        <!--ID: f35c5d71-b489-4e22-a115-f003df287317-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Potential CobaltStrike Process Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)(?:/C\ whoami)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:conhost\.exe\ 0xffffffff\ \-ForceV1)$</field>
    </rule>
    <rule id="901063" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regsvr32_flags_anomaly.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a potential command line flag anomaly related to "regsvr32" in which the "/i" flag is used without the "/n" which should be uncommon.-->
        <!--Date: 2019/07/13-->
        <!--Status: test-->
        <!--ID: b236190c-1c61-41e9-84b3-3fe03f6d76b0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.010</id>
        </mitre>
        <description>Potential Regsvr32 Commandline Flag Anomaly</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+regsvr32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /i:|\ \-i:</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ /n\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ \-n\ )</field>
    </rule>
    <rule id="901064" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_python_inline_command_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of python using the "-c" flag. This is could be used as a way to launch a reverse shell or execute live python code.-->
        <!--Date: 2023/01/02-->
        <!--Status: experimental-->
        <!--ID: 899133d5-4d7c-4a7f-94ee-27355c879d90-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Python Inline Command Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)python\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:python\.exe|python3\.exe|python2\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-c</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Python)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+python\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\-E\ \-s\ \-m\ ensurepip\ \-U\ \-\-default\-pip</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Programs\\+Microsoft\ VS\ Code\\+Code\.exe)$</field>
    </rule>
    <rule id="901065" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_network_sniffing.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potential network sniffing via use of network tools such as "tshark", "windump".
Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.
An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.
-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: ba1f7802-adc7-48b4-9ecb-81e227fddfd5-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.discovery</id>
            <id>attack.t1040</id>
        </mitre>
        <description>Potential Network Sniffing Activity Using Network Tools</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+tshark\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-i</field>
    </rule>
    <rule id="901066" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_network_sniffing.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potential network sniffing via use of network tools such as "tshark", "windump".
Network sniffing refers to using the network interface on a system to monitor or capture information sent over a wired or wireless connection.
An adversary may place a network interface into promiscuous mode to passively access data in transit over the network, or use span ports to capture a larger amount of data.
-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: ba1f7802-adc7-48b4-9ecb-81e227fddfd5-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.discovery</id>
            <id>attack.t1040</id>
        </mitre>
        <description>Potential Network Sniffing Activity Using Network Tools</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+windump\.exe)$</field>
    </rule>
    <rule id="901067" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_citrix_trolleyexpress_procdump.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a possible process memory dump that uses the white-listed Citrix TrolleyExpress.exe filename as a way to dump the lsass process memory-->
        <!--Date: 2022/02/10-->
        <!--Status: test-->
        <!--ID: 4c0aaedc-154c-4427-ada0-d80ef9c9deb6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Process Access via TrolleyExpress Exclusion</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\\+TrolleyExpress\ 7|\\+TrolleyExpress\ 8|\\+TrolleyExpress\ 9|\\+TrolleyExpress\.exe\ 7|\\+TrolleyExpress\.exe\ 8|\\+TrolleyExpress\.exe\ 9|\\+TrolleyExpress\.exe\ \-ma\ )</field>
    </rule>
    <rule id="901068" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_citrix_trolleyexpress_procdump.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a possible process memory dump that uses the white-listed Citrix TrolleyExpress.exe filename as a way to dump the lsass process memory-->
        <!--Date: 2022/02/10-->
        <!--Status: test-->
        <!--ID: 4c0aaedc-154c-4427-ada0-d80ef9c9deb6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Process Access via TrolleyExpress Exclusion</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+TrolleyExpress\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="yes" type="pcre2">(?i)CtxInstall</field>
        <field name="win.eventdata.originalFileName" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="901069" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_configsecuritypolicy.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Upload file, credentials or data exfiltration with Binary part of Windows Defender-->
        <!--Date: 2021/11/26-->
        <!--Status: test-->
        <!--ID: 1f0f6176-6482-4027-b151-00071af39d7e-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567</id>
        </mitre>
        <description>Suspicious ConfigSecurityPolicy Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ConfigSecurityPolicy\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ConfigSecurityPolicy\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)ConfigSecurityPolicy\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)https://|http://|ftp://</field>
    </rule>
    <rule id="901070" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmic_susp_process_creation.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects WMIC executing "process call create" with suspicious calls to processes such as "rundll32", "regsrv32", etc.-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: 3c89a1e8-0fba-449e-8f1b-8409d6267ec8-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
        </mitre>
        <description>Suspicious Process Created Via Wmic.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:process\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:call\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:create\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32|bitsadmin|regsvr32|cmd\.exe\ /c\ |cmd\.exe\ /k\ |cmd\.exe\ /r\ |cmd\ /c\ |cmd\ /k\ |cmd\ /r\ |powershell|pwsh|certutil|cscript|wscript|mshta|\\+Users\\+Public\\+|\\+Windows\\+Temp\\+|\\+AppData\\+Local\\+|%temp%|%tmp%|%ProgramData%|%appdata%|%comspec%|%localappdata%</field>
    </rule>
    <rule id="901071" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_gpg4win_portable_execution.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of "gpg.exe" from uncommon location. Often used by ransomware and loaders to decrypt/encrypt data.-->
        <!--Date: 2023/08/06-->
        <!--Status: experimental-->
        <!--ID: 77df53a5-1d78-4f32-bc5a-0e7465bd8f41-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1486</id>
        </mitre>
        <description>Portable Gpg.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+gpg\.exe|\\+gpg2\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)gpg\.exe</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)GnuPG’s\ OpenPGP\ tool</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+GNU\\+GnuPG\\+bin\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+GnuPG\ VS\-Desktop\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+GnuPG\\+bin\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+Gpg4win\\+bin\\+</field>
    </rule>
    <rule id="901072" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_public_folder.yml</info>
        <!--Sigma Rule Author: Max Altgelt (Nextron Systems)-->
        <!--Description: This rule detects execution of PowerShell scripts located in the "C:\Users\Public" folder-->
        <!--Date: 2022/04/06-->
        <!--Status: test-->
        <!--ID: fb9d3ff7-7348-46ab-af8c-b55f5fbf39b4-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Execution of Powershell Script in Public Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-f\ C:\\+Users\\+Public|\-f\ "C:\\+Users\\+Public|\-f\ %Public%|\-fi\ C:\\+Users\\+Public|\-fi\ "C:\\+Users\\+Public|\-fi\ %Public%|\-fil\ C:\\+Users\\+Public|\-fil\ "C:\\+Users\\+Public|\-fil\ %Public%|\-file\ C:\\+Users\\+Public|\-file\ "C:\\+Users\\+Public|\-file\ %Public%</field>
    </rule>
    <rule id="901073" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_netsh_fw_delete_rule.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the removal of a port or application rule in the Windows Firewall configuration using netsh-->
        <!--Date: 2022/08/14-->
        <!--Status: experimental-->
        <!--ID: 1a5fefe6-734f-452e-a07d-fc1c35bce4b2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>Firewall Rule Deleted Via Netsh.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+netsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)netsh\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)firewall</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:delete\ )</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+Dropbox\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)name=Dropbox</field>
    </rule>
    <rule id="901074" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sharp_impersonation.yml</info>
        <!--Sigma Rule Author: Sai Prashanth Pulisetti @pulisettis, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of the SharpImpersonation tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively-->
        <!--Date: 2022/12/27-->
        <!--Status: experimental-->
        <!--ID: f89b08d0-77ad-4728-817b-9b16c5a69c7a-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1134.001</id>
            <id>attack.t1134.003</id>
        </mitre>
        <description>HackTool - SharpImpersonation Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+SharpImpersonation\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)SharpImpersonation\.exe</field>
    </rule>
    <rule id="901075" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sharp_impersonation.yml</info>
        <!--Sigma Rule Author: Sai Prashanth Pulisetti @pulisettis, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of the SharpImpersonation tool. Which can be used to manipulate tokens on a Windows computers remotely (PsExec/WmiExec) or interactively-->
        <!--Date: 2022/12/27-->
        <!--Status: experimental-->
        <!--ID: f89b08d0-77ad-4728-817b-9b16c5a69c7a-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1134.001</id>
            <id>attack.t1134.003</id>
        </mitre>
        <description>HackTool - SharpImpersonation Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ user:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ binary:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ user:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ shellcode:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ technique:CreateProcessAsUserW|\ technique:ImpersonateLoggedOnuser</field>
    </rule>
    <rule id="901076" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_desktop_background_change.yml</info>
        <!--Sigma Rule Author: Stephen Lincoln @slincoln-aiq (AttackIQ)-->
        <!--Description: Detects the execution of "reg.exe" to alter registry keys that would replace the user's desktop background.
This is a common technique used by malware to change the desktop background to a ransom note or other image.
-->
        <!--Date: 2023/12/21-->
        <!--Status: experimental-->
        <!--ID: 8cbc9475-8d05-4e27-9c32-df960716c701-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.impact</id>
            <id>attack.t1112</id>
            <id>attack.t1491.001</id>
        </mitre>
        <description>Potentially Suspicious Desktop Background Change Using Reg.EXE</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+reg\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)reg\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Control\ Panel\\+Desktop|CurrentVersion\\+Policies\\+ActiveDesktop|CurrentVersion\\+Policies\\+System</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/v\ NoChangingWallpaper</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/d\ 1</field>
    </rule>
    <rule id="901077" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_desktop_background_change.yml</info>
        <!--Sigma Rule Author: Stephen Lincoln @slincoln-aiq (AttackIQ)-->
        <!--Description: Detects the execution of "reg.exe" to alter registry keys that would replace the user's desktop background.
This is a common technique used by malware to change the desktop background to a ransom note or other image.
-->
        <!--Date: 2023/12/21-->
        <!--Status: experimental-->
        <!--ID: 8cbc9475-8d05-4e27-9c32-df960716c701-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.impact</id>
            <id>attack.t1112</id>
            <id>attack.t1491.001</id>
        </mitre>
        <description>Potentially Suspicious Desktop Background Change Using Reg.EXE</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+reg\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)reg\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Control\ Panel\\+Desktop|CurrentVersion\\+Policies\\+ActiveDesktop|CurrentVersion\\+Policies\\+System</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/v\ Wallpaper</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/t\ REG_SZ</field>
    </rule>
    <rule id="901078" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_desktop_background_change.yml</info>
        <!--Sigma Rule Author: Stephen Lincoln @slincoln-aiq (AttackIQ)-->
        <!--Description: Detects the execution of "reg.exe" to alter registry keys that would replace the user's desktop background.
This is a common technique used by malware to change the desktop background to a ransom note or other image.
-->
        <!--Date: 2023/12/21-->
        <!--Status: experimental-->
        <!--ID: 8cbc9475-8d05-4e27-9c32-df960716c701-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.impact</id>
            <id>attack.t1112</id>
            <id>attack.t1491.001</id>
        </mitre>
        <description>Potentially Suspicious Desktop Background Change Using Reg.EXE</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+reg\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)reg\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Control\ Panel\\+Desktop|CurrentVersion\\+Policies\\+ActiveDesktop|CurrentVersion\\+Policies\\+System</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/v\ WallpaperStyle</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/d\ 2</field>
    </rule>
    <rule id="901079" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_weak_or_abused_passwords.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects weak passwords or often abused passwords (seen used by threat actors) via the CLI. An example would be a threat actor creating a new user via the net command and providing the password inline-->
        <!--Date: 2022/09/14-->
        <!--Status: test-->
        <!--ID: 91edcfb1-2529-4ac2-9ecc-7617f895c7e4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
        </mitre>
        <description>Weak or Abused Passwords In CLI</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Asd123\.aaaa|password123|123456789|P@ssw0rd!|Decryptme</field>
    </rule>
    <rule id="901080" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_get_clipboard.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of the 'Get-Clipboard' cmdlet via CLI-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: b9aeac14-2ffd-4ad3-b967-1354a4e628c3-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1115</id>
        </mitre>
        <description>PowerShell Get-Clipboard Cmdlet Via CLI</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Get\-Clipboard</field>
    </rule>
    <rule id="901081" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sharpup.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of SharpUp, a tool for local privilege escalation-->
        <!--Date: 2022/08/20-->
        <!--Status: experimental-->
        <!--ID: c484e533-ee16-4a93-b6ac-f0ea4868b2f1-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1615</id>
            <id>attack.t1569.002</id>
            <id>attack.t1574.005</id>
        </mitre>
        <description>HackTool - SharpUp PrivEsc Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+SharpUp\.exe)$</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)SharpUp</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HijackablePaths|UnquotedServicePath|ProcessDLLHijack|ModifiableServiceBinaries|ModifiableScheduledTask|DomainGPPPassword|CachedGPPPassword</field>
    </rule>
    <rule id="901082" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cloudflared_quicktunnel_execution.yml</info>
        <!--Sigma Rule Author: Sajid Nawaz Khan-->
        <!--Description: Detects creation of an ad-hoc Cloudflare Quick Tunnel, which can be used to tunnel local services such as HTTP, RDP, SSH and SMB.
The free TryCloudflare Quick Tunnel will generate a random subdomain on trycloudflare[.]com, following a call to api[.]trycloudflare[.]com.
The tool has been observed in use by threat groups including Akira ransomware.
-->
        <!--Date: 2023/12/20-->
        <!--Status: experimental-->
        <!--ID: 222129f7-f4dc-4568-b0d2-22440a9639ba-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090.001</id>
        </mitre>
        <description>Cloudflared Quick Tunnel Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cloudflared\.exe|\\+cloudflared\-windows\-386\.exe|\\+cloudflared\-windows\-amd64\.exe)$</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)SHA256=2fb6c04c4f95fb8d158af94c137f90ac820716deaf88d8ebec956254e046cb29|SHA256=b3d21940a10fdef5e415ad70331ce257c24fe3bcf7722262302e0421791f87e8|SHA256=1fbd8362b2d2d2e6a5750ae3db69cd1815e6c1d31da48a98b796450971a8e039|SHA256=0409c9b12f9d0eda86e461ed9bdabeefb00172b26322079681a0bdf48e68dc28|SHA256=7cfb411d04bac42ef93d1f0c93c0a481e38c6f4612b97ae89d4702595988edc7|SHA256=5b3c2d846ab162dc6bc595cce3a49de5731afde5d6060be7066d21b013a28373|SHA256=ce95df7f69664c3df19b76028e115931919a71517b776da7b42d353e2ff4a670|SHA256=1293525a19cfe3bc8296b62fbfe19f083632ed644a1c18c10b045a1d3030d81a|SHA256=af2b9161cfcb654b16408cd6b098afe9d1fb61a037d18d7090a119d4c0c8e0f0|SHA256=39ddceb56a15798826a5fc4892fa2b474c444bb4d7a8bf2fa95e41cab10fa7a1|SHA256=ccd11f2328023a0e7929e845d5b6e7bc783fb4650d65faef3ae090239d4bbce2|SHA256=b6e5c5d2567ae8c69cc012ebcae30e6c9b5359d64a58d17ba75ec89f8bce71ac|SHA256=f813484ea441404f18caad96f28138e8aaf0cb256163c09c2ab8a3acab87f69f|SHA256=fc4a0802ab9c7409b892ca00636bec61e2acfc911bccfdeb9978b8ab5a2f828d|SHA256=083150724b49604c8765c1ba19541fa260b133be0acb0647fcd936d81f054499|SHA256=44303d6572956f28a0f2e4b188934fb9874f2584f5c81fa431a463cfbf28083b|SHA256=5d38c46032a58e28ae5f7d174d8761ec3d64d186677f3ec53af5f51afb9bfd2f|SHA256=e1e70fa42059911bc6685fafef957f9a73fc66f214d0704a9b932683a5204032|SHA256=c01356092a365b84f84f0e66870bd1a05ba3feb53cafd973fa5fea2534bee234|SHA256=b3f9c06151e30ee43d39e788a79cd918a314f24e04fe87f3de8272a2057b624f|SHA256=cd81b2792f0739f473c31c9cb7cf2313154bfa28b839975802b90e8790bb5058|SHA256=9ec7e6c8e1bfd883663d8d9d62c9e4f9ae373b731407181e32491b27a7218a2c|SHA256=c2cfd23fdc6c0e1b1ffa0e545cbe556f18d11b362b4a89ba0713f6ab01c4827f|SHA256=53f8adbd76c0eb16f5e43cadde422474d8a06f9c8f959389c1930042ad8beaa5|SHA256=648c8d2f8001c113d2986dd00b7bbd181593d462bef73522cee212c4f71f95b3|SHA256=ae047e2095e46c3f9c518b2be67ec753f4f0aad23b261a361fcb6144dcdb63b4|SHA256=3153d2baa462978dd22ab33d1c2274ecc88c200225d6a3327f98d5b752d08f5c|SHA256=f49cde976e628012c9db73e1c8d76081944ecf2297cdafeb78bb13290da274c4|SHA256=d2513e58bb03ccc83affde685c6ef987924c37ce6707d8e9857e2524b0d7e90f|SHA256=bb67c7623ba92fe64ffd9816b8d5b3b1ea3013960a30bd4cf6e295b3eb5b1bad|SHA256=b34b3c3a91e3165d1481f0b3ec23eab93a1cfba94345a6cbfe5b18ddbd48eac7|SHA256=f7848034e010d55f15e474ca998f96391e320ff29b00cfcc4c5e536529703e75|SHA256=b6fc9493778cbe3bfc062d73f5cc604bc0ff058bc5e5dc6aac87f3a4008b54b6|SHA256=f5c5e962577e2293c4ad10603816dce7cc273585969615fbf4e4bfa9eaff1688|SHA256=d14c52d9220b606f428a8fe9f7c108b0d6f14cf71e7384749e98e6a95962e68f|SHA256=d3a0e1a79158f3985cd49607ebe0cdfcc49cb9af96b8f43aefd0cdfe2f22e663|SHA256=2fbbfc8299537ff80cadf9d0e27c223fe0ccb9052bf9d8763ad717bbfa521c77|SHA256=19074674c6fbdaa573b3081745e5e26144fdf7a086d14e0e220d1814f1f13078</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-url</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)tunnel</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe\ \-url|\.exe\ \-\-url</field>
    </rule>
    <rule id="901083" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cloudflared_quicktunnel_execution.yml</info>
        <!--Sigma Rule Author: Sajid Nawaz Khan-->
        <!--Description: Detects creation of an ad-hoc Cloudflare Quick Tunnel, which can be used to tunnel local services such as HTTP, RDP, SSH and SMB.
The free TryCloudflare Quick Tunnel will generate a random subdomain on trycloudflare[.]com, following a call to api[.]trycloudflare[.]com.
The tool has been observed in use by threat groups including Akira ransomware.
-->
        <!--Date: 2023/12/20-->
        <!--Status: experimental-->
        <!--ID: 222129f7-f4dc-4568-b0d2-22440a9639ba-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090.001</id>
        </mitre>
        <description>Cloudflared Quick Tunnel Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-url</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-no\-autoupdate</field>
    </rule>
    <rule id="901084" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_explorer_lolbin_execution.yml</info>
        <!--Sigma Rule Author: Furkan CALISKAN, @caliskanfurkan_, @oscd_initiative-->
        <!--Description: Attackers can use explorer.exe for evading defense mechanisms-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: 9eb271b9-24ae-4cd4-9465-19cfc1047f3e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Proxy Execution Via Explorer.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+explorer\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)explorer\.exe</field>
    </rule>
    <rule id="901085" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_invocation_specific.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2023/01/05-->
        <!--Status: test-->
        <!--ID: 536e2947-3729-478c-9903-745aaffe60d2-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific - ProcessCreation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-nop</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-w\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)hidden</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-c\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\[Convert\]::FromBase64String</field>
    </rule>
    <rule id="901086" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_invocation_specific.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2023/01/05-->
        <!--Status: test-->
        <!--ID: 536e2947-3729-478c-9903-745aaffe60d2-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific - ProcessCreation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-w\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)hidden</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-noni</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-nop</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-c\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)iex</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)New\-Object</field>
    </rule>
    <rule id="901087" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_invocation_specific.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2023/01/05-->
        <!--Status: test-->
        <!--ID: 536e2947-3729-478c-9903-745aaffe60d2-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific - ProcessCreation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-w\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)hidden</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-ep</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)bypass</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-Enc</field>
    </rule>
    <rule id="901088" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_invocation_specific.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2023/01/05-->
        <!--Status: test-->
        <!--ID: 536e2947-3729-478c-9903-745aaffe60d2-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific - ProcessCreation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+software\\+</field>
    </rule>
    <rule id="901089" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_invocation_specific.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2023/01/05-->
        <!--Status: test-->
        <!--ID: 536e2947-3729-478c-9903-745aaffe60d2-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific - ProcessCreation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)bypass</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-noprofile</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-windowstyle</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)hidden</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)new\-object</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)system\.net\.webclient</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.download</field>
    </rule>
    <rule id="901090" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_invocation_specific.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2023/01/05-->
        <!--Status: test-->
        <!--ID: 536e2947-3729-478c-9903-745aaffe60d2-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific - ProcessCreation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)iex</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)New\-Object</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Net\.WebClient</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.Download</field>
    </rule>
    <rule id="901091" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_invocation_specific.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious PowerShell invocation command parameters-->
        <!--Date: 2023/01/05-->
        <!--Status: test-->
        <!--ID: 536e2947-3729-478c-9903-745aaffe60d2-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious PowerShell Invocations - Specific - ProcessCreation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\(New\-Object\ System\.Net\.WebClient\)\.DownloadString\('https://community\.chocolatey\.org/install\.ps1</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Write\-ChocolateyWarning</field>
    </rule>
    <rule id="901092" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_sysinternals_psexec_service.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious launch of a renamed version of the PSEXESVC service with, which is not often used by legitimate administrators-->
        <!--Date: 2022/07/21-->
        <!--Status: test-->
        <!--ID: 51ae86a2-e2e1-4097-ad85-c46cb6851de4-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Renamed PsExec Service Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)psexesvc\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+PSEXESVC\.exe</field>
    </rule>
    <rule id="901093" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_ping_hex_ip.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a ping command that uses a hex encoded IP address-->
        <!--Date: 2018/03/23-->
        <!--Status: test-->
        <!--ID: 1a0d4aba-7668-4365-9ce4-6d79ab088dfd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1140</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Ping Hex IP</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ping\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)0x</field>
    </rule>
    <rule id="901094" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_winsat.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52)-->
        <!--Date: 2021/08/30-->
        <!--Status: test-->
        <!--ID: 7a01183d-71a2-46ad-ad5c-acd989ac1793-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Abusing Winsat Path Parsing - Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Temp\\+system32\\+winsat\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)C:\\+Windows\ \\+system32\\+winsat\.exe</field>
    </rule>
    <rule id="901095" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_dll_sideload_xwizard.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the execution of Xwizard tool from the non-default directory which can be used to sideload a custom xwizards.dll-->
        <!--Date: 2021/09/20-->
        <!--Status: test-->
        <!--ID: 193d5ccd-6f59-40c6-b5b0-8e32d5ddd3d1-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>Xwizard DLL Sideloading</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+xwizard\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+)</field>
    </rule>
    <rule id="901096" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_mklink_shadow_copies_access_symlink.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, oscd.community-->
        <!--Description: Shadow Copies storage symbolic link creation using operating systems utilities-->
        <!--Date: 2019/10/22-->
        <!--Status: stable-->
        <!--ID: 40b19fa6-d835-400c-b301-41f3a2baacaf-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>VolumeShadowCopy Symlink Creation Via Mklink</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)mklink</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HarddiskVolumeShadowCopy</field>
    </rule>
    <rule id="901097" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_soundrecorder_audio_capture.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Endgame), oscd.community-->
        <!--Description: Detect attacker collecting audio via SoundRecorder application.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 83865853-59aa-449e-9600-74b9d89a6d6e-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1123</id>
        </mitre>
        <description>Audio Capture via SoundRecorder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+SoundRecorder\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/FILE</field>
    </rule>
    <rule id="901098" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_credential_access_via_password_filter.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: Detects dropping of dll files in system32 that may be used to retrieve user credentials from LSASS-->
        <!--Date: 2020/10/29-->
        <!--Status: test-->
        <!--ID: b7966f4a-b333-455b-8370-8ca53c229762-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1556.002</id>
        </mitre>
        <description>Dropping Of Password Filter DLL</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKLM\\+SYSTEM\\+CurrentControlSet\\+Control\\+Lsa</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)scecli\\+0</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg\ add</field>
    </rule>
    <rule id="901099" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_localpotato.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of the LocalPotato POC based on basic PE metadata information and default CLI examples-->
        <!--Date: 2023/02/14-->
        <!--Status: experimental-->
        <!--ID: 6bd75993-9888-4f91-9404-e1e4e4e34b77-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>cve.2023.21746</id>
        </mitre>
        <description>HackTool - LocalPotato Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+LocalPotato\.exe)$</field>
    </rule>
    <rule id="901100" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_localpotato.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of the LocalPotato POC based on basic PE metadata information and default CLI examples-->
        <!--Date: 2023/02/14-->
        <!--Status: experimental-->
        <!--ID: 6bd75993-9888-4f91-9404-e1e4e4e34b77-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>cve.2023.21746</id>
        </mitre>
        <description>HackTool - LocalPotato Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe\ \-i\ C:\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-o\ Windows\\+</field>
    </rule>
    <rule id="901101" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_localpotato.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of the LocalPotato POC based on basic PE metadata information and default CLI examples-->
        <!--Date: 2023/02/14-->
        <!--Status: experimental-->
        <!--ID: 6bd75993-9888-4f91-9404-e1e4e4e34b77-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>cve.2023.21746</id>
        </mitre>
        <description>HackTool - LocalPotato Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=E1742EE971D6549E8D4D81115F88F1FC|IMPHASH=DD82066EFBA94D7556EF582F247C8BB5</field>
    </rule>
    <rule id="901102" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_localpotato.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of the LocalPotato POC based on basic PE metadata information and default CLI examples-->
        <!--Date: 2023/02/14-->
        <!--Status: experimental-->
        <!--ID: 6bd75993-9888-4f91-9404-e1e4e4e34b77-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>cve.2023.21746</id>
        </mitre>
        <description>HackTool - LocalPotato Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)E1742EE971D6549E8D4D81115F88F1FC|DD82066EFBA94D7556EF582F247C8BB5</field>
    </rule>
    <rule id="901103" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_msiexec_embedding.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse msiexec.exe to proxy the execution of malicious payloads-->
        <!--Date: 2022/04/16-->
        <!--Status: test-->
        <!--ID: 4a2a2c3e-209f-4d01-b513-4155a540b469-->
        <mitre>
            <id>attack.t1218.007</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious MsiExec Embedding Parent</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe|\\+cmd\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)MsiExec\.exe</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)(?:\-Embedding\ )</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+SplunkUniversalForwarder\\+bin\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+DismFoDInstall\.cmd</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)(?:\\+MsiExec\.exe\ \-Embedding\ )</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)Global\\+MSI0000</field>
    </rule>
    <rule id="901104" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysprep_appdata.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious sysprep process start with AppData folder as target (as used by Trojan Syndicasec in Thrip report by Symantec)-->
        <!--Date: 2018/06/22-->
        <!--Status: test-->
        <!--ID: d5b9ae7a-e6fc-405e-80ff-2ff9dcc64e7e-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Sysprep on AppData Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+sysprep\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+AppData\\+</field>
    </rule>
    <rule id="901105" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cloudflared_tunnel_run.yml</info>
        <!--Sigma Rule Author: Janantha Marasinghe, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of the "cloudflared" tool to connect back to a tunnel. This was seen used by threat actors to maintain persistence and remote access to compromised networks.-->
        <!--Date: 2023/05/17-->
        <!--Status: experimental-->
        <!--ID: 9a019ffc-3580-4c9d-8d87-079f7e8d3fd4-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1102</id>
            <id>attack.t1090</id>
            <id>attack.t1572</id>
        </mitre>
        <description>Cloudflared Tunnel Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ tunnel\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ run\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-config\ |\-credentials\-contents\ |\-credentials\-file\ |\-token\ )</field>
    </rule>
    <rule id="901106" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_recycle_bin_fake_execution.yml</info>
        <!--Sigma Rule Author: X__Junior (Nextron Systems)-->
        <!--Description: Detects process execution from a fake recycle bin folder, often used to avoid security solution.-->
        <!--Date: 2023/07/12-->
        <!--Status: experimental-->
        <!--ID: 5ce0f04e-3efc-42af-839d-5b3a543b76c0-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious Process Execution From Fake Recycle.Bin Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)RECYCLERS\.BIN\\+|RECYCLER\.BIN\\+|RECYCLE\.BIN\\+</field>
    </rule>
    <rule id="901107" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_disable_defender_av_security_monitoring.yml</info>
        <!--Sigma Rule Author: ok @securonix invrep-de, oscd.community, frack113-->
        <!--Description: Detects attackers attempting to disable Windows Defender using Powershell-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: a7ee1722-c3c5-aeff-3212-c777e4733217-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Disable Windows Defender AV Security Monitoring</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-DisableBehaviorMonitoring\ \$true|\-DisableRuntimeMonitoring\ \$true</field>
    </rule>
    <rule id="901108" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_disable_defender_av_security_monitoring.yml</info>
        <!--Sigma Rule Author: ok @securonix invrep-de, oscd.community, frack113-->
        <!--Description: Detects attackers attempting to disable Windows Defender using Powershell-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: a7ee1722-c3c5-aeff-3212-c777e4733217-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Disable Windows Defender AV Security Monitoring</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+sc\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)sc\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)stop</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)WinDefend</field>
    </rule>
    <rule id="901109" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_disable_defender_av_security_monitoring.yml</info>
        <!--Sigma Rule Author: ok @securonix invrep-de, oscd.community, frack113-->
        <!--Description: Detects attackers attempting to disable Windows Defender using Powershell-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: a7ee1722-c3c5-aeff-3212-c777e4733217-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Disable Windows Defender AV Security Monitoring</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+sc\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)sc\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)delete</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)WinDefend</field>
    </rule>
    <rule id="901110" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_disable_defender_av_security_monitoring.yml</info>
        <!--Sigma Rule Author: ok @securonix invrep-de, oscd.community, frack113-->
        <!--Description: Detects attackers attempting to disable Windows Defender using Powershell-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: a7ee1722-c3c5-aeff-3212-c777e4733217-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Disable Windows Defender AV Security Monitoring</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+sc\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)sc\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)config</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)WinDefend</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)start=disabled</field>
    </rule>
    <rule id="901111" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_cmdline_special_characters.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton (fp)-->
        <!--Description: Detects the PowerShell command lines with special characters-->
        <!--Date: 2020/10/15-->
        <!--Status: test-->
        <!--ID: d7bcd677-645d-4691-a8d4-7a5602b780d1-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Potential PowerShell Command Line Obfuscation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i).*\+.*\+.*\+.*\+.*\+.*\+.*\+.*\+.*\+.*\+.*\+.*\+.*\+.*\+.</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i).*\{.*\{.*\{.*\{.*\{.*\{.*\{.*\{.*\{.*\{.</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i).*\^.*\^.*\^.*\^.*\^.</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i).*`.*`.*`.*`.*`.</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Amazon\\+SSM\\+ssm\-document\-worker\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)new\ EventSource\("Microsoft\.Windows\.Sense\.Client\.Management"</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)public\ static\ extern\ bool\ InstallELAMCertificateInfo\(SafeFileHandle\ handle\);</field>
    </rule>
    <rule id="901112" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_copy_lateral_movement.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), oscd.community, Teymur Kheirkhabarov @HeirhabarovT, Zach Stanford @svch0st, Nasreddine Bencherchali-->
        <!--Description: Detects a suspicious copy command to or from an Admin share or remote-->
        <!--Date: 2019/12/30-->
        <!--Status: test-->
        <!--ID: 855bc8b5-2ae8-402e-a9ed-b889e6df1900-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.collection</id>
            <id>attack.exfiltration</id>
            <id>attack.t1039</id>
            <id>attack.t1048</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Copy from Admin Share</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Sysvol\\+</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+robocopy\.exe|\\+xcopy\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)robocopy\.exe|XCOPY\.EXE</field>
    </rule>
    <rule id="901113" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_copy_lateral_movement.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), oscd.community, Teymur Kheirkhabarov @HeirhabarovT, Zach Stanford @svch0st, Nasreddine Bencherchali-->
        <!--Description: Detects a suspicious copy command to or from an Admin share or remote-->
        <!--Date: 2019/12/30-->
        <!--Status: test-->
        <!--ID: 855bc8b5-2ae8-402e-a9ed-b889e6df1900-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.collection</id>
            <id>attack.exfiltration</id>
            <id>attack.t1039</id>
            <id>attack.t1048</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Copy from Admin Share</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Sysvol\\+</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Cmd\.Exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)copy</field>
    </rule>
    <rule id="901114" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_diantz_remote_cab.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Download and compress a remote file and store it in a cab file on local machine.-->
        <!--Date: 2021/11/26-->
        <!--Status: test-->
        <!--ID: 185d7418-f250-42d0-b72e-0c8b70661e93-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Diantz Download and Compress Into a CAB File</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)diantz\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.cab</field>
    </rule>
    <rule id="901115" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_ftp.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, oscd.community-->
        <!--Description: Detects the execution of a renamed "ftp.exe" binary based on the PE metadata fields-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: 277a4393-446c-449a-b0ed-7fdc7795244c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Renamed FTP.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)ftp\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+ftp\.exe)$</field>
    </rule>
    <rule id="901116" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_whoami_parent_anomaly.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of whoami.exe with suspicious parent processes.-->
        <!--Date: 2021/08/12-->
        <!--Status: experimental-->
        <!--ID: 8de1cbe8-d6f5-496d-8237-5f44a721c7a0-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>car.2016-03-001</id>
        </mitre>
        <description>Whoami.EXE Execution Anomaly</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+whoami\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)whoami\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+powershell\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+pwsh\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+powershell_ise\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Microsoft\ Monitoring\ Agent\\+Agent\\+MonitoringHost\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)None</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)</field>
    </rule>
    <rule id="901117" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_ssh_rdp_tunneling.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Execution of ssh.exe to perform data exfiltration and tunneling through RDP-->
        <!--Date: 2022/10/12-->
        <!--Status: test-->
        <!--ID: f7d7ebd5-a016-46e2-9c54-f9932f2d386d-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1572</id>
        </mitre>
        <description>Potential RDP Tunneling Via SSH</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ssh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):3389</field>
    </rule>
    <rule id="901118" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_krbrelay.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of KrbRelay, a Kerberos relaying tool-->
        <!--Date: 2022/04/27-->
        <!--Status: test-->
        <!--ID: e96253b8-6b3b-4f90-9e59-3b24b99cf9b4-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>HackTool - KrbRelay Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+KrbRelay\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)KrbRelay\.exe</field>
    </rule>
    <rule id="901119" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_krbrelay.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of KrbRelay, a Kerberos relaying tool-->
        <!--Date: 2022/04/27-->
        <!--Status: test-->
        <!--ID: e96253b8-6b3b-4f90-9e59-3b24b99cf9b4-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>HackTool - KrbRelay Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-spn\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-clsid\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-rbcd\ )</field>
    </rule>
    <rule id="901120" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_krbrelay.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of KrbRelay, a Kerberos relaying tool-->
        <!--Date: 2022/04/27-->
        <!--Status: test-->
        <!--ID: e96253b8-6b3b-4f90-9e59-3b24b99cf9b4-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>HackTool - KrbRelay Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shadowcred</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)clsid</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)spn</field>
    </rule>
    <rule id="901121" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_krbrelay.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of KrbRelay, a Kerberos relaying tool-->
        <!--Date: 2022/04/27-->
        <!--Status: test-->
        <!--ID: e96253b8-6b3b-4f90-9e59-3b24b99cf9b4-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558.003</id>
        </mitre>
        <description>HackTool - KrbRelay Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:spn\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:session\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:clsid\ )</field>
    </rule>
    <rule id="901122" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_psr_capture_screenshots.yml</info>
        <!--Sigma Rule Author: Beyu Denis, oscd.community-->
        <!--Description: The psr.exe captures desktop screenshots and saves them on the local machine-->
        <!--Date: 2019/10/12-->
        <!--Status: test-->
        <!--ID: 2158f96f-43c2-43cb-952a-ab4580f32382-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1113</id>
        </mitre>
        <description>Psr.exe Capture Screenshots</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Psr\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/start</field>
    </rule>
    <rule id="901123" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_safetykatz.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of the hacktool SafetyKatz via PE information and default Image name-->
        <!--Date: 2022/10/20-->
        <!--Status: test-->
        <!--ID: b1876533-4ed5-4a83-90f3-b8645840a413-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>HackTool - SafetyKatz Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+SafetyKatz\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)SafetyKatz\.exe</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)SafetyKatz</field>
    </rule>
    <rule id="901124" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_pubprn.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the use of the 'Pubprn.vbs' Microsoft signed script to execute commands.-->
        <!--Date: 2022/05/28-->
        <!--Status: test-->
        <!--ID: 1fb76ab8-fa60-4b01-bddd-71e89bf555da-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216.001</id>
        </mitre>
        <description>Pubprn.vbs Proxy Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+pubprn\.vbs</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)script:</field>
    </rule>
    <rule id="901125" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_register_app.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of a Microsoft signed script 'REGISTER_APP.VBS' to register a VSS/VDS Provider as a COM+ application.-->
        <!--Date: 2022/08/19-->
        <!--Status: test-->
        <!--ID: 1c8774a0-44d4-4db0-91f8-e792359c70bd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>REGISTER_APP.VBS Proxy Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+register_app\.vbs</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-register</field>
    </rule>
    <rule id="901126" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hxtsr_masquerading.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: HxTsr.exe is a Microsoft compressed executable file called Microsoft Outlook Communications.
HxTsr.exe is part of Outlook apps, because it resides in a hidden "WindowsApps" subfolder of "C:\Program Files".
Its path includes a version number, e.g., "C:\Program Files\WindowsApps\microsoft.windowscommunicationsapps_17.7466.41167.0_x64__8wekyb3d8bbwe\HxTsr.exe".
Any instances of hxtsr.exe not in this folder may be malware camouflaging itself as HxTsr.exe
-->
        <!--Date: 2020/04/17-->
        <!--Status: test-->
        <!--ID: 4e762605-34a8-406d-b72e-c1a089313320-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Fake Instance Of Hxtsr.exe</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)hxtsr\.exe</field>
        <field name="win.eventdata.currentDirectory" negate="yes" type="pcre2">(?i)^(?:C:\\+program\ files\\+windowsapps\\+microsoft\.windowscommunicationsapps_)</field>
        <field name="win.eventdata.currentDirectory" negate="yes" type="pcre2">(?i)(?:\\+hxtsr\.exe)$</field>
    </rule>
    <rule id="901127" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_gather_network_info_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of the built-in script located in "C:\Windows\System32\gatherNetworkInfo.vbs". Which can be used to gather information about the target machine-->
        <!--Date: 2023/02/08-->
        <!--Status: test-->
        <!--ID: 07aa184a-870d-413d-893a-157f317f6f58-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.execution</id>
            <id>attack.t1615</id>
            <id>attack.t1059.005</id>
        </mitre>
        <description>Suspicious Reconnaissance Activity Via GatherNetworkInfo.VBS</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)gatherNetworkInfo\.vbs</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cscript\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+wscript\.exe)$</field>
    </rule>
    <rule id="901128" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_powersploit_empire_default_schtasks.yml</info>
        <!--Sigma Rule Author: Markus Neis, @Karneades-->
        <!--Description: Detects the creation of a schtask via PowerSploit or Empire Default Configuration.-->
        <!--Date: 2018/03/06-->
        <!--Status: test-->
        <!--ID: 56c217c3-2de2-479b-990f-5c109ba8458f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.s0111</id>
            <id>attack.g0022</id>
            <id>attack.g0060</id>
            <id>car.2013-08-001</id>
            <id>attack.t1053.005</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>HackTool - Default PowerSploit/Empire Scheduled Task Creation</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/Create</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell\.exe\ \-NonI</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/TN\ Updater\ /TR</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/SC\ ONLOGON|/SC\ DAILY\ /ST|/SC\ ONIDLE|/SC\ HOURLY</field>
    </rule>
    <rule id="901129" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_cleanmgr.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using scheduled tasks and variable expansion of cleanmgr.exe (UACMe 34)-->
        <!--Date: 2021/08/30-->
        <!--Status: test-->
        <!--ID: b697e69c-746f-4a86-9f59-7bfff8eab881-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using Disk Cleanup</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:"\\+system32\\+cleanmgr\.exe\ /autoclean\ /d\ C:)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)C:\\+Windows\\+system32\\+svchost\.exe\ \-k\ netsvcs\ \-p\ \-s\ Schedule</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
    </rule>
    <rule id="901130" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regini_execution.yml</info>
        <!--Sigma Rule Author: Eli Salem, Sander Wiebing, oscd.community-->
        <!--Description: Detects the execution of regini.exe which can be used to modify registry keys, the changes are imported from one or more text files.-->
        <!--Date: 2020/10/08-->
        <!--Status: experimental-->
        <!--ID: 5f60740a-f57b-4e76-82a1-15b6ff2cb134-->
        <mitre>
            <id>attack.t1112</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Registry Modification Via Regini.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+regini\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)REGINI\.EXE</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):[^ \\+]</field>
    </rule>
    <rule id="901131" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_defender_exclusion.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the usage of "reg.exe" to add Defender folder exclusions. Qbot has been seen using this technique to add exclusions for folders within AppData and ProgramData.-->
        <!--Date: 2022/02/13-->
        <!--Status: test-->
        <!--ID: 48917adc-a28e-4f5d-b729-11e75da8941f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Suspicious Windows Defender Folder Exclusion Added Via Reg.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SOFTWARE\\+Microsoft\\+Windows\ Defender\\+Exclusions\\+Paths|SOFTWARE\\+Microsoft\\+Microsoft\ Antimalware\\+Exclusions\\+Paths</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:ADD\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/t\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:REG_DWORD\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/v\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/d\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)0</field>
    </rule>
    <rule id="901132" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysinternals_eula_accepted.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects command lines that contain the 'accepteula' flag which could be a sign of execution of one of the Sysinternals tools-->
        <!--Date: 2017/08/28-->
        <!--Status: experimental-->
        <!--ID: 7cccd811-7ae9-4ebe-9afd-cb5c406b824b-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1588.002</id>
        </mitre>
        <description>Potential Execution of Sysinternals Tools</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-accepteula|\ /accepteula</field>
    </rule>
    <rule id="901133" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_etw_modification_cmdline.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects changes to environment variables related to ETW logging. This could indicate potential adversaries stopping ETW providers recording loaded .NET assemblies.-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: 41421f44-58f9-455d-838a-c398859841d4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562</id>
        </mitre>
        <description>ETW Logging Tamper In .NET Processes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)COMPlus_ETWEnabled|COMPlus_ETWFlags</field>
    </rule>
    <rule id="901134" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_winrm_remote_powershell_session_process.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g-->
        <!--Description: Detects remote PowerShell sections by monitoring for wsmprovhost (WinRM host process) as a parent or child process (sign of an active PowerShell remote session).-->
        <!--Date: 2019/09/12-->
        <!--Status: test-->
        <!--ID: 734f8d9b-42b8-41b2-bcf5-abaf49d5a3c8-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.t1021.006</id>
        </mitre>
        <description>Remote PowerShell Session Host Process (WinRM)</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wsmprovhost\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+wsmprovhost\.exe)$</field>
    </rule>
    <rule id="901135" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rpcping_credential_capture.yml</info>
        <!--Sigma Rule Author: Julia Fomina, oscd.community-->
        <!--Description: Detects using Rpcping.exe to send a RPC test connection to the target server (-s) and force the NTLM hash to be sent in the process.-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: 93671f99-04eb-4ab4-a161-70d446a84003-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
        </mitre>
        <description>Capture Credentials with Rpcping.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rpcping\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-s|/s</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-u</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)NTLM</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/u</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)NTLM</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-t</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ncacn_np</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/t</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ncacn_np</field>
    </rule>
    <rule id="901136" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_create_service.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects the creation of a new service using powershell.-->
        <!--Date: 2023/02/20-->
        <!--Status: test-->
        <!--ID: c02e96b7-c63a-4c47-bd83-4a9f74afcfb2-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>New Service Creation Using PowerShell</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)New\-Service</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-BinaryPathName</field>
    </rule>
    <rule id="901137" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_net_use_password_plaintext.yml</info>
        <!--Sigma Rule Author: Tim Shelton (HAWK.IO)-->
        <!--Description: Detects a when net.exe is called with a password in the command line-->
        <!--Date: 2021/12/09-->
        <!--Status: test-->
        <!--ID: d4498716-1d52-438f-8084-4a603157d131-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.initial_access</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1078</id>
        </mitre>
        <description>Password Provided In Command Line Of Net.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+net\.exe|\\+net1\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)net\.exe|net1\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ use\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):.+\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/USER:.+\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ )$</field>
    </rule>
    <rule id="901138" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_dnx.yml</info>
        <!--Sigma Rule Author: Beyu Denis, oscd.community-->
        <!--Description: Execute C# code located in the consoleapp folder-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: 81ebd28b-9607-4478-bf06-974ed9d53ed7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Application Whitelisting Bypass via Dnx.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+dnx\.exe)$</field>
    </rule>
    <rule id="901139" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_inveigh.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of Inveigh a cross-platform .NET IPv4/IPv6 machine-in-the-middle tool-->
        <!--Date: 2022/10/24-->
        <!--Status: test-->
        <!--ID: b99a1518-1ad5-4f65-bc95-1ffff97a8fd0-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>HackTool - Inveigh Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Inveigh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)\\+Inveigh\.exe|\\+Inveigh\.dll</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Inveigh</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-SpooferIP|\ \-ReplyToIPs\ |\ \-ReplyToDomains\ |\ \-ReplyToMACs\ |\ \-SnifferIP</field>
    </rule>
    <rule id="901140" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_browsers_chromium_susp_load_extension.yml</info>
        <!--Sigma Rule Author: Aedan Russell, frack113, X__Junior (Nextron Systems)-->
        <!--Description: Detects a suspicious process spawning a Chromium based browser process with the 'load-extension' flag to start an instance with a custom extension-->
        <!--Date: 2022/06/19-->
        <!--Status: experimental-->
        <!--ID: 27ba3207-dd30-4812-abbf-5d20c57d474e-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1176</id>
        </mitre>
        <description>Suspicious Chromium Browser Instance Executed With Custom Extension</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+cscript\.exe|\\+mshta\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+wscript\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+brave\.exe|\\+chrome\.exe|\\+msedge\.exe|\\+opera\.exe|\\+vivaldi\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-load\-extension=</field>
    </rule>
    <rule id="901141" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_copy_system_dir.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Markus Neis, Tim Shelton (HAWK.IO), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a suspicious copy operation that tries to copy a program from system (System32, SysWOW64, WinSxS) directories to another on disk.
Often used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations.
-->
        <!--Date: 2020/07/03-->
        <!--Status: test-->
        <!--ID: fff9d2b7-e11c-4a69-93d3-40ef66189767-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Suspicious Copy From or To System Directory</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:copy\ )</field>
    </rule>
    <rule id="901142" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_copy_system_dir.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Markus Neis, Tim Shelton (HAWK.IO), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a suspicious copy operation that tries to copy a program from system (System32, SysWOW64, WinSxS) directories to another on disk.
Often used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations.
-->
        <!--Date: 2020/07/03-->
        <!--Status: test-->
        <!--ID: fff9d2b7-e11c-4a69-93d3-40ef66189767-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Suspicious Copy From or To System Directory</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:copy\-item|\ copy\ |cpi\ |\ cp\ )</field>
    </rule>
    <rule id="901143" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_copy_system_dir.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Markus Neis, Tim Shelton (HAWK.IO), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a suspicious copy operation that tries to copy a program from system (System32, SysWOW64, WinSxS) directories to another on disk.
Often used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations.
-->
        <!--Date: 2020/07/03-->
        <!--Status: test-->
        <!--ID: fff9d2b7-e11c-4a69-93d3-40ef66189767-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Suspicious Copy From or To System Directory</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+robocopy\.exe|\\+xcopy\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)robocopy\.exe|XCOPY\.EXE</field>
    </rule>
    <rule id="901144" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_copy_system_dir.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Markus Neis, Tim Shelton (HAWK.IO), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a suspicious copy operation that tries to copy a program from system (System32, SysWOW64, WinSxS) directories to another on disk.
Often used to move LOLBINs such as 'certutil' or 'desktopimgdownldr' to a different location with a different name in order to bypass detections based on locations.
-->
        <!--Date: 2020/07/03-->
        <!--Status: test-->
        <!--ID: fff9d2b7-e11c-4a69-93d3-40ef66189767-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Suspicious Copy From or To System Directory</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+System32|\\+SysWOW64|\\+WinSxS</field>
    </rule>
    <rule id="901145" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_curl_download_direct_ip_exec.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects file downloads directly from IP address URL using curl.exe-->
        <!--Date: 2023/10/18-->
        <!--Status: experimental-->
        <!--ID: 9cc85849-3b02-4cb5-b371-3a1ff54f2218-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>File Download From IP URL Via Curl.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+curl\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)curl\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)://[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-O|\-\-remote\-name|\-\-output</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.bat)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.bat")$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.dat)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.dat")$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.dll)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.dll")$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.exe")$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.gif)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.gif")$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.hta)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.hta")$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.jpeg)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.jpeg")$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.log)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.log")$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.msi)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.msi")$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.png)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.png")$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.ps1)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.ps1")$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.psm1)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.psm1")$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.vbe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.vbe")$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.vbs)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.vbs")$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.bat')$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.dat')$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.dll')$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.exe')$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.gif')$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.hta')$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.jpeg')$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.log')$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.msi')$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.png')$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.ps1')$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.psm1')$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.vbe')$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.vbs')$</field>
    </rule>
    <rule id="901146" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rar_compress_data.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, E.M. Anhaus, oscd.community-->
        <!--Description: Detects usage of "rar" to add files to an archive for potential compression. An adversary may compress data (e.g. sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: 6f3e2987-db24-4c78-a860-b4f4095a7095-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1560.001</id>
        </mitre>
        <description>Files Added To An Archive Using Rar.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rar\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ a\ )</field>
    </rule>
    <rule id="901147" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_msiexec_web_install.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious msiexec process starts with web addresses as parameter-->
        <!--Date: 2018/02/09-->
        <!--Status: test-->
        <!--ID: f7b5f842-a6af-4da5-9e95-e32478f3cd2f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.007</id>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>MsiExec Web Install</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ msiexec</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)://</field>
    </rule>
    <rule id="901148" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remote_access_tools_netsupport_susp_exec.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of client32.exe (NetSupport RAT) from an unusual location (outside of 'C:\Program Files')-->
        <!--Date: 2022/09/19-->
        <!--Status: experimental-->
        <!--ID: 37e8d358-6408-4853-82f4-98333fca7014-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Remote Access Tool - NetSupport Execution From Unusual Location</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+client32\.exe)$</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)NetSupport\ Remote\ Control</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)client32\.exe</field>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)a9d50692e95b79723f3e76fcf70d023e</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=a9d50692e95b79723f3e76fcf70d023e</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+)</field>
    </rule>
    <rule id="901149" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_pcwrun_follina.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects indirect command execution via Program Compatibility Assistant "pcwrun.exe" leveraging the follina (CVE-2022-30190) vulnerability-->
        <!--Date: 2022/06/13-->
        <!--Status: test-->
        <!--ID: 6004abd0-afa4-4557-ba90-49d172e0a299-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.execution</id>
        </mitre>
        <description>Execute Pcwrun.EXE To Leverage Follina</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+pcwrun\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.\./</field>
    </rule>
    <rule id="901150" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_obfuscation_via_utf8.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious encoded character syntax often used for defense evasion-->
        <!--Date: 2020/07/09-->
        <!--Status: test-->
        <!--ID: e312efd0-35a1-407f-8439-b8d434b438a6-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Potential PowerShell Obfuscation Via WCHAR</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\(WCHAR\)0x</field>
    </rule>
    <rule id="901151" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_dosfuscation.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects possible payload obfuscation via the commandline-->
        <!--Date: 2022/02/15-->
        <!--Status: experimental-->
        <!--ID: a77c1610-fc73-4019-8e29-0f51efc04a51-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Potential Dosfuscation Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\^\^|\^\|\^|,;,|;;;;|;;\ ;;|\(,\(,|%COMSPEC:\~|\ c\^m\^d|\^c\^m\^d|\ c\^md|\ cm\^d|\^cm\^d|\ s\^et\ |\ s\^e\^t\ |\ se\^t\ )</field>
    </rule>
    <rule id="901152" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_sdclt.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: A General detection for sdclt being spawned as an elevated process. This could be an indicator of sdclt being used for bypass UAC techniques.-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: 40f9af16-589d-4984-b78d-8c2aec023197-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Potential UAC Bypass Via Sdclt.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:sdclt\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High</field>
    </rule>
    <rule id="901153" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_cmstp_com_object_access.yml</info>
        <!--Sigma Rule Author: Nik Seetharaman, Christian Burkard (Nextron Systems)-->
        <!--Description: Detects UAC Bypass Attempt Using Microsoft Connection Manager Profile Installer Autoelevate-capable COM Objects (e.g. UACMe ID of 41, 43, 58 or 65)-->
        <!--Date: 2019/07/31-->
        <!--Status: stable-->
        <!--ID: 4b60e6f2-bf39-47b4-b4ea-398e33cfe253-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
            <id>attack.t1218.003</id>
            <id>attack.g0069</id>
            <id>car.2019-04-001</id>
        </mitre>
        <description>CMSTP UAC Bypass via COM Object Access</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+DllHost\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\ /Processid:\{3E5FC7F9\-9A51\-4367\-9063\-A120244FBEC7\}|\ /Processid:\{3E000D72\-A845\-4CD9\-BD83\-80C07C3B881F\}|\ /Processid:\{BD54C901\-076B\-434E\-B6C7\-17C531F4AB41\}|\ /Processid:\{D2E7041B\-2927\-42FB\-8E9F\-7CE93B6DC937\}|\ /Processid:\{E9495B87\-D950\-4AB5\-87A5\-FF6D70BF3E90\}</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
    </rule>
    <rule id="901154" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_jusched.yml</info>
        <!--Sigma Rule Author: Markus Neis, Swisscom-->
        <!--Description: Detects the execution of a renamed "jusched.exe" as seen used by the cobalt group-->
        <!--Date: 2019/06/04-->
        <!--Status: test-->
        <!--ID: edd8a48c-1b9f-4ba1-83aa-490338cd1ccb-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Renamed Jusched.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Java\ Update\ Scheduler|Java\(TM\)\ Update\ Scheduler</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+jusched\.exe)$</field>
    </rule>
    <rule id="901155" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_copy_system_dir_lolbin.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a suspicious copy operation that tries to copy a known LOLBIN from system (System32, SysWOW64, WinSxS) directories to another on disk in order to bypass detections based on locations.
-->
        <!--Date: 2023/08/29-->
        <!--Status: experimental-->
        <!--ID: f5d19838-41b5-476c-98d8-ba8af4929ee2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>LOL-Binary Copied From System Directory</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:copy\ )</field>
    </rule>
    <rule id="901156" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_copy_system_dir_lolbin.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a suspicious copy operation that tries to copy a known LOLBIN from system (System32, SysWOW64, WinSxS) directories to another on disk in order to bypass detections based on locations.
-->
        <!--Date: 2023/08/29-->
        <!--Status: experimental-->
        <!--ID: f5d19838-41b5-476c-98d8-ba8af4929ee2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>LOL-Binary Copied From System Directory</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:copy\-item|\ copy\ |cpi\ |\ cp\ )</field>
    </rule>
    <rule id="901157" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_copy_system_dir_lolbin.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a suspicious copy operation that tries to copy a known LOLBIN from system (System32, SysWOW64, WinSxS) directories to another on disk in order to bypass detections based on locations.
-->
        <!--Date: 2023/08/29-->
        <!--Status: experimental-->
        <!--ID: f5d19838-41b5-476c-98d8-ba8af4929ee2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>LOL-Binary Copied From System Directory</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+robocopy\.exe|\\+xcopy\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)robocopy\.exe|XCOPY\.EXE</field>
    </rule>
    <rule id="901158" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_spawn_explorer.yml</info>
        <!--Sigma Rule Author: elhoim, CD_ROM_-->
        <!--Description: Detects RunDLL32.exe spawning explorer.exe as child, which is very uncommon, often observes Gamarue spawning the explorer.exe process in an unusual way-->
        <!--Date: 2022/04/27-->
        <!--Status: test-->
        <!--ID: caa06de8-fdef-4c91-826a-7f9e163eef4b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>RunDLL32 Spawning Explorer</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+explorer\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\\+shell32\.dll,Control_RunDLL</field>
    </rule>
    <rule id="901159" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_msxsl_remote_execution.yml</info>
        <!--Sigma Rule Author: Swachchhanda Shrawan Poudel-->
        <!--Description: Detects the execution of the "msxsl" binary with an "http" keyword in the command line. This might indicate a potential remote execution of XSL files.-->
        <!--Date: 2023/11/09-->
        <!--Status: experimental-->
        <!--ID: 75d0a94e-6252-448d-a7be-d953dff527bb-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1220</id>
        </mitre>
        <description>Remote XSL Execution Via Msxsl.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+msxsl\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http</field>
    </rule>
    <rule id="901160" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regsvr32_susp_parent.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects various command line and scripting engines/processes such as "PowerShell", "Wscript", "Cmd", etc. spawning a "regsvr32" instance.-->
        <!--Date: 2023/05/26-->
        <!--Status: experimental-->
        <!--ID: ab37a6ec-6068-432b-a64e-2c7bf95b1d22-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.010</id>
        </mitre>
        <description>Scripting/CommandLine Process Spawned Regsvr32</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+cscript\.exe|\\+mshta\.exe|\\+powershell_ise\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+wscript\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+regsvr32\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+cmd\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ /s\ C:\\+Windows\\+System32\\+RpcProxy\\+RpcProxy\.dll)$</field>
    </rule>
    <rule id="901161" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_ttdinject.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the executiob of TTDInject.exe, which is used by Windows 10 v1809 and newer to debug time travel (underlying call of tttracer.exe)-->
        <!--Date: 2022/05/16-->
        <!--Status: test-->
        <!--ID: b27077d6-23e6-45d2-81a0-e2b356eea5fd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1127</id>
        </mitre>
        <description>Use of TTDInject.exe</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:ttdinject\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)TTDInject\.EXE</field>
    </rule>
    <rule id="901162" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_double_extension_parent.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detect execution of suspicious double extension files in ParentCommandLine-->
        <!--Date: 2023/01/06-->
        <!--Status: experimental-->
        <!--ID: 5e6a80c8-2d45-4633-9ef4-fa2671a39c5c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.007</id>
        </mitre>
        <description>Suspicious Parent Double Extension File Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\.doc\.lnk|\.docx\.lnk|\.xls\.lnk|\.xlsx\.lnk|\.ppt\.lnk|\.pptx\.lnk|\.rtf\.lnk|\.pdf\.lnk|\.txt\.lnk|\.doc\.js|\.docx\.js|\.xls\.js|\.xlsx\.js|\.ppt\.js|\.pptx\.js|\.rtf\.js|\.pdf\.js|\.txt\.js)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\.doc\.lnk|\.docx\.lnk|\.xls\.lnk|\.xlsx\.lnk|\.ppt\.lnk|\.pptx\.lnk|\.rtf\.lnk|\.pdf\.lnk|\.txt\.lnk|\.doc\.js|\.docx\.js|\.xls\.js|\.xlsx\.js|\.ppt\.js|\.pptx\.js|\.rtf\.js|\.pdf\.js|\.txt\.js</field>
    </rule>
    <rule id="901163" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_attrib_system_susp_paths.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the usage of attrib with the "+s" option to set scripts or executables located in suspicious locations as system files to hide them from users and make them unable to be deleted with simple rights. The rule limits the search to specific extensions and directories to avoid FPs
-->
        <!--Date: 2022/06/28-->
        <!--Status: experimental-->
        <!--ID: efec536f-72e8-4656-8960-5e85d091345b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.001</id>
        </mitre>
        <description>Set Suspicious Files as System Files Using Attrib.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+attrib\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)ATTRIB\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \+s</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ %|\\+Users\\+Public\\+|\\+AppData\\+Local\\+|\\+ProgramData\\+|\\+Downloads\\+|\\+Windows\\+Temp\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.bat|\.dll|\.exe|\.hta|\.ps1|\.vbe|\.vbs</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+Windows\\+TEMP\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.exe</field>
    </rule>
    <rule id="901164" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mshta_lethalhta_technique.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects potential LethalHTA technique where the "mshta.exe" is spawned by an "svchost.exe" process-->
        <!--Date: 2018/06/07-->
        <!--Status: test-->
        <!--ID: ed5d72a6-f8f4-479d-ba79-02f6a80d7471-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.005</id>
        </mitre>
        <description>Potential LethalHTA Technique Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+svchost\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+mshta\.exe)$</field>
    </rule>
    <rule id="901165" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dfsvc_suspicious_child_processes.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potentially suspicious child processes of a ClickOnce deployment application-->
        <!--Date: 2023/06/12-->
        <!--Status: experimental-->
        <!--ID: 67bc0e75-c0a9-4cfc-8754-84a505b63c04-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Potentially Suspicious Child Process Of ClickOnce Application</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Apps\\+2\.0\\+</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+calc\.exe|\\+cmd\.exe|\\+cscript\.exe|\\+explorer\.exe|\\+mshta\.exe|\\+net\.exe|\\+net1\.exe|\\+nltest\.exe|\\+notepad\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+reg\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+schtasks\.exe|\\+werfault\.exe|\\+wscript\.exe)$</field>
    </rule>
    <rule id="901166" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_impacket_tools.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of different compiled Windows binaries of the impacket toolset (based on names or part of their names - could lead to false positives)-->
        <!--Date: 2021/07/24-->
        <!--Status: test-->
        <!--ID: 4627c6ae-6899-46e2-aa0c-6ebcb1becd19-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1557.001</id>
        </mitre>
        <description>HackTool - Impacket Tools Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+goldenPac|\\+karmaSMB|\\+kintercept|\\+ntlmrelayx|\\+rpcdump|\\+samrdump|\\+secretsdump|\\+smbexec|\\+smbrelayx|\\+wmiexec|\\+wmipersist</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+atexec_windows\.exe|\\+dcomexec_windows\.exe|\\+dpapi_windows\.exe|\\+findDelegation_windows\.exe|\\+GetADUsers_windows\.exe|\\+GetNPUsers_windows\.exe|\\+getPac_windows\.exe|\\+getST_windows\.exe|\\+getTGT_windows\.exe|\\+GetUserSPNs_windows\.exe|\\+ifmap_windows\.exe|\\+mimikatz_windows\.exe|\\+netview_windows\.exe|\\+nmapAnswerMachine_windows\.exe|\\+opdump_windows\.exe|\\+psexec_windows\.exe|\\+rdp_check_windows\.exe|\\+sambaPipe_windows\.exe|\\+smbclient_windows\.exe|\\+smbserver_windows\.exe|\\+sniff_windows\.exe|\\+sniffer_windows\.exe|\\+split_windows\.exe|\\+ticketer_windows\.exe)$</field>
    </rule>
    <rule id="901167" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_process_dump_via_comsvcs.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Modexp, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a process memory dump via "comsvcs.dll" using rundll32, covering multiple different techniques (ordinal, minidump function, etc.)-->
        <!--Date: 2020/02/18-->
        <!--Status: test-->
        <!--ID: 646ea171-dded-4578-8a4d-65e9822892e3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.credential_access</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
            <id>car.2013-05-009</id>
        </mitre>
        <description>Process Memory Dump Via Comsvcs.DLL</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)RUNDLL32\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)comsvcs</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)full</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\#\-|\#\+|\#24|24\ |MiniDump</field>
    </rule>
    <rule id="901168" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_process_dump_via_comsvcs.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Modexp, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a process memory dump via "comsvcs.dll" using rundll32, covering multiple different techniques (ordinal, minidump function, etc.)-->
        <!--Date: 2020/02/18-->
        <!--Status: test-->
        <!--ID: 646ea171-dded-4578-8a4d-65e9822892e3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.credential_access</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
            <id>car.2013-05-009</id>
        </mitre>
        <description>Process Memory Dump Via Comsvcs.DLL</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)RUNDLL32\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32</field>
    </rule>
    <rule id="901169" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_process_dump_via_comsvcs.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Modexp, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a process memory dump via "comsvcs.dll" using rundll32, covering multiple different techniques (ordinal, minidump function, etc.)-->
        <!--Date: 2020/02/18-->
        <!--Status: test-->
        <!--ID: 646ea171-dded-4578-8a4d-65e9822892e3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.credential_access</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
            <id>car.2013-05-009</id>
        </mitre>
        <description>Process Memory Dump Via Comsvcs.DLL</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)24</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)comsvcs</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)full</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \#|,\#|,\ \#</field>
    </rule>
    <rule id="901170" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_iox.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of IOX - a tool for port forwarding and intranet proxy purposes-->
        <!--Date: 2022/10/08-->
        <!--Status: experimental-->
        <!--ID: d7654f02-e04b-4934-9838-65c46f187ebc-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>PUA- IOX Tunneling Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+iox\.exe)$</field>
    </rule>
    <rule id="901171" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_iox.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of IOX - a tool for port forwarding and intranet proxy purposes-->
        <!--Date: 2022/10/08-->
        <!--Status: experimental-->
        <!--ID: d7654f02-e04b-4934-9838-65c46f187ebc-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>PUA- IOX Tunneling Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.exe\ fwd\ \-l\ |\.exe\ fwd\ \-r\ |\.exe\ proxy\ \-l\ |\.exe\ proxy\ \-r\ )</field>
    </rule>
    <rule id="901172" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_iox.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of IOX - a tool for port forwarding and intranet proxy purposes-->
        <!--Date: 2022/10/08-->
        <!--Status: experimental-->
        <!--ID: d7654f02-e04b-4934-9838-65c46f187ebc-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>PUA- IOX Tunneling Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)MD5=9DB2D314DD3F704A02051EF5EA210993|SHA1=039130337E28A6623ECF9A0A3DA7D92C5964D8DD|SHA256=C6CF82919B809967D9D90EA73772A8AA1C1EB3BC59252D977500F64F1A0D6731</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)9db2d314dd3f704a02051ef5ea210993</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)039130337e28a6623ecf9a0a3da7d92c5964d8dd</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)c6cf82919b809967d9d90ea73772a8aa1c1eb3bc59252d977500f64f1a0d6731</field>
    </rule>
    <rule id="901173" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysinternals_psexesvc_as_system.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious launch of the PSEXESVC service on this system and a sub process run as LOCAL_SYSTEM (-s), which means that someone remotely started a command on this system running it with highest privileges and not only the privileges of the login user account (e.g. the administrator account)-->
        <!--Date: 2022/07/21-->
        <!--Status: experimental-->
        <!--ID: 7c0dcd3d-acf8-4f71-9570-f448b0034f94-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>PsExec Service Child Process Execution as LOCAL SYSTEM</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)C:\\+Windows\\+PSEXESVC\.exe</field>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)AUTHORI|AUTORI</field>
    </rule>
    <rule id="901174" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_browsers_chromium_headless_debugging.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects chromium based browsers starting in headless and debugging mode and pointing to a user profile. This could be a sign of data stealing or remote control-->
        <!--Date: 2022/12/23-->
        <!--Status: test-->
        <!--ID: 3e8207c5-fcd2-4ea6-9418-15d45b4890e4-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1185</id>
        </mitre>
        <description>Potential Data Stealing Via Chromium Headless Debugging</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-remote\-debugging\-</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-user\-data\-dir</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-headless</field>
    </rule>
    <rule id="901175" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_eventvwr_susp_child_process.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects uncommon or suspicious child processes of "eventvwr.exe" which might indicate a UAC bypass attempt-->
        <!--Date: 2017/03/19-->
        <!--Status: test-->
        <!--ID: be344333-921d-4c4d-8bb8-e584cf584780-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
            <id>car.2019-04-001</id>
        </mitre>
        <description>Potentially Suspicious Event Viewer Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+eventvwr\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+mmc\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+WerFault\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+SysWOW64\\+WerFault\.exe)$</field>
    </rule>
    <rule id="901176" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vscode_tunnel_remote_shell_.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of a shell (powershell, bash, wsl...) via Visual Studio Code tunnel. Attackers can abuse this functionality to establish a C2 channel and execute arbitrary commands on the system.-->
        <!--Date: 2023/10/25-->
        <!--Status: experimental-->
        <!--ID: f4a623c2-4ef5-4c33-b811-0642f702c9f1-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Visual Studio Code Tunnel Shell Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\+servers\\+Stable\-</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+server\\+node\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\.vscode\-server</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+terminal\\+browser\\+media\\+shellIntegration\.ps1</field>
    </rule>
    <rule id="901177" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vscode_tunnel_remote_shell_.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of a shell (powershell, bash, wsl...) via Visual Studio Code tunnel. Attackers can abuse this functionality to establish a C2 channel and execute arbitrary commands on the system.-->
        <!--Date: 2023/10/25-->
        <!--Status: experimental-->
        <!--ID: f4a623c2-4ef5-4c33-b811-0642f702c9f1-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Visual Studio Code Tunnel Shell Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\+servers\\+Stable\-</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+server\\+node\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\.vscode\-server</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wsl\.exe|\\+bash\.exe)$</field>
    </rule>
    <rule id="901178" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_teams_suspicious_command_line_cred_access.yml</info>
        <!--Sigma Rule Author: @SerkinValery-->
        <!--Description: Detects an access to authentication tokens and accounts of Microsoft Teams desktop application.-->
        <!--Date: 2022/09/16-->
        <!--Status: experimental-->
        <!--ID: d2eb17db-1d39-41dc-b57f-301f6512fa75-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1528</id>
        </mitre>
        <description>Suspicious Command With Teams Objects Paths</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Microsoft\\+Teams\\+Cookies|\\+Microsoft\\+Teams\\+Local\ Storage\\+leveldb</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Microsoft\\+Teams\\+current\\+Teams\.exe)$</field>
    </rule>
    <rule id="901179" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_autohotkey.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali-->
        <!--Description: Detects execution of a renamed autohotkey.exe binary based on PE metadata fields-->
        <!--Date: 2023/02/07-->
        <!--Status: test-->
        <!--ID: 0f16d9cf-0616-45c8-8fad-becc11b5a41c-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Renamed AutoHotkey.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)AutoHotkey</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)AutoHotkey</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)AutoHotkey\.exe|AutoHotkey\.rc</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AutoHotkey\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AutoHotkey32\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AutoHotkey32_UIA\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AutoHotkey64\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AutoHotkey64_UIA\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AutoHotkeyA32\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AutoHotkeyA32_UIA\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AutoHotkeyU32\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AutoHotkeyU32_UIA\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AutoHotkeyU64\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AutoHotkeyU64_UIA\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AutoHotkey</field>
    </rule>
    <rule id="901180" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_java_manageengine_susp_child_process.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious child processes of the "Manage Engine ServiceDesk Plus" Java web service-->
        <!--Date: 2023/01/18-->
        <!--Status: experimental-->
        <!--ID: cea2b7ea-792b-405f-95a1-b903ea06458f-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1102</id>
        </mitre>
        <description>Suspicious Child Process Of Manage Engine ServiceDesk</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\+ManageEngine\\+ServiceDesk\\+</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\+java\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+AppVLP\.exe|\\+bash\.exe|\\+bitsadmin\.exe|\\+calc\.exe|\\+certutil\.exe|\\+cscript\.exe|\\+curl\.exe|\\+forfiles\.exe|\\+mftrace\.exe|\\+mshta\.exe|\\+net\.exe|\\+net1\.exe|\\+notepad\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+query\.exe|\\+reg\.exe|\\+schtasks\.exe|\\+scrcons\.exe|\\+sh\.exe|\\+systeminfo\.exe|\\+whoami\.exe|\\+wmic\.exe|\\+wscript\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+net\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+net1\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ stop</field>
    </rule>
    <rule id="901181" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_sticky_key_like_backdoor_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), @twjackomo, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects the usage and installation of a backdoor that uses an option to register a malicious debugger for built-in tools that are accessible in the login screen-->
        <!--Date: 2018/03/15-->
        <!--Status: test-->
        <!--ID: 2fdefcb3-dbda-401e-ae23-f0db027628bc-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.persistence</id>
            <id>attack.t1546.008</id>
            <id>car.2014-11-003</id>
            <id>car.2014-11-008</id>
        </mitre>
        <description>Sticky Key Like Backdoor Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+winlogon\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+cscript\.exe|\\+mshta\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+wscript\.exe|\\+wt\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)sethc\.exe|utilman\.exe|osk\.exe|Magnify\.exe|Narrator\.exe|DisplaySwitch\.exe</field>
    </rule>
    <rule id="901182" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_meterpreter_getsystem.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Ecco, Florian Roth-->
        <!--Description: Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service starting-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: 15619216-e993-4721-b590-4c520615a67d-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1134.001</id>
            <id>attack.t1134.002</id>
        </mitre>
        <description>Potential Meterpreter/CobaltStrike Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+services\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+pipe\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cmd|%COMSPEC%</field>
    </rule>
    <rule id="901183" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_meterpreter_getsystem.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Ecco, Florian Roth-->
        <!--Description: Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service starting-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: 15619216-e993-4721-b590-4c520615a67d-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1134.001</id>
            <id>attack.t1134.002</id>
        </mitre>
        <description>Potential Meterpreter/CobaltStrike Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+services\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dll,a</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/p:</field>
    </rule>
    <rule id="901184" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_meterpreter_getsystem.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Ecco, Florian Roth-->
        <!--Description: Detects the use of getsystem Meterpreter/Cobalt Strike command by detecting a specific service starting-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: 15619216-e993-4721-b590-4c520615a67d-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1134.001</id>
            <id>attack.t1134.002</id>
        </mitre>
        <description>Potential Meterpreter/CobaltStrike Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+services\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)MpCmdRun</field>
    </rule>
    <rule id="901185" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_whoami_as_param.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a suspicious process command line that uses whoami as first parameter (as e.g. used by EfsPotato)-->
        <!--Date: 2021/11/29-->
        <!--Status: test-->
        <!--ID: e9142d84-fbe0-401d-ac50-3e519fb00c89-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>car.2016-03-001</id>
        </mitre>
        <description>WhoAmI as Parameter</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe\ whoami</field>
    </rule>
    <rule id="901186" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_trufflesnout.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the use of TruffleSnout.exe an iterative AD discovery toolkit for offensive operators, situational awareness and targeted low noise enumeration.-->
        <!--Date: 2022/08/20-->
        <!--Status: experimental-->
        <!--ID: 69ca006d-b9a9-47f5-80ff-ecd4d25d481a-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1482</id>
        </mitre>
        <description>HackTool - TruffleSnout Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)TruffleSnout\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+TruffleSnout\.exe)$</field>
    </rule>
    <rule id="901187" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mssql_sqltoolsps_susp_execution.yml</info>
        <!--Sigma Rule Author: Agro (@agro_sev) oscd.communitly-->
        <!--Description: This rule detects execution of a PowerShell code through the sqltoolsps.exe utility, which is included in the standard set of utilities supplied with the Microsoft SQL Server Management studio.
Script blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.
-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: a746c9b8-a2fb-4ee5-a428-92bee9e99060-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1127</id>
        </mitre>
        <description>SQL Client Tools PowerShell Session Detection</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+sqltoolsps\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+sqltoolsps\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)\\+sqltoolsps\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+smss\.exe)$</field>
    </rule>
    <rule id="901188" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_sigverif.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of sigverif binary as a parent process which could indicate it being used as a LOLBIN to proxy execution-->
        <!--Date: 2022/08/19-->
        <!--Status: test-->
        <!--ID: 7d4aaec2-08ed-4430-8b96-28420e030e04-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>Suspicious Sigverif Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+sigverif\.exe)$</field>
    </rule>
    <rule id="901189" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_java_susp_child_process_2.yml</info>
        <!--Sigma Rule Author: Andreas Hunkeler (@Karneades), Nasreddine Bencherchali-->
        <!--Description: Detects shell spawned from Java host process, which could be a sign of exploitation (e.g. log4j exploitation)-->
        <!--Date: 2021/12/17-->
        <!--Status: test-->
        <!--ID: dff1e1cc-d3fd-47c8-bfc2-aeb878a754c0-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Shell Process Spawned by Java.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+java\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)build</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)build</field>
    </rule>
    <rule id="901190" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_commandline_path_traversal_evasion.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects potential evasion or obfuscation attempts using bogus path traversal via the commandline-->
        <!--Date: 2021/10/26-->
        <!--Status: experimental-->
        <!--ID: 1327381e-6ab0-4f38-b583-4c1b8346a56b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Potential Command Line Path Traversal Evasion Attempt</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+Windows\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+\.\.\\+Windows\\+|\\+\.\.\\+System32\\+|\\+\.\.\\+\.\.\\+</field>
    </rule>
    <rule id="901191" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_commandline_path_traversal_evasion.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects potential evasion or obfuscation attempts using bogus path traversal via the commandline-->
        <!--Date: 2021/10/26-->
        <!--Status: experimental-->
        <!--ID: 1327381e-6ab0-4f38-b583-4c1b8346a56b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Potential Command Line Path Traversal Evasion Attempt</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe\\+\.\.\\+</field>
    </rule>
    <rule id="901192" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_commandline_path_traversal_evasion.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects potential evasion or obfuscation attempts using bogus path traversal via the commandline-->
        <!--Date: 2021/10/26-->
        <!--Status: experimental-->
        <!--ID: 1327381e-6ab0-4f38-b583-4c1b8346a56b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Potential Command Line Path Traversal Evasion Attempt</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+Google\\+Drive\\+googledrivesync\.exe\\+\.\.\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+Citrix\\+Virtual\ Smart\ Card\\+Citrix\.Authentication\.VirtualSmartcard\.Launcher\.exe\\+\.\.\\+</field>
    </rule>
    <rule id="901193" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_registry_privilege_escalation_via_service_key.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov-->
        <!--Description: Detect modification of services configuration (ImagePath, FailureCommand and ServiceDLL) in registry by processes with Medium integrity level-->
        <!--Date: 2019/10/26-->
        <!--Status: test-->
        <!--ID: 0f9c21f1-6a73-4b0e-9809-cb562cb8d981-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1574.011</id>
        </mitre>
        <description>Potential Privilege Escalation via Service Permissions Weakness</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)Medium</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ControlSet</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)services</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+ImagePath|\\+FailureCommand|\\+ServiceDll</field>
    </rule>
    <rule id="901194" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_execution_from_guid_folder_names.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potential suspicious execution of a GUID like folder name located in a suspicious location such as %TEMP% as seen being used in IcedID attacks-->
        <!--Date: 2022/09/01-->
        <!--Status: experimental-->
        <!--ID: 90b63c33-2b97-4631-a011-ceb0f47b77c3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Suspicious Execution From GUID Like Folder Names</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+AppData\\+Roaming\\+|\\+AppData\\+Local\\+Temp\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+\{</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\}\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+\{</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\}\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)None</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+drvinst\.exe</field>
    </rule>
    <rule id="901195" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_crackmapexec_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.-->
        <!--Date: 2022/02/25-->
        <!--Status: test-->
        <!--ID: 42a993dd-bb3e-48c8-b372-4d6684c4106c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.credential_access</id>
            <id>attack.discovery</id>
            <id>attack.t1047</id>
            <id>attack.t1053</id>
            <id>attack.t1059.003</id>
            <id>attack.t1059.001</id>
            <id>attack.t1110</id>
            <id>attack.t1201</id>
        </mitre>
        <description>HackTool - CrackMapExec Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+crackmapexec\.exe)$</field>
    </rule>
    <rule id="901196" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_crackmapexec_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.-->
        <!--Date: 2022/02/25-->
        <!--Status: test-->
        <!--ID: 42a993dd-bb3e-48c8-b372-4d6684c4106c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.credential_access</id>
            <id>attack.discovery</id>
            <id>attack.t1047</id>
            <id>attack.t1053</id>
            <id>attack.t1059.003</id>
            <id>attack.t1059.001</id>
            <id>attack.t1110</id>
            <id>attack.t1201</id>
        </mitre>
        <description>HackTool - CrackMapExec Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-M\ pe_inject\ )</field>
    </rule>
    <rule id="901197" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_crackmapexec_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.-->
        <!--Date: 2022/02/25-->
        <!--Status: test-->
        <!--ID: 42a993dd-bb3e-48c8-b372-4d6684c4106c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.credential_access</id>
            <id>attack.discovery</id>
            <id>attack.t1047</id>
            <id>attack.t1053</id>
            <id>attack.t1059.003</id>
            <id>attack.t1059.001</id>
            <id>attack.t1110</id>
            <id>attack.t1201</id>
        </mitre>
        <description>HackTool - CrackMapExec Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-\-local\-auth</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-u\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-x\ )</field>
    </rule>
    <rule id="901198" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_crackmapexec_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.-->
        <!--Date: 2022/02/25-->
        <!--Status: test-->
        <!--ID: 42a993dd-bb3e-48c8-b372-4d6684c4106c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.credential_access</id>
            <id>attack.discovery</id>
            <id>attack.t1047</id>
            <id>attack.t1053</id>
            <id>attack.t1059.003</id>
            <id>attack.t1059.001</id>
            <id>attack.t1110</id>
            <id>attack.t1201</id>
        </mitre>
        <description>HackTool - CrackMapExec Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-\-local\-auth</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-u\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-p\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-H\ 'NTHASH'</field>
    </rule>
    <rule id="901199" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_crackmapexec_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.-->
        <!--Date: 2022/02/25-->
        <!--Status: test-->
        <!--ID: 42a993dd-bb3e-48c8-b372-4d6684c4106c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.credential_access</id>
            <id>attack.discovery</id>
            <id>attack.t1047</id>
            <id>attack.t1053</id>
            <id>attack.t1059.003</id>
            <id>attack.t1059.001</id>
            <id>attack.t1110</id>
            <id>attack.t1201</id>
        </mitre>
        <description>HackTool - CrackMapExec Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ mssql\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-u\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-p\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-M\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-d\ )</field>
    </rule>
    <rule id="901200" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_crackmapexec_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.-->
        <!--Date: 2022/02/25-->
        <!--Status: test-->
        <!--ID: 42a993dd-bb3e-48c8-b372-4d6684c4106c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.credential_access</id>
            <id>attack.discovery</id>
            <id>attack.t1047</id>
            <id>attack.t1053</id>
            <id>attack.t1059.003</id>
            <id>attack.t1059.001</id>
            <id>attack.t1110</id>
            <id>attack.t1201</id>
        </mitre>
        <description>HackTool - CrackMapExec Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ smb\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-u\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-H\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-M\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-o\ )</field>
    </rule>
    <rule id="901201" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_crackmapexec_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: This rule detect common flag combinations used by CrackMapExec in order to detect its use even if the binary has been replaced.-->
        <!--Date: 2022/02/25-->
        <!--Status: test-->
        <!--ID: 42a993dd-bb3e-48c8-b372-4d6684c4106c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.credential_access</id>
            <id>attack.discovery</id>
            <id>attack.t1047</id>
            <id>attack.t1053</id>
            <id>attack.t1059.003</id>
            <id>attack.t1059.001</id>
            <id>attack.t1110</id>
            <id>attack.t1201</id>
        </mitre>
        <description>HackTool - CrackMapExec Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ smb\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-u\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-p\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-\-local\-auth</field>
    </rule>
    <rule id="901202" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_mshtml_runhtmlapplication.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious command line using the "mshtml.dll" RunHTMLApplication export to run arbitrary code via different protocol handlers (vbscript, javascript, file, htpp...)-->
        <!--Date: 2022/08/14-->
        <!--Status: test-->
        <!--ID: 4782eb5a-a513-4523-a0ac-f3082b26ac5c-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Mshtml DLL RunHTMLApplication Abuse</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+\.\.\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)mshtml</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)RunHTMLApplication</field>
    </rule>
    <rule id="901203" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_registry_new_network_provider.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it-->
        <!--Date: 2022/08/23-->
        <!--Status: test-->
        <!--ID: baef1ec6-2ca9-47a3-97cc-4cf2bda10b77-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
        </mitre>
        <description>Potential Credential Dumping Attempt Using New NetworkProvider - CLI</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+System\\+CurrentControlSet\\+Services\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+NetworkProvider</field>
    </rule>
    <rule id="901204" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_trustedpath.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects indicators of a UAC bypass method by mocking directories-->
        <!--Date: 2021/08/27-->
        <!--Status: test-->
        <!--ID: 4ac47ed3-44c2-4b1f-9d51-bf46e8914126-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>TrustedPath UAC Bypass Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\+Windows\ \\+System32\\+</field>
    </rule>
</group>
