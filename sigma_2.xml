<group name="sigma,">
    <rule id="901205" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_disable_ie_features.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects command lines that indicate unwanted modifications to registry keys that disable important Internet Explorer security features-->
        <!--Date: 2020/06/19-->
        <!--Status: test-->
        <!--ID: fb50eb7a-5ab1-43ae-bcc9-091818cb8424-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Disabled IE Security Features</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-name\ IEHarden\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-value\ 0\ )</field>
    </rule>
    <rule id="901206" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_disable_ie_features.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects command lines that indicate unwanted modifications to registry keys that disable important Internet Explorer security features-->
        <!--Date: 2020/06/19-->
        <!--Status: test-->
        <!--ID: fb50eb7a-5ab1-43ae-bcc9-091818cb8424-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Disabled IE Security Features</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-name\ DEPOff\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-value\ 1\ )</field>
    </rule>
    <rule id="901207" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_disable_ie_features.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects command lines that indicate unwanted modifications to registry keys that disable important Internet Explorer security features-->
        <!--Date: 2020/06/19-->
        <!--Status: test-->
        <!--ID: fb50eb7a-5ab1-43ae-bcc9-091818cb8424-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Disabled IE Security Features</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-name\ DisableFirstRunCustomize\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-value\ 2\ )</field>
    </rule>
    <rule id="901208" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sdbinst_susp_extension.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects installation of a potentially suspicious new shim with an uncommon extension using sdbinst.exe.
Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims
-->
        <!--Date: 2023/08/01-->
        <!--Status: test-->
        <!--ID: 18ee686c-38a3-4f65-9f44-48a077141f42-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.011</id>
        </mitre>
        <description>Suspicious Shim Database Installation via Sdbinst.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+sdbinst\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)sdbinst\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.sdb</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+svchost\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+sdbinst\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ \-m\ \-bg</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+svchost\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+sdbinst\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ \-mm)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)None</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)</field>
    </rule>
    <rule id="901209" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_pressanykey.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Florian Roth (Nextron Systems)-->
        <!--Description: Detects renamed execution of "Microsoft.NodejsTools.PressAnyKey.exe", which can be abused as a LOLBIN to execute arbitrary binaries-->
        <!--Date: 2023/04/11-->
        <!--Status: test-->
        <!--ID: 65c3ca2c-525f-4ced-968e-246a713d164f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Visual Studio NodejsTools PressAnyKey Renamed Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Microsoft\.NodejsTools\.PressAnyKey\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Microsoft\.NodejsTools\.PressAnyKey\.exe)$</field>
    </rule>
    <rule id="901210" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_uacme.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems), Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of UACMe, a tool used for UAC bypasses, via default PE metadata-->
        <!--Date: 2021/08/30-->
        <!--Status: test-->
        <!--ID: d38d2fa4-98e6-4a24-aff1-410b0c9ad177-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>HackTool - UACMe Akagi Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)UACMe</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)REvol\ Corp|APT\ 92|UG\ North|Hazardous\ Environments|CD\ Project\ Rekt</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)UACMe\ main\ module|Pentesting\ utility</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Akagi\.exe|Akagi64\.exe</field>
    </rule>
    <rule id="901211" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_uacme.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems), Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of UACMe, a tool used for UAC bypasses, via default PE metadata-->
        <!--Date: 2021/08/30-->
        <!--Status: test-->
        <!--ID: d38d2fa4-98e6-4a24-aff1-410b0c9ad177-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>HackTool - UACMe Akagi Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Akagi64\.exe|\\+Akagi\.exe)$</field>
    </rule>
    <rule id="901212" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_uacme.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems), Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of UACMe, a tool used for UAC bypasses, via default PE metadata-->
        <!--Date: 2021/08/30-->
        <!--Status: test-->
        <!--ID: d38d2fa4-98e6-4a24-aff1-410b0c9ad177-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>HackTool - UACMe Akagi Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=767637C23BB42CD5D7397CF58B0BE688|IMPHASH=14C4E4C72BA075E9069EE67F39188AD8|IMPHASH=3C782813D4AFCE07BBFC5A9772ACDBDC|IMPHASH=7D010C6BB6A3726F327F7E239166D127|IMPHASH=89159BA4DD04E4CE5559F132A9964EB3|IMPHASH=6F33F4A5FC42B8CEC7314947BD13F30F|IMPHASH=5834ED4291BDEB928270428EBBAF7604|IMPHASH=5A8A8A43F25485E7EE1B201EDCBC7A38|IMPHASH=DC7D30B90B2D8ABF664FBED2B1B59894|IMPHASH=41923EA1F824FE63EA5BEB84DB7A3E74|IMPHASH=3DE09703C8E79ED2CA3F01074719906B</field>
    </rule>
    <rule id="901213" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_uacme.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems), Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of UACMe, a tool used for UAC bypasses, via default PE metadata-->
        <!--Date: 2021/08/30-->
        <!--Status: test-->
        <!--ID: d38d2fa4-98e6-4a24-aff1-410b0c9ad177-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>HackTool - UACMe Akagi Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)767637c23bb42cd5d7397cf58b0be688|14c4e4c72ba075e9069ee67f39188ad8|3c782813d4afce07bbfc5a9772acdbdc|7d010c6bb6a3726f327f7e239166d127|89159ba4dd04e4ce5559f132a9964eb3|6f33f4a5fc42b8cec7314947bd13f30f|5834ed4291bdeb928270428ebbaf7604|5a8a8a43f25485e7ee1b201edcbc7a38|dc7d30b90b2d8abf664fbed2b1b59894|41923ea1f824fe63ea5beb84db7a3e74|3de09703c8e79ed2ca3f01074719906b</field>
    </rule>
    <rule id="901214" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_quarks_pwdump.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of the Quarks PwDump tool via commandline arguments-->
        <!--Date: 2022/09/05-->
        <!--Status: experimental-->
        <!--ID: 0685b176-c816-4837-8e7b-1216f346636b-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>HackTool - Quarks PwDump Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+QuarksPwDump\.exe)$</field>
    </rule>
    <rule id="901215" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_quarks_pwdump.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of the Quarks PwDump tool via commandline arguments-->
        <!--Date: 2022/09/05-->
        <!--Status: experimental-->
        <!--ID: 0685b176-c816-4837-8e7b-1216f346636b-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>HackTool - Quarks PwDump Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-dhl|\ \-\-dump\-hash\-local|\ \-dhdc|\ \-\-dump\-hash\-domain\-cached|\ \-\-dump\-bitlocker|\ \-dhd\ |\ \-\-dump\-hash\-domain\ |\-\-ntds\-file</field>
    </rule>
    <rule id="901216" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_conhost_legacy_option.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: ForceV1 asks for information directly from the kernel space. Conhost connects to the console application. High IntegrityLevel means the process is running with elevated privileges, such as an Administrator context.-->
        <!--Date: 2022/12/09-->
        <!--Status: test-->
        <!--ID: 3037d961-21e9-4732-b27a-637bcc7bf539-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Suspicious High IntegrityLevel Conhost Legacy Option</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)conhost\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)0xffffffff</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-ForceV1</field>
    </rule>
    <rule id="901217" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lsass_process_clone.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Samir Bousseaden-->
        <!--Description: Detects a suspicious LSASS process process clone that could be a sign of credential dumping activity-->
        <!--Date: 2021/11/27-->
        <!--Status: test-->
        <!--ID: c8da0dfd-4ed0-4b68-962d-13c9c884384e-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Potential Credential Dumping Via LSASS Process Clone</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+Windows\\+System32\\+lsass\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Windows\\+System32\\+lsass\.exe)$</field>
    </rule>
    <rule id="901218" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysinternals_psexesvc.yml</info>
        <!--Sigma Rule Author: Thomas Patzke, Romaissa Adjailia, Florian Roth (Nextron Systems)-->
        <!--Description: Detects launch of the PSEXESVC service, which means that this system was the target of a psexec remote execution-->
        <!--Date: 2017/06/12-->
        <!--Status: experimental-->
        <!--ID: fdfcbd78-48f1-4a4b-90ac-d82241e368c5-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>PsExec Service Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\+Windows\\+PSEXESVC\.exe</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)psexesvc\.exe</field>
    </rule>
    <rule id="901219" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_hijacking_firwall_snap_in.yml</info>
        <!--Sigma Rule Author: Tim Rauch-->
        <!--Description: Detects attempts to bypass User Account Control (UAC) by hijacking the Microsoft Management Console (MMC) Windows Firewall snap-in-->
        <!--Date: 2022/09/27-->
        <!--Status: test-->
        <!--ID: e52cb31c-10ed-4aea-bcb7-593c9f4a315b-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548</id>
        </mitre>
        <description>UAC Bypass via Windows Firewall Snap-In Hijack</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+mmc\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)WF\.msc</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WerFault\.exe)$</field>
    </rule>
    <rule id="901220" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sc_service_tamper_for_persistence.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: Detects the modification of an existing service in order to execute an arbitrary payload when the service is started or killed as a potential method for persistence.-->
        <!--Date: 2020/09/29-->
        <!--Status: test-->
        <!--ID: 38879043-7e1e-47a9-8d46-6bec88e201df-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1543.003</id>
            <id>attack.t1574.011</id>
        </mitre>
        <description>Potential Persistence Attempt Via Existing Service Tampering</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:sc\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:config\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)binpath=</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:sc\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)failure</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)command=</field>
    </rule>
    <rule id="901221" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_base64_frombase64string.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects usage of a base64 encoded "FromBase64String" cmdlet in a process command line-->
        <!--Date: 2019/08/24-->
        <!--Status: test-->
        <!--ID: fdb62a13-9a81-4e5c-a38f-ea93a16f6d7c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1140</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell Base64 Encoded FromBase64String Cmdlet</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">::FromBase64String</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)OgA6AEYAcgBvAG0AQgBhAHMAZQA2ADQAUwB0AHIAaQBuAGcA|oAOgBGAHIAbwBtAEIAYQBzAGUANgA0AFMAdAByAGkAbgBnA|6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZw</field>
    </rule>
    <rule id="901222" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_appvlp_uncommon_child_process.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: Detects uncommon child processes of Appvlp.EXE
Appvlp or the Application Virtualization Utility is included with Microsoft Office. Attackers are able to abuse "AppVLP" to execute shell commands.
Normally, this binary is used for Application Virtualization, but it can also be abused to circumvent the ASR file path rule folder
or to mark a file as a system file.
-->
        <!--Date: 2020/03/13-->
        <!--Status: test-->
        <!--ID: 9c7e131a-0f2c-4ae0-9d43-b04f4e266d43-->
        <mitre>
            <id>attack.t1218</id>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
        </mitre>
        <description>Uncommon Child Process Of Appvlp.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+appvlp\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+SysWOW64\\+rundll32\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+rundll32\.exe)$</field>
    </rule>
    <rule id="901223" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_appvlp_uncommon_child_process.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: Detects uncommon child processes of Appvlp.EXE
Appvlp or the Application Virtualization Utility is included with Microsoft Office. Attackers are able to abuse "AppVLP" to execute shell commands.
Normally, this binary is used for Application Virtualization, but it can also be abused to circumvent the ASR file path rule folder
or to mark a file as a system file.
-->
        <!--Date: 2020/03/13-->
        <!--Status: test-->
        <!--ID: 9c7e131a-0f2c-4ae0-9d43-b04f4e266d43-->
        <mitre>
            <id>attack.t1218</id>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
        </mitre>
        <description>Uncommon Child Process Of Appvlp.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+appvlp\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Microsoft\ Office</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msoasb\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Microsoft\ Office</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+SkypeSrv\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+SKYPESERVER\.EXE)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Microsoft\ Office</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+MSOUC\.EXE)$</field>
    </rule>
    <rule id="901224" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wsl_lolbin_execution.yml</info>
        <!--Sigma Rule Author: oscd.community, Zach Stanford @svch0st, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potential abuse of Windows Subsystem for Linux (WSL) binary as a LOLBIN to execute arbitrary Linux or Windows commands-->
        <!--Date: 2020/10/05-->
        <!--Status: test-->
        <!--ID: dec44ca7-61ad-493c-bfd7-8819c5faa09b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Arbitrary Command Execution Using WSL</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wsl\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)wsl\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-e\ |\ \-\-exec|\ \-\-system|\ \-\-shell\-type\ |\ /mnt/c|\ \-\-user\ root|\ \-u\ root|\-\-debug\-shell</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ \-d\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ \-e\ kill\ )</field>
    </rule>
    <rule id="901225" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_curl.yml</info>
        <!--Sigma Rule Author: X__Junior (Nextron Systems)-->
        <!--Description: Detects the execution of a renamed "CURL.exe" binary based on the PE metadata fields-->
        <!--Date: 2023/09/11-->
        <!--Status: experimental-->
        <!--ID: 7530cd3d-7671-43e3-b209-976966f6ea48-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Renamed CURL.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)curl\.exe</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)The\ curl\ executable</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+curl</field>
    </rule>
    <rule id="901226" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_schtasks_parent.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious scheduled task creations from a parent stored in a temporary folder-->
        <!--Date: 2022/02/23-->
        <!--Status: test-->
        <!--ID: 9494479d-d994-40bf-a8b1-eea890237021-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Suspicious Add Scheduled Task Parent</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/Create\ )</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+|\\+AppData\\+Roaming\\+|\\+Temporary\ Internet|\\+Users\\+Public\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)update_task\.xml</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)unattended\.ini</field>
    </rule>
    <rule id="901227" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_export_certificate.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects calls to cmdlets that are used to export certificates from the local certificate store. Threat actors were seen abusing this to steal private keys from compromised machines.-->
        <!--Date: 2023/05/18-->
        <!--Status: experimental-->
        <!--ID: 9e716b33-63b2-46da-86a4-bd3c3b9b5dfb-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.execution</id>
            <id>attack.t1552.004</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Certificate Exported Via PowerShell</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:Export\-PfxCertificate\ |Export\-Certificate\ )</field>
    </rule>
    <rule id="901228" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_embed_exe_lnk.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects events that appear when a user click on a link file with a powershell command in it-->
        <!--Date: 2022/02/06-->
        <!--Status: test-->
        <!--ID: 30e92f50-bb5a-4884-98b5-d20aa80f3d7a-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Hidden Powershell in Link File Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)C:\\+Windows\\+explorer\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\+Windows\\+System32\\+cmd\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.lnk</field>
    </rule>
    <rule id="901229" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_invoke_obfuscation_clip.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Clip.exe to execute PowerShell-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: b222df08-0e07-11eb-adc1-0242ac120002-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation CLIP+ Launcher</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)clipboard\]::</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-f</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/c|/r</field>
    </rule>
    <rule id="901230" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_iis_appcmd_service_account_password_dumped.yml</info>
        <!--Sigma Rule Author: Tim Rauch, Janantha Marasinghe-->
        <!--Description: Detects the Internet Information Services (IIS) command-line tool, AppCmd, being used to list passwords-->
        <!--Date: 2022/11/08-->
        <!--Status: test-->
        <!--ID: 2d3cdeec-c0db-45b4-aa86-082f7eb75701-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
        </mitre>
        <description>Microsoft IIS Service Account Password Dumped</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+appcmd\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)appcmd\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:list\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /config|\ /xml|\ \-config|\ \-xml</field>
    </rule>
    <rule id="901231" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mstsc_rdp_hijack_shadowing.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects RDP session hijacking by using MSTSC shadowing-->
        <!--Date: 2020/01/24-->
        <!--Status: test-->
        <!--ID: 6ba5a05f-b095-4f0a-8654-b825f4f16334-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1563.002</id>
        </mitre>
        <description>Potential MSTSC Shadowing Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)noconsentprompt</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shadow:</field>
    </rule>
    <rule id="901232" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_non_interactive_execution.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g (rule), oscd.community (improvements)-->
        <!--Description: Detects non-interactive PowerShell activity by looking at the "powershell" process with a non-user GUI process such as "explorer.exe" as a parent.-->
        <!--Date: 2019/09/12-->
        <!--Status: test-->
        <!--ID: f4bbd493-b796-416e-bbf2-121235348529-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Non Interactive PowerShell Process Spawned</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+explorer\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+CompatTelRunner\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+SysWOW64\\+explorer\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\+\$WINDOWS\.\~BT\\+Sources\\+SetupHost\.exe</field>
    </rule>
    <rule id="901233" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_non_interactive_execution.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g (rule), oscd.community (improvements)-->
        <!--Description: Detects non-interactive PowerShell activity by looking at the "powershell" process with a non-user GUI process such as "explorer.exe" as a parent.-->
        <!--Date: 2019/09/12-->
        <!--Status: test-->
        <!--ID: f4bbd493-b796-416e-bbf2-121235348529-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Non Interactive PowerShell Process Spawned</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Programs\\+Microsoft\ VS\ Code\\+Code\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)(?:\ \-\-ms\-enable\-electron\-run\-as\-node\ )</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+WindowsApps\\+Microsoft\.WindowsTerminal_</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+WindowsTerminal\.exe)$</field>
    </rule>
    <rule id="901234" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_encoded_obfusc.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious UTF16 and base64 encoded and often obfuscated PowerShell code often used in command lines-->
        <!--Date: 2022/07/11-->
        <!--Status: experimental-->
        <!--ID: 8d01b53f-456f-48ee-90f6-bc28e67d4e35-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious Obfuscated PowerShell Code</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)IAAtAGIAeABvAHIAIAAwAHgA|AALQBiAHgAbwByACAAMAB4A|gAC0AYgB4AG8AcgAgADAAeA|AC4ASQBuAHYAbwBrAGUAKAApACAAfAAg|AuAEkAbgB2AG8AawBlACgAKQAgAHwAI|ALgBJAG4AdgBvAGsAZQAoACkAIAB8AC|AHsAMQB9AHsAMAB9ACIAIAAtAGYAI|B7ADEAfQB7ADAAfQAiACAALQBmAC|AewAxAH0AewAwAH0AIgAgAC0AZgAg|AHsAMAB9AHsAMwB9ACIAIAAtAGYAI|B7ADAAfQB7ADMAfQAiACAALQBmAC|AewAwAH0AewAzAH0AIgAgAC0AZgAg|AHsAMgB9AHsAMAB9ACIAIAAtAGYAI|B7ADIAfQB7ADAAfQAiACAALQBmAC|AewAyAH0AewAwAH0AIgAgAC0AZgAg|AHsAMQB9AHsAMAB9ACcAIAAtAGYAI|B7ADEAfQB7ADAAfQAnACAALQBmAC|AewAxAH0AewAwAH0AJwAgAC0AZgAg|AHsAMAB9AHsAMwB9ACcAIAAtAGYAI|B7ADAAfQB7ADMAfQAnACAALQBmAC|AewAwAH0AewAzAH0AJwAgAC0AZgAg|AHsAMgB9AHsAMAB9ACcAIAAtAGYAI|B7ADIAfQB7ADAAfQAnACAALQBmAC|AewAyAH0AewAwAH0AJwAgAC0AZgAg</field>
    </rule>
    <rule id="901235" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_dinjector.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of the Dinject PowerShell cradle based on the specific flags-->
        <!--Date: 2021/12/07-->
        <!--Status: test-->
        <!--ID: d78b5d61-187d-44b6-bf02-93486a80de5a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1055</id>
        </mitre>
        <description>HackTool - DInjector PowerShell Cradle Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /am51</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /password</field>
    </rule>
    <rule id="901236" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sharpersist.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms-->
        <!--Date: 2022/09/15-->
        <!--Status: test-->
        <!--ID: 26488ad0-f9fd-4536-876f-52fea846a2e4-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1053</id>
        </mitre>
        <description>HackTool - SharPersist Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+SharPersist\.exe)$</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)SharPersist</field>
    </rule>
    <rule id="901237" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sharpersist.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms-->
        <!--Date: 2022/09/15-->
        <!--Status: test-->
        <!--ID: 26488ad0-f9fd-4536-876f-52fea846a2e4-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1053</id>
        </mitre>
        <description>HackTool - SharPersist Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-t\ schtask\ \-c\ |\ \-t\ startupfolder\ \-c\ )</field>
    </rule>
    <rule id="901238" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sharpersist.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms-->
        <!--Date: 2022/09/15-->
        <!--Status: test-->
        <!--ID: 26488ad0-f9fd-4536-876f-52fea846a2e4-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1053</id>
        </mitre>
        <description>HackTool - SharPersist Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-t\ reg\ \-c\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-m\ add</field>
    </rule>
    <rule id="901239" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sharpersist.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms-->
        <!--Date: 2022/09/15-->
        <!--Status: test-->
        <!--ID: 26488ad0-f9fd-4536-876f-52fea846a2e4-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1053</id>
        </mitre>
        <description>HackTool - SharPersist Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-t\ service\ \-c\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-m\ add</field>
    </rule>
    <rule id="901240" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sharpersist.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of the hacktool SharPersist - used to deploy various different kinds of persistence mechanisms-->
        <!--Date: 2022/09/15-->
        <!--Status: test-->
        <!--ID: 26488ad0-f9fd-4536-876f-52fea846a2e4-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1053</id>
        </mitre>
        <description>HackTool - SharPersist Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-t\ schtask\ \-c\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-m\ add</field>
    </rule>
    <rule id="901241" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_exfiltration_and_tunneling_tools_execution.yml</info>
        <!--Sigma Rule Author: Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Execution of well known tools for data exfiltration and tunneling-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: c75309a3-59f8-4a8d-9c2c-4c927ad50555-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.command_and_control</id>
            <id>attack.t1041</id>
            <id>attack.t1572</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Exfiltration and Tunneling Tools Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+plink\.exe|\\+socat\.exe|\\+stunnel\.exe|\\+httptunnel\.exe)$</field>
    </rule>
    <rule id="901242" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sc_service_path_modification.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, oscd.community, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects service path modification via the "sc" binary to a suspicious command or path-->
        <!--Date: 2019/10/21-->
        <!--Status: test-->
        <!--ID: 138d3531-8793-4f50-a2cd-f291b2863d78-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Suspicious Service Path Modification</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+sc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)config</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)binPath</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell|cmd\ |mshta|wscript|cscript|rundll32|svchost|dllhost|cmd\.exe\ /c|cmd\.exe\ /k|cmd\.exe\ /r|cmd\ /c|cmd\ /k|cmd\ /r|C:\\+Users\\+Public|\\+Downloads\\+|\\+Desktop\\+|\\+Microsoft\\+Windows\\+Start\ Menu\\+Programs\\+Startup\\+|C:\\+Windows\\+TEMP\\+|\\+AppData\\+Local\\+Temp</field>
    </rule>
    <rule id="901243" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_adfind.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of a renamed Adfind.exe. AdFind continues to be seen across majority of breaches. It is used to domain trust discovery to plan out subsequent steps in the attack chain.-->
        <!--Date: 2022/08/21-->
        <!--Status: test-->
        <!--ID: df55196f-f105-44d3-a675-e9dfb6cc2f2b-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1018</id>
            <id>attack.t1087.002</id>
            <id>attack.t1482</id>
            <id>attack.t1069.002</id>
        </mitre>
        <description>Renamed AdFind Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)domainlist|trustdmp|dcmodes|adinfo|\ dclist\ |computer_pwdnotreqd|objectcategory=|\-subnets\ \-f|name="Domain\ Admins"|\-sc\ u:|domainncs|dompol|\ oudmp\ |subnetdmp|gpodmp|fspdmp|users_noexpire|computers_active|computers_pwdnotreqd</field>
    </rule>
    <rule id="901244" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_adfind.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of a renamed Adfind.exe. AdFind continues to be seen across majority of breaches. It is used to domain trust discovery to plan out subsequent steps in the attack chain.-->
        <!--Date: 2022/08/21-->
        <!--Status: test-->
        <!--ID: df55196f-f105-44d3-a675-e9dfb6cc2f2b-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1018</id>
            <id>attack.t1087.002</id>
            <id>attack.t1482</id>
            <id>attack.t1069.002</id>
        </mitre>
        <description>Renamed AdFind Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)bca5675746d13a1f246e2da3c2217492|53e117a96057eaf19c41380d0e87f1c2</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=BCA5675746D13A1F246E2DA3C2217492|IMPHASH=53E117A96057EAF19C41380D0E87F1C2</field>
    </rule>
    <rule id="901245" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_adfind.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of a renamed Adfind.exe. AdFind continues to be seen across majority of breaches. It is used to domain trust discovery to plan out subsequent steps in the attack chain.-->
        <!--Date: 2022/08/21-->
        <!--Status: test-->
        <!--ID: df55196f-f105-44d3-a675-e9dfb6cc2f2b-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1018</id>
            <id>attack.t1087.002</id>
            <id>attack.t1482</id>
            <id>attack.t1069.002</id>
        </mitre>
        <description>Renamed AdFind Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)AdFind\.exe</field>
    </rule>
    <rule id="901246" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_adfind.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of a renamed Adfind.exe. AdFind continues to be seen across majority of breaches. It is used to domain trust discovery to plan out subsequent steps in the attack chain.-->
        <!--Date: 2022/08/21-->
        <!--Status: test-->
        <!--ID: df55196f-f105-44d3-a675-e9dfb6cc2f2b-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1018</id>
            <id>attack.t1087.002</id>
            <id>attack.t1482</id>
            <id>attack.t1069.002</id>
        </mitre>
        <description>Renamed AdFind Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AdFind\.exe)$</field>
    </rule>
    <rule id="901247" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_tool_recon.yml</info>
        <!--Sigma Rule Author: Cian Heasley, Florian Roth (Nextron Systems)-->
        <!--Description: Detects processes spawned from web servers (PHP, Tomcat, IIS, etc.) that perform reconnaissance looking for the existence of popular scripting tools (perl, python, wget) on the system via the help commands
-->
        <!--Date: 2020/07/22-->
        <!--Status: test-->
        <!--ID: f64e5c19-879c-4bae-b471-6d84c8339677-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Webshell Tool Reconnaissance Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+caddy\.exe|\\+httpd\.exe|\\+nginx\.exe|\\+php\-cgi\.exe|\\+w3wp\.exe|\\+ws_tomcatservice\.exe)$</field>
    </rule>
    <rule id="901248" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_tool_recon.yml</info>
        <!--Sigma Rule Author: Cian Heasley, Florian Roth (Nextron Systems)-->
        <!--Description: Detects processes spawned from web servers (PHP, Tomcat, IIS, etc.) that perform reconnaissance looking for the existence of popular scripting tools (perl, python, wget) on the system via the help commands
-->
        <!--Date: 2020/07/22-->
        <!--Status: test-->
        <!--ID: f64e5c19-879c-4bae-b471-6d84c8339677-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Webshell Tool Reconnaissance Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+java\.exe|\\+javaw\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\-tomcat\-|\\+tomcat</field>
    </rule>
    <rule id="901249" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_tool_recon.yml</info>
        <!--Sigma Rule Author: Cian Heasley, Florian Roth (Nextron Systems)-->
        <!--Description: Detects processes spawned from web servers (PHP, Tomcat, IIS, etc.) that perform reconnaissance looking for the existence of popular scripting tools (perl, python, wget) on the system via the help commands
-->
        <!--Date: 2020/07/22-->
        <!--Status: test-->
        <!--ID: f64e5c19-879c-4bae-b471-6d84c8339677-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Webshell Tool Reconnaissance Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+java\.exe|\\+javaw\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)CATALINA_HOME|catalina\.jar</field>
    </rule>
    <rule id="901250" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_tool_recon.yml</info>
        <!--Sigma Rule Author: Cian Heasley, Florian Roth (Nextron Systems)-->
        <!--Description: Detects processes spawned from web servers (PHP, Tomcat, IIS, etc.) that perform reconnaissance looking for the existence of popular scripting tools (perl, python, wget) on the system via the help commands
-->
        <!--Date: 2020/07/22-->
        <!--Status: test-->
        <!--ID: f64e5c19-879c-4bae-b471-6d84c8339677-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Webshell Tool Reconnaissance Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)perl\ \-\-help|perl\ \-h|python\ \-\-help|python\ \-h|python3\ \-\-help|python3\ \-h|wget\ \-\-help</field>
    </rule>
    <rule id="901251" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_msiexec_masquerading.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of msiexec.exe from an uncommon directory-->
        <!--Date: 2019/11/14-->
        <!--Status: test-->
        <!--ID: e22a6eb2-f8a5-44b5-8b44-a2dbd47b1144-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.005</id>
        </mitre>
        <description>Potential MsiExec Masquerading</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+msiexec\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)\\+msiexec\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+SysWOW64\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+WinSxS\\+)</field>
    </rule>
    <rule id="901252" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_redmimicry_winnti_playbook.yml</info>
        <!--Sigma Rule Author: Alexander Rausch-->
        <!--Description: Detects actions caused by the RedMimicry Winnti playbook a automated breach emulations utility-->
        <!--Date: 2020/06/24-->
        <!--Status: test-->
        <!--ID: 95022b85-ff2a-49fa-939a-d7b8f56eeb9b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1106</id>
            <id>attack.t1059.003</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>HackTool - RedMimicry Winnti Playbook Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe|\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)gthread\-3\.6\.dll|\\+Windows\\+Temp\\+tmp\.bat|sigcmm\-2\.4\.dll</field>
    </rule>
    <rule id="901253" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_frombase64string.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects usage of the "FromBase64String" function in the commandline which is used to decode a base64 encoded string-->
        <!--Date: 2020/01/29-->
        <!--Status: test-->
        <!--ID: e32d4572-9826-4738-b651-95fa63747e8a-->
        <mitre>
            <id>attack.t1027</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1140</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Base64 Encoded PowerShell Command Detected</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)::FromBase64String\(</field>
    </rule>
    <rule id="901254" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_dumpstack_log_evasion.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of the filename DumpStack.log to evade Microsoft Defender-->
        <!--Date: 2022/01/06-->
        <!--Status: test-->
        <!--ID: 4f647cfa-b598-4e12-ad69-c68dd16caef8-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>DumpStack.log Defender Evasion</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+DumpStack\.log)$</field>
    </rule>
    <rule id="901255" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_dumpstack_log_evasion.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of the filename DumpStack.log to evade Microsoft Defender-->
        <!--Date: 2022/01/06-->
        <!--Status: test-->
        <!--ID: 4f647cfa-b598-4e12-ad69-c68dd16caef8-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>DumpStack.log Defender Evasion</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-o\ DumpStack\.log</field>
    </rule>
    <rule id="901256" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mssql_susp_child_process.yml</info>
        <!--Sigma Rule Author: FPT.EagleEye Team, wagga-->
        <!--Description: Detects suspicious child processes of the SQLServer process. This could indicate potential RCE or SQL Injection.-->
        <!--Date: 2020/12/11-->
        <!--Status: experimental-->
        <!--ID: 869b9ca7-9ea2-4a5a-8325-e80e62f75445-->
        <mitre>
            <id>attack.t1505.003</id>
            <id>attack.t1190</id>
            <id>attack.initial_access</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Suspicious Child Process Of SQL Server</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+sqlservr\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+bash\.exe|\\+bitsadmin\.exe|\\+cmd\.exe|\\+netstat\.exe|\\+nltest\.exe|\\+ping\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+sh\.exe|\\+systeminfo\.exe|\\+tasklist\.exe|\\+wsl\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Microsoft\ SQL\ Server\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:DATEV_DBENGINE\\+MSSQL\\+Binn\\+sqlservr\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+cmd\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)^(?:"C:\\+Windows\\+system32\\+cmd\.exe"\ )</field>
    </rule>
    <rule id="901257" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_query_session_exfil.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of "query.exe" a system binary to exfil information such as "sessions" and "processes" for later use-->
        <!--Date: 2022/08/01-->
        <!--Status: test-->
        <!--ID: 53ef0cef-fa24-4f25-a34a-6c72dfa2e6e2-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Query Usage To Exfil Data</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?::\\+Windows\\+System32\\+query\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)session\ &gt;|process\ &gt;</field>
    </rule>
    <rule id="901258" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_sftp.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the usage of the "sftp.exe" binary as a LOLBIN by abusing the "-D" flag-->
        <!--Date: 2022/11/10-->
        <!--Status: test-->
        <!--ID: a85ffc3a-e8fd-4040-93bf-78aff284d801-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Use Of The SFTP.EXE Binary As A LOLBIN</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+sftp\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-D\ \.\.|\ \-D\ C:\\+</field>
    </rule>
    <rule id="901259" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_tracker.yml</info>
        <!--Sigma Rule Author: Avneet Singh @v3t0_, oscd.community-->
        <!--Description: Detects potential DLL injection and execution using "Tracker.exe"-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: 148431ce-4b70-403d-8525-fcc2993f29ea-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1055.001</id>
        </mitre>
        <description>Potential DLL Injection Or Execution Using Tracker.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+tracker\.exe)$</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Tracker</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /d\ |\ /c\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ /ERRORREPORT:PROMPT\ )</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+Msbuild\\+Current\\+Bin\\+MSBuild\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+Msbuild\\+Current\\+Bin\\+amd64\\+MSBuild\.exe)$</field>
    </rule>
    <rule id="901260" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_ntdllpipe_redirect.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects command that type the content of ntdll.dll to a different file or a pipe in order to evade AV / EDR detection. As seen being used in the POC NtdllPipe-->
        <!--Date: 2022/03/05-->
        <!--Status: test-->
        <!--ID: bbc865e4-7fcd-45a6-8ff1-95ced28ec5b2-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>NtdllPipe Like Activity Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)type\ %windir%\\+system32\\+ntdll\.dll|type\ %systemroot%\\+system32\\+ntdll\.dll|type\ c:\\+windows\\+system32\\+ntdll\.dll|\\+ntdll\.dll\ &gt;\ \\+\.\\+pipe\\+</field>
    </rule>
    <rule id="901261" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_ssh.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali-->
        <!--Description: Detect usage of the "ssh.exe" binary as a proxy to launch other programs-->
        <!--Date: 2022/12/29-->
        <!--Status: test-->
        <!--ID: 7d6d30b8-5b91-4b90-a891-46cccaf29598-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Lolbin Ssh.exe Use As Proxy</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)C:\\+Windows\\+System32\\+OpenSSH\\+sshd\.exe</field>
    </rule>
    <rule id="901262" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vmware_vmtoolsd_susp_child_process.yml</info>
        <!--Sigma Rule Author: bohops, Bhabesh Raj-->
        <!--Description: Detects suspicious child process creations of VMware Tools process which may indicate persistence setup-->
        <!--Date: 2021/10/08-->
        <!--Status: experimental-->
        <!--ID: 5687f942-867b-4578-ade7-1e341c46e99a-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.t1059</id>
        </mitre>
        <description>VMToolsd Suspicious Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+vmtoolsd\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+cscript\.exe|\\+mshta\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+wscript\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Cmd\.Exe|cscript\.exe|MSHTA\.EXE|PowerShell\.EXE|pwsh\.dll|REGSVR32\.EXE|RUNDLL32\.EXE|wscript\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+VMware\\+VMware\ Tools\\+poweron\-vm\-default\.bat</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+VMware\\+VMware\ Tools\\+poweroff\-vm\-default\.bat</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+VMware\\+VMware\ Tools\\+resume\-vm\-default\.bat</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+VMware\\+VMware\ Tools\\+suspend\-vm\-default\.bat</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="901263" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remote_access_tools_anydesk_silent_install.yml</info>
        <!--Sigma Rule Author: J&#225;n Tren&#269;ansk&#253;-->
        <!--Description: Detects AnyDesk Remote Desktop silent installation. Which can be used by attackers to gain remote access.-->
        <!--Date: 2021/08/06-->
        <!--Status: test-->
        <!--ID: 114e7f1c-f137-48c8-8f54-3088c24ce4b9-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Remote Access Tool - AnyDesk Silent Installation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-install</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-start\-with\-win</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-silent</field>
    </rule>
    <rule id="901264" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dsim_remove.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images-->
        <!--Date: 2022/01/16-->
        <!--Status: test-->
        <!--ID: 43e32da2-fdd0-4156-90de-50dfd62636f9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Dism Remove Online Package</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+DismHost\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)/Online</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)/Disable\-Feature</field>
    </rule>
    <rule id="901265" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dsim_remove.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Deployment Image Servicing and Management tool. DISM is used to enumerate, install, uninstall, configure, and update features and packages in Windows images-->
        <!--Date: 2022/01/16-->
        <!--Status: test-->
        <!--ID: 43e32da2-fdd0-4156-90de-50dfd62636f9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Dism Remove Online Package</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Dism\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/Online</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/Disable\-Feature</field>
    </rule>
    <rule id="901266" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_ftp.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, oscd.community-->
        <!--Description: Detects execution of ftp.exe script execution with the "-s" or "/s" flag and any child processes ran by ftp.exe-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: 06b401f4-107c-4ff9-947f-9ec1e7649f1e-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>LOLBIN Execution Of The FTP.EXE Binary</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+ftp\.exe)$</field>
    </rule>
    <rule id="901267" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_nmap_zenmap.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects usage of namp/zenmap. Adversaries may attempt to get a listing of services running on remote hosts, including those that may be vulnerable to remote software exploitation-->
        <!--Date: 2021/12/10-->
        <!--Status: test-->
        <!--ID: f6ecd1cf-19b8-4488-97f6-00f0924991a3-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1046</id>
        </mitre>
        <description>PUA - Nmap/Zenmap Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+nmap\.exe|\\+zennmap\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)nmap\.exe|zennmap\.exe</field>
    </rule>
    <rule id="901268" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmstp_execution_by_creation.yml</info>
        <!--Sigma Rule Author: Nik Seetharaman-->
        <!--Description: Detects various indicators of Microsoft Connection Manager Profile Installer execution-->
        <!--Date: 2018/07/16-->
        <!--Status: stable-->
        <!--ID: 7d4cdc5a-0076-40ca-aac8-f7e714570e47-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1218.003</id>
            <id>attack.g0069</id>
            <id>car.2019-04-001</id>
        </mitre>
        <description>CMSTP Execution Process Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+cmstp\.exe)$</field>
    </rule>
    <rule id="901269" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_volsnap_disable.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects commands that temporarily turn off Volume Snapshots-->
        <!--Date: 2021/01/28-->
        <!--Status: test-->
        <!--ID: dee4af55-1f22-4e1d-a9d2-4bdc7ecb472a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Disabled Volume Snapshots</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Services\\+VSS\\+Diag</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/d\ Disabled</field>
    </rule>
    <rule id="901270" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_execution_path_webserver.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a suspicious program execution in a web service root folder (filter out false positives)-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 35efb964-e6a5-47ad-bbcd-19661854018d-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Execution in Webserver Root Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+wwwroot\\+|\\+wmpub\\+|\\+htdocs\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)bin\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Tools\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+SMSComponent\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+services\.exe)$</field>
    </rule>
    <rule id="901271" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_pcwrun.yml</info>
        <!--Sigma Rule Author: A. Sungurov , oscd.community-->
        <!--Description: Detect indirect command execution via Program Compatibility Assistant pcwrun.exe-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: b97cd4b1-30b8-4a9d-bd72-6293928d52bc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.execution</id>
        </mitre>
        <description>Indirect Command Execution By Program Compatibility Wizard</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+pcwrun\.exe)$</field>
    </rule>
    <rule id="901272" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wscript_cscript_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious child processes of Wscript/Cscript-->
        <!--Date: 2023/05/15-->
        <!--Status: experimental-->
        <!--ID: b6676963-0353-4f88-90f5-36c20d443c6a-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Cscript/Wscript Suspicious Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+wscript\.exe|\\+cscript\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)mshta</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http</field>
    </rule>
    <rule id="901273" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wscript_cscript_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious child processes of Wscript/Cscript-->
        <!--Date: 2023/05/15-->
        <!--Status: experimental-->
        <!--ID: b6676963-0353-4f88-90f5-36c20d443c6a-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Cscript/Wscript Suspicious Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+wscript\.exe|\\+cscript\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32|regsvr32|msiexec</field>
    </rule>
    <rule id="901274" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_auditpol_nt_resource_kit_usage.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Threat actors can use an older version of the auditpol binary available inside the NT resource kit to change audit policy configuration to impair detection capability.
This can be carried out by selectively disabling/removing certain audit policies as well as restoring a custom policy owned by the threat actor.
-->
        <!--Date: 2021/12/18-->
        <!--Status: test-->
        <!--ID: c6c56ada-612b-42d1-9a29-adad3c5c2c1e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>Audit Policy Tampering Via NT Resource Kit Auditpol</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/logon:none|/system:none|/sam:none|/privilege:none|/object:none|/process:none|/policy:none</field>
    </rule>
    <rule id="901275" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sharpldapwhoami.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects SharpLdapWhoami, a whoami alternative that queries the LDAP service on a domain controller-->
        <!--Date: 2022/08/29-->
        <!--Status: test-->
        <!--ID: d9367cbb-c2e0-47ce-bdc0-128cb6da898d-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>car.2016-03-001</id>
        </mitre>
        <description>HackTool - SharpLdapWhoami Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+SharpLdapWhoami\.exe)$</field>
    </rule>
    <rule id="901276" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sharpldapwhoami.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects SharpLdapWhoami, a whoami alternative that queries the LDAP service on a domain controller-->
        <!--Date: 2022/08/29-->
        <!--Status: test-->
        <!--ID: d9367cbb-c2e0-47ce-bdc0-128cb6da898d-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>car.2016-03-001</id>
        </mitre>
        <description>HackTool - SharpLdapWhoami Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)SharpLdapWhoami</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)SharpLdapWhoami</field>
    </rule>
    <rule id="901277" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sharpldapwhoami.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects SharpLdapWhoami, a whoami alternative that queries the LDAP service on a domain controller-->
        <!--Date: 2022/08/29-->
        <!--Status: test-->
        <!--ID: d9367cbb-c2e0-47ce-bdc0-128cb6da898d-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>car.2016-03-001</id>
        </mitre>
        <description>HackTool - SharpLdapWhoami Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /method:ntlm|\ /method:kerb|\ /method:nego|\ /m:nego|\ /m:ntlm|\ /m:kerb)$</field>
    </rule>
    <rule id="901278" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hh_html_help_susp_child_process.yml</info>
        <!--Sigma Rule Author: Maxim Pavlunin, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a suspicious child process of a Microsoft HTML Help (HH.exe)-->
        <!--Date: 2020/04/01-->
        <!--Status: test-->
        <!--ID: 52cad028-0ff0-4854-8f67-d25dfcbc78b4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.initial_access</id>
            <id>attack.t1047</id>
            <id>attack.t1059.001</id>
            <id>attack.t1059.003</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
            <id>attack.t1218</id>
            <id>attack.t1218.001</id>
            <id>attack.t1218.010</id>
            <id>attack.t1218.011</id>
            <id>attack.t1566</id>
            <id>attack.t1566.001</id>
        </mitre>
        <description>HTML Help HH.EXE Suspicious Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+hh\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+CertReq\.exe|\\+CertUtil\.exe|\\+cmd\.exe|\\+cscript\.exe|\\+installutil\.exe|\\+MSbuild\.exe|\\+MSHTA\.EXE|\\+msiexec\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+schtasks\.exe|\\+wmic\.exe|\\+wscript\.exe)$</field>
    </rule>
    <rule id="901279" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_browsers_remote_debugging.yml</info>
        <!--Sigma Rule Author: pH-T (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects browsers starting with the remote debugging flags. Which is a technique often used to perform browser injection attacks-->
        <!--Date: 2022/07/27-->
        <!--Status: test-->
        <!--ID: b3d34dc5-2efd-4ae3-845f-8ec14921f449-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1185</id>
        </mitre>
        <description>Browser Started with Remote Debugging</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-\-remote\-debugging\-</field>
    </rule>
    <rule id="901280" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_browsers_remote_debugging.yml</info>
        <!--Sigma Rule Author: pH-T (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects browsers starting with the remote debugging flags. Which is a technique often used to perform browser injection attacks-->
        <!--Date: 2022/07/27-->
        <!--Status: test-->
        <!--ID: b3d34dc5-2efd-4ae3-845f-8ec14921f449-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1185</id>
        </mitre>
        <description>Browser Started with Remote Debugging</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+firefox\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-start\-debugger\-server</field>
    </rule>
    <rule id="901281" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rar_compression_with_password.yml</info>
        <!--Sigma Rule Author: @ROxPinTeddy-->
        <!--Description: Detects the use of rar.exe, on the command line, to create an archive with password protection or with a specific compression level. This is pretty indicative of malicious actions.-->
        <!--Date: 2020/05/12-->
        <!--Status: test-->
        <!--ID: faa48cae-6b25-4f00-a094-08947fef582f-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1560.001</id>
        </mitre>
        <description>Rar Usage with Password and Compression Level</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-hp</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-m|\ a\ )</field>
    </rule>
    <rule id="901282" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_autoit.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of a renamed AutoIt2.exe or AutoIt3.exe.
AutoIt is a scripting language and automation tool for Windows systems. While primarily used for legitimate automation tasks, it can be misused in cyber attacks.
Attackers can leverage AutoIt to create and distribute malware, including keyloggers, spyware, and botnets. A renamed AutoIt executable is particularly suspicious.
-->
        <!--Date: 2023/06/04-->
        <!--Status: experimental-->
        <!--ID: f4264e47-f522-4c38-a420-04525d5b880f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Renamed AutoIt Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /AutoIt3ExecuteScript|\ /ErrorStdOut</field>
    </rule>
    <rule id="901283" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_autoit.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of a renamed AutoIt2.exe or AutoIt3.exe.
AutoIt is a scripting language and automation tool for Windows systems. While primarily used for legitimate automation tasks, it can be misused in cyber attacks.
Attackers can leverage AutoIt to create and distribute malware, including keyloggers, spyware, and botnets. A renamed AutoIt executable is particularly suspicious.
-->
        <!--Date: 2023/06/04-->
        <!--Status: experimental-->
        <!--ID: f4264e47-f522-4c38-a420-04525d5b880f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Renamed AutoIt Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)fdc554b3a8683918d731685855683ddf|cd30a61b60b3d60cecdb034c8c83c290|f8a00c72f2d667d2edbb234d0c0ae000</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=FDC554B3A8683918D731685855683DDF|IMPHASH=CD30A61B60B3D60CECDB034C8C83C290|IMPHASH=F8A00C72F2D667D2EDBB234D0C0AE000</field>
    </rule>
    <rule id="901284" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_autoit.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of a renamed AutoIt2.exe or AutoIt3.exe.
AutoIt is a scripting language and automation tool for Windows systems. While primarily used for legitimate automation tasks, it can be misused in cyber attacks.
Attackers can leverage AutoIt to create and distribute malware, including keyloggers, spyware, and botnets. A renamed AutoIt executable is particularly suspicious.
-->
        <!--Date: 2023/06/04-->
        <!--Status: experimental-->
        <!--ID: f4264e47-f522-4c38-a420-04525d5b880f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Renamed AutoIt Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)AutoIt3\.exe|AutoIt2\.exe|AutoIt\.exe</field>
    </rule>
    <rule id="901285" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_autoit.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of a renamed AutoIt2.exe or AutoIt3.exe.
AutoIt is a scripting language and automation tool for Windows systems. While primarily used for legitimate automation tasks, it can be misused in cyber attacks.
Attackers can leverage AutoIt to create and distribute malware, including keyloggers, spyware, and botnets. A renamed AutoIt executable is particularly suspicious.
-->
        <!--Date: 2023/06/04-->
        <!--Status: experimental-->
        <!--ID: f4264e47-f522-4c38-a420-04525d5b880f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Renamed AutoIt Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AutoIt\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AutoIt2\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AutoIt3_x64\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AutoIt3\.exe)$</field>
    </rule>
    <rule id="901286" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_unusual_parent.yml</info>
        <!--Sigma Rule Author: Tim Rauch-->
        <!--Description: Detects suspicious parent process for cmd.exe-->
        <!--Date: 2022/09/21-->
        <!--Status: experimental-->
        <!--ID: 4b991083-3d0e-44ce-8fc4-b254025d8d4b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Unusual Parent Process For Cmd.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+csrss\.exe|\\+ctfmon\.exe|\\+dllhost\.exe|\\+epad\.exe|\\+FlashPlayerUpdateService\.exe|\\+GoogleUpdate\.exe|\\+jucheck\.exe|\\+jusched\.exe|\\+LogonUI\.exe|\\+lsass\.exe|\\+regsvr32\.exe|\\+SearchIndexer\.exe|\\+SearchProtocolHost\.exe|\\+SIHClient\.exe|\\+sihost\.exe|\\+slui\.exe|\\+spoolsv\.exe|\\+sppsvc\.exe|\\+taskhostw\.exe|\\+unsecapp\.exe|\\+WerFault\.exe|\\+wermgr\.exe|\\+wlanext\.exe|\\+WUDFHost\.exe)$</field>
    </rule>
    <rule id="901287" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_service_tamper.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), frack113-->
        <!--Description: Detects the usage of binaries such as 'net', 'sc' or 'powershell' in order to stop, pause or delete critical or important Windows services such as AV, Backup, etc. As seen being used in some ransomware scripts-->
        <!--Date: 2022/09/01-->
        <!--Status: experimental-->
        <!--ID: ce72ef99-22f1-43d4-8695-419dcb5d9330-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1489</id>
        </mitre>
        <description>Suspicious Windows Service Tampering</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)143Svc|Acronis\ VSS\ Provider|AcronisAgent|AcrSch2Svc|Antivirus|ARSM|aswBcc|Avast\ Business\ Console\ Client\ Antivirus\ Service|avast!\ Antivirus|AVG\ Antivirus|avgAdminClient|AvgAdminServer|AVP1|BackupExec|bedbg|BITS|BrokerInfrastructure|Client\ Agent\ 7\.60|Core\ Browsing\ Protection|Core\ Mail\ Protection|Core\ Scanning\ Server|DCAgent|EhttpSr|ekrn|Enterprise\ Client\ Service|epag|EPIntegrationService|EPProtectedService|EPRedline|EPSecurityService|EPUpdateService|EraserSvc11710|EsgShKernel|ESHASRV|FA_Scheduler|FirebirdGuardianDefaultInstance|FirebirdServerDefaultInstance|HealthTLService|MSSQLFDLauncher\$|hmpalertsvc|HMS|IISAdmin|IMANSVC|IMAP4Svc|KAVFS|KAVFSGT|kavfsslp|klbackupdisk|klbackupflt|klflt|klhk|KLIF|klim6|klkbdflt|klmouflt|klnagent|klpd|kltap|KSDE1\.0\.0|LogProcessorService|M8EndpointAgent|macmnsvc|masvc|MBAMService|MBCloudEA|MBEndpointAgent|McAfeeDLPAgentService|McAfeeEngineService|MCAFEEEVENTPARSERSRV|McAfeeFramework|MCAFEETOMCATSRV530|McShield|McTaskManager|mfefire|mfemms|mfevto|mfevtp|mfewc|MMS|mozyprobackup|MsDtsServer|MSExchange|msftesq1SPROO|msftesql\$PROD|MSOLAP\$SQL_2008|MSOLAP\$SYSTEM_BGC|MSOLAP\$TPS|MSOLAP\$TPSAMA|MSOLAPSTPS|MSOLAPSTPSAMA|mssecflt|MSSQ!I\.SPROFXENGAGEMEHT|MSSQ0SHAREPOINT|MSSQ0SOPHOS|MSSQL|MySQL|NanoServiceMain|NetMsmqActivator|ntrtscan|ofcservice|Online\ Protection\ System|OracleClientCache80|PandaAetherAgent|PccNTUpd|PDVFSService|POP3Svc|POVFSService|PSUAService|Quick\ Update\ Service|RepairService|ReportServer|ReportServer\$|RESvc|RpcEptMapper|sacsvr|SamSs|SAVAdminService|SAVService|ScSecSvc|SDRSVC|sense|SentinelAgent|SentinelHelperService|SepMasterService|ShMonitor|Smcinst|SmcService|SMTPSvc|SNAC|SntpService|Sophos|SQ1SafeOLRService|SQL\ Backups|SQL\ Server|SQLAgent|SQLBrowser|SQLsafe|SQLSERVERAGENT|SQLTELEMETRY|SQLWriter|SSISTELEMETRY130|SstpSvc|svcGenericHost|swc_service|swi_filter|swi_service|swi_update|Symantec|Telemetryserver|ThreatLockerService|TMBMServer|TmCCSF|TmFilter|TMiCRCScanService|tmlisten|TMLWCSService|TmPfw|TmPreFilter|TmProxy|TMSmartRelayService|tmusa|Trend\ Micro\ Deep\ Security\ Manager|TrueKey|UI0Detect|UTODetect|Veeam|VeeamDeploySvc|Veritas\ System\ Recovery|VSApiNt|VSS|W3Svc|wbengine|WdNisSvc|WeanClOudSve|Weems\ JY|WinDefend|wozyprobackup|WRSVC|Zoolz\ 2\ Service</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)net\.exe|net1\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+net\.exe|\\+net1\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ stop\ )</field>
    </rule>
    <rule id="901288" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_service_tamper.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), frack113-->
        <!--Description: Detects the usage of binaries such as 'net', 'sc' or 'powershell' in order to stop, pause or delete critical or important Windows services such as AV, Backup, etc. As seen being used in some ransomware scripts-->
        <!--Date: 2022/09/01-->
        <!--Status: experimental-->
        <!--ID: ce72ef99-22f1-43d4-8695-419dcb5d9330-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1489</id>
        </mitre>
        <description>Suspicious Windows Service Tampering</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)143Svc|Acronis\ VSS\ Provider|AcronisAgent|AcrSch2Svc|Antivirus|ARSM|aswBcc|Avast\ Business\ Console\ Client\ Antivirus\ Service|avast!\ Antivirus|AVG\ Antivirus|avgAdminClient|AvgAdminServer|AVP1|BackupExec|bedbg|BITS|BrokerInfrastructure|Client\ Agent\ 7\.60|Core\ Browsing\ Protection|Core\ Mail\ Protection|Core\ Scanning\ Server|DCAgent|EhttpSr|ekrn|Enterprise\ Client\ Service|epag|EPIntegrationService|EPProtectedService|EPRedline|EPSecurityService|EPUpdateService|EraserSvc11710|EsgShKernel|ESHASRV|FA_Scheduler|FirebirdGuardianDefaultInstance|FirebirdServerDefaultInstance|HealthTLService|MSSQLFDLauncher\$|hmpalertsvc|HMS|IISAdmin|IMANSVC|IMAP4Svc|KAVFS|KAVFSGT|kavfsslp|klbackupdisk|klbackupflt|klflt|klhk|KLIF|klim6|klkbdflt|klmouflt|klnagent|klpd|kltap|KSDE1\.0\.0|LogProcessorService|M8EndpointAgent|macmnsvc|masvc|MBAMService|MBCloudEA|MBEndpointAgent|McAfeeDLPAgentService|McAfeeEngineService|MCAFEEEVENTPARSERSRV|McAfeeFramework|MCAFEETOMCATSRV530|McShield|McTaskManager|mfefire|mfemms|mfevto|mfevtp|mfewc|MMS|mozyprobackup|MsDtsServer|MSExchange|msftesq1SPROO|msftesql\$PROD|MSOLAP\$SQL_2008|MSOLAP\$SYSTEM_BGC|MSOLAP\$TPS|MSOLAP\$TPSAMA|MSOLAPSTPS|MSOLAPSTPSAMA|mssecflt|MSSQ!I\.SPROFXENGAGEMEHT|MSSQ0SHAREPOINT|MSSQ0SOPHOS|MSSQL|MySQL|NanoServiceMain|NetMsmqActivator|ntrtscan|ofcservice|Online\ Protection\ System|OracleClientCache80|PandaAetherAgent|PccNTUpd|PDVFSService|POP3Svc|POVFSService|PSUAService|Quick\ Update\ Service|RepairService|ReportServer|ReportServer\$|RESvc|RpcEptMapper|sacsvr|SamSs|SAVAdminService|SAVService|ScSecSvc|SDRSVC|sense|SentinelAgent|SentinelHelperService|SepMasterService|ShMonitor|Smcinst|SmcService|SMTPSvc|SNAC|SntpService|Sophos|SQ1SafeOLRService|SQL\ Backups|SQL\ Server|SQLAgent|SQLBrowser|SQLsafe|SQLSERVERAGENT|SQLTELEMETRY|SQLWriter|SSISTELEMETRY130|SstpSvc|svcGenericHost|swc_service|swi_filter|swi_service|swi_update|Symantec|Telemetryserver|ThreatLockerService|TMBMServer|TmCCSF|TmFilter|TMiCRCScanService|tmlisten|TMLWCSService|TmPfw|TmPreFilter|TmProxy|TMSmartRelayService|tmusa|Trend\ Micro\ Deep\ Security\ Manager|TrueKey|UI0Detect|UTODetect|Veeam|VeeamDeploySvc|Veritas\ System\ Recovery|VSApiNt|VSS|W3Svc|wbengine|WdNisSvc|WeanClOudSve|Weems\ JY|WinDefend|wozyprobackup|WRSVC|Zoolz\ 2\ Service</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)net\.exe|net1\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+net\.exe|\\+net1\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:Stop\-Service\ |Remove\-Service\ )</field>
    </rule>
    <rule id="901289" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_jsc.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the execution of the LOLBIN jsc.exe used by .NET to compile javascript code to .exe or .dll format-->
        <!--Date: 2022/05/02-->
        <!--Status: test-->
        <!--ID: 52788a70-f1da-40dd-8fbd-73b5865d6568-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1127</id>
        </mitre>
        <description>JSC Convert Javascript To Executable</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+jsc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.js</field>
    </rule>
    <rule id="901290" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_winpeas.yml</info>
        <!--Sigma Rule Author: Georg Lauenstein (sure[secure])-->
        <!--Description: WinPEAS is a script that search for possible paths to escalate privileges on Windows hosts. The checks are explained on book.hacktricks.xyz-->
        <!--Date: 2022/09/19-->
        <!--Status: experimental-->
        <!--ID: 98b53e78-ebaf-46f8-be06-421aafd176d9-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1082</id>
            <id>attack.t1087</id>
            <id>attack.t1046</id>
        </mitre>
        <description>HackTool - winPEAS Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)winPEAS\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+winPEASany_ofs\.exe|\\+winPEASany\.exe|\\+winPEASx64_ofs\.exe|\\+winPEASx64\.exe|\\+winPEASx86_ofs\.exe|\\+winPEASx86\.exe)$</field>
    </rule>
    <rule id="901291" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_winpeas.yml</info>
        <!--Sigma Rule Author: Georg Lauenstein (sure[secure])-->
        <!--Description: WinPEAS is a script that search for possible paths to escalate privileges on Windows hosts. The checks are explained on book.hacktricks.xyz-->
        <!--Date: 2022/09/19-->
        <!--Status: experimental-->
        <!--ID: 98b53e78-ebaf-46f8-be06-421aafd176d9-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1082</id>
            <id>attack.t1087</id>
            <id>attack.t1046</id>
        </mitre>
        <description>HackTool - winPEAS Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ applicationsinfo|\ browserinfo|\ eventsinfo|\ fileanalysis|\ filesinfo|\ processinfo|\ servicesinfo|\ windowscreds</field>
    </rule>
    <rule id="901292" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_winpeas.yml</info>
        <!--Sigma Rule Author: Georg Lauenstein (sure[secure])-->
        <!--Description: WinPEAS is a script that search for possible paths to escalate privileges on Windows hosts. The checks are explained on book.hacktricks.xyz-->
        <!--Date: 2022/09/19-->
        <!--Status: experimental-->
        <!--ID: 98b53e78-ebaf-46f8-be06-421aafd176d9-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1082</id>
            <id>attack.t1087</id>
            <id>attack.t1046</id>
        </mitre>
        <description>HackTool - winPEAS Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)https://github\.com/carlospolop/PEASS\-ng/releases/latest/download/</field>
    </rule>
    <rule id="901293" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_winpeas.yml</info>
        <!--Sigma Rule Author: Georg Lauenstein (sure[secure])-->
        <!--Description: WinPEAS is a script that search for possible paths to escalate privileges on Windows hosts. The checks are explained on book.hacktricks.xyz-->
        <!--Date: 2022/09/19-->
        <!--Status: experimental-->
        <!--ID: 98b53e78-ebaf-46f8-be06-421aafd176d9-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1082</id>
            <id>attack.t1087</id>
            <id>attack.t1046</id>
        </mitre>
        <description>HackTool - winPEAS Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)(?:\ \-linpeas)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-linpeas)$</field>
    </rule>
    <rule id="901294" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_format.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of format.com with a suspicious filesystem selection that could indicate a defense evasion activity in which format.com is used to load malicious DLL files or other programs-->
        <!--Date: 2022/01/04-->
        <!--Status: test-->
        <!--ID: 9fb6b26e-7f9e-4517-a48b-8cac4a1b6c60-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Format.com FileSystem LOLBIN</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+format\.com)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/fs:</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/fs:FAT</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/fs:exFAT</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/fs:NTFS</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/fs:UDF</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/fs:ReFS</field>
    </rule>
    <rule id="901295" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dirlister_execution.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect the usage of "DirLister.exe" a utility for quickly listing folder or drive contents. It was seen used by BlackCat ransomware to create a list of accessible directories and files.-->
        <!--Date: 2022/08/20-->
        <!--Status: test-->
        <!--ID: b4dc61f5-6cce-468e-a608-b48b469feaa2-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1083</id>
        </mitre>
        <description>DirLister Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)DirLister\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+dirlister\.exe)$</field>
    </rule>
    <rule id="901296" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_exec_from_trusted_locations.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of an Office application that points to a document that is located in a trusted location. Attackers often used this to avoid macro security and execute their malicious code.-->
        <!--Date: 2023/06/21-->
        <!--Status: experimental-->
        <!--ID: f99abdf0-6283-4e71-bd2b-b5c048a94743-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Potentially Suspicious Office Document Executed From Trusted Location</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+explorer\.exe|\\+dopus\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+EXCEL\.EXE|\\+POWERPNT\.EXE|\\+WINWORD\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Excel\.exe|POWERPNT\.EXE|WinWord\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+AppData\\+Roaming\\+Microsoft\\+Templates|\\+AppData\\+Roaming\\+Microsoft\\+Word\\+Startup\\+|\\+Microsoft\ Office\\+root\\+Templates\\+|\\+Microsoft\ Office\\+Templates\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.dotx)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.xltx)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.potx)$</field>
    </rule>
    <rule id="901297" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_taskmgr_localsystem.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the creation of taskmgr.exe process in context of LOCAL_SYSTEM-->
        <!--Date: 2018/03/18-->
        <!--Status: test-->
        <!--ID: 9fff585c-c33e-4a86-b3cd-39312079a65f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Taskmgr as LOCAL_SYSTEM</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)AUTHORI|AUTORI</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+taskmgr\.exe)$</field>
    </rule>
    <rule id="901298" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regsvr32_susp_exec_path_2.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of regsvr32 where the DLL is located in a highly suspicious locations-->
        <!--Date: 2023/05/26-->
        <!--Status: experimental-->
        <!--ID: 327ff235-94eb-4f06-b9de-aaee571324be-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.010</id>
        </mitre>
        <description>Regsvr32 Execution From Highly Suspicious Location</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+regsvr32\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)REGSVR32\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):\\+PerfLogs\\+|:\\+Temp\\+|\\+Windows\\+Registration\\+CRMLog|\\+Windows\\+System32\\+com\\+dmp\\+|\\+Windows\\+System32\\+FxsTmp\\+|\\+Windows\\+System32\\+Microsoft\\+Crypto\\+RSA\\+MachineKeys\\+|\\+Windows\\+System32\\+spool\\+drivers\\+color\\+|\\+Windows\\+System32\\+spool\\+PRINTERS\\+|\\+Windows\\+System32\\+spool\\+SERVERS\\+|\\+Windows\\+System32\\+Tasks_Migrated\\+|\\+Windows\\+System32\\+Tasks\\+Microsoft\\+Windows\\+SyncCenter\\+|\\+Windows\\+SysWOW64\\+com\\+dmp\\+|\\+Windows\\+SysWOW64\\+FxsTmp\\+|\\+Windows\\+SysWOW64\\+Tasks\\+Microsoft\\+Windows\\+PLA\\+System\\+|\\+Windows\\+SysWOW64\\+Tasks\\+Microsoft\\+Windows\\+SyncCenter\\+|\\+Windows\\+Tasks\\+|\\+Windows\\+Tracing\\+</field>
    </rule>
    <rule id="901299" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regsvr32_susp_exec_path_2.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of regsvr32 where the DLL is located in a highly suspicious locations-->
        <!--Date: 2023/05/26-->
        <!--Status: experimental-->
        <!--ID: 327ff235-94eb-4f06-b9de-aaee571324be-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.010</id>
        </mitre>
        <description>Regsvr32 Execution From Highly Suspicious Location</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+regsvr32\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)REGSVR32\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ "C:\\+|\ C:\\+|\ 'C:\\+|D:\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+ProgramData\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ C:\\+Windows\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ "C:\\+Windows\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ 'C:\\+Windows\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="901300" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_nimgrab.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the usage of nimgrab, a tool bundled with the Nim programming framework and used for downloading files.-->
        <!--Date: 2022/08/28-->
        <!--Status: experimental-->
        <!--ID: 74a12f18-505c-4114-8d0b-8448dd5485c6-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>PUA - Nimgrab Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+nimgrab\.exe)$</field>
    </rule>
    <rule id="901301" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_nimgrab.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the usage of nimgrab, a tool bundled with the Nim programming framework and used for downloading files.-->
        <!--Date: 2022/08/28-->
        <!--Status: experimental-->
        <!--ID: 74a12f18-505c-4114-8d0b-8448dd5485c6-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>PUA - Nimgrab Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)MD5=2DD44C3C29D667F5C0EF5F9D7C7FFB8B|SHA256=F266609E91985F0FE3E31C5E8FAEEEC4FFA5E0322D8B6F15FE69F4C5165B9559|IMPHASH=C07FDDD21D123EA9B3A08EEF44AAAC45</field>
    </rule>
    <rule id="901302" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_nimgrab.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the usage of nimgrab, a tool bundled with the Nim programming framework and used for downloading files.-->
        <!--Date: 2022/08/28-->
        <!--Status: experimental-->
        <!--ID: 74a12f18-505c-4114-8d0b-8448dd5485c6-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>PUA - Nimgrab Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)2DD44C3C29D667F5C0EF5F9D7C7FFB8B</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)F266609E91985F0FE3E31C5E8FAEEEC4FFA5E0322D8B6F15FE69F4C5165B9559</field>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)C07FDDD21D123EA9B3A08EEF44AAAC45</field>
    </rule>
    <rule id="901303" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_script_exec_from_temp.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Max Altgelt (Nextron Systems), Tim Shelton-->
        <!--Description: Detects a suspicious script executions from temporary folder-->
        <!--Date: 2021/07/14-->
        <!--Status: test-->
        <!--ID: a6a39bdb-935c-4f0a-ab77-35f4bbf44d33-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Suspicious Script Execution From Temp Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe|\\+mshta\.exe|\\+wscript\.exe|\\+cscript\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Windows\\+Temp|\\+Temporary\ Internet|\\+AppData\\+Local\\+Temp|\\+AppData\\+Roaming\\+Temp|%TEMP%|%TMP%|%LocalAppData%\\+Temp</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ &gt;</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Out\-File</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)ConvertTo\-Json</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\-WindowStyle\ hidden\ \-Verb\ runAs</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+Windows\\+system32\\+config\\+systemprofile\\+AppData\\+Local\\+Temp\\+Amazon\\+EC2\-Windows\\+</field>
    </rule>
    <rule id="901304" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_ntfs_reparse_point.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36)-->
        <!--Date: 2021/08/30-->
        <!--Status: test-->
        <!--ID: 39ed3c80-e6a1-431b-9df3-911ac53d08a7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using NTFS Reparse Point - Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)^(?:"C:\\+Windows\\+system32\\+wusa\.exe"\ \ /quiet\ C:\\+Users\\+)</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Temp\\+update\.msu)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
    </rule>
    <rule id="901305" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_ntfs_reparse_point.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36)-->
        <!--Date: 2021/08/30-->
        <!--Status: test-->
        <!--ID: 39ed3c80-e6a1-431b-9df3-911ac53d08a7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using NTFS Reparse Point - Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)"C:\\+Windows\\+system32\\+dism\.exe"\ /online\ /quiet\ /norestart\ /add\-package\ /packagepath:"C:\\+Windows\\+system32\\+pe386"\ /ignorecheck</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+dismhost\.exe\ \{</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+DismHost\.exe)$</field>
    </rule>
    <rule id="901306" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_fltmc_unload_driver.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali-->
        <!--Description: Detect filter driver unloading activity via fltmc.exe-->
        <!--Date: 2023/02/13-->
        <!--Status: test-->
        <!--ID: 4931188c-178e-4ee7-a348-39e8a7a56821-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.t1562</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>Filter Driver Unloaded Via Fltmc.EXE</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+fltMC\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)fltMC\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)unload</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:unload\ rtp_filesystem_filter)$</field>
    </rule>
    <rule id="901307" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_invoke_obfuscation_via_var.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via VAR++ LAUNCHER-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: e9f55347-2928-4c06-88e5-1a7f8169942e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\&amp;\&amp;set</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/c</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-f</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\{0\}|\{1\}|\{2\}|\{3\}|\{4\}|\{5\}</field>
    </rule>
    <rule id="901308" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_malicious_cmdlets.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects Commandlet names from well-known PowerShell exploitation frameworks-->
        <!--Date: 2023/01/02-->
        <!--Status: experimental-->
        <!--ID: 02030f2f-6199-49ec-b258-ea71b07e03dc-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.discovery</id>
            <id>attack.t1482</id>
            <id>attack.t1087</id>
            <id>attack.t1087.001</id>
            <id>attack.t1087.002</id>
            <id>attack.t1069.001</id>
            <id>attack.t1069.002</id>
            <id>attack.t1069</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious PowerShell Commandlets - ProcessCreation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Add\-Exfiltration|Add\-Persistence|Add\-RegBackdoor|Add\-RemoteRegBackdoor|Add\-ScrnSaveBackdoor|Check\-VM|ConvertTo\-Rc4ByteStream|Decrypt\-Hash|Disable\-ADIDNSNode|Disable\-MachineAccount|Do\-Exfiltration|Enable\-ADIDNSNode|Enable\-MachineAccount|Enabled\-DuplicateToken|Exploit\-Jboss|Export\-ADR|Export\-ADRCSV|Export\-ADRExcel|Export\-ADRHTML|Export\-ADRJSON|Export\-ADRXML|Find\-Fruit|Find\-GPOLocation|Find\-TrustedDocuments|Get\-ADIDNS|Get\-ApplicationHost|Get\-ChromeDump|Get\-ClipboardContents|Get\-FoxDump|Get\-GPPPassword|Get\-IndexedItem|Get\-KerberosAESKey|Get\-Keystrokes|Get\-LSASecret|Get\-MachineAccountAttribute|Get\-MachineAccountCreator|Get\-PassHashes|Get\-RegAlwaysInstallElevated|Get\-RegAutoLogon|Get\-RemoteBootKey|Get\-RemoteCachedCredential|Get\-RemoteLocalAccountHash|Get\-RemoteLSAKey|Get\-RemoteMachineAccountHash|Get\-RemoteNLKMKey|Get\-RickAstley|Get\-Screenshot|Get\-SecurityPackages|Get\-ServiceFilePermission|Get\-ServicePermission|Get\-ServiceUnquoted|Get\-SiteListPassword|Get\-System|Get\-TimedScreenshot|Get\-UnattendedInstallFile|Get\-Unconstrained|Get\-USBKeystrokes|Get\-VaultCredential|Get\-VulnAutoRun|Get\-VulnSchTask|Grant\-ADIDNSPermission|Gupt\-Backdoor|HTTP\-Login|Install\-ServiceBinary|Install\-SSP|Invoke\-ACLScanner|Invoke\-ADRecon|Invoke\-ADSBackdoor|Invoke\-AgentSmith|Invoke\-AllChecks|Invoke\-ARPScan|Invoke\-AzureHound|Invoke\-BackdoorLNK|Invoke\-BadPotato|Invoke\-BetterSafetyKatz|Invoke\-BypassUAC|Invoke\-Carbuncle|Invoke\-Certify|Invoke\-ConPtyShell|Invoke\-CredentialInjection|Invoke\-DAFT|Invoke\-DCSync|Invoke\-DinvokeKatz|Invoke\-DllInjection|Invoke\-DNSUpdate|Invoke\-DomainPasswordSpray|Invoke\-DowngradeAccount|Invoke\-EgressCheck|Invoke\-Eyewitness|Invoke\-FakeLogonScreen|Invoke\-Farmer|Invoke\-Get\-RBCD\-Threaded|Invoke\-Gopher|Invoke\-Grouper|Invoke\-HandleKatz|Invoke\-ImpersonatedProcess|Invoke\-ImpersonateSystem|Invoke\-InteractiveSystemPowerShell|Invoke\-Internalmonologue|Invoke\-Inveigh|Invoke\-InveighRelay|Invoke\-KrbRelay|Invoke\-LdapSignCheck|Invoke\-Lockless|Invoke\-MalSCCM|Invoke\-Mimikatz|Invoke\-Mimikittenz|Invoke\-MITM6|Invoke\-NanoDump|Invoke\-NetRipper|Invoke\-Nightmare|Invoke\-NinjaCopy|Invoke\-OfficeScrape|Invoke\-OxidResolver|Invoke\-P0wnedshell|Invoke\-Paranoia|Invoke\-PortScan|Invoke\-PoshRatHttp|Invoke\-PostExfil|Invoke\-PowerDump|Invoke\-PowerShellTCP|Invoke\-PowerShellWMI|Invoke\-PPLDump|Invoke\-PsExec|Invoke\-PSInject|Invoke\-PsUaCme|Invoke\-ReflectivePEInjection|Invoke\-ReverseDNSLookup|Invoke\-Rubeus|Invoke\-RunAs|Invoke\-SafetyKatz|Invoke\-SauronEye|Invoke\-SCShell|Invoke\-Seatbelt|Invoke\-ServiceAbuse|Invoke\-ShadowSpray|Invoke\-Sharp|Invoke\-Shellcode|Invoke\-SMBScanner|Invoke\-Snaffler|Invoke\-Spoolsample|Invoke\-SpraySinglePassword|Invoke\-SSHCommand|Invoke\-StandIn|Invoke\-StickyNotesExtract|Invoke\-SystemCommand|Invoke\-Tasksbackdoor|Invoke\-Tater|Invoke\-Thunderfox|Invoke\-ThunderStruck|Invoke\-TokenManipulation|Invoke\-Tokenvator|Invoke\-TotalExec|Invoke\-UrbanBishop|Invoke\-UserHunter|Invoke\-VoiceTroll|Invoke\-Whisker|Invoke\-WinEnum|Invoke\-winPEAS|Invoke\-WireTap|Invoke\-WmiCommand|Invoke\-WMIExec|Invoke\-WScriptBypassUAC|Invoke\-Zerologon|MailRaider|New\-ADIDNSNode|New\-DNSRecordArray|New\-HoneyHash|New\-InMemoryModule|New\-MachineAccount|New\-SOASerialNumberArray|Out\-Minidump|Port\-Scan|PowerBreach|powercat\ |PowerUp|PowerView|Remove\-ADIDNSNode|Remove\-MachineAccount|Remove\-Update|Rename\-ADIDNSNode|Revoke\-ADIDNSPermission|Set\-ADIDNSNode|Set\-MacAttribute|Set\-MachineAccountAttribute|Set\-Wallpaper|Show\-TargetScreen|Start\-CaptureServer|Start\-WebcamRecorder|VolumeShadowCopyTools</field>
    </rule>
    <rule id="901309" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmic_eventconsumer_creation.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects WMIC executions in which an event consumer gets created. This could be used to establish persistence-->
        <!--Date: 2021/06/25-->
        <!--Status: test-->
        <!--ID: ebef4391-1a81-4761-a40a-1db446c0e625-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.003</id>
        </mitre>
        <description>New ActiveScriptEventConsumer Created Via Wmic.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ActiveScriptEventConsumer</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ CREATE\ )</field>
    </rule>
    <rule id="901310" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sc_new_kernel_driver.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects creation of a new service (kernel driver) with the type "kernel"-->
        <!--Date: 2022/07/14-->
        <!--Status: test-->
        <!--ID: 431a1fdb-4799-4f3b-91c3-a683b003fc49-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>New Kernel Driver Via SC.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+sc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)create|config</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)binPath</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)type</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)kernel</field>
    </rule>
    <rule id="901311" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_msbuild_susp_parent_process.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects suspicious execution of 'Msbuild.exe' by a uncommon parent process-->
        <!--Date: 2022/11/17-->
        <!--Status: test-->
        <!--ID: 33be4333-2c6b-44f4-ae28-102cdbde0a31-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious Msbuild Execution By Uncommon Parent Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+MSBuild\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)MSBuild\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+devenv\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+msbuild\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+python\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+explorer\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+nuget\.exe)$</field>
    </rule>
    <rule id="901312" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysinternals_procdump_evasion.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects uses of the SysInternals ProcDump utility in which ProcDump or its output get renamed, or a dump file is moved or copied to a different name-->
        <!--Date: 2022/01/11-->
        <!--Status: test-->
        <!--ID: 79b06761-465f-4f88-9ef2-150e24d3d737-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Potential SysInternals ProcDump Evasion</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)copy\ procdump|move\ procdump</field>
    </rule>
    <rule id="901313" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysinternals_procdump_evasion.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects uses of the SysInternals ProcDump utility in which ProcDump or its output get renamed, or a dump file is moved or copied to a different name-->
        <!--Date: 2022/01/11-->
        <!--Status: test-->
        <!--ID: 79b06761-465f-4f88-9ef2-150e24d3d737-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Potential SysInternals ProcDump Evasion</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:copy\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.dmp\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)2\.dmp|lsass|out\.dmp</field>
    </rule>
    <rule id="901314" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysinternals_procdump_evasion.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects uses of the SysInternals ProcDump utility in which ProcDump or its output get renamed, or a dump file is moved or copied to a different name-->
        <!--Date: 2022/01/11-->
        <!--Status: test-->
        <!--ID: 79b06761-465f-4f88-9ef2-150e24d3d737-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Potential SysInternals ProcDump Evasion</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)copy\ lsass\.exe_|move\ lsass\.exe_</field>
    </rule>
    <rule id="901315" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_csvde_export.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of "csvde.exe" in order to export organizational Active Directory structure.-->
        <!--Date: 2023/03/14-->
        <!--Status: experimental-->
        <!--ID: e5d36acd-acb4-4c6f-a13f-9eb203d50099-->
        <mitre>
            <id>attack.exfiltration</id>
        </mitre>
        <description>Active Directory Structure Export Via Csvde.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+csvde\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)csvde\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-f</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ \-i</field>
    </rule>
    <rule id="901316" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_device_credential_deployment.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of DeviceCredentialDeployment to hide a process from view-->
        <!--Date: 2022/08/19-->
        <!--Status: test-->
        <!--ID: b8b1b304-a60f-4999-9a6e-c547bde03ffd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>DeviceCredentialDeployment Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+DeviceCredentialDeployment\.exe)$</field>
    </rule>
    <rule id="901317" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_krbrelayup.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects KrbRelayUp used to perform a universal no-fix local privilege escalation in Windows domain environments where LDAP signing is not enforced-->
        <!--Date: 2022/04/26-->
        <!--Status: test-->
        <!--ID: 12827a56-61a4-476a-a9cb-f3068f191073-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558.003</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1550.003</id>
        </mitre>
        <description>HackTool - KrbRelayUp Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+KrbRelayUp\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)KrbRelayUp\.exe</field>
    </rule>
    <rule id="901318" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_krbrelayup.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects KrbRelayUp used to perform a universal no-fix local privilege escalation in Windows domain environments where LDAP signing is not enforced-->
        <!--Date: 2022/04/26-->
        <!--Status: test-->
        <!--ID: 12827a56-61a4-476a-a9cb-f3068f191073-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558.003</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1550.003</id>
        </mitre>
        <description>HackTool - KrbRelayUp Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ relay\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-Domain\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-ComputerName\ )</field>
    </rule>
    <rule id="901319" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_krbrelayup.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects KrbRelayUp used to perform a universal no-fix local privilege escalation in Windows domain environments where LDAP signing is not enforced-->
        <!--Date: 2022/04/26-->
        <!--Status: test-->
        <!--ID: 12827a56-61a4-476a-a9cb-f3068f191073-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558.003</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1550.003</id>
        </mitre>
        <description>HackTool - KrbRelayUp Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ krbscm\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-sc\ )</field>
    </rule>
    <rule id="901320" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_krbrelayup.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects KrbRelayUp used to perform a universal no-fix local privilege escalation in Windows domain environments where LDAP signing is not enforced-->
        <!--Date: 2022/04/26-->
        <!--Status: test-->
        <!--ID: 12827a56-61a4-476a-a9cb-f3068f191073-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558.003</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1550.003</id>
        </mitre>
        <description>HackTool - KrbRelayUp Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ spawn\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-d\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-cn\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-cp\ )</field>
    </rule>
    <rule id="901321" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_whoami_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of whoami, which is often used by attackers after exploitation / privilege escalation-->
        <!--Date: 2018/08/13-->
        <!--Status: test-->
        <!--ID: e28a5a99-da44-436d-b7a0-2afc20a5f413-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>car.2016-03-001</id>
        </mitre>
        <description>Whoami Utility Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+whoami\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)whoami\.exe</field>
    </rule>
    <rule id="901322" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_frombase64string_archive.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects attempts of decoding a base64 Gzip archive via PowerShell. This technique is often used as a method to load malicious content into memory afterward.-->
        <!--Date: 2022/12/23-->
        <!--Status: test-->
        <!--ID: d75d6b6b-adb9-48f7-824b-ac2e786efe1f-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1132.001</id>
        </mitre>
        <description>Suspicious FromBase64String Usage On Gzip Archive - Process Creation</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)FromBase64String</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)MemoryStream</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)H4sI</field>
    </rule>
    <rule id="901323" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysinternals_pssuspend_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of Sysinternals PsSuspend which can be abused to suspend critical processes-->
        <!--Date: 2023/03/23-->
        <!--Status: experimental-->
        <!--ID: 48bbc537-b652-4b4e-bd1d-281172df448f-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.persistence</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Sysinternals PsSuspend Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)pssuspend\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+pssuspend\.exe|\\+pssuspend64\.exe)$</field>
    </rule>
    <rule id="901324" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ntds.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious process patterns used in NTDS.DIT exfiltration-->
        <!--Date: 2022/03/11-->
        <!--Status: test-->
        <!--ID: 8bc64091-6875-4881-aaf9-7bd25b5dda08-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Suspicious Process Patterns NTDS.DIT Exfil</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+NTDSDump\.exe|\\+NTDSDumpEx\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ntds\.dit</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)system\.hiv</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)NTDSgrab\.ps1</field>
    </rule>
    <rule id="901325" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ntds.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious process patterns used in NTDS.DIT exfiltration-->
        <!--Date: 2022/03/11-->
        <!--Status: test-->
        <!--ID: 8bc64091-6875-4881-aaf9-7bd25b5dda08-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Suspicious Process Patterns NTDS.DIT Exfil</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ac\ i\ ntds</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)create\ full</field>
    </rule>
    <rule id="901326" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ntds.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious process patterns used in NTDS.DIT exfiltration-->
        <!--Date: 2022/03/11-->
        <!--Status: test-->
        <!--ID: 8bc64091-6875-4881-aaf9-7bd25b5dda08-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Suspicious Process Patterns NTDS.DIT Exfil</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/c\ copy\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+windows\\+ntds\\+ntds\.dit</field>
    </rule>
    <rule id="901327" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ntds.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious process patterns used in NTDS.DIT exfiltration-->
        <!--Date: 2022/03/11-->
        <!--Status: test-->
        <!--ID: 8bc64091-6875-4881-aaf9-7bd25b5dda08-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Suspicious Process Patterns NTDS.DIT Exfil</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)activate\ instance\ ntds</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)create\ full</field>
    </rule>
    <rule id="901328" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ntds.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious process patterns used in NTDS.DIT exfiltration-->
        <!--Date: 2022/03/11-->
        <!--Status: test-->
        <!--ID: 8bc64091-6875-4881-aaf9-7bd25b5dda08-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Suspicious Process Patterns NTDS.DIT Exfil</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ntds\.dit</field>
    </rule>
    <rule id="901329" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_ldifde_export.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of "ldifde.exe" in order to export organizational Active Directory structure.-->
        <!--Date: 2023/03/14-->
        <!--Status: experimental-->
        <!--ID: 4f7a6757-ff79-46db-9687-66501a02d9ec-->
        <mitre>
            <id>attack.exfiltration</id>
        </mitre>
        <description>Active Directory Structure Export Via Ldifde.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ldifde\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)ldifde\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-f</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ \-i</field>
    </rule>
    <rule id="901330" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmic_uninstall_security_products.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects uninstallation or termination of security products using the WMIC utility-->
        <!--Date: 2021/01/30-->
        <!--Status: test-->
        <!--ID: 847d5ff3-8a31-4737-a970-aeae8fe21765-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Potential Tampering With Security Products Via WMIC</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)wmic</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:product\ where\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)call</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)uninstall</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/nointeractive</field>
    </rule>
    <rule id="901331" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmic_uninstall_security_products.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects uninstallation or termination of security products using the WMIC utility-->
        <!--Date: 2021/01/30-->
        <!--Status: test-->
        <!--ID: 847d5ff3-8a31-4737-a970-aeae8fe21765-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Potential Tampering With Security Products Via WMIC</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)wmic</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:caption\ like\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)call\ delete|call\ terminate</field>
    </rule>
    <rule id="901332" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmic_uninstall_security_products.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects uninstallation or termination of security products using the WMIC utility-->
        <!--Date: 2021/01/30-->
        <!--Status: test-->
        <!--ID: 847d5ff3-8a31-4737-a970-aeae8fe21765-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Potential Tampering With Security Products Via WMIC</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:process\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:where\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)delete</field>
    </rule>
    <rule id="901333" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmic_uninstall_security_products.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects uninstallation or termination of security products using the WMIC utility-->
        <!--Date: 2021/01/30-->
        <!--Status: test-->
        <!--ID: 847d5ff3-8a31-4737-a970-aeae8fe21765-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Potential Tampering With Security Products Via WMIC</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)%carbon%|%cylance%|%endpoint%|%eset%|%malware%|%Sophos%|%symantec%|Antivirus|AVG\ |Carbon\ Black|CarbonBlack|Cb\ Defense\ Sensor\ 64\-bit|Crowdstrike\ Sensor|Cylance\ |Dell\ Threat\ Defense|DLP\ Endpoint|Endpoint\ Detection|Endpoint\ Protection|Endpoint\ Security|Endpoint\ Sensor|ESET\ File\ Security|LogRhythm\ System\ Monitor\ Service|Malwarebytes|McAfee\ Agent|Microsoft\ Security\ Client|Sophos\ Anti\-Virus|Sophos\ AutoUpdate|Sophos\ Credential\ Store|Sophos\ Management\ Console|Sophos\ Management\ Database|Sophos\ Management\ Server|Sophos\ Remote\ Management\ System|Sophos\ Update\ Manager|Threat\ Protection|VirusScan|Webroot\ SecureAnywhere|Windows\ Defender</field>
    </rule>
    <rule id="901334" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_outlook_execution_from_temp.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a suspicious program execution in Outlook temp folder-->
        <!--Date: 2019/10/01-->
        <!--Status: test-->
        <!--ID: a018fdc3-46a3-44e5-9afb-2cd4af1d4b39-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1566.001</id>
        </mitre>
        <description>Execution in Outlook Temp Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+Temporary\ Internet\ Files\\+Content\.Outlook\\+</field>
    </rule>
    <rule id="901335" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_wsreset.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community, Florian Roth-->
        <!--Description: Detects use of WSReset.exe to bypass User Account Control (UAC). Adversaries use this technique to execute privileged processes.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: d797268e-28a9-49a7-b9a8-2f5039011c5c-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Bypass UAC via WSReset.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+wsreset\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+conhost\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="yes" type="pcre2">(?i)CONHOST\.EXE</field>
    </rule>
    <rule id="901336" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_susp_activity.yml</info>
        <!--Sigma Rule Author: juju4, Jonhnathan Ribeiro, oscd.community, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious execution of rundll32, with specific calls to some DLLs with known LOLBIN functionalities-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: e593cf51-88db-4ee1-b920-37e89012a3c9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Potentially Suspicious Rundll32 Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)javascript:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.RegisterXLL</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)url\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)OpenURL</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)url\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)OpenURLA</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)url\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)FileProtocolHandler</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)zipfldr\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)RouteTheCall</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Control_RunDLL</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shell32\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ShellExec_RunDLL</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)mshtml\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)PrintHTML</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)advpack\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)LaunchINFSection</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)advpack\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)RegisterOCX</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ieadvpack\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)LaunchINFSection</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ieadvpack\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)RegisterOCX</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ieframe\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)OpenURL</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shdocvw\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)OpenURL</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)syssetup\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SetupInfObjectInstallAction</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)setupapi\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)InstallHinfSection</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)pcwutl\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)LaunchApplication</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)dfshim\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ShOpenVerbApplication</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)dfshim\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ShOpenVerbShortcut</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)scrobj\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)GenerateTypeLib</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)shimgvw\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ImageView_Fullscreen</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)comsvcs\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)MiniDump</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)shell32\.dll,Control_RunDLL\ desk\.cpl,screensaver,@screensaver</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+control\.exe</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\.cpl</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Shell32\.dll</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Control_RunDLL</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.cpl</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+control\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)^(?:"C:\\+Windows\\+system32\\+rundll32\.exe"\ Shell32\.dll,Control_RunDLL\ "C:\\+Windows\\+System32\\+)</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\.cpl",)$</field>
    </rule>
    <rule id="901337" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_plink_port_forwarding.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious Plink tunnel port forwarding to a local port-->
        <!--Date: 2021/01/19-->
        <!--Status: test-->
        <!--ID: 48a61b29-389f-4032-b317-b30de6b95314-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1572</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.001</id>
        </mitre>
        <description>Suspicious Plink Port Forwarding</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Command\-line\ SSH,\ Telnet,\ and\ Rlogin\ client</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-R\ )</field>
    </rule>
    <rule id="901338" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_msiexec_install_quiet.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse msiexec.exe to proxy execution of malicious payloads.
Msiexec.exe is the command-line utility for the Windows Installer and is thus commonly associated with executing installation packages (.msi)
-->
        <!--Date: 2022/01/16-->
        <!--Status: experimental-->
        <!--ID: 79a87aa6-e4bd-42fc-a5bb-5e6fbdcd62f5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.007</id>
        </mitre>
        <description>Msiexec Quiet Installation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+msiexec\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)msiexec\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/i|\-i|/package|\-package|/a|\-a|/j|\-j</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/q|\-q</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Users\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+Temp\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+CCM\\+Ccm32BitLauncher\.exe</field>
        <field name="win.eventdata.integrityLevel" negate="yes" type="pcre2">(?i)System</field>
    </rule>
    <rule id="901339" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_system_user_anomaly.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), David ANDRE (additional keywords)-->
        <!--Description: Detects a suspicious process creation as SYSTEM user (suspicious program or command line parameter)-->
        <!--Date: 2021/12/20-->
        <!--Status: test-->
        <!--ID: 2617e7ed-adb7-40ba-b0f3-8f9945fe6c09-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1134</id>
            <id>attack.t1003</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Suspicious SYSTEM User Process Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)System</field>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)AUTHORI|AUTORI</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+calc\.exe|\\+wscript\.exe|\\+cscript\.exe|\\+hh\.exe|\\+mshta\.exe|\\+forfiles\.exe|\\+ping\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-NoP\ |\ \-W\ Hidden\ |\ \-decode\ |\ /decode\ |\ /urlcache\ |\ \-urlcache\ |\ \-e.+\ JAB|\ \-e.+\ SUVYI|\ \-e.+\ SQBFAFgA|\ \-e.+\ aWV4I|\ \-e.+\ IAB|\ \-e.+\ PAA|\ \-e.+\ aQBlAHgA|vssadmin\ delete\ shadows|reg\ SAVE\ HKLM|\ \-ma\ |Microsoft\\+Windows\\+CurrentVersion\\+Run|\.downloadstring\(|\.downloadfile\(|\ /ticket:|dpapi::|event::clear|event::drop|id::modify|kerberos::|lsadump::|misc::|privilege::|rpc::|sekurlsa::|sid::|token::|vault::cred|vault::list|\ p::d\ |;iex\(|MiniDump|net\ user\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)ping\ 127\.0\.0\.1\ \-n\ 5</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+PING\.EXE)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\\+DismFoDInstall\.cmd</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\+Packages\\+Plugins\\+Microsoft\.GuestConfiguration\.ConfigurationforWindows\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+Java\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Java\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+bin\\+javaws\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+Java\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Java\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+bin\\+jp2launcher\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ \-ma\ )</field>
    </rule>
    <rule id="901340" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_schtasks_schedule_via_masqueraded_xml_file.yml</info>
        <!--Sigma Rule Author: Swachchhanda Shrawan Poudel, Elastic (idea)-->
        <!--Description: Detects the creation of a scheduled task using the "-XML" flag with a file without the '.xml' extension. This behavior could be indicative of potential defense evasion attempt during persistence-->
        <!--Date: 2023/04/20-->
        <!--Status: experimental-->
        <!--ID: dd2a821e-3b07-4d3b-a9ac-929fe4c6ca0c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1036.005</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Suspicious Scheduled Task Creation via Masqueraded XML File</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+schtasks\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)schtasks\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/create|\-create</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/xml|\-xml</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.xml</field>
        <field name="win.eventdata.integrityLevel" negate="yes" type="pcre2">(?i)System</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i):\\+WINDOWS\\+Installer\\+MSI</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\.tmp,zzzzInvokeManagedCustomActionOutOfProc</field>
    </rule>
    <rule id="901341" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_schtasks_schedule_via_masqueraded_xml_file.yml</info>
        <!--Sigma Rule Author: Swachchhanda Shrawan Poudel, Elastic (idea)-->
        <!--Description: Detects the creation of a scheduled task using the "-XML" flag with a file without the '.xml' extension. This behavior could be indicative of potential defense evasion attempt during persistence-->
        <!--Date: 2023/04/20-->
        <!--Status: experimental-->
        <!--ID: dd2a821e-3b07-4d3b-a9ac-929fe4c6ca0c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1036.005</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Suspicious Scheduled Task Creation via Masqueraded XML File</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+schtasks\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)schtasks\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/create|\-create</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/xml|\-xml</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?::\\+ProgramData\\+OEM\\+UpgradeTool\\+CareCenter_.+\\+BUnzip\\+Setup_msi\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+Axis\ Communications\\+AXIS\ Camera\ Station\\+SetupActions\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+Axis\ Communications\\+AXIS\ Device\ Manager\\+AdmSetupActions\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\ \(x86\)\\+Zemana\\+AntiMalware\\+AntiMalware\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+Dell\\+SupportAssist\\+pcdrcui\.exe)$</field>
    </rule>
    <rule id="901342" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wab_unusual_parents.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity-->
        <!--Date: 2022/08/12-->
        <!--Status: test-->
        <!--ID: 63d1ccc0-2a43-4f4b-9289-361b308991ff-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
        </mitre>
        <description>Wab/Wabmig Unusual Parent Or Child Processes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+WmiPrvSE\.exe|\\+svchost\.exe|\\+dllhost\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wab\.exe|\\+wabmig\.exe)$</field>
    </rule>
    <rule id="901343" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wab_unusual_parents.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects unusual parent or children of the wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) processes as seen being used with bumblebee activity-->
        <!--Date: 2022/08/12-->
        <!--Status: test-->
        <!--ID: 63d1ccc0-2a43-4f4b-9289-361b308991ff-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
        </mitre>
        <description>Wab/Wabmig Unusual Parent Or Child Processes</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+wab\.exe|\\+wabmig\.exe)$</field>
    </rule>
    <rule id="901344" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_userinit_uncommon_child_processes.yml</info>
        <!--Sigma Rule Author: Tom Ueltschi (@c_APT_ure), Tim Shelton-->
        <!--Description: Detects uncommon "userinit.exe" child processes, which could be a sign of uncommon shells or login scripts used for persistence.-->
        <!--Date: 2019/01/12-->
        <!--Status: test-->
        <!--ID: 0a98a10c-685d-4ab0-bddc-b6bdd1d48458-->
        <mitre>
            <id>attack.t1037.001</id>
            <id>attack.persistence</id>
        </mitre>
        <description>Uncommon Userinit Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+userinit\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+WINDOWS\\+explorer\.exe)$</field>
    </rule>
    <rule id="901345" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_userinit_uncommon_child_processes.yml</info>
        <!--Sigma Rule Author: Tom Ueltschi (@c_APT_ure), Tim Shelton-->
        <!--Description: Detects uncommon "userinit.exe" child processes, which could be a sign of uncommon shells or login scripts used for persistence.-->
        <!--Date: 2019/01/12-->
        <!--Status: test-->
        <!--ID: 0a98a10c-685d-4ab0-bddc-b6bdd1d48458-->
        <mitre>
            <id>attack.t1037.001</id>
            <id>attack.persistence</id>
        </mitre>
        <description>Uncommon Userinit Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+userinit\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)netlogon\.bat</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)UsrLogon\.cmd</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)PowerShell\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+proquota\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+SysWOW64\\+proquota\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\ \(x86\)\\+Citrix\\+HDX\\+bin\\+cmstart\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\ \(x86\)\\+Citrix\\+HDX\\+bin\\+icast\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\ \(x86\)\\+Citrix\\+System32\\+icast\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+Citrix\\+HDX\\+bin\\+cmstart\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+Citrix\\+HDX\\+bin\\+icast\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+Citrix\\+System32\\+icast\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="901346" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_ntdsutil_usage.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects execution of ntdsutil.exe, which can be used for various attacks against the NTDS database (NTDS.DIT)-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 2afafd61-6aae-4df4-baed-139fa1f4c345-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Invocation of Active Directory Diagnostic Tool (ntdsutil.exe)</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ntdsutil\.exe)$</field>
    </rule>
    <rule id="901347" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_whoami.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of whoami that has been renamed to a different name to avoid detection-->
        <!--Date: 2021/08/12-->
        <!--Status: test-->
        <!--ID: f1086bf7-a0c4-4a37-9102-01e573caf4a0-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>car.2016-03-001</id>
        </mitre>
        <description>Renamed Whoami Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)whoami\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+whoami\.exe)$</field>
    </rule>
    <rule id="901348" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_werfault_lsass_shtinkering.yml</info>
        <!--Sigma Rule Author: @pbssubhash , Nasreddine Bencherchali-->
        <!--Description: Detects potential credential dumping via Windows Error Reporting LSASS Shtinkering technique which uses the Windows Error Reporting to dump lsass-->
        <!--Date: 2022/12/08-->
        <!--Status: test-->
        <!--ID: 9a4ccd1a-3526-4d99-b980-9f9c5d3a6ff3-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Potential Credential Dumping Via WER</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Werfault\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)WerFault\.exe</field>
        <field name="win.eventdata.parentUser" negate="no" type="pcre2">(?i)AUTHORI|AUTORI</field>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)AUTHORI|AUTORI</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-u\ \-p\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-ip\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-s\ )</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+lsass\.exe</field>
    </rule>
    <rule id="901349" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_bitsadmin_potential_persistence.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: BITS will allow you to schedule a command to execute after a successful download to notify you that the job is finished. When the job runs on the system the command specified in the BITS job will be executed. This can be abused by actors to create a backdoor within the system and for persistence. It will be chained in a BITS job to schedule the download of malware/additional binaries and execute the program after being downloaded-->
        <!--Date: 2020/10/29-->
        <!--Status: test-->
        <!--ID: b9cbbc17-d00d-4e3d-a827-b06d03d2380d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1197</id>
        </mitre>
        <description>Monitoring For Persistence Via BITS</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)bitsadmin</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/SetNotifyCmdLine</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)%COMSPEC%|cmd\.exe|regsvr32\.exe</field>
    </rule>
    <rule id="901350" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_bitsadmin_potential_persistence.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: BITS will allow you to schedule a command to execute after a successful download to notify you that the job is finished. When the job runs on the system the command specified in the BITS job will be executed. This can be abused by actors to create a backdoor within the system and for persistence. It will be chained in a BITS job to schedule the download of malware/additional binaries and execute the program after being downloaded-->
        <!--Date: 2020/10/29-->
        <!--Status: test-->
        <!--ID: b9cbbc17-d00d-4e3d-a827-b06d03d2380d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1197</id>
        </mitre>
        <description>Monitoring For Persistence Via BITS</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)bitsadmin</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/Addfile</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http:|https:|ftp:|ftps:</field>
    </rule>
    <rule id="901351" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_plink_susp_tunneling.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Execution of plink to perform data exfiltration and tunneling-->
        <!--Date: 2022/08/04-->
        <!--Status: test-->
        <!--ID: f38ce0b9-5e97-4b47-a211-7dc8d8b871da-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1572</id>
        </mitre>
        <description>Potential RDP Tunneling Via SSH Plink</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+plink\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):127\.0\.0\.1:3389</field>
    </rule>
    <rule id="901352" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_syncappvpublishingserver_vbs_execute_psh.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Executes arbitrary PowerShell code using SyncAppvPublishingServer.vbs-->
        <!--Date: 2021/07/16-->
        <!--Status: test-->
        <!--ID: 36475a7d-0f6d-4dce-9b01-6aeb473bbaf1-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1216</id>
        </mitre>
        <description>SyncAppvPublishingServer VBS Execute Arbitrary PowerShell Code</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+SyncAppvPublishingServer\.vbs</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i);</field>
    </rule>
    <rule id="901353" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_tttracer_mod_load.yml</info>
        <!--Sigma Rule Author: Ensar &#350;amil, @sblmsrsn, @oscd_initiative-->
        <!--Description: Detects usage of Time Travel Debugging Utility. Adversaries can execute malicious processes and dump processes, such as lsass.exe, via tttracer.exe.-->
        <!--Date: 2020/10/06-->
        <!--Status: test-->
        <!--ID: 0b4ae027-2a2d-4b93-8c7e-962caaba5b2a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.credential_access</id>
            <id>attack.t1218</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Time Travel Debugging Utility Usage</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+tttracer\.exe)$</field>
    </rule>
    <rule id="901354" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remote_access_tools_anydesk_piped_password_via_cli.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects piping the password to an anydesk instance via CMD and the ' - set-password' flag.-->
        <!--Date: 2022/09/28-->
        <!--Status: experimental-->
        <!--ID: b1377339-fda6-477a-b455-ac0923f9ec2c-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Remote Access Tool - AnyDesk Piped Password Via CLI</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/c\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:echo\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe\ \-\-set\-password</field>
    </rule>
    <rule id="901355" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_windows_defender_tamper.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Swachchhanda Shrawan Poudel, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the usage of "reg.exe" to tamper with different Windows Defender registry keys in order to disable some important features related to protection and detection-->
        <!--Date: 2022/03/22-->
        <!--Status: experimental-->
        <!--ID: 452bce90-6fb0-43cc-97a5-affc283139b3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Suspicious Windows Defender Registry Key Tampering Via Reg.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+reg\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)reg\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SOFTWARE\\+Microsoft\\+Windows\ Defender\\+|SOFTWARE\\+Policies\\+Microsoft\\+Windows\ Defender\ Security\ Center|SOFTWARE\\+Policies\\+Microsoft\\+Windows\ Defender\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ add\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)d\ 0</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)DisallowExploitProtectionOverride|EnableControlledFolderAccess|MpEnablePus|PUAProtection|SpynetReporting|SubmitSamplesConsent|TamperProtection</field>
    </rule>
    <rule id="901356" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_windows_defender_tamper.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Swachchhanda Shrawan Poudel, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the usage of "reg.exe" to tamper with different Windows Defender registry keys in order to disable some important features related to protection and detection-->
        <!--Date: 2022/03/22-->
        <!--Status: experimental-->
        <!--ID: 452bce90-6fb0-43cc-97a5-affc283139b3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Suspicious Windows Defender Registry Key Tampering Via Reg.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+reg\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)reg\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SOFTWARE\\+Microsoft\\+Windows\ Defender\\+|SOFTWARE\\+Policies\\+Microsoft\\+Windows\ Defender\ Security\ Center|SOFTWARE\\+Policies\\+Microsoft\\+Windows\ Defender\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ add\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)d\ 1</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)DisableAntiSpyware|DisableAntiSpywareRealtimeProtection|DisableAntiVirus|DisableArchiveScanning|DisableBehaviorMonitoring|DisableBlockAtFirstSeen|DisableConfig|DisableEnhancedNotifications|DisableIntrusionPreventionSystem|DisableIOAVProtection|DisableOnAccessProtection|DisablePrivacyMode|DisableRealtimeMonitoring|DisableRoutinelyTakingAction|DisableScanOnRealtimeEnable|DisableScriptScanning|Notification_Suppress|SignatureDisableUpdateOnStartupWithoutEngine</field>
    </rule>
    <rule id="901357" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_always_install_elevated_windows_installer.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Mangatas Tondang (rule), oscd.community-->
        <!--Description: Detects Windows Installer service (msiexec.exe) trying to install MSI packages with SYSTEM privilege-->
        <!--Date: 2020/10/13-->
        <!--Status: experimental-->
        <!--ID: cd951fdc-4b2f-47f5-ba99-a33bf61e3770-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Always Install Elevated Windows Installer</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+Windows\\+Installer\\+</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)msi</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:tmp)$</field>
    </rule>
    <rule id="901358" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_always_install_elevated_windows_installer.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Mangatas Tondang (rule), oscd.community-->
        <!--Description: Detects Windows Installer service (msiexec.exe) trying to install MSI packages with SYSTEM privilege-->
        <!--Date: 2020/10/13-->
        <!--Status: experimental-->
        <!--ID: cd951fdc-4b2f-47f5-ba99-a33bf61e3770-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Always Install Elevated Windows Installer</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+msiexec\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)System</field>
    </rule>
    <rule id="901359" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_always_install_elevated_windows_installer.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Mangatas Tondang (rule), oscd.community-->
        <!--Description: Detects Windows Installer service (msiexec.exe) trying to install MSI packages with SYSTEM privilege-->
        <!--Date: 2020/10/13-->
        <!--Status: experimental-->
        <!--ID: cd951fdc-4b2f-47f5-ba99-a33bf61e3770-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Always Install Elevated Windows Installer</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)AUTHORI|AUTORI</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+services\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\\+system32\\+msiexec\.exe\ /V)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)(?:\\+system32\\+msiexec\.exe\ /V)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+ProgramData\\+Sophos\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+ProgramData\\+Avira\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Avast\ Software\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Avast\ Software\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Google\\+Update\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Google\\+Update\\+)</field>
    </rule>
    <rule id="901360" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_decode_gzip.yml</info>
        <!--Sigma Rule Author: Hieu Tran-->
        <!--Description: Detects attempts of decoding encoded Gzip archives via PowerShell.-->
        <!--Date: 2023/03/13-->
        <!--Status: experimental-->
        <!--ID: 98767d61-b2e8-4d71-b661-e36783ee24c1-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1132.001</id>
        </mitre>
        <description>Gzip Archive Decode Via PowerShell</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)GZipStream</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)::Decompress</field>
    </rule>
    <rule id="901361" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_susp_driver_installed_by_pnputil.yml</info>
        <!--Sigma Rule Author: Hai Vaknin @LuxNoBulIshit, Avihay eldad  @aloneliassaf, Austin Songer @austinsonger-->
        <!--Description: Detects when a possible suspicious driver is being installed via pnputil.exe lolbin-->
        <!--Date: 2021/09/30-->
        <!--Status: test-->
        <!--ID: a2ea3ae7-d3d0-40a0-a55c-25a45c87cac1-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547</id>
        </mitre>
        <description>Suspicious Driver Install by pnputil.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-i|/install|\-a|/add\-driver|\.inf</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+pnputil\.exe)$</field>
    </rule>
    <rule id="901362" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_webbrowserpassview.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the execution of WebBrowserPassView.exe. A password recovery tool that reveals the passwords stored by the following Web browsers, Internet Explorer (Version 4.0 - 11.0), Mozilla Firefox (All Versions), Google Chrome, Safari, and Opera-->
        <!--Date: 2022/08/20-->
        <!--Status: experimental-->
        <!--ID: d0dae994-26c6-4d2d-83b5-b3c8b79ae513-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1555.003</id>
        </mitre>
        <description>PUA - WebBrowserPassView Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Web\ Browser\ Password\ Viewer</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+WebBrowserPassView\.exe)$</field>
    </rule>
    <rule id="901363" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_run_script_from_ads.yml</info>
        <!--Sigma Rule Author: Sergey Soldatov, Kaspersky Lab, oscd.community-->
        <!--Description: Detects PowerShell script execution from Alternate Data Stream (ADS)-->
        <!--Date: 2019/10/30-->
        <!--Status: test-->
        <!--ID: 45a594aa-1fbd-4972-a809-ff5a99dd81b8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Run PowerShell Script from ADS</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Get\-Content</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-Stream</field>
    </rule>
    <rule id="901364" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_diskshadow_script_mode_susp_ext.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of "Diskshadow.exe" in script mode to execute an script with a potentially uncommon extension.
Initial baselining of the allowed extension list is required.
-->
        <!--Date: 2023/09/15-->
        <!--Status: experimental-->
        <!--ID: 1dde5376-a648-492e-9e54-4241dd9b0c7f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Diskshadow Script Mode - Uncommon Script Extension Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)diskshadow\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+diskshadow\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/s\ |\-s\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.txt</field>
    </rule>
    <rule id="901365" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_chcp_codepage_lookup.yml</info>
        <!--Sigma Rule Author: _pete_0, TheDFIRReport-->
        <!--Description: Detects use of chcp to look up the system locale value as part of host discovery-->
        <!--Date: 2022/02/21-->
        <!--Status: experimental-->
        <!--ID: 7090adee-82e2-4269-bd59-80691e7c6338-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1614.001</id>
        </mitre>
        <description>Console CodePage Lookup Via CHCP</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)(?:\ /c\ |\ /r\ |\ /k\ )</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+chcp\.com)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:chcp|chcp\ |chcp\ \ )$</field>
    </rule>
    <rule id="901366" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_cmdline_reversed_strings.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton-->
        <!--Description: Detects the presence of reversed PowerShell commands in the CommandLine. This is often used as a method of obfuscation by attackers-->
        <!--Date: 2020/10/11-->
        <!--Status: test-->
        <!--ID: b6b49cd1-34d6-4ead-b1bf-176e9edba9a4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Potential PowerShell Obfuscation Via Reversed Commands</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)hctac|kaerb|dnammoc|ekovn|eliFd|rahc|etirw|golon|tninon|eddih|tpircS|ssecorp|llehsrewop|esnopser|daolnwod|tneilCbeW|tneilc|ptth|elifotevas|46esab|htaPpmeTteG|tcejbO|maerts|hcaerof|retupmoc</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ \-EncodedCommand\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ \-enc\ )</field>
    </rule>
    <rule id="901367" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_coercedpotato.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of CoercedPotato, a tool for privilege escalation-->
        <!--Date: 2023/10/11-->
        <!--Status: experimental-->
        <!--ID: e8d34729-86a4-4140-adfd-0a29c2106307-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
        </mitre>
        <description>HackTool - CoercedPotato Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+CoercedPotato\.exe)$</field>
    </rule>
    <rule id="901368" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_coercedpotato.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of CoercedPotato, a tool for privilege escalation-->
        <!--Date: 2023/10/11-->
        <!--Status: experimental-->
        <!--ID: e8d34729-86a4-4140-adfd-0a29c2106307-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
        </mitre>
        <description>HackTool - CoercedPotato Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-\-exploitId\ )</field>
    </rule>
    <rule id="901369" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_coercedpotato.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of CoercedPotato, a tool for privilege escalation-->
        <!--Date: 2023/10/11-->
        <!--Status: experimental-->
        <!--ID: e8d34729-86a4-4140-adfd-0a29c2106307-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
        </mitre>
        <description>HackTool - CoercedPotato Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)a75d7669db6b2e107a44c4057ff7f7d6|f91624350e2c678c5dcbe5e1f24e22c9|14c81850a079a87e83d50ca41c709a15</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=A75D7669DB6B2E107A44C4057FF7F7D6|IMPHASH=F91624350E2C678C5DCBE5E1F24E22C9|IMPHASH=14C81850A079A87E83D50CA41C709A15</field>
    </rule>
    <rule id="901370" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_defender_disable_feature.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects requests to disable Microsoft Defender features using PowerShell commands-->
        <!--Date: 2022/03/03-->
        <!--Status: test-->
        <!--ID: 1ec65a5f-9473-4f12-97da-622044d6df21-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Powershell Defender Disable Scan Feature</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:Add\-MpPreference\ |Set\-MpPreference\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:DisableRealtimeMonitoring\ |DisableIOAVProtection\ |DisableBehaviorMonitoring\ |DisableBlockAtFirstSeen\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\$true|\ 1\ )</field>
    </rule>
    <rule id="901371" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_defender_disable_feature.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects requests to disable Microsoft Defender features using PowerShell commands-->
        <!--Date: 2022/03/03-->
        <!--Status: test-->
        <!--ID: 1ec65a5f-9473-4f12-97da-622044d6df21-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Powershell Defender Disable Scan Feature</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?:DisableRealtimeMonitoring\ |DisableIOAVProtection\ |DisableBehaviorMonitoring\ |DisableBlockAtFirstSeen\ |disablerealtimemonitoring\ |disableioavprotection\ |disablebehaviormonitoring\ |disableblockatfirstseen\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)RABpAHMAYQBiAGwAZQBSAGUAYQBsAHQAaQBtAGUATQBvAG4AaQB0AG8AcgBpAG4AZwAgA|QAaQBzAGEAYgBsAGUAUgBlAGEAbAB0AGkAbQBlAE0AbwBuAGkAdABvAHIAaQBuAGcAIA|EAGkAcwBhAGIAbABlAFIAZQBhAGwAdABpAG0AZQBNAG8AbgBpAHQAbwByAGkAbgBnACAA|RABpAHMAYQBiAGwAZQBJAE8AQQBWAFAAcgBvAHQAZQBjAHQAaQBvAG4AIA|QAaQBzAGEAYgBsAGUASQBPAEEAVgBQAHIAbwB0AGUAYwB0AGkAbwBuACAA|EAGkAcwBhAGIAbABlAEkATwBBAFYAUAByAG8AdABlAGMAdABpAG8AbgAgA|RABpAHMAYQBiAGwAZQBCAGUAaABhAHYAaQBvAHIATQBvAG4AaQB0AG8AcgBpAG4AZwAgA|QAaQBzAGEAYgBsAGUAQgBlAGgAYQB2AGkAbwByAE0AbwBuAGkAdABvAHIAaQBuAGcAIA|EAGkAcwBhAGIAbABlAEIAZQBoAGEAdgBpAG8AcgBNAG8AbgBpAHQAbwByAGkAbgBnACAA|RABpAHMAYQBiAGwAZQBCAGwAbwBjAGsAQQB0AEYAaQByAHMAdABTAGUAZQBuACAA|QAaQBzAGEAYgBsAGUAQgBsAG8AYwBrAEEAdABGAGkAcgBzAHQAUwBlAGUAbgAgA|EAGkAcwBhAGIAbABlAEIAbABvAGMAawBBAHQARgBpAHIAcwB0AFMAZQBlAG4AIA|ZABpAHMAYQBiAGwAZQByAGUAYQBsAHQAaQBtAGUAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA|QAaQBzAGEAYgBsAGUAcgBlAGEAbAB0AGkAbQBlAG0AbwBuAGkAdABvAHIAaQBuAGcAIA|kAGkAcwBhAGIAbABlAHIAZQBhAGwAdABpAG0AZQBtAG8AbgBpAHQAbwByAGkAbgBnACAA|ZABpAHMAYQBiAGwAZQBpAG8AYQB2AHAAcgBvAHQAZQBjAHQAaQBvAG4AIA|QAaQBzAGEAYgBsAGUAaQBvAGEAdgBwAHIAbwB0AGUAYwB0AGkAbwBuACAA|kAGkAcwBhAGIAbABlAGkAbwBhAHYAcAByAG8AdABlAGMAdABpAG8AbgAgA|ZABpAHMAYQBiAGwAZQBiAGUAaABhAHYAaQBvAHIAbQBvAG4AaQB0AG8AcgBpAG4AZwAgA|QAaQBzAGEAYgBsAGUAYgBlAGgAYQB2AGkAbwByAG0AbwBuAGkAdABvAHIAaQBuAGcAIA|kAGkAcwBhAGIAbABlAGIAZQBoAGEAdgBpAG8AcgBtAG8AbgBpAHQAbwByAGkAbgBnACAA|ZABpAHMAYQBiAGwAZQBiAGwAbwBjAGsAYQB0AGYAaQByAHMAdABzAGUAZQBuACAA|QAaQBzAGEAYgBsAGUAYgBsAG8AYwBrAGEAdABmAGkAcgBzAHQAcwBlAGUAbgAgA|kAGkAcwBhAGIAbABlAGIAbABvAGMAawBhAHQAZgBpAHIAcwB0AHMAZQBlAG4AIA</field>
    </rule>
    <rule id="901372" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_base64_iex.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects usage of a base64 encoded "IEX" cmdlet in a process command line-->
        <!--Date: 2019/08/23-->
        <!--Status: test-->
        <!--ID: 88f680b8-070e-402c-ae11-d2914f2257f1-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>PowerShell Base64 Encoded IEX Cmdlet</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">IEX\ \(\[|iex\ \(\[|iex\ \(New|IEX\ \(New|IEX\(\[|iex\(\[|iex\(New|IEX\(New|IEX\(\('|iex\(\('</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SQBFAFgAIAAoAFsA|kARQBYACAAKABbA|JAEUAWAAgACgAWw|aQBlAHgAIAAoAFsA|kAZQB4ACAAKABbA|pAGUAeAAgACgAWw|aQBlAHgAIAAoAE4AZQB3A|kAZQB4ACAAKABOAGUAdw|pAGUAeAAgACgATgBlAHcA|SQBFAFgAIAAoAE4AZQB3A|kARQBYACAAKABOAGUAdw|JAEUAWAAgACgATgBlAHcA</field>
    </rule>
    <rule id="901373" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_jlaive_batch_execution.yml</info>
        <!--Sigma Rule Author: Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)-->
        <!--Description: Detects the use of Jlaive to execute assemblies in a copied PowerShell-->
        <!--Date: 2022/05/24-->
        <!--Status: experimental-->
        <!--ID: 0a99eb3e-1617-41bd-b095-13dc767f3def-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.003</id>
        </mitre>
        <description>HackTool - Jlaive In-Memory Assembly Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)(?:\.bat)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+xcopy\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)powershell\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.bat\.exe</field>
    </rule>
    <rule id="901374" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_jlaive_batch_execution.yml</info>
        <!--Sigma Rule Author: Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)-->
        <!--Description: Detects the use of Jlaive to execute assemblies in a copied PowerShell-->
        <!--Date: 2022/05/24-->
        <!--Status: experimental-->
        <!--ID: 0a99eb3e-1617-41bd-b095-13dc767f3def-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.003</id>
        </mitre>
        <description>HackTool - Jlaive In-Memory Assembly Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)(?:\.bat)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+xcopy\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)pwsh\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.bat\.exe</field>
    </rule>
    <rule id="901375" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_jlaive_batch_execution.yml</info>
        <!--Sigma Rule Author: Jose Luis Sanchez Martinez (@Joseliyo_Jstnk)-->
        <!--Description: Detects the use of Jlaive to execute assemblies in a copied PowerShell-->
        <!--Date: 2022/05/24-->
        <!--Status: experimental-->
        <!--ID: 0a99eb3e-1617-41bd-b095-13dc767f3def-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.003</id>
        </mitre>
        <description>HackTool - Jlaive In-Memory Assembly Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)(?:\.bat)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+attrib\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\+s</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\+h</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.bat\.exe</field>
    </rule>
    <rule id="901376" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_settingsynchost.yml</info>
        <!--Sigma Rule Author: Anton Kutepov, oscd.community-->
        <!--Description: Detects using SettingSyncHost.exe to run hijacked binary-->
        <!--Date: 2020/02/05-->
        <!--Status: test-->
        <!--ID: b2ddd389-f676-4ac4-845a-e00781a48e5f-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.008</id>
        </mitre>
        <description>Using SettingSyncHost.exe as LOLBin</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+SysWOW64\\+)</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)cmd\.exe\ /c</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)RoamDiag\.cmd</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\-outputpath</field>
    </rule>
    <rule id="901377" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_gpresult_execution.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects cases in which a user uses the built-in Windows utility gpresult to display the Resultant Set of Policy (RSoP) information-->
        <!--Date: 2022/05/01-->
        <!--Status: test-->
        <!--ID: e56d3073-83ff-4021-90fe-c658e0709e72-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1615</id>
        </mitre>
        <description>Gpresult Display Group Policy Information</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+gpresult\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/z|/v</field>
    </rule>
    <rule id="901378" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysinternals_tools_masquerading.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects binaries that use the same name as legitimate sysinternals tools to evade detection-->
        <!--Date: 2021/12/20-->
        <!--Status: test-->
        <!--ID: 7cce6fc8-a07f-4d84-a53e-96e1879843c9-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Potential Binary Impersonating Sysinternals Tools</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+accesschk\.exe|\\+accesschk64\.exe|\\+AccessEnum\.exe|\\+ADExplorer\.exe|\\+ADExplorer64\.exe|\\+ADInsight\.exe|\\+ADInsight64\.exe|\\+adrestore\.exe|\\+adrestore64\.exe|\\+Autologon\.exe|\\+Autologon64\.exe|\\+Autoruns\.exe|\\+Autoruns64\.exe|\\+autorunsc\.exe|\\+autorunsc64\.exe|\\+Bginfo\.exe|\\+Bginfo64\.exe|\\+Cacheset\.exe|\\+Cacheset64\.exe|\\+Clockres\.exe|\\+Clockres64\.exe|\\+Contig\.exe|\\+Contig64\.exe|\\+Coreinfo\.exe|\\+Coreinfo64\.exe|\\+CPUSTRES\.EXE|\\+CPUSTRES64\.EXE|\\+ctrl2cap\.exe|\\+Dbgview\.exe|\\+dbgview64\.exe|\\+Desktops\.exe|\\+Desktops64\.exe|\\+disk2vhd\.exe|\\+disk2vhd64\.exe|\\+diskext\.exe|\\+diskext64\.exe|\\+Diskmon\.exe|\\+Diskmon64\.exe|\\+DiskView\.exe|\\+DiskView64\.exe|\\+du\.exe|\\+du64\.exe|\\+efsdump\.exe|\\+FindLinks\.exe|\\+FindLinks64\.exe|\\+handle\.exe|\\+handle64\.exe|\\+hex2dec\.exe|\\+hex2dec64\.exe|\\+junction\.exe|\\+junction64\.exe|\\+ldmdump\.exe|\\+listdlls\.exe|\\+listdlls64\.exe|\\+livekd\.exe|\\+livekd64\.exe|\\+loadOrd\.exe|\\+loadOrd64\.exe|\\+loadOrdC\.exe|\\+loadOrdC64\.exe|\\+logonsessions\.exe|\\+logonsessions64\.exe|\\+movefile\.exe|\\+movefile64\.exe|\\+notmyfault\.exe|\\+notmyfault64\.exe|\\+notmyfaultc\.exe|\\+notmyfaultc64\.exe|\\+ntfsinfo\.exe|\\+ntfsinfo64\.exe|\\+pendmoves\.exe|\\+pendmoves64\.exe|\\+pipelist\.exe|\\+pipelist64\.exe|\\+portmon\.exe|\\+procdump\.exe|\\+procdump64\.exe|\\+procexp\.exe|\\+procexp64\.exe|\\+Procmon\.exe|\\+Procmon64\.exe|\\+psExec\.exe|\\+psExec64\.exe|\\+psfile\.exe|\\+psfile64\.exe|\\+psGetsid\.exe|\\+psGetsid64\.exe|\\+psInfo\.exe|\\+psInfo64\.exe|\\+pskill\.exe|\\+pskill64\.exe|\\+pslist\.exe|\\+pslist64\.exe|\\+psLoggedon\.exe|\\+psLoggedon64\.exe|\\+psloglist\.exe|\\+psloglist64\.exe|\\+pspasswd\.exe|\\+pspasswd64\.exe|\\+psping\.exe|\\+psping64\.exe|\\+psService\.exe|\\+psService64\.exe|\\+psshutdown\.exe|\\+psshutdown64\.exe|\\+pssuspend\.exe|\\+pssuspend64\.exe|\\+RAMMap\.exe|\\+RDCMan\.exe|\\+RegDelNull\.exe|\\+RegDelNull64\.exe|\\+regjump\.exe|\\+ru\.exe|\\+ru64\.exe|\\+sdelete\.exe|\\+sdelete64\.exe|\\+ShareEnum\.exe|\\+ShareEnum64\.exe|\\+shellRunas\.exe|\\+sigcheck\.exe|\\+sigcheck64\.exe|\\+streams\.exe|\\+streams64\.exe|\\+strings\.exe|\\+strings64\.exe|\\+sync\.exe|\\+sync64\.exe|\\+Sysmon\.exe|\\+Sysmon64\.exe|\\+tcpvcon\.exe|\\+tcpvcon64\.exe|\\+tcpview\.exe|\\+tcpview64\.exe|\\+Testlimit\.exe|\\+Testlimit64\.exe|\\+vmmap\.exe|\\+vmmap64\.exe|\\+Volumeid\.exe|\\+Volumeid64\.exe|\\+whois\.exe|\\+whois64\.exe|\\+Winobj\.exe|\\+Winobj64\.exe|\\+ZoomIt\.exe|\\+ZoomIt64\.exe)$</field>
        <field name="win.eventdata.company" negate="yes" type="pcre2">(?i)Sysinternals\ \-\ www\.sysinternals\.com</field>
        <field name="win.eventdata.company" negate="yes" type="pcre2">(?i)Sysinternals</field>
        <field name="win.eventdata.company" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="901379" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_customshellhost.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of CustomShellHost binary where the child isn't located in 'C:\Windows\explorer.exe'-->
        <!--Date: 2022/08/19-->
        <!--Status: test-->
        <!--ID: 84b14121-9d14-416e-800b-f3b829c5a14d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>Suspicious CustomShellHost Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+CustomShellHost\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+explorer\.exe</field>
    </rule>
    <rule id="901380" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_susp_parameter_variation.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Daniel Bohannon (idea), Roberto Rodriguez (Fix)-->
        <!--Description: Detects suspicious PowerShell invocation with a parameter substring-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 36210e0d-5b19-485d-a087-c096088885f0-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Parameter Substring</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-windowstyle\ h\ |\ \-windowstyl\ h|\ \-windowsty\ h|\ \-windowst\ h|\ \-windows\ h|\ \-windo\ h|\ \-wind\ h|\ \-win\ h|\ \-wi\ h|\ \-win\ h\ |\ \-win\ hi\ |\ \-win\ hid\ |\ \-win\ hidd\ |\ \-win\ hidde\ |\ \-NoPr\ |\ \-NoPro\ |\ \-NoProf\ |\ \-NoProfi\ |\ \-NoProfil\ |\ \-nonin\ |\ \-nonint\ |\ \-noninte\ |\ \-noninter\ |\ \-nonintera\ |\ \-noninterac\ |\ \-noninteract\ |\ \-noninteracti\ |\ \-noninteractiv\ |\ \-ec\ |\ \-encodedComman\ |\ \-encodedComma\ |\ \-encodedComm\ |\ \-encodedCom\ |\ \-encodedCo\ |\ \-encodedC\ |\ \-encoded\ |\ \-encode\ |\ \-encod\ |\ \-enco\ |\ \-en\ |\ \-executionpolic\ |\ \-executionpoli\ |\ \-executionpol\ |\ \-executionpo\ |\ \-executionp\ |\ \-execution\ bypass|\ \-executio\ bypass|\ \-executi\ bypass|\ \-execut\ bypass|\ \-execu\ bypass|\ \-exec\ bypass|\ \-exe\ bypass|\ \-ex\ bypass|\ \-ep\ bypass|\ /windowstyle\ h\ |\ /windowstyl\ h|\ /windowsty\ h|\ /windowst\ h|\ /windows\ h|\ /windo\ h|\ /wind\ h|\ /win\ h|\ /wi\ h|\ /win\ h\ |\ /win\ hi\ |\ /win\ hid\ |\ /win\ hidd\ |\ /win\ hidde\ |\ /NoPr\ |\ /NoPro\ |\ /NoProf\ |\ /NoProfi\ |\ /NoProfil\ |\ /nonin\ |\ /nonint\ |\ /noninte\ |\ /noninter\ |\ /nonintera\ |\ /noninterac\ |\ /noninteract\ |\ /noninteracti\ |\ /noninteractiv\ |\ /ec\ |\ /encodedComman\ |\ /encodedComma\ |\ /encodedComm\ |\ /encodedCom\ |\ /encodedCo\ |\ /encodedC\ |\ /encoded\ |\ /encode\ |\ /encod\ |\ /enco\ |\ /en\ |\ /executionpolic\ |\ /executionpoli\ |\ /executionpol\ |\ /executionpo\ |\ /executionp\ |\ /execution\ bypass|\ /executio\ bypass|\ /executi\ bypass|\ /execut\ bypass|\ /execu\ bypass|\ /exec\ bypass|\ /exe\ bypass|\ /ex\ bypass|\ /ep\ bypass</field>
    </rule>
    <rule id="901381" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_node_abuse.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution node.exe which is shipped with multiple software such as VMware, Adobe...etc. In order to execute arbitrary code. For example to establish reverse shell as seen in Log4j attacks...etc-->
        <!--Date: 2022/09/09-->
        <!--Status: test-->
        <!--ID: 6640f31c-01ad-49b5-beb5-83498a5cd8bd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1127</id>
        </mitre>
        <description>Potential Arbitrary Code Execution Via Node.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+node\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-e\ |\ \-\-eval\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exec\(</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)net\.socket</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.connect</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)child_process</field>
    </rule>
    <rule id="901382" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_obfuscated_ip_download.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects use of an encoded/obfuscated version of an IP address (hex, octal...) in an URL combined with a download command-->
        <!--Date: 2022/08/03-->
        <!--Status: test-->
        <!--ID: cb5a2333-56cf-4562-8fcb-22ba1bca728d-->
        <mitre>
            <id>attack.discovery</id>
        </mitre>
        <description>Obfuscated IP Download Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Invoke\-WebRequest|iwr\ |wget\ |curl\ |DownloadFile|DownloadString</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ 0x|//0x|\.0x|\.00x</field>
    </rule>
    <rule id="901383" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_obfuscated_ip_download.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects use of an encoded/obfuscated version of an IP address (hex, octal...) in an URL combined with a download command-->
        <!--Date: 2022/08/03-->
        <!--Status: test-->
        <!--ID: cb5a2333-56cf-4562-8fcb-22ba1bca728d-->
        <mitre>
            <id>attack.discovery</id>
        </mitre>
        <description>Obfuscated IP Download Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Invoke\-WebRequest|iwr\ |wget\ |curl\ |DownloadFile|DownloadString</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http://%</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)%2e</field>
    </rule>
    <rule id="901384" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_obfuscated_ip_download.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects use of an encoded/obfuscated version of an IP address (hex, octal...) in an URL combined with a download command-->
        <!--Date: 2022/08/03-->
        <!--Status: test-->
        <!--ID: cb5a2333-56cf-4562-8fcb-22ba1bca728d-->
        <mitre>
            <id>attack.discovery</id>
        </mitre>
        <description>Obfuscated IP Download Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Invoke\-WebRequest|iwr\ |wget\ |curl\ |DownloadFile|DownloadString</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)https?://[0-9]{1,3}\.[0-9]{1,3}\.0[0-9]{3,4}</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)https?://[0-9]{1,3}\.0[0-9]{3,7}</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)https?://0[0-9]{3,11}</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)https?://(0[0-9]{1,11}\.){3}0[0-9]{1,11}</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)https?://0[0-9]{1,11}</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i) [0-7]{7,13}</field>
    </rule>
    <rule id="901385" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_obfuscated_ip_download.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects use of an encoded/obfuscated version of an IP address (hex, octal...) in an URL combined with a download command-->
        <!--Date: 2022/08/03-->
        <!--Status: test-->
        <!--ID: cb5a2333-56cf-4562-8fcb-22ba1bca728d-->
        <mitre>
            <id>attack.discovery</id>
        </mitre>
        <description>Obfuscated IP Download Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Invoke\-WebRequest|iwr\ |wget\ |curl\ |DownloadFile|DownloadString</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)https?://((25[0-5]|(2[0-4]|1\d|[1-9])?\d)(\.|\b)){4}</field>
    </rule>
    <rule id="901386" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_esentutl_sensitive_file_copy.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Files with well-known filenames (sensitive files with credential data) copying-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: e7be6119-fc37-43f0-ad4f-1f3f99be2f9f-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.003</id>
            <id>car.2013-07-001</id>
            <id>attack.s0404</id>
        </mitre>
        <description>Copying Sensitive Files with Credential Data</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+esentutl\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)\\+esentutl\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:vss|\ /m\ |\ /y\ )</field>
    </rule>
    <rule id="901387" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_esentutl_sensitive_file_copy.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Files with well-known filenames (sensitive files with credential data) copying-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: e7be6119-fc37-43f0-ad4f-1f3f99be2f9f-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.003</id>
            <id>car.2013-07-001</id>
            <id>attack.s0404</id>
        </mitre>
        <description>Copying Sensitive Files with Credential Data</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+windows\\+ntds\\+ntds\.dit|\\+config\\+sam|\\+config\\+security|\\+config\\+system\ |\\+repair\\+sam|\\+repair\\+system|\\+repair\\+security|\\+config\\+RegBack\\+sam|\\+config\\+RegBack\\+system|\\+config\\+RegBack\\+security</field>
    </rule>
    <rule id="901388" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_curl_susp_download.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a suspicious curl process start on Windows and outputs the requested document to a local file-->
        <!--Date: 2020/07/03-->
        <!--Status: experimental-->
        <!--ID: e218595b-bbe7-4ee5-8a96-f32a24ad3468-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Curl.EXE Download</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+curl\.exe)$</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)The\ curl\ executable</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)%AppData%|%Public%|%Temp%|%tmp%|\\+AppData\\+|\\+Desktop\\+|\\+Temp\\+|\\+Users\\+Public\\+|C:\\+PerfLogs\\+|C:\\+ProgramData\\+|C:\\+Windows\\+Temp\\+</field>
    </rule>
    <rule id="901389" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_curl_susp_download.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a suspicious curl process start on Windows and outputs the requested document to a local file-->
        <!--Date: 2020/07/03-->
        <!--Status: experimental-->
        <!--ID: e218595b-bbe7-4ee5-8a96-f32a24ad3468-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Curl.EXE Download</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+curl\.exe)$</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)The\ curl\ executable</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.dll|\.gif|\.jpeg|\.jpg|\.png|\.temp|\.tmp|\.txt|\.vbe|\.vbs)$</field>
    </rule>
    <rule id="901390" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_curl_susp_download.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a suspicious curl process start on Windows and outputs the requested document to a local file-->
        <!--Date: 2020/07/03-->
        <!--Status: experimental-->
        <!--ID: e218595b-bbe7-4ee5-8a96-f32a24ad3468-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Curl.EXE Download</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+curl\.exe)$</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)The\ curl\ executable</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Git\\+usr\\+bin\\+sh\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Git\\+mingw64\\+bin\\+curl\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\-\-silent\ \-\-show\-error\ \-\-output\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)gfw\-httpget\-</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)AppData</field>
    </rule>
    <rule id="901391" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_automated_collection.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Once established within a system or network, an adversary may use automated techniques for collecting internal data.-->
        <!--Date: 2021/07/28-->
        <!--Status: test-->
        <!--ID: f576a613-2392-4067-9d1a-9345fb58d8d1-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1119</id>
            <id>attack.credential_access</id>
            <id>attack.t1552.001</id>
        </mitre>
        <description>Automated Collection Command Prompt</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.doc|\.docx|\.xls|\.xlsx|\.ppt|\.pptx|\.rtf|\.pdf|\.txt</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:dir\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /b\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /s\ )</field>
    </rule>
    <rule id="901392" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_automated_collection.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Once established within a system or network, an adversary may use automated techniques for collecting internal data.-->
        <!--Date: 2021/07/28-->
        <!--Status: test-->
        <!--ID: f576a613-2392-4067-9d1a-9345fb58d8d1-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1119</id>
            <id>attack.credential_access</id>
            <id>attack.t1552.001</id>
        </mitre>
        <description>Automated Collection Command Prompt</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.doc|\.docx|\.xls|\.xlsx|\.ppt|\.pptx|\.rtf|\.pdf|\.txt</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)FINDSTR\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /e\ |\ /si\ )</field>
    </rule>
    <rule id="901393" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_offlinescannershell_mpclient_sideloading.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects execution of Windows Defender "OfflineScannerShell.exe" from its non standard directory.
The "OfflineScannerShell.exe" binary is vulnerable to DLL side loading and will load any DLL named "mpclient.dll" from the current working directory.
-->
        <!--Date: 2022/03/06-->
        <!--Status: test-->
        <!--ID: 02b18447-ea83-4b1b-8805-714a8a34546a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Potential Mpclient.DLL Sideloading Via OfflineScannerShell.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+OfflineScannerShell\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)OfflineScannerShell\.exe</field>
        <field name="win.eventdata.currentDirectory" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Windows\ Defender\\+Offline\\+</field>
        <field name="win.eventdata.currentDirectory" negate="yes" type="pcre2">(?i)</field>
        <field name="win.eventdata.currentDirectory" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="901394" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_enumeration_for_credentials_in_registry.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may search the Registry on compromised systems for insecurely stored credentials.
The Windows Registry stores configuration information that can be used by the system or other programs.
Adversaries may query the Registry looking for credentials and passwords that have been stored for use by other programs or services
-->
        <!--Date: 2021/12/20-->
        <!--Status: test-->
        <!--ID: e0b0c2ab-3d52-46d9-8cb7-049dc775fbd1-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.002</id>
        </mitre>
        <description>Enumeration for Credentials in Registry</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ query\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/t\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)REG_SZ</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/s</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/f\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKLM</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/f\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKCU</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKCU\\+Software\\+SimonTatham\\+PuTTY\\+Sessions</field>
    </rule>
    <rule id="901395" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_createdump.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects uses of a renamed legitimate createdump.exe LOLOBIN utility to dump process memory-->
        <!--Date: 2022/09/20-->
        <!--Status: experimental-->
        <!--ID: 1a1ed54a-2ba4-4221-94d5-01dee560d71e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Renamed CreateDump Utility Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)FX_VER_INTERNALNAME_STR</field>
    </rule>
    <rule id="901396" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_createdump.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects uses of a renamed legitimate createdump.exe LOLOBIN utility to dump process memory-->
        <!--Date: 2022/09/20-->
        <!--Status: experimental-->
        <!--ID: 1a1ed54a-2ba4-4221-94d5-01dee560d71e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Renamed CreateDump Utility Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-u\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-f\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dmp</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-\-full\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-\-name\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dmp</field>
    </rule>
    <rule id="901397" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_createdump.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects uses of a renamed legitimate createdump.exe LOLOBIN utility to dump process memory-->
        <!--Date: 2022/09/20-->
        <!--Status: experimental-->
        <!--ID: 1a1ed54a-2ba4-4221-94d5-01dee560d71e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Renamed CreateDump Utility Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+createdump\.exe)$</field>
    </rule>
    <rule id="901398" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_schtasks_creation.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the creation of scheduled tasks in user session-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 92626ddd-662c-49e3-ac59-f6535f12d189-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1053.005</id>
            <id>attack.s0111</id>
            <id>car.2013-08-001</id>
            <id>stp.1u</id>
        </mitre>
        <description>Scheduled Task Creation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /create\ )</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)AUTHORI</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)AUTORI</field>
    </rule>
    <rule id="901399" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remote_access_tools_netsupport.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/09/25-->
        <!--Status: experimental-->
        <!--ID: 758ff488-18d5-4cbe-8ec4-02b6285a434f-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Remote Access Tool - NetSupport Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)NetSupport\ Client\ Configurator</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)NetSupport\ Remote\ Control</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)NetSupport\ Ltd</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PCICFGUI\.EXE</field>
    </rule>
    <rule id="901400" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_htran_or_natbypass.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects executable names or flags used by Htran or Htran-like tools (e.g. NATBypass)-->
        <!--Date: 2022/12/27-->
        <!--Status: test-->
        <!--ID: f5e3b62f-e577-4e59-931e-0a15b2b94e1e-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
            <id>attack.s0040</id>
        </mitre>
        <description>HackTool - Htran/NATBypass Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+htran\.exe|\\+lcx\.exe)$</field>
    </rule>
    <rule id="901401" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_htran_or_natbypass.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects executable names or flags used by Htran or Htran-like tools (e.g. NATBypass)-->
        <!--Date: 2022/12/27-->
        <!--Status: test-->
        <!--ID: f5e3b62f-e577-4e59-931e-0a15b2b94e1e-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
            <id>attack.s0040</id>
        </mitre>
        <description>HackTool - Htran/NATBypass Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.exe\ \-tran\ |\.exe\ \-slave\ )</field>
    </rule>
    <rule id="901402" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_no_params.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious start of rundll32.exe without any parameters as found in CobaltStrike beacon activity-->
        <!--Date: 2021/05/27-->
        <!--Status: experimental-->
        <!--ID: 1775e15e-b61b-4d14-a1a3-80981298085a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Rundll32 Execution Without CommandLine Parameters</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe|\\+rundll32\.exe"|\\+rundll32)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+Microsoft\\+Edge\\+</field>
    </rule>
    <rule id="901403" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysinternals_psservice.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of Sysinternals PsService which can be abused for service reconnaissance and tampering-->
        <!--Date: 2022/06/16-->
        <!--Status: experimental-->
        <!--ID: 3371f518-5fe3-4cf6-a14b-2a0ae3fd8a4f-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.persistence</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Sysinternals PsService Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)psservice\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+PsService\.exe|\\+PsService64\.exe)$</field>
    </rule>
    <rule id="901404" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_advanced_ip_scanner.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), @ROxPinTeddy-->
        <!--Description: Detects the use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups.-->
        <!--Date: 2020/05/12-->
        <!--Status: experimental-->
        <!--ID: bef37fa2-f205-4a7b-b484-0759bfd5f86f-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1046</id>
            <id>attack.t1135</id>
        </mitre>
        <description>PUA - Advanced IP Scanner Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+advanced_ip_scanner</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)advanced_ip_scanner</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Advanced\ IP\ Scanner</field>
    </rule>
    <rule id="901405" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_advanced_ip_scanner.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), @ROxPinTeddy-->
        <!--Description: Detects the use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups.-->
        <!--Date: 2020/05/12-->
        <!--Status: experimental-->
        <!--ID: bef37fa2-f205-4a7b-b484-0759bfd5f86f-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1046</id>
            <id>attack.t1135</id>
        </mitre>
        <description>PUA - Advanced IP Scanner Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/portable</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/lng</field>
    </rule>
    <rule id="901406" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_obfuscated_ip_via_cli.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects usage of an encoded/obfuscated version of an IP address (hex, octal, etc.) via command line-->
        <!--Date: 2022/08/03-->
        <!--Status: experimental-->
        <!--ID: 56d19cb4-6414-4769-9644-1ed35ffbb148-->
        <mitre>
            <id>attack.discovery</id>
        </mitre>
        <description>Obfuscated IP Via CLI</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ping\.exe|\\+arp\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ 0x|//0x|\.0x|\.00x</field>
    </rule>
    <rule id="901407" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_obfuscated_ip_via_cli.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects usage of an encoded/obfuscated version of an IP address (hex, octal, etc.) via command line-->
        <!--Date: 2022/08/03-->
        <!--Status: experimental-->
        <!--ID: 56d19cb4-6414-4769-9644-1ed35ffbb148-->
        <mitre>
            <id>attack.discovery</id>
        </mitre>
        <description>Obfuscated IP Via CLI</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ping\.exe|\\+arp\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)http://%</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)%2e</field>
    </rule>
    <rule id="901408" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_obfuscated_ip_via_cli.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects usage of an encoded/obfuscated version of an IP address (hex, octal, etc.) via command line-->
        <!--Date: 2022/08/03-->
        <!--Status: experimental-->
        <!--ID: 56d19cb4-6414-4769-9644-1ed35ffbb148-->
        <mitre>
            <id>attack.discovery</id>
        </mitre>
        <description>Obfuscated IP Via CLI</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ping\.exe|\\+arp\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)https?://[0-9]{1,3}\.[0-9]{1,3}\.0[0-9]{3,4}</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)https?://[0-9]{1,3}\.0[0-9]{3,7}</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)https?://0[0-9]{3,11}</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)https?://(0[0-9]{1,11}\.){3}0[0-9]{1,11}</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)https?://0[0-9]{1,11}</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i) [0-7]{7,13}</field>
    </rule>
    <rule id="901409" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_obfuscated_ip_via_cli.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects usage of an encoded/obfuscated version of an IP address (hex, octal, etc.) via command line-->
        <!--Date: 2022/08/03-->
        <!--Status: experimental-->
        <!--ID: 56d19cb4-6414-4769-9644-1ed35ffbb148-->
        <mitre>
            <id>attack.discovery</id>
        </mitre>
        <description>Obfuscated IP Via CLI</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ping\.exe|\\+arp\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)https?://((25[0-5]|(2[0-4]|1\d|[1-9])?\d)(\.|\b)){4}</field>
    </rule>
    <rule id="901410" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_ilasm.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect use of Ilasm.exe to compile c# code into dll or exe.-->
        <!--Date: 2022/05/07-->
        <!--Status: test-->
        <!--ID: 850d55f9-6eeb-4492-ad69-a72338f65ba4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1127</id>
        </mitre>
        <description>Ilasm Lolbin Use Compile C-Sharp</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ilasm\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)ilasm\.exe</field>
    </rule>
    <rule id="901411" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_lsass_dmp_cli_keywords.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus, Tony Lambert, oscd.community, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the presence of the keywords "lsass" and ".dmp" in the commandline, which could indicate a potential attempt to dump or create a dump of the lsass process.
-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: ffa6861c-4461-4f59-8a41-578c39f3f23e-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>LSASS Dump Keyword In CommandLine</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)lsass\.dmp|lsass\.zip|lsass\.rar|Andrew\.dmp|Coredump\.dmp|NotLSASS\.zip|lsass_2|lsassdump|lsassdmp</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)lsass</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dmp</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SQLDmpr</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.mdmp</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)nanodump</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dmp</field>
    </rule>
    <rule id="901412" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_susp_shimcache_flush.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects actions that clear the local ShimCache and remove forensic evidence-->
        <!--Date: 2021/02/01-->
        <!--Status: stable-->
        <!--ID: b0524451-19af-4efa-a46f-562a977f792e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>ShimCache Flush</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)apphelp\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ShimFlushCache|\#250</field>
    </rule>
    <rule id="901413" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_susp_shimcache_flush.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects actions that clear the local ShimCache and remove forensic evidence-->
        <!--Date: 2021/02/01-->
        <!--Status: stable-->
        <!--ID: b0524451-19af-4efa-a46f-562a977f792e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>ShimCache Flush</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)apphelp\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)kernel32\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)BaseFlushAppcompatCache|\#46</field>
    </rule>
    <rule id="901414" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_outlook_enable_unsafe_client_mail_rules.yml</info>
        <!--Sigma Rule Author: Markus Neis, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects an attacker trying to enable the outlook security setting "EnableUnsafeClientMailRules" which allows outlook to run applications or execute macros-->
        <!--Date: 2018/12/27-->
        <!--Status: test-->
        <!--ID: 55f0a3a1-846e-40eb-8273-677371b8d912-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Outlook EnableUnsafeClientMailRules Setting Enabled</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Outlook\\+Security\\+EnableUnsafeClientMailRules</field>
    </rule>
    <rule id="901415" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_squirrel_proxy_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Karneades / Markus Neis, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects the usage of the "Squirrel.exe" binary to execute arbitrary processes. This binary is part of multiple Electron based software installations (Slack, Teams, Discord, etc.)
-->
        <!--Date: 2022/06/09-->
        <!--Status: experimental-->
        <!--ID: 45239e6a-b035-4aaf-b339-8ad379fcb67e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Process Proxy Execution Via Squirrel.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+squirrel\.exe|\\+update\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-processStart|\-\-processStartAndWait|\-\-createShortcut</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Discord\\+Update\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ \-\-processStart</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Discord\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+GitHubDesktop\\+Update\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)GitHubDesktop\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\-\-createShortcut</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\-\-processStartAndWait</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Microsoft\\+Teams\\+Update\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Teams\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\-\-processStart</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\-\-createShortcut</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+yammerdesktop\\+Update\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Yammer\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\-\-processStart</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\-\-createShortcut</field>
    </rule>
    <rule id="901416" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_invoke_obfuscation_via_use_clip.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via use Clip.exe in Scripts-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: e1561947-b4e3-4a74-9bdd-83baed21bdb5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Use Clip</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)echo</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)clip</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)clipboard|invoke|i`|n`|v`|o`|k`|e`</field>
    </rule>
    <rule id="901417" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysinternals_psexec_remote_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potential psexec command that initiate execution on a remote systems via common commandline flags used by the utility-->
        <!--Date: 2023/02/28-->
        <!--Status: experimental-->
        <!--ID: ea011323-7045-460b-b2d7-0f7442ea6b38-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1587.001</id>
        </mitre>
        <description>Potential PsExec Remote Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)accepteula</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-u\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-p\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \\+</field>
    </rule>
    <rule id="901418" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_write_protect_for_storage_disabled.yml</info>
        <!--Sigma Rule Author: Sreeman-->
        <!--Description: Looks for changes to registry to disable any write-protect property for storage devices. This could be a precursor to a ransomware attack and has been an observed technique used by cypherpunk group.-->
        <!--Date: 2021/06/11-->
        <!--Status: test-->
        <!--ID: 75f7a0e2-7154-4c4d-9eae-5cdb4e0a5c13-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562</id>
        </mitre>
        <description>Write Protect For Storage Disabled</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+System\\+CurrentControlSet\\+Control</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Write\ Protection</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)0</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)storage|storagedevicepolicies</field>
    </rule>
    <rule id="901419" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_adfind_susp_usage.yml</info>
        <!--Sigma Rule Author: Janantha Marasinghe (https://github.com/blueteam0ps), FPT.EagleEye Team, omkar72, oscd.community-->
        <!--Description: Detects AdFind execution with common flags seen used during attacks-->
        <!--Date: 2021/02/02-->
        <!--Status: test-->
        <!--ID: 9a132afa-654e-11eb-ae93-0242ac130002-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1018</id>
            <id>attack.t1087.002</id>
            <id>attack.t1482</id>
            <id>attack.t1069.002</id>
            <id>stp.1u</id>
        </mitre>
        <description>PUA - AdFind Suspicious Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)domainlist|trustdmp|dcmodes|adinfo|\ dclist\ |computer_pwdnotreqd|objectcategory=|\-subnets\ \-f|name="Domain\ Admins"|\-sc\ u:|domainncs|dompol|\ oudmp\ |subnetdmp|gpodmp|fspdmp|users_noexpire|computers_active|computers_pwdnotreqd</field>
    </rule>
    <rule id="901420" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_gup_suspicious_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects execution of the Notepad++ updater in a suspicious directory, which is often used in DLL side-loading attacks-->
        <!--Date: 2019/02/06-->
        <!--Status: test-->
        <!--ID: 0a4f6091-223b-41f6-8743-f322ec84930b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>Suspicious GUP Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+GUP\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Program\ Files\\+Notepad\+\+\\+updater\\+GUP\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Program\ Files\ \(x86\)\\+Notepad\+\+\\+updater\\+GUP\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Users\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Notepad\+\+\\+updater\\+GUP\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Roaming\\+Notepad\+\+\\+updater\\+GUP\.exe)$</field>
    </rule>
    <rule id="901421" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_script_exec_from_env_folder.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a suspicious script execution in temporary folders or folders accessible by environment variables-->
        <!--Date: 2022/02/08-->
        <!--Status: test-->
        <!--ID: 1228c958-e64e-4e71-92ad-7d429f4138ba-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Script Interpreter Execution From Suspicious Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cscript\.exe|\\+mshta\.exe|\\+wscript\.exe)$</field>
    </rule>
    <rule id="901422" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_script_exec_from_env_folder.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a suspicious script execution in temporary folders or folders accessible by environment variables-->
        <!--Date: 2022/02/08-->
        <!--Status: test-->
        <!--ID: 1228c958-e64e-4e71-92ad-7d429f4138ba-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Script Interpreter Execution From Suspicious Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-ep\ bypass\ |\ \-ExecutionPolicy\ bypass\ |\ \-w\ hidden\ |/e:javascript\ |/e:Jscript\ |/e:vbscript\ )</field>
    </rule>
    <rule id="901423" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_script_exec_from_env_folder.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a suspicious script execution in temporary folders or folders accessible by environment variables-->
        <!--Date: 2022/02/08-->
        <!--Status: test-->
        <!--ID: 1228c958-e64e-4e71-92ad-7d429f4138ba-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Script Interpreter Execution From Suspicious Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)cscript\.exe|mshta\.exe|wscript\.exe</field>
    </rule>
    <rule id="901424" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_script_exec_from_env_folder.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a suspicious script execution in temporary folders or folders accessible by environment variables-->
        <!--Date: 2022/02/08-->
        <!--Status: test-->
        <!--ID: 1228c958-e64e-4e71-92ad-7d429f4138ba-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Script Interpreter Execution From Suspicious Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):\\+Perflogs\\+|:\\+Users\\+Public\\+|\\+AppData\\+Local\\+Temp|\\+AppData\\+Roaming\\+Temp|\\+Temporary\ Internet|\\+Windows\\+Temp</field>
    </rule>
    <rule id="901425" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_script_exec_from_env_folder.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a suspicious script execution in temporary folders or folders accessible by environment variables-->
        <!--Date: 2022/02/08-->
        <!--Status: test-->
        <!--ID: 1228c958-e64e-4e71-92ad-7d429f4138ba-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Script Interpreter Execution From Suspicious Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Favorites\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Favourites\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Contacts\\+</field>
    </rule>
    <rule id="901426" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_findstr_lsass.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects findstring commands that include the keyword lsass, which indicates recon actviity for the LSASS process PID-->
        <!--Date: 2022/08/12-->
        <!--Status: experimental-->
        <!--ID: fe63010f-8823-4864-a96b-a7b4a0f7b929-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.006</id>
        </mitre>
        <description>LSASS Process Reconnaissance Via Findstr.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+find\.exe|\\+findstr\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)FIND\.EXE|FINDSTR\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)lsass</field>
    </rule>
    <rule id="901427" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_findstr_lsass.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects findstring commands that include the keyword lsass, which indicates recon actviity for the LSASS process PID-->
        <!--Date: 2022/08/12-->
        <!--Status: experimental-->
        <!--ID: fe63010f-8823-4864-a96b-a7b4a0f7b929-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.006</id>
        </mitre>
        <description>LSASS Process Reconnaissance Via Findstr.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /i\ "lsass|\ /i\ lsass\.exe|findstr\ "lsass|findstr\ lsass|findstr\.exe\ "lsass|findstr\.exe\ lsass</field>
    </rule>
    <rule id="901428" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_ie4uinit.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect use of ie4uinit.exe to execute commands from a specially prepared ie4uinit.inf file from a directory other than the usual directories-->
        <!--Date: 2022/05/07-->
        <!--Status: test-->
        <!--ID: d3bf399f-b0cf-4250-8bb4-dfc192ab81dc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Ie4uinit Lolbin Use From Invalid Path</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ie4uinit\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)IE4UINIT\.EXE</field>
        <field name="win.eventdata.currentDirectory" negate="yes" type="pcre2">(?i)c:\\+windows\\+system32\\+</field>
        <field name="win.eventdata.currentDirectory" negate="yes" type="pcre2">(?i)c:\\+windows\\+sysWOW64\\+</field>
        <field name="win.eventdata.currentDirectory" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="901429" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regsvr32_susp_child_process.yml</info>
        <!--Sigma Rule Author: elhoim, Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potentially suspicious child processes of "regsvr32.exe".-->
        <!--Date: 2022/05/05-->
        <!--Status: experimental-->
        <!--ID: 6f0947a4-1c5e-4e0d-8ac7-53159b8f23ca-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.010</id>
        </mitre>
        <description>Potentially Suspicious Child Process Of Regsvr32</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+regsvr32\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+calc\.exe|\\+cscript\.exe|\\+explorer\.exe|\\+mshta\.exe|\\+net\.exe|\\+net1\.exe|\\+nltest\.exe|\\+notepad\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+reg\.exe|\\+schtasks\.exe|\\+werfault\.exe|\\+wscript\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+werfault\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ \-u\ \-p\ )</field>
    </rule>
    <rule id="901430" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mstsc_remote_connection.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the usage of "mstsc.exe" with the "/v" flag to initiate a connection to a remote server.
Adversaries may use valid accounts to log into a computer using the Remote Desktop Protocol (RDP). The adversary may then perform actions as the logged-on user.
-->
        <!--Date: 2022/01/07-->
        <!--Status: test-->
        <!--ID: 954f0af7-62dd-418f-b3df-a84bc2c7a774-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.001</id>
        </mitre>
        <description>New Remote Desktop Connection Initiated Via Mstsc.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+mstsc\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)mstsc\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /v:</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+lxss\\+wslhost\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+ProgramData\\+Microsoft\\+WSL\\+wslg\.rdp</field>
    </rule>
    <rule id="901431" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_registry_logon_script.yml</info>
        <!--Sigma Rule Author: Tom Ueltschi (@c_APT_ure)-->
        <!--Description: Detects the addition of a new LogonScript to the registry value "UserInitMprLogonScript" for potential persistence-->
        <!--Date: 2019/01/12-->
        <!--Status: experimental-->
        <!--ID: 21d856f9-9281-4ded-9377-51a1a6e2a432-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1037.001</id>
        </mitre>
        <description>Potential Persistence Via Logon Scripts - CommandLine</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)UserInitMprLogonScript</field>
    </rule>
    <rule id="901432" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_runscripthelper.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, oscd.community-->
        <!--Description: Detects execution of powershell scripts via Runscripthelper.exe-->
        <!--Date: 2020/10/09-->
        <!--Status: test-->
        <!--ID: eca49c87-8a75-4f13-9c73-a5a29e845f03-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Suspicious Runscripthelper.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Runscripthelper\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)surfacecheck</field>
    </rule>
    <rule id="901433" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_csc_susp_dynamic_compilation.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects execution of "csc.exe" to compile .NET code. Attackers often leverage this to compile code on the fly and use it in other stages.-->
        <!--Date: 2019/08/24-->
        <!--Status: test-->
        <!--ID: dcaa3f04-70c3-427a-80b4-b870d73c94c4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Dynamic .NET Compilation Via Csc.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+csc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):\\+Perflogs\\+|:\\+Users\\+Public\\+|\\+AppData\\+Local\\+Temp\\+|\\+Temporary\ Internet|\\+Windows\\+Temp\\+</field>
    </rule>
    <rule id="901434" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_csc_susp_dynamic_compilation.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects execution of "csc.exe" to compile .NET code. Attackers often leverage this to compile code on the fly and use it in other stages.-->
        <!--Date: 2019/08/24-->
        <!--Status: test-->
        <!--ID: dcaa3f04-70c3-427a-80b4-b870d73c94c4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Dynamic .NET Compilation Via Csc.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+csc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Favorites\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Favourites\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Contacts\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Pictures\\+</field>
    </rule>
    <rule id="901435" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_csc_susp_dynamic_compilation.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects execution of "csc.exe" to compile .NET code. Attackers often leverage this to compile code on the fly and use it in other stages.-->
        <!--Date: 2019/08/24-->
        <!--Status: test-->
        <!--ID: dcaa3f04-70c3-427a-80b4-b870d73c94c4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Dynamic .NET Compilation Via Csc.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+csc\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)([Pp]rogram[Dd]ata|%([Ll]ocal)?[Aa]pp[Dd]ata%|\\+[Aa]pp[Dd]ata\\+([Ll]ocal(Ll]ow)?|[Rr]oaming))\\+[^\\+]{1,256}$</field>
    </rule>
    <rule id="901436" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_csc_susp_dynamic_compilation.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects execution of "csc.exe" to compile .NET code. Attackers often leverage this to compile code on the fly and use it in other stages.-->
        <!--Date: 2019/08/24-->
        <!--Status: test-->
        <!--ID: dcaa3f04-70c3-427a-80b4-b870d73c94c4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Dynamic .NET Compilation Via Csc.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+csc\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+sdiagnhost\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+inetsrv\\+w3wp\.exe</field>
    </rule>
    <rule id="901437" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_csc_susp_dynamic_compilation.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects execution of "csc.exe" to compile .NET code. Attackers often leverage this to compile code on the fly and use it in other stages.-->
        <!--Date: 2019/08/24-->
        <!--Status: test-->
        <!--ID: dcaa3f04-70c3-427a-80b4-b870d73c94c4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Dynamic .NET Compilation Via Csc.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+csc\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+ProgramData\\+chocolatey\\+choco\.exe</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\\+ProgramData\\+Microsoft\\+Windows\ Defender\ Advanced\ Threat\ Protection</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)JwB7ACIAZgBhAGkAbABlAGQAIgA6AHQAcgB1AGUALAAiAG0AcwBnACIAOgAiAEEAbgBzAGkAYgBsAGUAIAByAGUAcQB1AGkAcgBlAHMAIABQAG8AdwBlAHIAUwBoAGUAbABsACAAdgAzAC4AMAAgAG8AcgAgAG4AZQB3AGUAcgAiAH0AJw</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)cAewAiAGYAYQBpAGwAZQBkACIAOgB0AHIAdQBlACwAIgBtAHMAZwAiADoAIgBBAG4AcwBpAGIAbABlACAAcgBlAHEAdQBpAHIAZQBzACAAUABvAHcAZQByAFMAaABlAGwAbAAgAHYAMwAuADAAIABvAHIAIABuAGUAdwBlAHIAIgB9ACcA</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)nAHsAIgBmAGEAaQBsAGUAZAAiADoAdAByAHUAZQAsACIAbQBzAGcAIgA6ACIAQQBuAHMAaQBiAGwAZQAgAHIAZQBxAHUAaQByAGUAcwAgAFAAbwB3AGUAcgBTAGgAZQBsAGwAIAB2ADMALgAwACAAbwByACAAbgBlAHcAZQByACIAfQAnA</field>
    </rule>
    <rule id="901438" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_cli_obfuscation_escape_char.yml</info>
        <!--Sigma Rule Author: juju4-->
        <!--Description: Detects potential commandline obfuscation using known escape characters-->
        <!--Date: 2018/12/11-->
        <!--Status: test-->
        <!--ID: f0cdd048-82dc-4f7a-8a7a-b87a52b6d0fd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1140</id>
        </mitre>
        <description>Potential Commandline Obfuscation Using Escape Characters</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)h\^t\^t\^p|h"t"t"p</field>
    </rule>
    <rule id="901439" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_openwith.yml</info>
        <!--Sigma Rule Author: Beyu Denis, oscd.community (rule), @harr0ey (idea)-->
        <!--Description: The OpenWith.exe executes other binary-->
        <!--Date: 2019/10/12-->
        <!--Status: test-->
        <!--ID: cec8e918-30f7-4e2d-9bfa-a59cc97ae60f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>OpenWith.exe Executes Specified Binary</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+OpenWith\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/c</field>
    </rule>
    <rule id="901440" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_pypykatz.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the usage of "pypykatz" to obtain stored credentials. Adversaries may attempt to extract credential material from the Security Account Manager (SAM) database through Windows registry where the SAM database is stored-->
        <!--Date: 2022/01/05-->
        <!--Status: test-->
        <!--ID: a29808fd-ef50-49ff-9c7a-59a9b040b404-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>HackTool - Pypykatz Credentials Dumping Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+pypykatz\.exe|\\+python\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)live</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)registry</field>
    </rule>
    <rule id="901441" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_invoke_obfuscation_var.yml</info>
        <!--Sigma Rule Author: Jonathan Cheong, oscd.community-->
        <!--Description: Detects Obfuscated use of Environment Variables to execute PowerShell-->
        <!--Date: 2020/10/15-->
        <!--Status: test-->
        <!--ID: 27aec9c9-dbb0-4939-8422-1742242471d0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation VAR+ Launcher</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cmd</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)"set</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-f</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/c|/r</field>
    </rule>
    <rule id="901442" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_schtasks_susp_pattern.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects scheduled task creation using "schtasks" that contain potentially suspicious or uncommon commands-->
        <!--Date: 2022/02/23-->
        <!--Status: experimental-->
        <!--ID: f2c64357-b1d2-41b7-849f-34d2682c0fad-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Suspicious Command Patterns In Scheduled Task Creation</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/Create\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/sc\ minute\ |/ru\ system\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:cmd\ /c|cmd\ /k|cmd\ /r|cmd\.exe\ /c\ |cmd\.exe\ /k\ |cmd\.exe\ /r\ )</field>
    </rule>
    <rule id="901443" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_schtasks_susp_pattern.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects scheduled task creation using "schtasks" that contain potentially suspicious or uncommon commands-->
        <!--Date: 2022/02/23-->
        <!--Status: experimental-->
        <!--ID: f2c64357-b1d2-41b7-849f-34d2682c0fad-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Suspicious Command Patterns In Scheduled Task Creation</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+schtasks\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/Create\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/sc\ minute\ |/ru\ system\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-decode\ |\ \-enc\ |\ \-w\ hidden\ |\ bypass\ |\ IEX|\.DownloadData|\.DownloadFile|\.DownloadString|/c\ start\ /min\ |FromBase64String|mshta\ http|mshta\.exe\ http</field>
    </rule>
    <rule id="901444" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_disable_raccine.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects commands that indicate a Raccine removal from an end system. Raccine is a free ransomware protection tool.-->
        <!--Date: 2021/01/21-->
        <!--Status: test-->
        <!--ID: a31eeaed-3fd5-478e-a8ba-e62c6b3f9ecc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Raccine Uninstall</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:taskkill\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)RaccineSettings\.exe</field>
    </rule>
    <rule id="901445" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_disable_raccine.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects commands that indicate a Raccine removal from an end system. Raccine is a free ransomware protection tool.-->
        <!--Date: 2021/01/21-->
        <!--Status: test-->
        <!--ID: a31eeaed-3fd5-478e-a8ba-e62c6b3f9ecc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Raccine Uninstall</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)delete</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Raccine\ Tray</field>
    </rule>
    <rule id="901446" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_disable_raccine.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects commands that indicate a Raccine removal from an end system. Raccine is a free ransomware protection tool.-->
        <!--Date: 2021/01/21-->
        <!--Status: test-->
        <!--ID: a31eeaed-3fd5-478e-a8ba-e62c6b3f9ecc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Raccine Uninstall</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)schtasks</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/DELETE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Raccine\ Rules\ Updater</field>
    </rule>
    <rule id="901447" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_path_traversal.yml</info>
        <!--Sigma Rule Author: xknow @xknow_infosec, Tim Shelton-->
        <!--Description: Detects potential path traversal attempt via cmd.exe. Could indicate possible command/argument confusion/hijacking-->
        <!--Date: 2020/06/11-->
        <!--Status: test-->
        <!--ID: 087790e3-3287-436c-bccf-cbd0184a7db1-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.003</id>
        </mitre>
        <description>Potential CommandLine Path Traversal Via Cmd.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)cmd\.exe</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)/c|/k|/r</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/c|/k|/r</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)/\.\./\.\./</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/\.\./\.\./</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+Tasktop\\+keycloak\\+bin\\+/\.\./\.\./jre\\+bin\\+java</field>
    </rule>
    <rule id="901448" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_bash_file_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of Microsoft bash launcher without any flags to execute the content of a bash script directly. This can be used to potentially bypass defenses and execute Linux or Windows-based binaries directly via bash-->
        <!--Date: 2023/08/15-->
        <!--Status: experimental-->
        <!--ID: 2d22a514-e024-4428-9dba-41505bd63a5b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Indirect Command Execution From Script File Via Bash.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?::\\+Windows\\+System32\\+bash\.exe|:\\+Windows\\+SysWOW64\\+bash\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Bash\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)bash\.exe\ \-</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)bash\ \-</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)None</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)bash\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)bash</field>
    </rule>
    <rule id="901449" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_amsi_null_bits_bypass.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of special strings/null bits in order to potentially bypass AMSI functionalities-->
        <!--Date: 2023/01/04-->
        <!--Status: experimental-->
        <!--ID: 92a974db-ab84-457f-9ec0-55db83d7a825-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Potential AMSI Bypass Using NULL Bits</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)if\(0\)\{\{\{0\}\}\}'\ \-f\ \$\(0\ \-as\ \[char\]\)\ \+|\#&lt;NULL&gt;</field>
    </rule>
    <rule id="901450" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_servu_susp_child_process.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a suspicious process pattern which could be a sign of an exploited Serv-U service-->
        <!--Date: 2021/07/14-->
        <!--Status: test-->
        <!--ID: 58f4ea09-0fc2-4520-ba18-b85c540b0eaf-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1555</id>
            <id>cve.2021.35211</id>
        </mitre>
        <description>Suspicious Serv-U Process Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+Serv\-U\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+wscript\.exe|\\+cscript\.exe|\\+sh\.exe|\\+bash\.exe|\\+schtasks\.exe|\\+regsvr32\.exe|\\+wmic\.exe|\\+mshta\.exe|\\+rundll32\.exe|\\+msiexec\.exe|\\+forfiles\.exe|\\+scriptrunner\.exe)$</field>
    </rule>
    <rule id="901451" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_remote.yml</info>
        <!--Sigma Rule Author: Christopher Peacock @SecurePeacock, SCYTHE @scythe_io-->
        <!--Description: Remote.exe is part of WinDbg in the Windows SDK and can be used for AWL bypass and running remote files.-->
        <!--Date: 2022/06/02-->
        <!--Status: test-->
        <!--ID: 4eddc365-79b4-43ff-a9d7-99422dc34b93-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1127</id>
        </mitre>
        <description>Use of Remote.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+remote\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)remote\.exe</field>
    </rule>
    <rule id="901452" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_nps.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of NPS, a port forwarding and intranet penetration proxy server-->
        <!--Date: 2022/10/08-->
        <!--Status: test-->
        <!--ID: 68d37776-61db-42f5-bf54-27e87072d17e-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>PUA - NPS Tunneling Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+npc\.exe)$</field>
    </rule>
    <rule id="901453" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_nps.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of NPS, a port forwarding and intranet penetration proxy server-->
        <!--Date: 2022/10/08-->
        <!--Status: test-->
        <!--ID: 68d37776-61db-42f5-bf54-27e87072d17e-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>PUA - NPS Tunneling Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-server=</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-vkey=</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-password=</field>
    </rule>
    <rule id="901454" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_nps.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of NPS, a port forwarding and intranet penetration proxy server-->
        <!--Date: 2022/10/08-->
        <!--Status: test-->
        <!--ID: 68d37776-61db-42f5-bf54-27e87072d17e-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>PUA - NPS Tunneling Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-config=npc</field>
    </rule>
    <rule id="901455" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_nps.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of NPS, a port forwarding and intranet penetration proxy server-->
        <!--Date: 2022/10/08-->
        <!--Status: test-->
        <!--ID: 68d37776-61db-42f5-bf54-27e87072d17e-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>PUA - NPS Tunneling Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)MD5=AE8ACF66BFE3A44148964048B826D005|SHA1=CEA49E9B9B67F3A13AD0BE1C2655293EA3C18181|SHA256=5A456283392FFCEEEACA3D3426C306EB470304637520D72FED1CC1FEBBBD6856</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)ae8acf66bfe3a44148964048b826d005</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)cea49e9b9b67f3a13ad0be1c2655293ea3c18181</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)5a456283392ffceeeaca3d3426c306eb470304637520d72fed1cc1febbbd6856</field>
    </rule>
    <rule id="901456" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ntfs_short_name_use_image.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detect use of the Windows 8.3 short name. Which could be used as a method to avoid Image based detection-->
        <!--Date: 2022/08/06-->
        <!--Status: experimental-->
        <!--ID: 3ef5605c-9eb9-47b0-9a71-b727e6aa5c3b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Use NTFS Short Name in Image</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\~1\.bat|\~1\.dll|\~1\.exe|\~1\.hta|\~1\.js|\~1\.msi|\~1\.ps1|\~1\.tmp|\~1\.vbe|\~1\.vbs|\~2\.bat|\~2\.dll|\~2\.exe|\~2\.hta|\~2\.js|\~2\.msi|\~2\.ps1|\~2\.tmp|\~2\.vbe|\~2\.vbs</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+explorer\.exe</field>
    </rule>
    <rule id="901457" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ntfs_short_name_use_image.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detect use of the Windows 8.3 short name. Which could be used as a method to avoid Image based detection-->
        <!--Date: 2022/08/06-->
        <!--Status: experimental-->
        <!--ID: 3ef5605c-9eb9-47b0-9a71-b727e6aa5c3b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Use NTFS Short Name in Image</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\~1\.bat|\~1\.dll|\~1\.exe|\~1\.hta|\~1\.js|\~1\.msi|\~1\.ps1|\~1\.tmp|\~1\.vbe|\~1\.vbs|\~2\.bat|\~2\.dll|\~2\.exe|\~2\.hta|\~2\.js|\~2\.msi|\~2\.ps1|\~2\.tmp|\~2\.vbe|\~2\.vbs</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+WebEx\\+WebexHost\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+thor\\+thor64\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+PROGRA\~1\\+WinZip\\+WZPREL\~1\.EXE</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+VCREDI\~1\.EXE)$</field>
    </rule>
    <rule id="901458" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remote_access_software_ultraviewer.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/09/25-->
        <!--Status: test-->
        <!--ID: 88656cec-6c3b-487c-82c0-f73ebb805503-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Use of UltraViewer Remote Access Software</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)UltraViewer</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)DucFabulous\ Co,ltd</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)UltraViewer_Desktop\.exe</field>
    </rule>
    <rule id="901459" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_megasync.yml</info>
        <!--Sigma Rule Author: Sittikorn S-->
        <!--Description: Detects the execution of a renamed MegaSync.exe as seen used by ransomware families like Nefilim, Sodinokibi, Pysa, and Conti.-->
        <!--Date: 2021/06/22-->
        <!--Status: test-->
        <!--ID: 643bdcac-8b82-49f4-9fd9-25a90b929f3b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Renamed MegaSync Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)megasync\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+megasync\.exe)$</field>
    </rule>
    <rule id="901460" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_wsreset_integrity_level.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass via WSReset usable by default sysmon-config-->
        <!--Date: 2021/08/23-->
        <!--Status: test-->
        <!--ID: 89a9a0e0-f61a-42e5-8957-b1479565a658-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass WSReset</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wsreset\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
    </rule>
    <rule id="901461" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regedit_trustedinstaller.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a regedit started with TrustedInstaller privileges or by ProcessHacker.exe-->
        <!--Date: 2021/05/27-->
        <!--Status: test-->
        <!--ID: 883835a7-df45-43e4-bf1d-4268768afda4-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548</id>
        </mitre>
        <description>Regedit as Trusted Installer</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+regedit\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+TrustedInstaller\.exe|\\+ProcessHacker\.exe)$</field>
    </rule>
    <rule id="901462" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_hidden_dir_index_allocation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Scoubi (@ScoubiMtl)-->
        <!--Description: Detects command line containing reference to the "::$index_allocation" stream, which can be used as a technique to prevent access to folders or files from tooling such as "explorer.exe" or "powershell.exe"
-->
        <!--Date: 2023/10/09-->
        <!--Status: experimental-->
        <!--ID: 0900463c-b33b-49a8-be1d-552a3b553dae-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Potential Hidden Directory Creation Via NTFS INDEX_ALLOCATION Stream - CLI</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)::\$index_allocation</field>
    </rule>
    <rule id="901463" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_nircmd.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity-->
        <!--Date: 2022/01/24-->
        <!--Status: experimental-->
        <!--ID: 4e2ed651-1906-4a59-a78a-18220fca1b22-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>PUA - NirCmd Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+NirCmd\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)NirCmd\.exe</field>
    </rule>
    <rule id="901464" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_nircmd.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of NirCmd tool for command execution, which could be the result of legitimate administrative activity-->
        <!--Date: 2022/01/24-->
        <!--Status: experimental-->
        <!--ID: 4e2ed651-1906-4a59-a78a-18220fca1b22-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>PUA - NirCmd Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ execmd\ |\.exe\ script\ |\.exe\ shexec\ |\ runinteractive\ )</field>
    </rule>
    <rule id="901465" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_bad_opsec_sacrificial_processes.yml</info>
        <!--Sigma Rule Author: Oleg Kolesnikov @securonix invrep_de, oscd.community, Florian Roth (Nextron Systems), Christian Burkard (Nextron Systems)-->
        <!--Description: Detects attackers using tooling with bad opsec defaults.
E.g. spawning a sacrificial process to inject a capability into the process without taking into account how the process is normally run.
One trivial example of this is using rundll32.exe without arguments as a sacrificial process (default in CS, now highlighted by c2lint), running WerFault without arguments (Kraken - credit am0nsec), and other examples.
-->
        <!--Date: 2020/10/23-->
        <!--Status: experimental-->
        <!--ID: a7c3d773-caef-227e-a7e7-c2f13c622329-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Bad Opsec Defaults Sacrificial Processes With Improper Arguments</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+WerFault\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:WerFault\.exe)$</field>
    </rule>
    <rule id="901466" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_bad_opsec_sacrificial_processes.yml</info>
        <!--Sigma Rule Author: Oleg Kolesnikov @securonix invrep_de, oscd.community, Florian Roth (Nextron Systems), Christian Burkard (Nextron Systems)-->
        <!--Description: Detects attackers using tooling with bad opsec defaults.
E.g. spawning a sacrificial process to inject a capability into the process without taking into account how the process is normally run.
One trivial example of this is using rundll32.exe without arguments as a sacrificial process (default in CS, now highlighted by c2lint), running WerFault without arguments (Kraken - credit am0nsec), and other examples.
-->
        <!--Date: 2020/10/23-->
        <!--Status: experimental-->
        <!--ID: a7c3d773-caef-227e-a7e7-c2f13c622329-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Bad Opsec Defaults Sacrificial Processes With Improper Arguments</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:rundll32\.exe)$</field>
    </rule>
    <rule id="901467" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_bad_opsec_sacrificial_processes.yml</info>
        <!--Sigma Rule Author: Oleg Kolesnikov @securonix invrep_de, oscd.community, Florian Roth (Nextron Systems), Christian Burkard (Nextron Systems)-->
        <!--Description: Detects attackers using tooling with bad opsec defaults.
E.g. spawning a sacrificial process to inject a capability into the process without taking into account how the process is normally run.
One trivial example of this is using rundll32.exe without arguments as a sacrificial process (default in CS, now highlighted by c2lint), running WerFault without arguments (Kraken - credit am0nsec), and other examples.
-->
        <!--Date: 2020/10/23-->
        <!--Status: experimental-->
        <!--ID: a7c3d773-caef-227e-a7e7-c2f13c622329-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Bad Opsec Defaults Sacrificial Processes With Improper Arguments</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+regsvcs\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:regsvcs\.exe)$</field>
    </rule>
    <rule id="901468" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_bad_opsec_sacrificial_processes.yml</info>
        <!--Sigma Rule Author: Oleg Kolesnikov @securonix invrep_de, oscd.community, Florian Roth (Nextron Systems), Christian Burkard (Nextron Systems)-->
        <!--Description: Detects attackers using tooling with bad opsec defaults.
E.g. spawning a sacrificial process to inject a capability into the process without taking into account how the process is normally run.
One trivial example of this is using rundll32.exe without arguments as a sacrificial process (default in CS, now highlighted by c2lint), running WerFault without arguments (Kraken - credit am0nsec), and other examples.
-->
        <!--Date: 2020/10/23-->
        <!--Status: experimental-->
        <!--ID: a7c3d773-caef-227e-a7e7-c2f13c622329-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Bad Opsec Defaults Sacrificial Processes With Improper Arguments</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+regasm\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:regasm\.exe)$</field>
    </rule>
    <rule id="901469" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_bad_opsec_sacrificial_processes.yml</info>
        <!--Sigma Rule Author: Oleg Kolesnikov @securonix invrep_de, oscd.community, Florian Roth (Nextron Systems), Christian Burkard (Nextron Systems)-->
        <!--Description: Detects attackers using tooling with bad opsec defaults.
E.g. spawning a sacrificial process to inject a capability into the process without taking into account how the process is normally run.
One trivial example of this is using rundll32.exe without arguments as a sacrificial process (default in CS, now highlighted by c2lint), running WerFault without arguments (Kraken - credit am0nsec), and other examples.
-->
        <!--Date: 2020/10/23-->
        <!--Status: experimental-->
        <!--ID: a7c3d773-caef-227e-a7e7-c2f13c622329-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Bad Opsec Defaults Sacrificial Processes With Improper Arguments</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+regsvr32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:regsvr32\.exe)$</field>
    </rule>
    <rule id="901470" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_bad_opsec_sacrificial_processes.yml</info>
        <!--Sigma Rule Author: Oleg Kolesnikov @securonix invrep_de, oscd.community, Florian Roth (Nextron Systems), Christian Burkard (Nextron Systems)-->
        <!--Description: Detects attackers using tooling with bad opsec defaults.
E.g. spawning a sacrificial process to inject a capability into the process without taking into account how the process is normally run.
One trivial example of this is using rundll32.exe without arguments as a sacrificial process (default in CS, now highlighted by c2lint), running WerFault without arguments (Kraken - credit am0nsec), and other examples.
-->
        <!--Date: 2020/10/23-->
        <!--Status: experimental-->
        <!--ID: a7c3d773-caef-227e-a7e7-c2f13c622329-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Bad Opsec Defaults Sacrificial Processes With Improper Arguments</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Microsoft\\+EdgeUpdate\\+Install\\+\{</field>
    </rule>
    <rule id="901471" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_bad_opsec_sacrificial_processes.yml</info>
        <!--Sigma Rule Author: Oleg Kolesnikov @securonix invrep_de, oscd.community, Florian Roth (Nextron Systems), Christian Burkard (Nextron Systems)-->
        <!--Description: Detects attackers using tooling with bad opsec defaults.
E.g. spawning a sacrificial process to inject a capability into the process without taking into account how the process is normally run.
One trivial example of this is using rundll32.exe without arguments as a sacrificial process (default in CS, now highlighted by c2lint), running WerFault without arguments (Kraken - credit am0nsec), and other examples.
-->
        <!--Date: 2020/10/23-->
        <!--Status: experimental-->
        <!--ID: a7c3d773-caef-227e-a7e7-c2f13c622329-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>Bad Opsec Defaults Sacrificial Processes With Improper Arguments</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Google\\+Chrome\\+Application\\+</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+Installer\\+setup\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\-\-uninstall\ \-\-channel=stable</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:rundll32\.exe)$</field>
    </rule>
    <rule id="901472" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_driverquery_usage.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detect usage of the "driverquery" utility. Which can be used to perform reconnaissance on installed drivers-->
        <!--Date: 2023/01/19-->
        <!--Status: experimental-->
        <!--ID: a20def93-0709-4eae-9bd2-31206e21e6b2-->
        <mitre>
            <id>attack.discovery</id>
        </mitre>
        <description>DriverQuery.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:driverquery\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)drvqry\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+cscript\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+mshta\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+regsvr32\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+wscript\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+Users\\+Public\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+Windows\\+Temp\\+</field>
    </rule>
    <rule id="901473" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_remote_access_tools_logmein.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/02/11-->
        <!--Status: test-->
        <!--ID: d85873ef-a0f8-4c48-a53a-6b621f11729d-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Remote Access Tool - LogMeIn Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)LMIGuardianSvc</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)LMIGuardianSvc</field>
        <field name="win.eventdata.company" negate="no" type="pcre2">(?i)LogMeIn,\ Inc\.</field>
    </rule>
    <rule id="901474" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_net_share_and_sessions_enum.yml</info>
        <!--Sigma Rule Author: Endgame, JHasenbusch (ported for oscd.community)-->
        <!--Description: Detects attempts to enumerate file shares, printer shares and sessions using "net.exe" with the "view" flag.-->
        <!--Date: 2018/10/30-->
        <!--Status: stable-->
        <!--ID: 62510e69-616b-4078-b371-847da438cc03-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1018</id>
        </mitre>
        <description>Share And Session Enumeration Using Net.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+net\.exe|\\+net1\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)net\.exe|net1\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)view</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+</field>
    </rule>
    <rule id="901475" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmi_persistence_script_event_consumer.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects WMI script event consumers-->
        <!--Date: 2018/03/07-->
        <!--Status: test-->
        <!--ID: ec1d5e28-8f3b-4188-a6f8-6e8df81dc28e-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.003</id>
        </mitre>
        <description>WMI Persistence - Script Event Consumer</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\+WINDOWS\\+system32\\+wbem\\+scrcons\.exe</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)C:\\+Windows\\+System32\\+svchost\.exe</field>
    </rule>
    <rule id="901476" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sharpview.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may look for details about the network configuration and settings of systems they access or through information discovery of remote systems-->
        <!--Date: 2021/12/10-->
        <!--Status: experimental-->
        <!--ID: b2317cfa-4a47-4ead-b3ff-297438c0bc2d-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1049</id>
            <id>attack.t1069.002</id>
            <id>attack.t1482</id>
            <id>attack.t1135</id>
            <id>attack.t1033</id>
        </mitre>
        <description>HackTool - SharpView Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)SharpView\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+SharpView\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Add\-RemoteConnection|Convert\-ADName|ConvertFrom\-SID|ConvertFrom\-UACValue|Convert\-SidToName|Export\-PowerViewCSV|Find\-DomainObjectPropertyOutlier|Find\-DomainProcess|Find\-DomainShare|Find\-DomainUserEvent|Find\-DomainUserLocation|Find\-ForeignGroup|Find\-ForeignUser|Find\-GPOComputerAdmin|Find\-GPOLocation|Find\-Interesting|Find\-LocalAdminAccess|Find\-ManagedSecurityGroups|Get\-CachedRDPConnection|Get\-DFSshare|Get\-DomainComputer|Get\-DomainController|Get\-DomainDFSShare|Get\-DomainDNSRecord|Get\-DomainFileServer|Get\-DomainForeign|Get\-DomainGPO|Get\-DomainGroup|Get\-DomainGUIDMap|Get\-DomainManagedSecurityGroup|Get\-DomainObject|Get\-DomainOU|Get\-DomainPolicy|Get\-DomainSID|Get\-DomainSite|Get\-DomainSPNTicket|Get\-DomainSubnet|Get\-DomainTrust|Get\-DomainUserEvent|Get\-ForestDomain|Get\-ForestGlobalCatalog|Get\-ForestTrust|Get\-GptTmpl|Get\-GroupsXML|Get\-LastLoggedOn|Get\-LoggedOnLocal|Get\-NetComputer|Get\-NetDomain|Get\-NetFileServer|Get\-NetForest|Get\-NetGPO|Get\-NetGroupMember|Get\-NetLocalGroup|Get\-NetLoggedon|Get\-NetOU|Get\-NetProcess|Get\-NetRDPSession|Get\-NetSession|Get\-NetShare|Get\-NetSite|Get\-NetSubnet|Get\-NetUser|Get\-PathAcl|Get\-PrincipalContext|Get\-RegistryMountedDrive|Get\-RegLoggedOn|Get\-WMIRegCachedRDPConnection|Get\-WMIRegLastLoggedOn|Get\-WMIRegMountedDrive|Get\-WMIRegProxy|Invoke\-ACLScanner|Invoke\-CheckLocalAdminAccess|Invoke\-Kerberoast|Invoke\-MapDomainTrust|Invoke\-RevertToSelf|Invoke\-Sharefinder|Invoke\-UserImpersonation|Remove\-DomainObjectAcl|Remove\-RemoteConnection|Request\-SPNTicket|Set\-DomainObject|Test\-AdminAccess</field>
    </rule>
    <rule id="901477" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_java_susp_child_process.yml</info>
        <!--Sigma Rule Author: Andreas Hunkeler (@Karneades), Florian Roth-->
        <!--Description: Detects suspicious processes spawned from a Java host process which could indicate a sign of exploitation (e.g. log4j)-->
        <!--Date: 2021/12/17-->
        <!--Status: experimental-->
        <!--ID: 0d34ed8b-1c12-4ff2-828c-16fc860b766d-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Suspicious Processes Spawned by Java.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+java\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+AppVLP\.exe|\\+bash\.exe|\\+bitsadmin\.exe|\\+certutil\.exe|\\+cscript\.exe|\\+curl\.exe|\\+forfiles\.exe|\\+hh\.exe|\\+mftrace\.exe|\\+mshta\.exe|\\+net\.exe|\\+net1\.exe|\\+query\.exe|\\+reg\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+schtasks\.exe|\\+scrcons\.exe|\\+scriptrunner\.exe|\\+sh\.exe|\\+systeminfo\.exe|\\+whoami\.exe|\\+wmic\.exe|\\+wscript\.exe)$</field>
    </rule>
    <rule id="901478" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_wmp.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)-->
        <!--Date: 2021/08/23-->
        <!--Status: test-->
        <!--ID: 0058b9e5-bcd7-40d4-9205-95ca5a16d7b2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using Windows Media Player - Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\+Program\ Files\\+Windows\ Media\ Player\\+osk\.exe</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
    </rule>
    <rule id="901479" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_wmp.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)-->
        <!--Date: 2021/08/23-->
        <!--Status: test-->
        <!--ID: 0058b9e5-bcd7-40d4-9205-95ca5a16d7b2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using Windows Media Player - Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\+Windows\\+System32\\+cmd\.exe</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)"C:\\+Windows\\+system32\\+mmc\.exe"\ "C:\\+Windows\\+system32\\+eventvwr\.msc"\ /s</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
    </rule>
    <rule id="901480" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_iis_appcmd_susp_module_install.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious IIS native-code module installations via command line-->
        <!--Date: 2019/12/11-->
        <!--Status: test-->
        <!--ID: 9465ddf4-f9e4-4ebd-8d98-702df3a93239-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>IIS Native-Code Module Command Line Installation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+appcmd\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)appcmd\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)install</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)module</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/name:|\-name:</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+inetsrv\\+iissetup\.exe</field>
    </rule>
    <rule id="901481" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dtrace_kernel_dump.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious way to dump the kernel on Windows systems using dtrace.exe, which is available on Windows systems since Windows 10 19H1-->
        <!--Date: 2021/12/28-->
        <!--Status: test-->
        <!--ID: 7124aebe-4cd7-4ccb-8df0-6d6b93c96795-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1082</id>
        </mitre>
        <description>Suspicious Kernel Dump Using Dtrace</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+dtrace\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)lkd\(0\)</field>
    </rule>
    <rule id="901482" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dtrace_kernel_dump.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious way to dump the kernel on Windows systems using dtrace.exe, which is available on Windows systems since Windows 10 19H1-->
        <!--Date: 2021/12/28-->
        <!--Status: test-->
        <!--ID: 7124aebe-4cd7-4ccb-8df0-6d6b93c96795-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1082</id>
        </mitre>
        <description>Suspicious Kernel Dump Using Dtrace</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)syscall:::return</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)lkd\(</field>
    </rule>
    <rule id="901483" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_base64_encoded_cmd.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Markus Neis, Jonhnathan Ribeiro, Daniil Yugoslavskiy, Anton Kutepov, oscd.community-->
        <!--Description: Detects suspicious powershell process starts with base64 encoded commands (e.g. Emotet)-->
        <!--Date: 2018/09/03-->
        <!--Status: test-->
        <!--ID: ca2092a1-c273-4878-9b4b-0d60115bf5ea-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious Encoded PowerShell Command Line</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-e</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ JAB|\ SUVYI|\ SQBFAFgA|\ aQBlAHgA|\ aWV4I|\ IAA|\ IAB|\ UwB|\ cwB</field>
    </rule>
    <rule id="901484" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_base64_encoded_cmd.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Markus Neis, Jonhnathan Ribeiro, Daniil Yugoslavskiy, Anton Kutepov, oscd.community-->
        <!--Description: Detects suspicious powershell process starts with base64 encoded commands (e.g. Emotet)-->
        <!--Date: 2018/09/03-->
        <!--Status: test-->
        <!--ID: ca2092a1-c273-4878-9b4b-0d60115bf5ea-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious Encoded PowerShell Command Line</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-e</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe\ \-ENCOD\ |\ BA\^J\ e\-</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ \-ExecutionPolicy\ remotesigned\ )</field>
    </rule>
    <rule id="901485" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_sysnative.yml</info>
        <!--Sigma Rule Author: Max Altgelt (Nextron Systems)-->
        <!--Description: Detects process creation events that use the Sysnative folder (common for CobaltStrike spawns)-->
        <!--Date: 2022/08/23-->
        <!--Status: test-->
        <!--ID: 3c1b5fb0-c72f-45ba-abd1-4d4c353144ab-->
        <mitre>
            <id>attack.t1055</id>
        </mitre>
        <description>Process Creation Using Sysnative Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)^(?:C:\\+Windows\\+Sysnative\\+)</field>
    </rule>
    <rule id="901486" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_webdav_client_susp_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Florian Roth (Nextron Systems)-->
        <!--Description: Detects "svchost.exe" spawning "rundll32.exe" with command arguments like C:\windows\system32\davclnt.dll,DavSetCookie. This could be an indicator of exfiltration or use of WebDav to launch code (hosted on WebDav Server) or potentially a sign of exploitation of CVE-2023-23397
-->
        <!--Date: 2023/03/16-->
        <!--Status: experimental-->
        <!--ID: 982e9f2d-1a85-4d5b-aea4-31f5e97c6555-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048.003</id>
            <id>cve.2023.23397</id>
        </mitre>
        <description>Suspicious WebDav Client Execution Via Rundll32.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+svchost\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\-s\ WebClient</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)C:\\+windows\\+system32\\+davclnt\.dll,DavSetCookie</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)://\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://10\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://192\.168\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://172\.16\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://172\.17\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://172\.18\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://172\.19\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://172\.20\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://172\.21\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://172\.22\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://172\.23\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://172\.24\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://172\.25\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://172\.26\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://172\.27\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://172\.28\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://172\.29\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://172\.30\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://172\.31\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://127\.</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)://169\.254\.</field>
    </rule>
    <rule id="901487" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_lsa_disable_restricted_admin.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects changes to the "DisableRestrictedAdmin" registry value in order to disable or enable RestrictedAdmin mode.
RestrictedAdmin mode prevents the transmission of reusable credentials to the remote system to which you connect using Remote Desktop.
This prevents your credentials from being harvested during the initial connection process if the remote server has been compromise
-->
        <!--Date: 2023/01/13-->
        <!--Status: test-->
        <!--ID: 28ac00d6-22d9-4a3c-927f-bbd770104573-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>RestrictedAdminMode Registry Value Tampering - ProcCreation</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+System\\+CurrentControlSet\\+Control\\+Lsa\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)DisableRestrictedAdmin</field>
    </rule>
    <rule id="901488" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_snapins_hafnium.yml</info>
        <!--Sigma Rule Author: FPT.EagleEye, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects adding and using Exchange PowerShell snap-ins to export mailbox data. As seen used by HAFNIUM and APT27-->
        <!--Date: 2021/03/03-->
        <!--Status: experimental-->
        <!--ID: 25676e10-2121-446e-80a4-71ff8506af47-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.collection</id>
            <id>attack.t1114</id>
        </mitre>
        <description>Exchange PowerShell Snap-Ins Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Add\-PSSnapin</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Microsoft\.Exchange\.Powershell\.Snapin|Microsoft\.Exchange\.Management\.PowerShell\.SnapIn</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+msiexec\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\$exserver=Get\-ExchangeServer\ \(\[Environment\]::MachineName\)\ \-ErrorVariable\ exerr\ 2&gt;\ \$null</field>
    </rule>
    <rule id="901489" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_stordiag_susp_child_process.yml</info>
        <!--Sigma Rule Author: Austin Songer (@austinsonger)-->
        <!--Description: Detects the use of stordiag.exe to execute schtasks.exe systeminfo.exe and fltmc.exe-->
        <!--Date: 2021/10/21-->
        <!--Status: test-->
        <!--ID: 961e0abb-1b1e-4c84-a453-aafe56ad0d34-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Execution via stordiag.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+stordiag\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+schtasks\.exe|\\+systeminfo\.exe|\\+fltmc\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:c:\\+windows\\+system32\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:c:\\+windows\\+syswow64\\+)</field>
    </rule>
    <rule id="901490" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_eventlog_content_recon.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects execution of different log query utilities to search and dump the content of specific event logs or look for specific event IDs.
-->
        <!--Date: 2022/09/09-->
        <!--Status: experimental-->
        <!--ID: beaa66d6-aa1b-4e3c-80f5-e0145369bfaf-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.discovery</id>
            <id>attack.t1552</id>
        </mitre>
        <description>Potentially Suspicious EventLog Recon Activity Using Log Query Utilities</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Microsoft\-Windows\-TerminalServices\-LocalSessionManager/Operational|Microsoft\-Windows\-Terminal\-Services\-RemoteConnectionManager/Operational|Security</field>
    </rule>
    <rule id="901491" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_eventlog_content_recon.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects execution of different log query utilities to search and dump the content of specific event logs or look for specific event IDs.
-->
        <!--Date: 2022/09/09-->
        <!--Status: experimental-->
        <!--ID: beaa66d6-aa1b-4e3c-80f5-e0145369bfaf-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.discovery</id>
            <id>attack.t1552</id>
        </mitre>
        <description>Potentially Suspicious EventLog Recon Activity Using Log Query Utilities</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-InstanceId\ 4624|System\[EventID=4624\]|EventCode=.4624.|EventIdentifier=.4624.|\-InstanceId\ 4778|System\[EventID=4778\]|EventCode=.4778.|EventIdentifier=.4778.|\-InstanceId\ 25|System\[EventID=25\]|EventCode=.25.|EventIdentifier=.25.</field>
    </rule>
    <rule id="901492" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_eventlog_content_recon.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects execution of different log query utilities to search and dump the content of specific event logs or look for specific event IDs.
-->
        <!--Date: 2022/09/09-->
        <!--Status: experimental-->
        <!--ID: beaa66d6-aa1b-4e3c-80f5-e0145369bfaf-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.discovery</id>
            <id>attack.t1552</id>
        </mitre>
        <description>Potentially Suspicious EventLog Recon Activity Using Log Query Utilities</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Select</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Win32_NTLogEvent</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wevtutil\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)wevtutil\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ qe\ |\ query\-events\ )</field>
    </rule>
    <rule id="901493" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_eventlog_content_recon.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects execution of different log query utilities to search and dump the content of specific event logs or look for specific event IDs.
-->
        <!--Date: 2022/09/09-->
        <!--Status: experimental-->
        <!--ID: beaa66d6-aa1b-4e3c-80f5-e0145369bfaf-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.discovery</id>
            <id>attack.t1552</id>
        </mitre>
        <description>Potentially Suspicious EventLog Recon Activity Using Log Query Utilities</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Select</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Win32_NTLogEvent</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wevtutil\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)wevtutil\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ qe\ |\ query\-events\ )</field>
    </rule>
    <rule id="901494" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_eventlog_content_recon.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects execution of different log query utilities to search and dump the content of specific event logs or look for specific event IDs.
-->
        <!--Date: 2022/09/09-->
        <!--Status: experimental-->
        <!--ID: beaa66d6-aa1b-4e3c-80f5-e0145369bfaf-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.discovery</id>
            <id>attack.t1552</id>
        </mitre>
        <description>Potentially Suspicious EventLog Recon Activity Using Log Query Utilities</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Select</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Win32_NTLogEvent</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wevtutil\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)wevtutil\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wevtutil\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)wevtutil\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ ntevent</field>
    </rule>
    <rule id="901495" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_eventlog_content_recon.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects execution of different log query utilities to search and dump the content of specific event logs or look for specific event IDs.
-->
        <!--Date: 2022/09/09-->
        <!--Status: experimental-->
        <!--ID: beaa66d6-aa1b-4e3c-80f5-e0145369bfaf-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.discovery</id>
            <id>attack.t1552</id>
        </mitre>
        <description>Potentially Suspicious EventLog Recon Activity Using Log Query Utilities</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Select</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Win32_NTLogEvent</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wevtutil\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)wevtutil\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wevtutil\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)wevtutil\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:Get\-WinEvent\ |get\-eventlog\ )</field>
    </rule>
    <rule id="901496" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_agentexecutor_susp_usage.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), memory-shards-->
        <!--Description: Detects execution of the AgentExecutor.exe binary. Which can be abused as a LOLBIN to execute powershell scripts with the ExecutionPolicy "Bypass" or any binary named "powershell.exe" located in the path provided by 6th positional argument-->
        <!--Date: 2022/12/24-->
        <!--Status: test-->
        <!--ID: c0b40568-b1e9-4b03-8d6c-b096da6da9ab-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Suspicious AgentExecutor PowerShell Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+AgentExecutor\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)AgentExecutor\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-powershell|\ \-remediationScript</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+Windows\\+SysWOW64\\+WindowsPowerShell\\+v1\.0\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+WindowsPowerShell\\+v1\.0\\+</field>
    </rule>
    <rule id="901497" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_netsh_port_forwarding.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), omkar72, oscd.community, Swachchhanda Shrawan Poudel-->
        <!--Description: Detects the execution of netsh commands that configure a new port forwarding (PortProxy) rule-->
        <!--Date: 2019/01/29-->
        <!--Status: test-->
        <!--ID: 322ed9ec-fcab-4f67-9a34-e7c6aef43614-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.defense_evasion</id>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>New Port Forwarding Rule Added Via Netsh.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+netsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)netsh\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)interface</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)portproxy</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)add</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)v4tov4</field>
    </rule>
    <rule id="901498" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_netsh_port_forwarding.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), omkar72, oscd.community, Swachchhanda Shrawan Poudel-->
        <!--Description: Detects the execution of netsh commands that configure a new port forwarding (PortProxy) rule-->
        <!--Date: 2019/01/29-->
        <!--Status: test-->
        <!--ID: 322ed9ec-fcab-4f67-9a34-e7c6aef43614-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.defense_evasion</id>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>New Port Forwarding Rule Added Via Netsh.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+netsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)netsh\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:i\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:p\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:a\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:v\ )</field>
    </rule>
    <rule id="901499" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_netsh_port_forwarding.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), omkar72, oscd.community, Swachchhanda Shrawan Poudel-->
        <!--Description: Detects the execution of netsh commands that configure a new port forwarding (PortProxy) rule-->
        <!--Date: 2019/01/29-->
        <!--Status: test-->
        <!--ID: 322ed9ec-fcab-4f67-9a34-e7c6aef43614-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.defense_evasion</id>
            <id>attack.command_and_control</id>
            <id>attack.t1090</id>
        </mitre>
        <description>New Port Forwarding Rule Added Via Netsh.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+netsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)netsh\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)connectp</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)listena</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)c=</field>
    </rule>
    <rule id="901500" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_icmluautil.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using ICMLuaUtil Elevated COM interface-->
        <!--Date: 2022/09/13-->
        <!--Status: test-->
        <!--ID: 49f2f17b-b4c8-4172-a68b-d5bf95d05130-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass via ICMLuaUtil</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+dllhost\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)/Processid:\{3E5FC7F9\-9A51\-4367\-9063\-A120244FBEC7\}|/Processid:\{D2E7041B\-2927\-42FB\-8E9F\-7CE93B6DC937\}</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WerFault\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="yes" type="pcre2">(?i)WerFault\.exe</field>
    </rule>
    <rule id="901501" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_susp_sqldumper_activity.yml</info>
        <!--Sigma Rule Author: Kirill Kiryanov, oscd.community-->
        <!--Description: Detects process dump via legitimate sqldumper.exe binary-->
        <!--Date: 2020/10/08-->
        <!--Status: test-->
        <!--ID: 23ceaf5c-b6f1-4a32-8559-f2ff734be516-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Dumping Process via Sqldumper.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+sqldumper\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)0x0110|0x01100:40</field>
    </rule>
    <rule id="901502" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mftrace_child_process.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects child processes of the "Trace log generation tool for Media Foundation Tools" (Mftrace.exe) which can abused to execute arbitrary binaries.-->
        <!--Date: 2022/06/09-->
        <!--Status: experimental-->
        <!--ID: 3d48c9d3-1aa6-418d-98d3-8fd3c01a564e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1127</id>
        </mitre>
        <description>Potential Mftrace.EXE Abuse</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+mftrace\.exe)$</field>
    </rule>
    <rule id="901503" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_secedit_execution.yml</info>
        <!--Sigma Rule Author: Janantha Marasinghe-->
        <!--Description: Detects potential suspicious behaviour using secedit.exe. Such as exporting or modifying the security policy-->
        <!--Date: 2022/11/18-->
        <!--Status: test-->
        <!--ID: c2c76b77-32be-4d1f-82c9-7e544bdfe0eb-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.credential_access</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1562.002</id>
            <id>attack.t1547.001</id>
            <id>attack.t1505.005</id>
            <id>attack.t1556.002</id>
            <id>attack.t1562</id>
            <id>attack.t1574.007</id>
            <id>attack.t1564.002</id>
            <id>attack.t1546.008</id>
            <id>attack.t1546.007</id>
            <id>attack.t1547.014</id>
            <id>attack.t1547.010</id>
            <id>attack.t1547.002</id>
            <id>attack.t1557</id>
            <id>attack.t1082</id>
        </mitre>
        <description>Potential Suspicious Activity Using SeCEdit</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+secedit\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)SeCEdit</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/export</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/cfg</field>
    </rule>
    <rule id="901504" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_secedit_execution.yml</info>
        <!--Sigma Rule Author: Janantha Marasinghe-->
        <!--Description: Detects potential suspicious behaviour using secedit.exe. Such as exporting or modifying the security policy-->
        <!--Date: 2022/11/18-->
        <!--Status: test-->
        <!--ID: c2c76b77-32be-4d1f-82c9-7e544bdfe0eb-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.credential_access</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1562.002</id>
            <id>attack.t1547.001</id>
            <id>attack.t1505.005</id>
            <id>attack.t1556.002</id>
            <id>attack.t1562</id>
            <id>attack.t1574.007</id>
            <id>attack.t1564.002</id>
            <id>attack.t1546.008</id>
            <id>attack.t1546.007</id>
            <id>attack.t1547.014</id>
            <id>attack.t1547.010</id>
            <id>attack.t1547.002</id>
            <id>attack.t1557</id>
            <id>attack.t1082</id>
        </mitre>
        <description>Potential Suspicious Activity Using SeCEdit</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+secedit\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)SeCEdit</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/configure</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/db</field>
    </rule>
    <rule id="901505" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_crassus.yml</info>
        <!--Sigma Rule Author: pH-T (Nextron Systems)-->
        <!--Description: Detects Crassus, a Windows privilege escalation discovery tool, based on PE metadata characteristics.-->
        <!--Date: 2023/04/17-->
        <!--Status: experimental-->
        <!--ID: 2c32b543-1058-4808-91c6-5b31b8bed6c5-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1590.001</id>
        </mitre>
        <description>PUA - Crassus Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Crassus\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Crassus\.exe</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Crassus</field>
    </rule>
    <rule id="901506" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_run_locations.yml</info>
        <!--Sigma Rule Author: juju4, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects suspicious process run from unusual locations-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 15b75071-74cc-47e0-b4c6-b43744a62a2b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>car.2013-05-002</id>
        </mitre>
        <description>Suspicious Process Start Locations</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i):\\+RECYCLER\\+|:\\+SystemVolumeInformation\\+</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)^(?:C:\\+Windows\\+Tasks\\+|C:\\+Windows\\+debug\\+|C:\\+Windows\\+fonts\\+|C:\\+Windows\\+help\\+|C:\\+Windows\\+drivers\\+|C:\\+Windows\\+addins\\+|C:\\+Windows\\+cursors\\+|C:\\+Windows\\+system32\\+tasks\\+)</field>
    </rule>
    <rule id="901507" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_workflow_compiler.yml</info>
        <!--Sigma Rule Author: Nik Seetharaman, frack113-->
        <!--Description: Detects invocation of Microsoft Workflow Compiler, which may permit the execution of arbitrary unsigned code.-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 419dbf2b-8a9b-4bea-bf99-7544b050ec8d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1127</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Microsoft Workflow Compiler Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Microsoft\.Workflow\.Compiler\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Microsoft\.Workflow\.Compiler\.exe</field>
    </rule>
    <rule id="901508" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_shutdown_logoff.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the rare use of the command line tool shutdown to logoff a user-->
        <!--Date: 2022/10/01-->
        <!--Status: test-->
        <!--ID: ec290c06-9b6b-4338-8b6b-095c0f284f10-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1529</id>
        </mitre>
        <description>Suspicious Execution of Shutdown to Log Out</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+shutdown\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/l</field>
    </rule>
    <rule id="901509" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_manage_bde.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potential abuse of the "manage-bde.wsf" script as a LOLBIN to proxy execution-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: c363385c-f75d-4753-a108-c1a8e28bdbda-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>Potential Manage-bde.wsf Abuse To Proxy Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wscript\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)wscript\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)manage\-bde\.wsf</field>
    </rule>
    <rule id="901510" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_manage_bde.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potential abuse of the "manage-bde.wsf" script as a LOLBIN to proxy execution-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: c363385c-f75d-4753-a108-c1a8e28bdbda-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>Potential Manage-bde.wsf Abuse To Proxy Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+cscript\.exe|\\+wscript\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)manage\-bde\.wsf</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
    </rule>
    <rule id="901511" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysinternals_susp_psexec_paexec_flags.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges-->
        <!--Date: 2021/05/22-->
        <!--Status: experimental-->
        <!--ID: 207b0396-3689-42d9-8399-4222658efc99-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1587.001</id>
        </mitre>
        <description>Potential Privilege Escalation To LOCAL SYSTEM</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-s\ cmd|\ /s\ cmd|\ \-s\ \-i\ cmd|\ /s\ /i\ cmd|\ /s\ \-i\ cmd|\ \-s\ /i\ cmd|\ \-i\ \-s\ cmd|\ /i\ /s\ cmd|\ \-i\ /s\ cmd|\ /i\ \-s\ cmd|\ \-s\ pwsh|\ /s\ pwsh|\ \-s\ \-i\ pwsh|\ /s\ /i\ pwsh|\ /s\ \-i\ pwsh|\ \-s\ /i\ pwsh|\ \-i\ \-s\ pwsh|\ /i\ /s\ pwsh|\ \-i\ /s\ pwsh|\ /i\ \-s\ pwsh|\ \-s\ powershell|\ /s\ powershell|\ \-s\ \-i\ powershell|\ /s\ /i\ powershell|\ /s\ \-i\ powershell|\ \-s\ /i\ powershell|\ \-i\ \-s\ powershell|\ /i\ /s\ powershell|\ \-i\ /s\ powershell|\ /i\ \-s\ powershell</field>
    </rule>
    <rule id="901512" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysinternals_susp_psexec_paexec_flags.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects unknown program using commandline flags usually used by tools such as PsExec and PAExec to start programs with SYSTEM Privileges-->
        <!--Date: 2021/05/22-->
        <!--Status: experimental-->
        <!--ID: 207b0396-3689-42d9-8399-4222658efc99-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1587.001</id>
        </mitre>
        <description>Potential Privilege Escalation To LOCAL SYSTEM</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)paexec</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)PsExec</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)accepteula</field>
    </rule>
    <rule id="901513" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_zip_compress.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), frack113-->
        <!--Description: Detects PowerShell scripts that make use of the "Compress-Archive" Cmdlet in order to compress folders and files where the output is stored in a potentially suspicious location that is used often by malware for exfiltration.
An adversary might compress data (e.g., sensitive documents) that is collected prior to exfiltration in order to make it portable and minimize the amount of data sent over the network.
-->
        <!--Date: 2021/07/20-->
        <!--Status: test-->
        <!--ID: 85a8e5ba-bd03-4bfb-bbfa-a4409a8f8b98-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1074.001</id>
        </mitre>
        <description>Folder Compress To Potentially Suspicious Output Via Compress-Archive Cmdlet</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Compress\-Archive\ \-Path.+\-DestinationPath\ \$env:TEMP|Compress\-Archive\ \-Path.+\-DestinationPath.+\\+AppData\\+Local\\+Temp\\+|Compress\-Archive\ \-Path.+\-DestinationPath.+:\\+Windows\\+Temp\\+</field>
    </rule>
    <rule id="901514" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_nircmd_as_system.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the use of NirCmd tool for command execution as SYSTEM user-->
        <!--Date: 2022/01/24-->
        <!--Status: test-->
        <!--ID: d9047477-0359-48c9-b8c7-792cedcdc9c4-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>PUA - NirCmd Execution As LOCAL SYSTEM</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ runassystem\ )</field>
    </rule>
    <rule id="901515" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_advancedrun.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the execution of AdvancedRun utility-->
        <!--Date: 2022/01/20-->
        <!--Status: experimental-->
        <!--ID: d2b749ee-4225-417e-b20e-a8d2193cbb84-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1564.003</id>
            <id>attack.t1134.002</id>
            <id>attack.t1059.003</id>
        </mitre>
        <description>PUA - AdvancedRun Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)AdvancedRun\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /EXEFilename\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /Run</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /WindowState\ 0</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /RunAs\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /CommandLine\ )</field>
    </rule>
    <rule id="901516" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_add_run_key.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious command line reg.exe tool adding key to RUN key in Registry-->
        <!--Date: 2021/06/28-->
        <!--Status: test-->
        <!--ID: de587dce-915e-4218-aac4-835ca6af6f70-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Potential Persistence Attempt Via Run Keys Using Reg.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)reg</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ ADD\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Software\\+Microsoft\\+Windows\\+CurrentVersion\\+Run</field>
    </rule>
    <rule id="901517" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_encoding_patterns.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton-->
        <!--Description: Detects specific combinations of encoding methods in PowerShell via the commandline-->
        <!--Date: 2020/10/11-->
        <!--Status: test-->
        <!--ID: cdf05894-89e7-4ead-b2b0-0a5f97a90f2f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Potential Encoded PowerShell Patterns In CommandLine</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ToInt|ToDecimal|ToByte|ToUint|ToSingle|ToSByte</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ToChar|ToString|String</field>
    </rule>
    <rule id="901518" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_encoding_patterns.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton-->
        <!--Description: Detects specific combinations of encoding methods in PowerShell via the commandline-->
        <!--Date: 2020/10/11-->
        <!--Status: test-->
        <!--ID: cdf05894-89e7-4ead-b2b0-0a5f97a90f2f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Potential Encoded PowerShell Patterns In CommandLine</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ToInt|ToDecimal|ToByte|ToUint|ToSingle|ToSByte</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)char</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)join</field>
    </rule>
    <rule id="901519" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_encoding_patterns.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov (idea), Vasiliy Burov (rule), oscd.community, Tim Shelton-->
        <!--Description: Detects specific combinations of encoding methods in PowerShell via the commandline-->
        <!--Date: 2020/10/11-->
        <!--Status: test-->
        <!--ID: cdf05894-89e7-4ead-b2b0-0a5f97a90f2f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Potential Encoded PowerShell Patterns In CommandLine</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ToInt|ToDecimal|ToByte|ToUint|ToSingle|ToSByte</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)split</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)join</field>
    </rule>
    <rule id="901520" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mssql_sqlps_susp_execution.yml</info>
        <!--Sigma Rule Author: Agro (@agro_sev) oscd.community-->
        <!--Description: This rule detects execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.
Script blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.
-->
        <!--Date: 2020/10/10-->
        <!--Status: test-->
        <!--ID: 0152550d-3a26-4efd-9f0e-54a0b28ae2f3-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1127</id>
        </mitre>
        <description>Detection of PowerShell Execution via Sqlps.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+sqlps\.exe)$</field>
    </rule>
    <rule id="901521" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mssql_sqlps_susp_execution.yml</info>
        <!--Sigma Rule Author: Agro (@agro_sev) oscd.community-->
        <!--Description: This rule detects execution of a PowerShell code through the sqlps.exe utility, which is included in the standard set of utilities supplied with the MSSQL Server.
Script blocks are not logged in this case, so this utility helps to bypass protection mechanisms based on the analysis of these logs.
-->
        <!--Date: 2020/10/10-->
        <!--Status: test-->
        <!--ID: 0152550d-3a26-4efd-9f0e-54a0b28ae2f3-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1127</id>
        </mitre>
        <description>Detection of PowerShell Execution via Sqlps.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+sqlps\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)sqlps\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+sqlagent\.exe)$</field>
    </rule>
    <rule id="901522" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_winpwn.yml</info>
        <!--Sigma Rule Author: Swachchhanda Shrawan Poudel-->
        <!--Description: Detects commandline keywords indicative of potential usge of the tool WinPwn. A tool for Windows and Active Directory reconnaissance and exploitation.
-->
        <!--Date: 2023/12/04-->
        <!--Status: experimental-->
        <!--ID: d557dc06-62e8-4468-a8e8-7984124908ce-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.defense_evasion</id>
            <id>attack.discovery</id>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1046</id>
            <id>attack.t1082</id>
            <id>attack.t1106</id>
            <id>attack.t1518</id>
            <id>attack.t1548.002</id>
            <id>attack.t1552.001</id>
            <id>attack.t1555</id>
            <id>attack.t1555.003</id>
        </mitre>
        <description>HackTool - WinPwn Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Offline_Winpwn|WinPwn\ |WinPwn\.exe|WinPwn\.ps1</field>
    </rule>
    <rule id="901523" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_private_keys_recon.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Adversaries may search for private key certificate files on compromised systems for insecurely stored credential-->
        <!--Date: 2021/07/20-->
        <!--Status: test-->
        <!--ID: 213d6a77-3d55-4ce8-ba74-fcfef741974e-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.004</id>
        </mitre>
        <description>Private Keys Reconnaissance Via CommandLine Tools</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.key|\.pgp|\.gpg|\.ppk|\.p12|\.pem|\.pfx|\.cer|\.p7b|\.asc</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Cmd\.Exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:dir\ )</field>
    </rule>
    <rule id="901524" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_private_keys_recon.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Adversaries may search for private key certificate files on compromised systems for insecurely stored credential-->
        <!--Date: 2021/07/20-->
        <!--Status: test-->
        <!--ID: 213d6a77-3d55-4ce8-ba74-fcfef741974e-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.004</id>
        </mitre>
        <description>Private Keys Reconnaissance Via CommandLine Tools</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.key|\.pgp|\.gpg|\.ppk|\.p12|\.pem|\.pfx|\.cer|\.p7b|\.asc</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Cmd\.Exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:Get\-ChildItem\ )</field>
    </rule>
    <rule id="901525" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_private_keys_recon.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Adversaries may search for private key certificate files on compromised systems for insecurely stored credential-->
        <!--Date: 2021/07/20-->
        <!--Status: test-->
        <!--ID: 213d6a77-3d55-4ce8-ba74-fcfef741974e-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.004</id>
        </mitre>
        <description>Private Keys Reconnaissance Via CommandLine Tools</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.key|\.pgp|\.gpg|\.ppk|\.p12|\.pem|\.pfx|\.cer|\.p7b|\.asc</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Cmd\.Exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+findstr\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)FINDSTR\.EXE</field>
    </rule>
    <rule id="901526" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sdiagnhost_susp_child.yml</info>
        <!--Sigma Rule Author: Nextron Systems-->
        <!--Description: Detects sdiagnhost.exe calling a suspicious child process (e.g. used in exploits for Follina / CVE-2022-30190)-->
        <!--Date: 2022/06/01-->
        <!--Status: test-->
        <!--ID: f3d39c45-de1a-4486-a687-ab126124f744-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Sdiagnhost Calling Suspicious Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+sdiagnhost\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe|\\+cmd\.exe|\\+mshta\.exe|\\+cscript\.exe|\\+wscript\.exe|\\+taskkill\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+calc\.exe)$</field>
    </rule>
    <rule id="901527" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mpcmdrun_dll_sideload_defender.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects potential sideloading of "mpclient.dll" by Windows Defender processes ("MpCmdRun" and "NisSrv") from their non-default directory.-->
        <!--Date: 2022/08/01-->
        <!--Status: experimental-->
        <!--ID: 7002aa10-b8d4-47ae-b5ba-51ab07e228b9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>Potential Mpclient.DLL Sideloading Via Defender Binaries</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+MpCmdRun\.exe|\\+NisSrv\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Windows\ Defender\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Microsoft\ Security\ Client\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Windows\ Defender\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+ProgramData\\+Microsoft\\+Windows\ Defender\\+Platform\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+WinSxS\\+)</field>
    </rule>
    <rule id="901528" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_invoke_obfuscation_via_compress.yml</info>
        <!--Sigma Rule Author: Timur Zinniatullin, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via COMPRESS OBFUSCATION-->
        <!--Date: 2020/10/18-->
        <!--Status: test-->
        <!--ID: 7eedcc9d-9fdb-4d94-9c54-474e8affc0c7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation COMPRESS OBFUSCATION</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)new\-object</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)text\.encoding\]::ascii</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)system\.io\.compression\.deflatestream|system\.io\.streamreader|readtoend\(</field>
    </rule>
    <rule id="901529" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Markus Neis, FPT.EagleEye Team, Vadim Khrykov, Cyb3rEng, Michael Haag, Christopher Peacock @securepeacock, @scythe_io-->
        <!--Description: Detects a suspicious process spawning from one of the Microsoft Office suite products (Word, Excel, PowerPoint, Publisher, Visio, etc.)-->
        <!--Date: 2018/04/06-->
        <!--Status: test-->
        <!--ID: 438025f9-5856-4663-83f7-52f878a70a50-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1047</id>
            <id>attack.t1204.002</id>
            <id>attack.t1218.010</id>
        </mitre>
        <description>Suspicious Microsoft Office Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+EQNEDT32\.EXE|\\+EXCEL\.EXE|\\+MSACCESS\.EXE|\\+MSPUB\.exe|\\+ONENOTE\.EXE|\\+POWERPNT\.exe|\\+VISIO\.exe|\\+WINWORD\.EXE|\\+wordpad\.exe|\\+wordview\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)bitsadmin\.exe|CertOC\.exe|CertUtil\.exe|Cmd\.Exe|CMSTP\.EXE|cscript\.exe|curl\.exe|HH\.exe|IEExec\.exe|InstallUtil\.exe|javaw\.exe|Microsoft\.Workflow\.Compiler\.exe|msdt\.exe|MSHTA\.EXE|msiexec\.exe|Msxsl\.exe|odbcconf\.exe|pcalua\.exe|PowerShell\.EXE|RegAsm\.exe|RegSvcs\.exe|REGSVR32\.exe|RUNDLL32\.exe|schtasks\.exe|ScriptRunner\.exe|wmic\.exe|WorkFolders\.exe|wscript\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+AppVLP\.exe|\\+bash\.exe|\\+bitsadmin\.exe|\\+certoc\.exe|\\+certutil\.exe|\\+cmd\.exe|\\+cmstp\.exe|\\+control\.exe|\\+cscript\.exe|\\+curl\.exe|\\+forfiles\.exe|\\+hh\.exe|\\+ieexec\.exe|\\+installutil\.exe|\\+javaw\.exe|\\+mftrace\.exe|\\+Microsoft\.Workflow\.Compiler\.exe|\\+msbuild\.exe|\\+msdt\.exe|\\+mshta\.exe|\\+msidb\.exe|\\+msiexec\.exe|\\+msxsl\.exe|\\+odbcconf\.exe|\\+pcalua\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+regasm\.exe|\\+regsvcs\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+schtasks\.exe|\\+scrcons\.exe|\\+scriptrunner\.exe|\\+sh\.exe|\\+svchost\.exe|\\+verclsid\.exe|\\+wmic\.exe|\\+workfolders\.exe|\\+wscript\.exe)$</field>
    </rule>
    <rule id="901530" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Markus Neis, FPT.EagleEye Team, Vadim Khrykov, Cyb3rEng, Michael Haag, Christopher Peacock @securepeacock, @scythe_io-->
        <!--Description: Detects a suspicious process spawning from one of the Microsoft Office suite products (Word, Excel, PowerPoint, Publisher, Visio, etc.)-->
        <!--Date: 2018/04/06-->
        <!--Status: test-->
        <!--ID: 438025f9-5856-4663-83f7-52f878a70a50-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1047</id>
            <id>attack.t1204.002</id>
            <id>attack.t1218.010</id>
        </mitre>
        <description>Suspicious Microsoft Office Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+EQNEDT32\.EXE|\\+EXCEL\.EXE|\\+MSACCESS\.EXE|\\+MSPUB\.exe|\\+ONENOTE\.EXE|\\+POWERPNT\.exe|\\+VISIO\.exe|\\+WINWORD\.EXE|\\+wordpad\.exe|\\+wordview\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+AppData\\+|\\+Users\\+Public\\+|\\+ProgramData\\+|\\+Windows\\+Tasks\\+|\\+Windows\\+Temp\\+|\\+Windows\\+System32\\+Tasks\\+</field>
    </rule>
    <rule id="901531" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_browsercore.yml</info>
        <!--Sigma Rule Author: Max Altgelt (Nextron Systems)-->
        <!--Description: Detects process creation with a renamed BrowserCore.exe (used to extract Azure tokens)-->
        <!--Date: 2022/06/02-->
        <!--Status: test-->
        <!--ID: 8a4519e8-e64a-40b6-ae85-ba8ad2177559-->
        <mitre>
            <id>attack.t1528</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Renamed BrowserCore.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)BrowserCore\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+BrowserCore\.exe)$</field>
    </rule>
    <rule id="901532" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_invoke_obfuscation_via_stdin.yml</info>
        <!--Sigma Rule Author: Nikita Nazarov, oscd.community-->
        <!--Description: Detects Obfuscated Powershell via Stdin in Scripts-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: 9c14c9fa-1a63-4a64-8e57-d19280559490-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Via Stdin</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)set</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\&amp;\&amp;</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)environment|invoke|input</field>
    </rule>
    <rule id="901533" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_spoolsv_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Justin C. (@endisphotic), @dreadphones (detection), Thomas Patzke (Sigma rule)-->
        <!--Description: Detects suspicious print spool service (spoolsv.exe) child processes.-->
        <!--Date: 2021/07/11-->
        <!--Status: test-->
        <!--ID: dcdbc940-0bff-46b2-95f3-2d73f848e33b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1203</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1068</id>
        </mitre>
        <description>Suspicious Spool Service Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+spoolsv\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)System</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+gpupdate\.exe|\\+whoami\.exe|\\+nltest\.exe|\\+taskkill\.exe|\\+wmic\.exe|\\+taskmgr\.exe|\\+sc\.exe|\\+findstr\.exe|\\+curl\.exe|\\+wget\.exe|\\+certutil\.exe|\\+bitsadmin\.exe|\\+accesschk\.exe|\\+wevtutil\.exe|\\+bcdedit\.exe|\\+fsutil\.exe|\\+cipher\.exe|\\+schtasks\.exe|\\+write\.exe|\\+wuauclt\.exe|\\+systeminfo\.exe|\\+reg\.exe|\\+query\.exe)$</field>
    </rule>
    <rule id="901534" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_spoolsv_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Justin C. (@endisphotic), @dreadphones (detection), Thomas Patzke (Sigma rule)-->
        <!--Description: Detects suspicious print spool service (spoolsv.exe) child processes.-->
        <!--Date: 2021/07/11-->
        <!--Status: test-->
        <!--ID: dcdbc940-0bff-46b2-95f3-2d73f848e33b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1203</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1068</id>
        </mitre>
        <description>Suspicious Spool Service Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+spoolsv\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)System</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+net\.exe|\\+net1\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)start</field>
    </rule>
    <rule id="901535" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_spoolsv_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Justin C. (@endisphotic), @dreadphones (detection), Thomas Patzke (Sigma rule)-->
        <!--Description: Detects suspicious print spool service (spoolsv.exe) child processes.-->
        <!--Date: 2021/07/11-->
        <!--Status: test-->
        <!--ID: dcdbc940-0bff-46b2-95f3-2d73f848e33b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1203</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1068</id>
        </mitre>
        <description>Suspicious Spool Service Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+spoolsv\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)System</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+net\.exe|\\+net1\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.spl</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)route\ add</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)program\ files</field>
    </rule>
    <rule id="901536" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_spoolsv_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Justin C. (@endisphotic), @dreadphones (detection), Thomas Patzke (Sigma rule)-->
        <!--Description: Detects suspicious print spool service (spoolsv.exe) child processes.-->
        <!--Date: 2021/07/11-->
        <!--Status: test-->
        <!--ID: dcdbc940-0bff-46b2-95f3-2d73f848e33b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1203</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1068</id>
        </mitre>
        <description>Suspicious Spool Service Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+spoolsv\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)System</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+net\.exe|\\+net1\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+netsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)add\ portopening</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)rule\ name</field>
    </rule>
    <rule id="901537" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_spoolsv_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Justin C. (@endisphotic), @dreadphones (detection), Thomas Patzke (Sigma rule)-->
        <!--Description: Detects suspicious print spool service (spoolsv.exe) child processes.-->
        <!--Date: 2021/07/11-->
        <!--Status: test-->
        <!--ID: dcdbc940-0bff-46b2-95f3-2d73f848e33b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1203</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1068</id>
        </mitre>
        <description>Suspicious Spool Service Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+spoolsv\.exe)$</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)System</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+net\.exe|\\+net1\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+netsh\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+powershell\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+pwsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.spl</field>
    </rule>
    <rule id="901538" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_sysinternals_debugview.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious renamed SysInternals DebugView execution-->
        <!--Date: 2020/05/28-->
        <!--Status: test-->
        <!--ID: cd764533-2e07-40d6-a718-cfeec7f2da7f-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1588.002</id>
        </mitre>
        <description>Renamed SysInternals DebugView Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)Sysinternals\ DebugView</field>
        <field name="win.eventdata.originalFileName" negate="yes" type="pcre2">(?i)Dbgview\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Dbgview\.exe)$</field>
    </rule>
    <rule id="901539" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_tscon_localsystem.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a tscon.exe start as LOCAL SYSTEM-->
        <!--Date: 2018/03/17-->
        <!--Status: test-->
        <!--ID: 9847f263-4a81-424f-970c-875dab15b79b-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Suspicious TSCON Start as SYSTEM</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)AUTHORI|AUTORI</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+tscon\.exe)$</field>
    </rule>
    <rule id="901540" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_c3_rundll32_pattern.yml</info>
        <!--Sigma Rule Author: Alfie Champion (ajpc500)-->
        <!--Description: F-Secure C3 produces DLLs with a default exported StartNodeRelay function.-->
        <!--Date: 2021/06/02-->
        <!--Status: test-->
        <!--ID: b18c9d4c-fac9-4708-bd06-dd5bfacf200f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>HackTool - F-Secure C3 Load by Rundll32</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)StartNodeRelay</field>
    </rule>
    <rule id="901541" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_extexport.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Extexport.exe loads dll and is execute from other folder the original path-->
        <!--Date: 2021/11/26-->
        <!--Status: test-->
        <!--ID: fb0b815b-f5f6-4f50-970f-ffe21f253f7a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Suspicious Extexport Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Extexport\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Extexport\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)extexport\.exe</field>
    </rule>
    <rule id="901542" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_relay_attacks_tools.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects different hacktools used for relay attacks on Windows for privilege escalation-->
        <!--Date: 2021/07/24-->
        <!--Status: test-->
        <!--ID: 5589ab4f-a767-433c-961d-c91f3f704db1-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1557.001</id>
        </mitre>
        <description>Potential SMB Relay Attack Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)PetitPotam|RottenPotato|HotPotato|JuicyPotato|\\+just_dce_|Juicy\ Potato|\\+temp\\+rot\.exe|\\+Potato\.exe|\\+SpoolSample\.exe|\\+Responder\.exe|\\+smbrelayx|\\+ntlmrelayx|\\+LocalPotato</field>
    </rule>
    <rule id="901543" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_relay_attacks_tools.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects different hacktools used for relay attacks on Windows for privilege escalation-->
        <!--Date: 2021/07/24-->
        <!--Status: test-->
        <!--ID: 5589ab4f-a767-433c-961d-c91f3f704db1-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1557.001</id>
        </mitre>
        <description>Potential SMB Relay Attack Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:Invoke\-Tater|\ smbrelay|\ ntlmrelay|cme\ smb\ |\ /ntlm:NTLMhash\ |Invoke\-PetitPotam|\.exe\ \-t\ .+\ \-p\ )</field>
    </rule>
    <rule id="901544" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_relay_attacks_tools.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects different hacktools used for relay attacks on Windows for privilege escalation-->
        <!--Date: 2021/07/24-->
        <!--Status: test-->
        <!--ID: 5589ab4f-a767-433c-961d-c91f3f704db1-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1557.001</id>
        </mitre>
        <description>Potential SMB Relay Attack Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.exe\ \-c\ "\{</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\}"\ \-z)$</field>
    </rule>
    <rule id="901545" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_relay_attacks_tools.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects different hacktools used for relay attacks on Windows for privilege escalation-->
        <!--Date: 2021/07/24-->
        <!--Status: test-->
        <!--ID: 5589ab4f-a767-433c-961d-c91f3f704db1-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1557.001</id>
        </mitre>
        <description>Potential SMB Relay Attack Tool Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)HotPotatoes6</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)HotPotatoes7</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:HotPotatoes\ )</field>
    </rule>
    <rule id="901546" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_bitlocker.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects suspicious addition to BitLocker related registry keys via the reg.exe utility-->
        <!--Date: 2021/11/15-->
        <!--Status: test-->
        <!--ID: 0e0255bf-2548-47b8-9582-c0955c9283f5-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1486</id>
        </mitre>
        <description>Suspicious Reg Add BitLocker</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)REG</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ADD</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Policies\\+Microsoft\\+FVE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/v</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/f</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)EnableBDEWithNoTPM|UseAdvancedStartup|UseTPM|UseTPMKey|UseTPMKeyPIN|RecoveryKeyMessageSource|UseTPMPIN|RecoveryKeyMessage</field>
    </rule>
    <rule id="901547" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_screensaver.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may establish persistence by executing malicious content triggered by user inactivity.
Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension
-->
        <!--Date: 2021/08/19-->
        <!--Status: test-->
        <!--ID: 0fc35fc3-efe6-4898-8a37-0b233339524f-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.002</id>
        </mitre>
        <description>Suspicious ScreenSave Change by Reg.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKEY_CURRENT_USER\\+Control\ Panel\\+Desktop|HKCU\\+Control\ Panel\\+Desktop</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/v\ ScreenSaveActive</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/t\ REG_SZ</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/d\ 1</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/f</field>
    </rule>
    <rule id="901548" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_screensaver.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may establish persistence by executing malicious content triggered by user inactivity.
Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension
-->
        <!--Date: 2021/08/19-->
        <!--Status: test-->
        <!--ID: 0fc35fc3-efe6-4898-8a37-0b233339524f-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.002</id>
        </mitre>
        <description>Suspicious ScreenSave Change by Reg.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKEY_CURRENT_USER\\+Control\ Panel\\+Desktop|HKCU\\+Control\ Panel\\+Desktop</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/v\ ScreenSaveTimeout</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/t\ REG_SZ</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/d\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/f</field>
    </rule>
    <rule id="901549" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_screensaver.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may establish persistence by executing malicious content triggered by user inactivity.
Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension
-->
        <!--Date: 2021/08/19-->
        <!--Status: test-->
        <!--ID: 0fc35fc3-efe6-4898-8a37-0b233339524f-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.002</id>
        </mitre>
        <description>Suspicious ScreenSave Change by Reg.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKEY_CURRENT_USER\\+Control\ Panel\\+Desktop|HKCU\\+Control\ Panel\\+Desktop</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/v\ ScreenSaverIsSecure</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/t\ REG_SZ</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/d\ 0</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/f</field>
    </rule>
    <rule id="901550" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_screensaver.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may establish persistence by executing malicious content triggered by user inactivity.
Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension
-->
        <!--Date: 2021/08/19-->
        <!--Status: test-->
        <!--ID: 0fc35fc3-efe6-4898-8a37-0b233339524f-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.002</id>
        </mitre>
        <description>Suspicious ScreenSave Change by Reg.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)HKEY_CURRENT_USER\\+Control\ Panel\\+Desktop|HKCU\\+Control\ Panel\\+Desktop</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/v\ SCRNSAVE\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/t\ REG_SZ</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/d\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.scr</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/f</field>
    </rule>
    <rule id="901551" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regasm_suspicious_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious execution of Regasm/Regsvcs utilities-->
        <!--Date: 2022/08/25-->
        <!--Status: experimental-->
        <!--ID: cc368ed0-2411-45dc-a222-510ace303cb2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.009</id>
        </mitre>
        <description>Regasm/Regsvcs Suspicious Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Regsvcs\.exe|\\+Regasm\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)RegSvcs\.exe|RegAsm\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Users\\+Public\\+|\\+AppData\\+Local\\+Temp\\+|\\+Desktop\\+|\\+Downloads\\+|\\+PerfLogs\\+|\\+Windows\\+Temp\\+|\\+Microsoft\\+Windows\\+Start\ Menu\\+Programs\\+Startup\\+</field>
    </rule>
    <rule id="901552" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_regasm_suspicious_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious execution of Regasm/Regsvcs utilities-->
        <!--Date: 2022/08/25-->
        <!--Status: experimental-->
        <!--ID: cc368ed0-2411-45dc-a222-510ace303cb2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.009</id>
        </mitre>
        <description>Regasm/Regsvcs Suspicious Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Regsvcs\.exe|\\+Regasm\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)RegSvcs\.exe|RegAsm\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\.dll</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\\+Regasm\.exe")$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\\+Regasm\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\\+Regsvcs\.exe")$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\\+Regsvcs\.exe)$</field>
    </rule>
    <rule id="901553" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_calc_uncommon_exec.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious use of 'calc.exe' with command line parameters or in a suspicious directory, which is likely caused by some PoC or detection evasion.
-->
        <!--Date: 2019/02/09-->
        <!--Status: test-->
        <!--ID: 737e618a-a410-49b5-bec3-9e55ff7fbc15-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Suspicious Calculator Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\\+calc\.exe\ )</field>
    </rule>
    <rule id="901554" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_calc_uncommon_exec.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious use of 'calc.exe' with command line parameters or in a suspicious directory, which is likely caused by some PoC or detection evasion.
-->
        <!--Date: 2019/02/09-->
        <!--Status: test-->
        <!--ID: 737e618a-a410-49b5-bec3-9e55ff7fbc15-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Suspicious Calculator Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+calc\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+System32\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+SysWOW64\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+WinSxS\\+</field>
    </rule>
    <rule id="901555" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_archiver_iso_phishing.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects cases in which an ISO files is opend within an archiver like 7Zip or Winrar, which is a sign of phishing as threat actors put small ISO files in archives as email attachments to bypass certain filters and protective measures (mark of web)-->
        <!--Date: 2022/06/07-->
        <!--Status: test-->
        <!--ID: fcdf69e5-a3d3-452a-9724-26f2308bf2b1-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1566</id>
        </mitre>
        <description>Phishing Pattern ISO in Archive</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+Winrar\.exe|\\+7zFM\.exe|\\+peazip\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+isoburn\.exe|\\+PowerISO\.exe|\\+ImgBurn\.exe)$</field>
    </rule>
    <rule id="901556" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_etw_trace_evasion.yml</info>
        <!--Sigma Rule Author: @neu5ron, Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects a command that clears or disables any ETW trace log which could indicate a logging evasion.-->
        <!--Date: 2019/03/22-->
        <!--Status: test-->
        <!--ID: a238b5d0-ce2d-4414-a676-7a531b3d13d6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.t1562.006</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>Disable of ETW Trace</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cl</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/Trace</field>
    </rule>
    <rule id="901557" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_etw_trace_evasion.yml</info>
        <!--Sigma Rule Author: @neu5ron, Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects a command that clears or disables any ETW trace log which could indicate a logging evasion.-->
        <!--Date: 2019/03/22-->
        <!--Status: test-->
        <!--ID: a238b5d0-ce2d-4414-a676-7a531b3d13d6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.t1562.006</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>Disable of ETW Trace</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)clear\-log</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/Trace</field>
    </rule>
    <rule id="901558" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_etw_trace_evasion.yml</info>
        <!--Sigma Rule Author: @neu5ron, Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects a command that clears or disables any ETW trace log which could indicate a logging evasion.-->
        <!--Date: 2019/03/22-->
        <!--Status: test-->
        <!--ID: a238b5d0-ce2d-4414-a676-7a531b3d13d6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.t1562.006</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>Disable of ETW Trace</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)sl</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/e:false</field>
    </rule>
    <rule id="901559" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_etw_trace_evasion.yml</info>
        <!--Sigma Rule Author: @neu5ron, Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects a command that clears or disables any ETW trace log which could indicate a logging evasion.-->
        <!--Date: 2019/03/22-->
        <!--Status: test-->
        <!--ID: a238b5d0-ce2d-4414-a676-7a531b3d13d6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.t1562.006</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>Disable of ETW Trace</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)set\-log</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/e:false</field>
    </rule>
    <rule id="901560" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_etw_trace_evasion.yml</info>
        <!--Sigma Rule Author: @neu5ron, Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects a command that clears or disables any ETW trace log which could indicate a logging evasion.-->
        <!--Date: 2019/03/22-->
        <!--Status: test-->
        <!--ID: a238b5d0-ce2d-4414-a676-7a531b3d13d6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.t1562.006</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>Disable of ETW Trace</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)logman</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)update</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)trace</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-\-p</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-ets</field>
    </rule>
    <rule id="901561" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_etw_trace_evasion.yml</info>
        <!--Sigma Rule Author: @neu5ron, Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects a command that clears or disables any ETW trace log which could indicate a logging evasion.-->
        <!--Date: 2019/03/22-->
        <!--Status: test-->
        <!--ID: a238b5d0-ce2d-4414-a676-7a531b3d13d6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.t1562.006</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>Disable of ETW Trace</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Remove\-EtwTraceProvider</field>
    </rule>
    <rule id="901562" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_etw_trace_evasion.yml</info>
        <!--Sigma Rule Author: @neu5ron, Florian Roth (Nextron Systems), Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects a command that clears or disables any ETW trace log which could indicate a logging evasion.-->
        <!--Date: 2019/03/22-->
        <!--Status: test-->
        <!--ID: a238b5d0-ce2d-4414-a676-7a531b3d13d6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.t1562.006</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>Disable of ETW Trace</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Set\-EtwTraceProvider</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)0x11</field>
    </rule>
    <rule id="901563" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_radmin.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the execution of Radmin which can be abused by an adversary to remotely control Windows machines-->
        <!--Date: 2022/01/22-->
        <!--Status: test-->
        <!--ID: 5817e76f-4804-41e6-8f1d-5fa0b3ecae2d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1072</id>
        </mitre>
        <description>PUA - Radmin Viewer Utility Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Radmin\ Viewer</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)Radmin\ Viewer</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Radmin\.exe</field>
    </rule>
    <rule id="901564" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_netsupport_rat.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of a renamed "client32.exe" (NetSupport RAT) via Imphash, Product and OriginalFileName strings-->
        <!--Date: 2022/09/19-->
        <!--Status: test-->
        <!--ID: 0afbd410-de03-4078-8491-f132303cb67d-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Renamed NetSupport RAT Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)NetSupport\ Remote\ Control</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)client32\.exe</field>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)a9d50692e95b79723f3e76fcf70d023e</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=A9D50692E95B79723F3E76FCF70D023E</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+client32\.exe)$</field>
    </rule>
    <rule id="901565" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_eventlog_clear.yml</info>
        <!--Sigma Rule Author: Ecco, Daniil Yugoslavskiy, oscd.community, D3F7A5105-->
        <!--Description: Detects clearing or configuration of eventlogs using wevtutil, powershell and wmic. Might be used by ransomwares during the attack (seen by NotPetya and others).-->
        <!--Date: 2019/09/26-->
        <!--Status: stable-->
        <!--ID: cc36992a-4671-4f21-a91d-6c2b72a2edf5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.001</id>
            <id>attack.t1562.002</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>Suspicious Eventlog Clear or Configuration Change</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wevtutil\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)clear\-log\ |\ cl\ |set\-log\ |\ sl\ |lfn:</field>
    </rule>
    <rule id="901566" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_eventlog_clear.yml</info>
        <!--Sigma Rule Author: Ecco, Daniil Yugoslavskiy, oscd.community, D3F7A5105-->
        <!--Description: Detects clearing or configuration of eventlogs using wevtutil, powershell and wmic. Might be used by ransomwares during the attack (seen by NotPetya and others).-->
        <!--Date: 2019/09/26-->
        <!--Status: stable-->
        <!--ID: cc36992a-4671-4f21-a91d-6c2b72a2edf5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.001</id>
            <id>attack.t1562.002</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>Suspicious Eventlog Clear or Configuration Change</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:Clear\-EventLog\ |Remove\-EventLog\ |Limit\-EventLog\ |Clear\-WinEvent\ )</field>
    </rule>
    <rule id="901567" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_eventlog_clear.yml</info>
        <!--Sigma Rule Author: Ecco, Daniil Yugoslavskiy, oscd.community, D3F7A5105-->
        <!--Description: Detects clearing or configuration of eventlogs using wevtutil, powershell and wmic. Might be used by ransomwares during the attack (seen by NotPetya and others).-->
        <!--Date: 2019/09/26-->
        <!--Status: stable-->
        <!--ID: cc36992a-4671-4f21-a91d-6c2b72a2edf5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.001</id>
            <id>attack.t1562.002</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>Suspicious Eventlog Clear or Configuration Change</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe|\\+wmic\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ClearEventLog</field>
    </rule>
    <rule id="901568" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_eventlog_clear.yml</info>
        <!--Sigma Rule Author: Ecco, Daniil Yugoslavskiy, oscd.community, D3F7A5105-->
        <!--Description: Detects clearing or configuration of eventlogs using wevtutil, powershell and wmic. Might be used by ransomwares during the attack (seen by NotPetya and others).-->
        <!--Date: 2019/09/26-->
        <!--Status: stable-->
        <!--ID: cc36992a-4671-4f21-a91d-6c2b72a2edf5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.001</id>
            <id>attack.t1562.002</id>
            <id>car.2016-04-002</id>
        </mitre>
        <description>Suspicious Eventlog Clear or Configuration Change</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+SysWOW64\\+msiexec\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+msiexec\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\ sl\ )</field>
    </rule>
    <rule id="901569" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_svchost_execution_with_no_cli_flags.yml</info>
        <!--Sigma Rule Author: David Burkett, @signalblur-->
        <!--Description: It is extremely abnormal for svchost.exe to spawn without any CLI arguments and is normally observed when a malicious process spawns the process and injects code into the process memory space.-->
        <!--Date: 2019/12/28-->
        <!--Status: test-->
        <!--ID: 16c37b52-b141-42a5-a3ea-bbe098444397-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
        </mitre>
        <description>Suspect Svchost Activity</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:svchost\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+svchost\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+rpcnet\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+rpcnetp\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="901570" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_binary_highly_relevant.yml</info>
        <!--Sigma Rule Author: Matthew Green - @mgreen27, Florian Roth (Nextron Systems), frack113-->
        <!--Description: Detects the execution of a renamed binary often used by attackers or malware leveraging new Sysmon OriginalFileName datapoint.-->
        <!--Date: 2019/06/15-->
        <!--Status: test-->
        <!--ID: 0ba1da6d-b6ce-4366-828c-18826c9de23e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
            <id>car.2013-05-009</id>
        </mitre>
        <description>Potential Defense Evasion Via Rename Of Highly Relevant Binaries</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Execute\ processes\ remotely</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)Sysinternals\ PsExec</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)^(?:Windows\ PowerShell|pwsh)</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)certutil\.exe|cmstp\.exe|cscript\.exe|mshta\.exe|msiexec\.exe|powershell_ise\.exe|powershell\.exe|psexec\.c|psexec\.exe|psexesvc\.exe|pwsh\.dll|reg\.exe|regsvr32\.exe|rundll32\.exe|WerMgr|wmic\.exe|wscript\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+certutil\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmstp\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cscript\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+mshta\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msiexec\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+powershell_ise\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+powershell\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+psexec\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+psexec64\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+PSEXESVC\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+pwsh\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+reg\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+regsvr32\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+wermgr\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+wmic\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+wscript\.exe)$</field>
    </rule>
    <rule id="901571" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_wmiexec_default_powershell.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of PowerShell with a specific flag sequence that is used by the Wmiexec script-->
        <!--Date: 2023/03/08-->
        <!--Status: experimental-->
        <!--ID: 022eaba8-f0bf-4dd9-9217-4604b0bb3bb0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.lateral_movement</id>
        </mitre>
        <description>HackTool - Wmiexec Default Powershell Command</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\-NoP\ \-NoL\ \-sta\ \-NonI\ \-W\ Hidden\ \-Exec\ Bypass\ \-Enc</field>
    </rule>
    <rule id="901572" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_clip_execution.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the execution of clip.exe in order to copy data to the clipboard. Adversaries may collect data stored in the clipboard from users copying information within or between applications.-->
        <!--Date: 2021/07/27-->
        <!--Status: test-->
        <!--ID: ddeff553-5233-4ae9-bbab-d64d2bd634be-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.t1115</id>
        </mitre>
        <description>Data Copied To Clipboard Via Clip.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+clip\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)clip\.exe</field>
    </rule>
    <rule id="901573" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_invoke_obfuscation_obfuscated_iex_commandline.yml</info>
        <!--Sigma Rule Author: Daniel Bohannon (@Mandiant/@FireEye), oscd.community-->
        <!--Description: Detects all variations of obfuscated powershell IEX invocation code generated by Invoke-Obfuscation framework from the following code block-->
        <!--Date: 2019/11/08-->
        <!--Status: test-->
        <!--ID: 4bf943c6-5146-4273-98dd-e958fd1e3abf-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Invoke-Obfuscation Obfuscated IEX Invocation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\$PSHome\[\s*\d{1,3}\s*\]\s*\+\s*\$PSHome\[</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\$ShellId\[\s*\d{1,3}\s*\]\s*\+\s*\$ShellId\[</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\$env:Public\[\s*\d{1,3}\s*\]\s*\+\s*\$env:Public\[</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\$env:ComSpec\[(\s*\d{1,3}\s*,){2}</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i).+mdr.+\W\s*\)\.Name</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\$VerbosePreference\.ToString\(</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\[String\]\s*\$VerbosePreference</field>
    </rule>
    <rule id="901574" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_printbrm.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the execution of the LOLBIN PrintBrm.exe, which can be used to create or extract ZIP files. PrintBrm.exe should not be run on a normal workstation.-->
        <!--Date: 2022/05/02-->
        <!--Status: test-->
        <!--ID: cafeeba3-01da-4ab4-b6c4-a31b1d9730c7-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>PrintBrm ZIP Creation of Extraction</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+PrintBrm\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-f</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.zip</field>
    </rule>
    <rule id="901575" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_visual_basic_compiler.yml</info>
        <!--Sigma Rule Author: Ensar &#350;amil, @sblmsrsn, @oscd_initiative-->
        <!--Description: Detects successful code compilation via Visual Basic Command Line Compiler that utilizes Windows Resource to Object Converter.-->
        <!--Date: 2020/10/07-->
        <!--Status: test-->
        <!--ID: 7b10f171-7f04-47c7-9fa2-5be43c76e535-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Visual Basic Command Line Compiler Usage</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+vbc\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cvtres\.exe)$</field>
    </rule>
    <rule id="901576" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cloudflared_portable_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of the "cloudflared" binary from a non standard location.
-->
        <!--Date: 2023/12/20-->
        <!--Status: experimental-->
        <!--ID: fadb84f0-4e84-4f6d-a1ce-9ef2bffb6ccd-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090.001</id>
        </mitre>
        <description>Cloudflared Portable Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cloudflared\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+cloudflared\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+cloudflared\\+</field>
    </rule>
    <rule id="901577" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_schtasks_powershell_persistence.yml</info>
        <!--Sigma Rule Author: pH-T (Nextron Systems), Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious powershell execution via a schedule task where the command ends with an suspicious flags to hide the powershell instance instead of executeing scripts or commands. This could be a sign of persistence via PowerShell "Get-Variable" technique as seen being used in Colibri Loader-->
        <!--Date: 2022/04/08-->
        <!--Status: test-->
        <!--ID: b66474aa-bd92-4333-a16c-298155b120df-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.t1053.005</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Potential Persistence Via Powershell Search Order Hijacking - Task</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)C:\\+WINDOWS\\+System32\\+svchost\.exe</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\-k\ netsvcs</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\-s\ Schedule</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-windowstyle\ hidden|\ \-w\ hidden|\ \-ep\ bypass|\ \-noni)$</field>
    </rule>
    <rule id="901578" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_execution_path.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Tim Shelton-->
        <!--Description: Detects a suspicious execution from an uncommon folder-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 3dfd06d2-eaf4-4532-9555-68aca59f57c4-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Execution from Suspicious Folder</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+\$Recycle\.bin\\+|\\+config\\+systemprofile\\+|\\+Intel\\+Logs\\+|\\+RSA\\+MachineKeys\\+|\\+Users\\+All\ Users\\+|\\+Users\\+Default\\+|\\+Users\\+NetworkService\\+|\\+Users\\+Public\\+|\\+Windows\\+addins\\+|\\+Windows\\+debug\\+|\\+Windows\\+Fonts\\+|\\+Windows\\+Help\\+|\\+Windows\\+IME\\+|\\+Windows\\+Media\\+|\\+Windows\\+repair\\+|\\+Windows\\+security\\+|\\+Windows\\+System32\\+Tasks\\+|\\+Windows\\+Tasks\\+</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)^(?:C:\\+Perflogs\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Users\\+Public\\+IBM\\+ClientSolutions\\+Start_Programs\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+SysWOW64\\+config\\+systemprofile\\+Citrix\\+UpdaterBinaries\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+CitrixReceiverUpdater\.exe)$</field>
    </rule>
    <rule id="901579" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_encoded_cmd_patterns.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects PowerShell command line patterns in combincation with encoded commands that often appear in malware infection chains-->
        <!--Date: 2022/05/24-->
        <!--Status: test-->
        <!--ID: b9d9cc83-380b-4ba3-8d8f-60c0e7e2930c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Encoded Command Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.Exe|pwsh\.dll</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-e\ |\ \-en\ |\ \-enc\ |\ \-enco</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ JAB|\ SUVYI|\ SQBFAFgA|\ aWV4I|\ IAB|\ PAA|\ aQBlAHgA</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Packages\\+Plugins\\+Microsoft\.GuestConfiguration\.ConfigurationforWindows\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+gc_worker\.exe</field>
    </rule>
    <rule id="901580" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_reg_machineguid.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Use of reg to get MachineGuid information-->
        <!--Date: 2022/01/01-->
        <!--Status: test-->
        <!--ID: f5240972-3938-4e56-8e4b-e33893176c1f-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1082</id>
        </mitre>
        <description>Suspicious Query of MachineGUID</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+reg\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SOFTWARE\\+Microsoft\\+Cryptography</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/v\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)MachineGuid</field>
    </rule>
    <rule id="901581" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_inline_vbs.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious process related to rundll32 based on command line that invokes inline VBScript as seen being used by UNC2452-->
        <!--Date: 2021/03/05-->
        <!--Status: test-->
        <!--ID: 1cc50f3f-1fc8-4acf-b2e9-6f172e1fdebd-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1055</id>
        </mitre>
        <description>Suspicious Rundll32 Invoking Inline VBScript</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Execute</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)RegRead</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)window\.close</field>
    </rule>
    <rule id="901582" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hostname_execution.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Use of hostname to get information-->
        <!--Date: 2022/01/01-->
        <!--Status: test-->
        <!--ID: 7be5fb68-f9ef-476d-8b51-0256ebece19e-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1082</id>
        </mitre>
        <description>Suspicious Execution of Hostname</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+HOSTNAME\.EXE)$</field>
    </rule>
    <rule id="901583" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wmic_remote_execution.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of WMIC to query information on a remote system-->
        <!--Date: 2023/02/14-->
        <!--Status: experimental-->
        <!--ID: 7773b877-5abb-4a3e-b9c9-fd0369b59b00-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
        </mitre>
        <description>WMIC Remote Command Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+WMIC\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)wmic\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/node:</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:/node:127\.0\.0\.1\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:/node:localhost\ )</field>
    </rule>
    <rule id="901584" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_csc_susp_parent.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects a potentially suspicious parent of "csc.exe", which could be a sign of payload delivery.-->
        <!--Date: 2019/02/11-->
        <!--Status: test-->
        <!--ID: b730a276-6b63-41b8-bcf8-55930c8fc6ee-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.005</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Csc.EXE Execution Form Potentially Suspicious Parent</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+csc\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)csc\.exe</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+cscript\.exe|\\+excel\.exe|\\+mshta\.exe|\\+onenote\.exe|\\+outlook\.exe|\\+powerpnt\.exe|\\+winword\.exe|\\+wscript\.exe)$</field>
    </rule>
    <rule id="901585" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_csc_susp_parent.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects a potentially suspicious parent of "csc.exe", which could be a sign of payload delivery.-->
        <!--Date: 2019/02/11-->
        <!--Status: test-->
        <!--ID: b730a276-6b63-41b8-bcf8-55930c8fc6ee-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.005</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Csc.EXE Execution Form Potentially Suspicious Parent</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+csc\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)csc\.exe</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\-Encoded\ |FromBase64String</field>
    </rule>
    <rule id="901586" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_csc_susp_parent.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects a potentially suspicious parent of "csc.exe", which could be a sign of payload delivery.-->
        <!--Date: 2019/02/11-->
        <!--Status: test-->
        <!--ID: b730a276-6b63-41b8-bcf8-55930c8fc6ee-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.005</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Csc.EXE Execution Form Potentially Suspicious Parent</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+csc\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)csc\.exe</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)([Pp]rogram[Dd]ata|%([Ll]ocal)?[Aa]pp[Dd]ata%|\\+[Aa]pp[Dd]ata\\+([Ll]ocal(Ll]ow)?|[Rr]oaming))\\+[^\\+]{1,256}$</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i):\\+PerfLogs\\+|:\\+Users\\+Public\\+|:\\+Windows\\+Temp\\+|\\+Temporary\ Internet</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\\+Favorites\\+</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\\+Favourites\\+</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\\+Contacts\\+</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.parentCommandLine" negate="no" type="pcre2">(?i)\\+Pictures\\+</field>
    </rule>
    <rule id="901587" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_csc_susp_parent.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects a potentially suspicious parent of "csc.exe", which could be a sign of payload delivery.-->
        <!--Date: 2019/02/11-->
        <!--Status: test-->
        <!--ID: b730a276-6b63-41b8-bcf8-55930c8fc6ee-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.005</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Csc.EXE Execution Form Potentially Suspicious Parent</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+csc\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)csc\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+sdiagnhost\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+inetsrv\\+w3wp\.exe</field>
    </rule>
    <rule id="901588" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_csc_susp_parent.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), X__Junior (Nextron Systems)-->
        <!--Description: Detects a potentially suspicious parent of "csc.exe", which could be a sign of payload delivery.-->
        <!--Date: 2019/02/11-->
        <!--Status: test-->
        <!--ID: b730a276-6b63-41b8-bcf8-55930c8fc6ee-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.005</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Csc.EXE Execution Form Potentially Suspicious Parent</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+csc\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)csc\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+ProgramData\\+chocolatey\\+choco\.exe</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\\+ProgramData\\+Microsoft\\+Windows\ Defender\ Advanced\ Threat\ Protection</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)JwB7ACIAZgBhAGkAbABlAGQAIgA6AHQAcgB1AGUALAAiAG0AcwBnACIAOgAiAEEAbgBzAGkAYgBsAGUAIAByAGUAcQB1AGkAcgBlAHMAIABQAG8AdwBlAHIAUwBoAGUAbABsACAAdgAzAC4AMAAgAG8AcgAgAG4AZQB3AGUAcgAiAH0AJw</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)cAewAiAGYAYQBpAGwAZQBkACIAOgB0AHIAdQBlACwAIgBtAHMAZwAiADoAIgBBAG4AcwBpAGIAbABlACAAcgBlAHEAdQBpAHIAZQBzACAAUABvAHcAZQByAFMAaABlAGwAbAAgAHYAMwAuADAAIABvAHIAIABuAGUAdwBlAHIAIgB9ACcA</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)nAHsAIgBmAGEAaQBsAGUAZAAiADoAdAByAHUAZQAsACIAbQBzAGcAIgA6ACIAQQBuAHMAaQBiAGwAZQAgAHIAZQBxAHUAaQByAGUAcwAgAFAAbwB3AGUAcgBTAGgAZQBsAGwAIAB2ADMALgAwACAAbwByACAAbgBlAHcAZQByACIAfQAnA</field>
    </rule>
    <rule id="901589" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_googleupdate_susp_child_process.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potentially suspicious child processes of "GoogleUpdate.exe"-->
        <!--Date: 2023/05/15-->
        <!--Status: experimental-->
        <!--ID: 84b1ecf9-6eff-4004-bafb-bae5c0e251b2-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Potentially Suspicious GoogleUpdate Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+GoogleUpdate\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Google</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+setup\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:chrome_updater\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:chrome_installer\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)None</field>
    </rule>
    <rule id="901590" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_vscode_tunnel_service_install.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the installation of VsCode tunnel (code-tunnel) as a service.-->
        <!--Date: 2023/10/25-->
        <!--Status: experimental-->
        <!--ID: 30bf1789-379d-4fdc-900f-55cd0a90a801-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071.001</id>
        </mitre>
        <description>Visual Studio Code Tunnel Service Installation</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:tunnel\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)service</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)internal\-run</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)tunnel\-service\.log</field>
    </rule>
    <rule id="901591" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_appx_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potentially suspicious child process of applications launched from inside the WindowsApps directory. This could be a sign of a rogue ".appx" package installation/execution-->
        <!--Date: 2023/01/12-->
        <!--Status: experimental-->
        <!--ID: f91ed517-a6ba-471d-9910-b3b4a398c0f3-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Potentially Suspicious Windows App Activity</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)C:\\+Program\ Files\\+WindowsApps\\+</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+cscript\.exe|\\+mshta\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+wscript\.exe)$</field>
    </rule>
    <rule id="901592" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_appx_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potentially suspicious child process of applications launched from inside the WindowsApps directory. This could be a sign of a rogue ".appx" package installation/execution-->
        <!--Date: 2023/01/12-->
        <!--Status: experimental-->
        <!--ID: f91ed517-a6ba-471d-9910-b3b4a398c0f3-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Potentially Suspicious Windows App Activity</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)C:\\+Program\ Files\\+WindowsApps\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)cmd\ /c|Invoke\-|Base64</field>
    </rule>
    <rule id="901593" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_appx_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potentially suspicious child process of applications launched from inside the WindowsApps directory. This could be a sign of a rogue ".appx" package installation/execution-->
        <!--Date: 2023/01/12-->
        <!--Status: experimental-->
        <!--ID: f91ed517-a6ba-471d-9910-b3b4a398c0f3-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Potentially Suspicious Windows App Activity</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)C:\\+Program\ Files\\+WindowsApps\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+WindowsApps\\+Microsoft\.WindowsTerminal</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+WindowsTerminal\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+powershell\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+pwsh\.exe)$</field>
    </rule>
    <rule id="901594" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_fodhelper.yml</info>
        <!--Sigma Rule Author: E.M. Anhaus (originally from Atomic Blue Detections, Tony Lambert), oscd.community-->
        <!--Description: Identifies use of Fodhelper.exe to bypass User Account Control. Adversaries use this technique to execute privileged processes.-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 7f741dcf-fc22-4759-87b4-9ae8376676a2-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Bypass UAC via Fodhelper.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+fodhelper\.exe)$</field>
    </rule>
    <rule id="901595" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mstsc_run_local_rdp_file.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Christopher Peacock @securepeacock-->
        <!--Description: Detects potential RDP connection via Mstsc using a local ".rdp" file-->
        <!--Date: 2023/04/18-->
        <!--Status: experimental-->
        <!--ID: 5fdce3ac-e7f9-4ecd-a3aa-a4d78ebbf0af-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Mstsc.EXE Execution With Local RDP File</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+mstsc\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)mstsc\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\.rdp|\.rdp")$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+lxss\\+wslhost\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+ProgramData\\+Microsoft\\+WSL\\+wslg\.rdp</field>
    </rule>
    <rule id="901596" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_createminidump.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of CreateMiniDump hack tool used to dump the LSASS process memory for credential extraction on the attacker's machine-->
        <!--Date: 2019/12/22-->
        <!--Status: test-->
        <!--ID: 36d88494-1d43-4dc0-b3fa-35c8fea0ca9d-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>HackTool - CreateMiniDump Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+CreateMiniDump\.exe)$</field>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)4a07f944a83e8a7c2525efa35dd30e2f</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=4a07f944a83e8a7c2525efa35dd30e2f</field>
    </rule>
    <rule id="901597" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_nltest_execution.yml</info>
        <!--Sigma Rule Author: Arun Chauhan-->
        <!--Description: Detects nltest commands that can be used for information discovery-->
        <!--Date: 2023/02/03-->
        <!--Status: test-->
        <!--ID: 903076ff-f442-475a-b667-4f246bcc203b-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1016</id>
            <id>attack.t1018</id>
            <id>attack.t1482</id>
        </mitre>
        <description>Nltest.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+nltest\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)nltestrk\.exe</field>
    </rule>
    <rule id="901598" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_ditsnap.yml</info>
        <!--Sigma Rule Author: Furkan Caliskan (@caliskanfurkan_)-->
        <!--Description: Detects the use of Ditsnap tool, an inspection tool for Active Directory database, ntds.dit.-->
        <!--Date: 2020/07/04-->
        <!--Status: test-->
        <!--ID: d3b70aad-097e-409c-9df2-450f80dc476b-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>PUA - DIT Snapshot Viewer</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ditsnap\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)ditsnap\.exe</field>
    </rule>
    <rule id="901599" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_ssh_port_forward.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects port forwarding activity via SSH.exe-->
        <!--Date: 2022/10/12-->
        <!--Status: experimental-->
        <!--ID: 327f48c1-a6db-4eb8-875a-f6981f1b0183-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1572</id>
            <id>attack.t1021.001</id>
            <id>attack.t1021.004</id>
        </mitre>
        <description>Port Forwarding Activity Via SSH.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ssh\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-R\ |\ /R\ )</field>
    </rule>
    <rule id="901600" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_amsi_init_failed_bypass.yml</info>
        <!--Sigma Rule Author: Markus Neis, @Kostastsale-->
        <!--Description: Detects Request to "amsiInitFailed" that can be used to disable AMSI Scanning-->
        <!--Date: 2018/08/17-->
        <!--Status: test-->
        <!--ID: 30edb182-aa75-42c0-b0a9-e998bb29067c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Potential AMSI Bypass Via .NET Reflection</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)System\.Management\.Automation\.AmsiUtils|amsiInitFailed</field>
    </rule>
    <rule id="901601" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_amsi_init_failed_bypass.yml</info>
        <!--Sigma Rule Author: Markus Neis, @Kostastsale-->
        <!--Description: Detects Request to "amsiInitFailed" that can be used to disable AMSI Scanning-->
        <!--Date: 2018/08/17-->
        <!--Status: test-->
        <!--ID: 30edb182-aa75-42c0-b0a9-e998bb29067c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Potential AMSI Bypass Via .NET Reflection</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\[Ref\]\.Assembly\.GetType</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)SetValue\(\$null,\$true\)</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)NonPublic,Static</field>
    </rule>
    <rule id="901602" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_right_to_left_override.yml</info>
        <!--Sigma Rule Author: Micah Babinski, @micahbabinski-->
        <!--Description: Detects the presence of the "u202+E" character, which causes a terminal, browser, or operating system to render text in a right-to-left sequence.
This is used as an obfuscation and masquerading techniques.
-->
        <!--Date: 2023/02/15-->
        <!--Status: experimental-->
        <!--ID: ad691d92-15f2-4181-9aa4-723c74f9ddc3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.002</id>
        </mitre>
        <description>Potential Defense Evasion Via Right-to-Left Override</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)‮</field>
    </rule>
    <rule id="901603" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_sysvol_access.yml</info>
        <!--Sigma Rule Author: Markus Neis, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects Access to Domain Group Policies stored in SYSVOL-->
        <!--Date: 2018/04/09-->
        <!--Status: test-->
        <!--ID: 05f3c945-dcc8-4393-9f3d-af65077a8f86-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.006</id>
        </mitre>
        <description>Suspicious SYSVOL Domain Group Policy Access</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+SYSVOL\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+policies\\+</field>
    </rule>
    <rule id="901604" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_esentutl_params.yml</info>
        <!--Sigma Rule Author: sam0x90-->
        <!--Description: Conti recommendation to its affiliates to use esentutl to access NTDS dumped file. Trickbot also uses this utilities to get MSEdge info via its module pwgrab.-->
        <!--Date: 2021/08/06-->
        <!--Status: test-->
        <!--ID: 7df1713a-1a5b-4a4b-a071-dc83b144a101-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>Esentutl Gather Credentials</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)esentutl</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /p</field>
    </rule>
    <rule id="901605" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_attrib_hiding_files.yml</info>
        <!--Sigma Rule Author: Sami Ruohonen-->
        <!--Description: Detects usage of attrib.exe to hide files from users.-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 4281cb20-2994-4580-aa63-c8b86d019934-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.001</id>
        </mitre>
        <description>Hiding Files with Attrib.exe</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+attrib\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)ATTRIB\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \+h\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\\+desktop\.ini\ )</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\+R\ \+H\ \+S\ \+A\ \\+.+\.cui</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)C:\\+WINDOWS\\+system32\\+.+\.bat</field>
    </rule>
    <rule id="901606" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_tasklist_basic_execution.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may attempt to get information about running processes on a system. Information obtained could be used to gain an understanding of common software/applications running on systems within the network-->
        <!--Date: 2021/12/11-->
        <!--Status: test-->
        <!--ID: 63332011-f057-496c-ad8d-d2b6afb27f96-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1057</id>
        </mitre>
        <description>Suspicious Tasklist Discovery Command</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)tasklist</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+tasklist\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)tasklist\.exe</field>
    </rule>
    <rule id="901607" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wab_execution_from_non_default_location.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of wab.exe (Windows Contacts) and Wabmig.exe (Microsoft Address Book Import Tool) from non default locations as seen with bumblebee activity-->
        <!--Date: 2022/08/12-->
        <!--Status: test-->
        <!--ID: 395907ee-96e5-4666-af2e-2ca91688e151-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
        </mitre>
        <description>Wab Execution From Non Default Location</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wab\.exe|\\+wabmig\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+WinSxS\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Windows\ Mail\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Windows\ Mail\\+)</field>
    </rule>
    <rule id="901608" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_mshta_inline_vbscript.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the presence of the keywords "Wscript", "Shell" and "Run" in the command, which could indicate a suspicious activity-->
        <!--Date: 2022/08/31-->
        <!--Status: experimental-->
        <!--ID: 2c28c248-7f50-417a-9186-a85b223010ee-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Wscript Shell Run In CommandLine</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Wscript\.</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.Shell</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.Run</field>
    </rule>
    <rule id="901609" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_mavinject.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth-->
        <!--Description: Detects the execution of a renamed version of the "Mavinject" process. Which can be abused to perform process injection using the "/INJECTRUNNING" flag-->
        <!--Date: 2022/12/05-->
        <!--Status: test-->
        <!--ID: e6474a1b-5390-49cd-ab41-8d88655f7394-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055.001</id>
            <id>attack.t1218.013</id>
        </mitre>
        <description>Renamed Mavinject.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)mavinject32\.exe|mavinject64\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+mavinject32\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+mavinject64\.exe)$</field>
    </rule>
    <rule id="901610" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_renamed_office_processes.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of a renamed office binary-->
        <!--Date: 2022/12/20-->
        <!--Status: test-->
        <!--ID: 0b0cd537-fc77-4e6e-a973-e53495c1083d-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Renamed Office Binary Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Excel\.exe|MSACCESS\.EXE|MSPUB\.EXE|OneNote\.exe|OneNoteM\.exe|OUTLOOK\.EXE|POWERPNT\.EXE|WinWord\.exe</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Microsoft\ Access|Microsoft\ Excel|Microsoft\ OneNote|Microsoft\ Outlook|Microsoft\ PowerPoint|Microsoft\ Publisher|Microsoft\ Word|Sent\ to\ OneNote\ Tool</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+EXCEL\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+excelcnv\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+MSACCESS\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+MSPUB\.EXE)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+ONENOTE\.EXE)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+ONENOTEM\.EXE)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+OUTLOOK\.EXE)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+POWERPNT\.EXE)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WINWORD\.exe)$</field>
    </rule>
    <rule id="901611" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_devinit_lolbin_usage.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a certain command line flag combination used by "devinit.exe", which can be abused as a LOLBIN to download arbitrary MSI packages on a Windows system-->
        <!--Date: 2022/01/11-->
        <!--Status: test-->
        <!--ID: 90d50722-0483-4065-8e35-57efaadd354d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Arbitrary MSI Download Via Devinit.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-t\ msi\-install\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-i\ http</field>
    </rule>
    <rule id="901612" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_odbcconf_uncommon_child_process.yml</info>
        <!--Sigma Rule Author: Harjot Singh @cyb3rjy0t-->
        <!--Description: Detects an uncommon child process of "odbcconf.exe" binary which normally shouldn't have any child processes.-->
        <!--Date: 2023/05/22-->
        <!--Status: experimental-->
        <!--ID: 8e3c7994-131e-4ba5-b6ea-804d49113a26-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.008</id>
        </mitre>
        <description>Uncommon Child Process Spawned By Odbcconf.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+odbcconf\.exe)$</field>
    </rule>
    <rule id="901613" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_shadowcopy_access.yml</info>
        <!--Sigma Rule Author: Max Altgelt (Nextron Systems), Tobias Michalski (Nextron Systems)-->
        <!--Description: Detects the execution of the builtin "copy" command that targets a shadow copy (sometimes used to copy registry hives that are in use)-->
        <!--Date: 2021/08/09-->
        <!--Status: experimental-->
        <!--ID: c73124a7-3e89-44a3-bdc1-25fe4df754b1-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1490</id>
        </mitre>
        <description>Copy From VolumeShadowCopy Via Cmd.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:copy\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+.\\+GLOBALROOT\\+Device\\+HarddiskVolumeShadowCopy</field>
    </rule>
    <rule id="901614" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wermgr_susp_child_process.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious Windows Error Reporting manager (wermgr.exe) child process-->
        <!--Date: 2022/10/14-->
        <!--Status: experimental-->
        <!--ID: 396f6630-f3ac-44e3-bfc8-1b161bc00c4e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Suspicious Child Process Of Wermgr.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+wermgr\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+cscript\.exe|\\+ipconfig\.exe|\\+mshta\.exe|\\+net\.exe|\\+net1\.exe|\\+netstat\.exe|\\+nslookup\.exe|\\+powershell_ise\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+systeminfo\.exe|\\+whoami\.exe|\\+wscript\.exe)$</field>
    </rule>
    <rule id="901615" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sdbinst_shim_persistence.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects installation of a new shim using sdbinst.exe.
Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims
-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 517490a7-115a-48c6-8862-1a481504d5a8-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.011</id>
        </mitre>
        <description>Potential Shim Database Persistence via Sdbinst.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+sdbinst\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)sdbinst\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.sdb</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+msiexec\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)iisexpressshim\.sdb</field>
    </rule>
    <rule id="901616" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wermgr_susp_exec_location.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious Windows Error Reporting manager (wermgr.exe) execution location.-->
        <!--Date: 2022/10/14-->
        <!--Status: experimental-->
        <!--ID: 5394fcc7-aeb2-43b5-9a09-cac9fc5edcd5-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Suspicious Execution Location Of Wermgr.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wermgr\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+SysWOW64\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+WinSxS\\+)</field>
    </rule>
    <rule id="901617" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_downgrade_attack.yml</info>
        <!--Sigma Rule Author: Harish Segar (rule)-->
        <!--Description: Detects PowerShell downgrade attack by comparing the host versions with the actually used engine version 2.0-->
        <!--Date: 2020/03/20-->
        <!--Status: test-->
        <!--ID: b3512211-c67e-4707-bedc-66efc7848863-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Potential PowerShell Downgrade Attack</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ \-version\ 2\ |\ \-versio\ 2\ |\ \-versi\ 2\ |\ \-vers\ 2\ |\ \-ver\ 2\ |\ \-ve\ 2\ |\ \-v\ 2\ )</field>
    </rule>
    <rule id="901618" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_sharp_chisel.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of the Sharp Chisel via the commandline arguments-->
        <!--Date: 2022/09/05-->
        <!--Status: experimental-->
        <!--ID: cf93e05e-d798-4d9e-b522-b0248dc61eaf-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1090.001</id>
        </mitre>
        <description>HackTool - SharpChisel Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+SharpChisel\.exe)$</field>
        <field name="win.eventdata.product" negate="no" type="pcre2">(?i)SharpChisel</field>
    </rule>
    <rule id="901619" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_onenote_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Tim Rauch (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), Elastic (idea)-->
        <!--Description: Detects suspicious child processes of the Microsoft OneNote application. This may indicate an attempt to execute malicious embedded objects from a .one file.-->
        <!--Date: 2022/10/21-->
        <!--Status: experimental-->
        <!--ID: c27515df-97a9-4162-8a60-dc0eeb51b775-->
        <mitre>
            <id>attack.t1566</id>
            <id>attack.t1566.001</id>
            <id>attack.initial_access</id>
        </mitre>
        <description>Suspicious Microsoft OneNote Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+onenote\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)bitsadmin\.exe|CertOC\.exe|CertUtil\.exe|Cmd\.Exe|CMSTP\.EXE|cscript\.exe|curl\.exe|HH\.exe|IEExec\.exe|InstallUtil\.exe|javaw\.exe|Microsoft\.Workflow\.Compiler\.exe|msdt\.exe|MSHTA\.EXE|msiexec\.exe|Msxsl\.exe|odbcconf\.exe|pcalua\.exe|PowerShell\.EXE|RegAsm\.exe|RegSvcs\.exe|REGSVR32\.exe|RUNDLL32\.exe|schtasks\.exe|ScriptRunner\.exe|wmic\.exe|WorkFolders\.exe|wscript\.exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+AppVLP\.exe|\\+bash\.exe|\\+bitsadmin\.exe|\\+certoc\.exe|\\+certutil\.exe|\\+cmd\.exe|\\+cmstp\.exe|\\+control\.exe|\\+cscript\.exe|\\+curl\.exe|\\+forfiles\.exe|\\+hh\.exe|\\+ieexec\.exe|\\+installutil\.exe|\\+javaw\.exe|\\+mftrace\.exe|\\+Microsoft\.Workflow\.Compiler\.exe|\\+msbuild\.exe|\\+msdt\.exe|\\+mshta\.exe|\\+msidb\.exe|\\+msiexec\.exe|\\+msxsl\.exe|\\+odbcconf\.exe|\\+pcalua\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+regasm\.exe|\\+regsvcs\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+schtasks\.exe|\\+scrcons\.exe|\\+scriptrunner\.exe|\\+sh\.exe|\\+svchost\.exe|\\+verclsid\.exe|\\+wmic\.exe|\\+workfolders\.exe|\\+wscript\.exe)$</field>
    </rule>
    <rule id="901620" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_onenote_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Tim Rauch (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), Elastic (idea)-->
        <!--Description: Detects suspicious child processes of the Microsoft OneNote application. This may indicate an attempt to execute malicious embedded objects from a .one file.-->
        <!--Date: 2022/10/21-->
        <!--Status: experimental-->
        <!--ID: c27515df-97a9-4162-8a60-dc0eeb51b775-->
        <mitre>
            <id>attack.t1566</id>
            <id>attack.t1566.001</id>
            <id>attack.initial_access</id>
        </mitre>
        <description>Suspicious Microsoft OneNote Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+onenote\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+explorer\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.hta|\.vb|\.wsh|\.js|\.ps|\.scr|\.pif|\.bat|\.cmd</field>
    </rule>
    <rule id="901621" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_onenote_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Tim Rauch (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), Elastic (idea)-->
        <!--Description: Detects suspicious child processes of the Microsoft OneNote application. This may indicate an attempt to execute malicious embedded objects from a .one file.-->
        <!--Date: 2022/10/21-->
        <!--Status: experimental-->
        <!--ID: c27515df-97a9-4162-8a60-dc0eeb51b775-->
        <mitre>
            <id>attack.t1566</id>
            <id>attack.t1566.001</id>
            <id>attack.initial_access</id>
        </mitre>
        <description>Suspicious Microsoft OneNote Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+onenote\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+AppData\\+|\\+Users\\+Public\\+|\\+ProgramData\\+|\\+Windows\\+Tasks\\+|\\+Windows\\+Temp\\+|\\+Windows\\+System32\\+Tasks\\+</field>
    </rule>
    <rule id="901622" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_onenote_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Tim Rauch (Nextron Systems), Nasreddine Bencherchali (Nextron Systems), Elastic (idea)-->
        <!--Description: Detects suspicious child processes of the Microsoft OneNote application. This may indicate an attempt to execute malicious embedded objects from a .one file.-->
        <!--Date: 2022/10/21-->
        <!--Status: experimental-->
        <!--ID: c27515df-97a9-4162-8a60-dc0eeb51b775-->
        <mitre>
            <id>attack.t1566</id>
            <id>attack.t1566.001</id>
            <id>attack.initial_access</id>
        </mitre>
        <description>Suspicious Microsoft OneNote Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+onenote\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Microsoft\\+Teams\\+current\\+Teams\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\-Embedding)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Microsoft\\+OneDrive\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+FileCoAuth\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:\-Embedding)$</field>
    </rule>
    <rule id="901623" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_remotefxvgpudisablement_abuse.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects calls to the AtomicTestHarnesses "Invoke-ATHRemoteFXvGPUDisablementCommand" which is designed to abuse the "RemoteFXvGPUDisablement.exe" binary to run custom PowerShell code via module load-order hijacking.-->
        <!--Date: 2021/07/13-->
        <!--Status: test-->
        <!--ID: a6fc3c46-23b8-4996-9ea2-573f4c4d88c5-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>RemoteFXvGPUDisablement Abuse Via AtomicTestHarnesses</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Invoke\-ATHRemoteFXvGPUDisablementCommand|Invoke\-ATHRemoteFXvGPUDisableme</field>
    </rule>
    <rule id="901624" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_zipexec.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: ZipExec is a Proof-of-Concept (POC) tool to wrap binary-based tools into a password-protected zip file.-->
        <!--Date: 2021/11/07-->
        <!--Status: test-->
        <!--ID: 90dcf730-1b71-4ae7-9ffc-6fcf62bd0132-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Suspicious ZipExec Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/generic:Microsoft_Windows_Shell_ZipFolder:filename=</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.zip</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/pass:</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/user:</field>
    </rule>
    <rule id="901625" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_zipexec.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: ZipExec is a Proof-of-Concept (POC) tool to wrap binary-based tools into a password-protected zip file.-->
        <!--Date: 2021/11/07-->
        <!--Status: test-->
        <!--ID: 90dcf730-1b71-4ae7-9ffc-6fcf62bd0132-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Suspicious ZipExec Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/delete</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Microsoft_Windows_Shell_ZipFolder:filename=</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.zip</field>
    </rule>
    <rule id="901626" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_elevated_system_shell.yml</info>
        <!--Sigma Rule Author: frack113, Tim Shelton (update fp)-->
        <!--Description: Detects when a shell program such as the Windows command prompt or PowerShell is launched with system privileges.-->
        <!--Date: 2022/12/05-->
        <!--Status: experimental-->
        <!--ID: 178e615d-e666-498b-9630-9ed363038101-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Elevated System Shell Spawned</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe|\\+cmd\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll|Cmd\.Exe</field>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)AUTHORI|AUTORI</field>
        <field name="win.eventdata.logonId" negate="no" type="pcre2">(?i)0x3e7</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\+Windows\\+System32\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+powershell\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\+Windows\\+System32</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\+Windows\\+WinSxS\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+CompatTelRunner\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i):\\+Windows\\+system32\\+CompatTelRunner\.exe\ \-m:appraiser\.dll\ \-f:DoScheduledTelemetryRun</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+SysWOW64\\+msiexec\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i):\\+Windows\\+syswow64\\+MsiExec\.exe\ \-Embedding</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+RegisterMicrosoftUpdate\.ps1</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)^(?:powershell\.exe\ \-ExecutionPolicy\ Restricted\ \-Command\ \ \$res\ =\ 0;\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)^(?:powershell\.exe\ \-ExecutionPolicy\ Restricted\ \-Command\ Write\-Host\ )</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:Write\-Host\ 'Final\ result:',\ \$Res;)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:Write\-Host\ "Final\ result:",\ \$res)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:Write\-Host\ 'Final\ result:\ 1';)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)/d\ /c\ C:\\+Windows\\+system32\\+silcollector\.cmd</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:cmd\.exe\ /c\ btool\ server\ list\ replication_port\ \-\-no\-log)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?:cmd\.exe\ /c\ btool\ server\ list\ general\ \-\-no\-log)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+Windows\\+system32\\+reg\.exe\ query\ hklm\\+software\\+microsoft\\+windows\\+softwareinventorylogging\ /v\ collectionstate\ /reg:64</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+system32\\+cmd\.exe\ /c\ PAUSE)$</field>
    </rule>
    <rule id="901627" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_elevated_system_shell.yml</info>
        <!--Sigma Rule Author: frack113, Tim Shelton (update fp)-->
        <!--Description: Detects when a shell program such as the Windows command prompt or PowerShell is launched with system privileges.-->
        <!--Date: 2022/12/05-->
        <!--Status: experimental-->
        <!--ID: 178e615d-e666-498b-9630-9ed363038101-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Elevated System Shell Spawned</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe|\\+cmd\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerShell\.EXE|pwsh\.dll|Cmd\.Exe</field>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)AUTHORI|AUTORI</field>
        <field name="win.eventdata.logonId" negate="no" type="pcre2">(?i)0x3e7</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?::\\+ManageEngine\\+ADManager\ Plus\\+pgsql\\+bin\\+postgres\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\+Windows\\+SysWOW64\\+config\\+systemprofile\\+Citrix\\+UpdaterBinaries\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+CitrixReceiverUpdater\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+WINDOWS\\+system32\\+cmd\.exe\ /c\ "</field>
        <field name="win.eventdata.currentDirectory" negate="yes" type="pcre2">(?i):\\+WINDOWS\\+Temp\\+asgard2\-agent\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\+Windows\\+Temp</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+invcol\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i):\\+ProgramData\\+Dell\\+UpdateService\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i):\\+IBM\\+SpectrumProtect\\+webserver\\+scripts\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+IBM\\+SpectrumProtect\\+webserver\\+scripts\\+</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+Windows\\+system32\\+cmd\.exe"\ /C\ copy\ "C:\\+ProgramData\\+Avira\\+SystemSpeedup\\+Update\\+avira_speedup_setup_update\.exe"</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+IBM\\+SpectrumProtect\\+webserver\\+scripts\\+</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)None</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i):\\+IBM\\+SpectrumProtect\\+webserver\\+scripts\\+</field>
    </rule>
    <rule id="901628" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_virtualbox_vboxdrvinst_execution.yml</info>
        <!--Sigma Rule Author: Konstantin Grishchenko, oscd.community-->
        <!--Description: Detect VBoxDrvInst.exe run with parameters allowing processing INF file.
This allows to create values in the registry and install drivers.
For example one could use this technique to obtain persistence via modifying one of Run or RunOnce registry keys
-->
        <!--Date: 2020/10/06-->
        <!--Status: test-->
        <!--ID: b7b19cb6-9b32-4fc4-a108-73f19acfe262-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Suspicious VBoxDrvInst.exe Parameters</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+VBoxDrvInst\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)driver</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)executeinf</field>
    </rule>
    <rule id="901629" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dns_exfiltration_tools_execution.yml</info>
        <!--Sigma Rule Author: Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Well-known DNS Exfiltration tools execution-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: 98a96a5a-64a0-4c42-92c5-489da3866cb0-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1048.001</id>
            <id>attack.command_and_control</id>
            <id>attack.t1071.004</id>
            <id>attack.t1132.001</id>
        </mitre>
        <description>DNS Exfiltration and Tunneling Tools Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+iodine\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+dnscat2</field>
    </rule>
    <rule id="901630" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_csexec.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of the lesser known remote execution tool named CsExec a PsExec alternative-->
        <!--Date: 2022/08/22-->
        <!--Status: experimental-->
        <!--ID: d08a2711-ee8b-4323-bdec-b7d85e892b31-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1587.001</id>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>PUA - CsExec Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+csexec\.exe)$</field>
    </rule>
    <rule id="901631" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_csexec.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of the lesser known remote execution tool named CsExec a PsExec alternative-->
        <!--Date: 2022/08/22-->
        <!--Status: experimental-->
        <!--ID: d08a2711-ee8b-4323-bdec-b7d85e892b31-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1587.001</id>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>PUA - CsExec Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)csexec</field>
    </rule>
    <rule id="901632" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_instalutil_no_log_execution.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Uses the .NET InstallUtil.exe application in order to execute image without log-->
        <!--Date: 2022/01/23-->
        <!--Status: test-->
        <!--ID: d042284c-a296-4988-9be5-f424fadcc28c-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious Execution of InstallUtil Without Log</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+InstallUtil\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)Microsoft\.NET\\+Framework</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:/logfile=\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/LogToConsole=false</field>
    </rule>
    <rule id="901633" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pressanykey_lolbin_execution.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects child processes of Microsoft.NodejsTools.PressAnyKey.exe that can be used to execute any other binary-->
        <!--Date: 2022/01/11-->
        <!--Status: test-->
        <!--ID: a20391f8-76fb-437b-abc0-dba2df1952c6-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Visual Studio NodejsTools PressAnyKey Arbitrary Binary Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+Microsoft\.NodejsTools\.PressAnyKey\.exe)$</field>
    </rule>
    <rule id="901634" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_js_runhtmlapplication.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious command line patterns used when rundll32 is used to run JavaScript code-->
        <!--Date: 2022/01/14-->
        <!--Status: test-->
        <!--ID: 9f06447a-a33a-4cbe-a94f-a3f43184a7a3-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Rundll32 JS RunHTMLApplication Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)javascript</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\.\.\\+\.\.\\+mshtml,RunHTMLApplication</field>
    </rule>
    <rule id="901635" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_rundll32_js_runhtmlapplication.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious command line patterns used when rundll32 is used to run JavaScript code-->
        <!--Date: 2022/01/14-->
        <!--Status: test-->
        <!--ID: 9f06447a-a33a-4cbe-a94f-a3f43184a7a3-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Rundll32 JS RunHTMLApplication Pattern</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i);document\.write\(\);GetObject\("script</field>
    </rule>
    <rule id="901636" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_powershell_script_engine_parent.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious powershell invocations from interpreters or unusual programs-->
        <!--Date: 2019/01/16-->
        <!--Status: test-->
        <!--ID: 95eadcb2-92e4-4ed1-9031-92547773a6db-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious PowerShell Invocation From Script Engines</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+wscript\.exe|\\+cscript\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.currentDirectory" negate="yes" type="pcre2">(?i)\\+Health\ Service\ State\\+</field>
    </rule>
    <rule id="901637" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_netsh_fw_disable.yml</info>
        <!--Sigma Rule Author: Fatih Sirin-->
        <!--Description: Detects netsh commands that turns off the Windows firewall-->
        <!--Date: 2019/11/01-->
        <!--Status: test-->
        <!--ID: 57c4bf16-227f-4394-8ec7-1b745ee061c3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
            <id>attack.s0108</id>
        </mitre>
        <description>Firewall Disabled via Netsh.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+netsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)netsh\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)firewall</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)set</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)opmode</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)disable</field>
    </rule>
    <rule id="901638" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_netsh_fw_disable.yml</info>
        <!--Sigma Rule Author: Fatih Sirin-->
        <!--Description: Detects netsh commands that turns off the Windows firewall-->
        <!--Date: 2019/11/01-->
        <!--Status: test-->
        <!--ID: 57c4bf16-227f-4394-8ec7-1b745ee061c3-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
            <id>attack.s0108</id>
        </mitre>
        <description>Firewall Disabled via Netsh.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+netsh\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)netsh\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)advfirewall</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)set</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)state</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)off</field>
    </rule>
    <rule id="901639" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_net_groups_and_accounts_recon.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), omkar72, @svch0st, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious reconnaissance command line activity on Windows systems using Net.EXE-->
        <!--Date: 2019/01/16-->
        <!--Status: experimental-->
        <!--ID: d95de845-b83c-4a9a-8a6a-4fc802ebf6c0-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1087.001</id>
            <id>attack.t1087.002</id>
        </mitre>
        <description>Suspicious Group And Account Reconnaissance Activity Using Net.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+net\.exe|\\+net1\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)net\.exe|net1\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ group\ |\ localgroup\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)domain\ admins|\ administrator|\ administrateur|enterprise\ admins|Exchange\ Trusted\ Subsystem|Remote\ Desktop\ Users|Utilisateurs\ du\ Bureau\ à\ distance|Usuarios\ de\ escritorio\ remoto|\ /do</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\ /add</field>
    </rule>
    <rule id="901640" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_mimikatz_command_line.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, oscd.community, David ANDRE (additional keywords), Tim Shelton-->
        <!--Description: Detection well-known mimikatz command line arguments-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: a642964e-bead-4bed-8910-1bb4d63e3b4d-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.004</id>
            <id>attack.t1003.005</id>
            <id>attack.t1003.006</id>
        </mitre>
        <description>HackTool - Mimikatz Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)DumpCreds|mimikatz</field>
    </rule>
    <rule id="901641" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_mimikatz_command_line.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, oscd.community, David ANDRE (additional keywords), Tim Shelton-->
        <!--Description: Detection well-known mimikatz command line arguments-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: a642964e-bead-4bed-8910-1bb4d63e3b4d-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.004</id>
            <id>attack.t1003.005</id>
            <id>attack.t1003.006</id>
        </mitre>
        <description>HackTool - Mimikatz Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)::aadcookie|::detours|::memssp|::mflt|::ncroutemon|::ngcsign|::printnightmare|::skeleton|::preshutdown|::mstsc|::multirdp</field>
    </rule>
    <rule id="901642" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_mimikatz_command_line.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, oscd.community, David ANDRE (additional keywords), Tim Shelton-->
        <!--Description: Detection well-known mimikatz command line arguments-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: a642964e-bead-4bed-8910-1bb4d63e3b4d-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.004</id>
            <id>attack.t1003.005</id>
            <id>attack.t1003.006</id>
        </mitre>
        <description>HackTool - Mimikatz Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rpc::|token::|crypto::|dpapi::|sekurlsa::|kerberos::|lsadump::|privilege::|process::|vault::</field>
    </rule>
    <rule id="901643" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_sysinternals_livekd_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of LiveKD based on PE metadata or image name-->
        <!--Date: 2023/05/15-->
        <!--Status: experimental-->
        <!--ID: a85f7765-698a-4088-afa0-ecfbf8d01fa4-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Potential Memory Dumping Activity Via LiveKD</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+livekd\.exe|\\+livekd64\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)livekd\.exe</field>
    </rule>
    <rule id="901644" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_findstr_recon_pipe_output.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), frack113-->
        <!--Description: Detects the excution of a potential recon command where the results are piped to "findstr". This is meant to trigger on inline calls of "cmd.exe" via the "/c" or "/k" for example. Attackers often time use this to extract specific information they require in their chain.
-->
        <!--Date: 2023/07/06-->
        <!--Status: experimental-->
        <!--ID: ccb5742c-c248-4982-8c5c-5571b9275ad3-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1057</id>
        </mitre>
        <description>Recon Command Output Piped To Findstr.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:ipconfig\ /all\ \|\ find\ |ipconfig\ /all\ \|\ findstr\ |ipconfig\ \|\ find\ |ipconfig\ \|\ findstr\ |ipconfig\.exe\ /all\ \|\ find\ |ipconfig\.exe\ /all\ \|\ findstr\ |ipconfig\.exe\ \|\ find\ |ipconfig\.exe\ \|\ findstr\ |net\ start\ \|\ find|net\ start\ \|\ findstr|net\.exe\ start\ \|\ find|net\.exe\ start\ \|\ findstr|net1\ start\ \|\ find|net1\ start\ \|\ findstr|net1\.exe\ start\ \|\ find|net1\.exe\ start\ \|\ findstr|netstat\ \-ano\ \|\ find|netstat\ \-ano\ \|\ findstr|netstat\ \|\ find|netstat\ \|\ findstr|netstat\.exe\ \-ano\ \|\ find|netstat\.exe\ \-ano\ \|\ findstr|netstat\.exe\ \|\ find|netstat\.exe\ \|\ findstr|ping\ \|\ find|ping\ \|\ findstr|ping\.exe\ \|\ find|ping\.exe\ \|\ findstr|systeminfo\ \|\ find\ |systeminfo\ \|\ findstr\ |systeminfo\.exe\ \|\ find\ |systeminfo\.exe\ \|\ findstr\ |tasklist\ \|\ find\ |tasklist\ \|\ findstr\ |tasklist\.exe\ \|\ find\ |tasklist\.exe\ \|\ findstr\ |whoami\ /all\ \|\ find\ |whoami\ /all\ \|\ findstr\ |whoami\.exe\ /all\ \|\ find\ |whoami\.exe\ /all\ \|\ findstr\ )</field>
    </rule>
    <rule id="901645" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_mavinject_process_injection.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth-->
        <!--Description: Detects process injection using the signed Windows tool "Mavinject" via the "INJECTRUNNING" flag-->
        <!--Date: 2021/07/12-->
        <!--Status: test-->
        <!--ID: 4f73421b-5a0b-4bbf-a892-5a7fb99bea66-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055.001</id>
            <id>attack.t1218.013</id>
        </mitre>
        <description>Mavinject Inject DLL Into Running Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ /INJECTRUNNING\ )</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+AppVClient\.exe</field>
    </rule>
    <rule id="901646" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_whoami_susp_flags.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of "whoami.exe" with the "/all" flag or with redirection options to export the results to a file for later use.-->
        <!--Date: 2023/02/28-->
        <!--Status: experimental-->
        <!--ID: c30fb093-1109-4dc8-88a8-b30d11c95a5d-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>car.2016-03-001</id>
        </mitre>
        <description>Suspicious Whoami.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+whoami\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)whoami\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-all|\ /all|\ /FO\ CSV|\ \-FO\ CSV</field>
    </rule>
    <rule id="901647" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_whoami_susp_flags.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of "whoami.exe" with the "/all" flag or with redirection options to export the results to a file for later use.-->
        <!--Date: 2023/02/28-->
        <!--Status: experimental-->
        <!--ID: c30fb093-1109-4dc8-88a8-b30d11c95a5d-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1033</id>
            <id>car.2016-03-001</id>
        </mitre>
        <description>Suspicious Whoami.EXE Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)whoami.+&gt;</field>
    </rule>
    <rule id="901648" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_splwow64_cli_anomaly.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious Splwow64.exe process without any command line parameters-->
        <!--Date: 2021/08/23-->
        <!--Status: test-->
        <!--ID: 1f1a8509-2cbb-44f5-8751-8e1571518ce2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Suspicious Splwow64 Without Params</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+splwow64\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:splwow64\.exe)$</field>
    </rule>
    <rule id="901649" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_ntfs_short_name_use_cli.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detect use of the Windows 8.3 short name. Which could be used as a method to avoid command-line detection-->
        <!--Date: 2022/08/05-->
        <!--Status: test-->
        <!--ID: dd6b39d9-d9be-4a3b-8fe0-fe3c6a5c1795-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Use NTFS Short Name in Command Line</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\~1\.exe|\~1\.bat|\~1\.msi|\~1\.vbe|\~1\.vbs|\~1\.dll|\~1\.ps1|\~1\.js|\~1\.hta|\~2\.exe|\~2\.bat|\~2\.msi|\~2\.vbe|\~2\.vbs|\~2\.dll|\~2\.ps1|\~2\.js|\~2\.hta</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+WebEx\\+WebexHost\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+thor\\+thor64\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+xampp\\+vcredist\\+VCREDI\~1\.EXE</field>
    </rule>
    <rule id="901650" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_wlrmdr.yml</info>
        <!--Sigma Rule Author: frack113, manasmbellani-->
        <!--Description: Detects use of Wlrmdr.exe in which the -u parameter is passed to ShellExecute-->
        <!--Date: 2022/02/16-->
        <!--Status: test-->
        <!--ID: 9cfc00b6-bfb7-49ce-9781-ef78503154bb-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Wlrmdr Lolbin Use as Launcher</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+wlrmdr\.exe)$</field>
    </rule>
    <rule id="901651" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_wlrmdr.yml</info>
        <!--Sigma Rule Author: frack113, manasmbellani-->
        <!--Description: Detects use of Wlrmdr.exe in which the -u parameter is passed to ShellExecute-->
        <!--Date: 2022/02/16-->
        <!--Status: test-->
        <!--ID: 9cfc00b6-bfb7-49ce-9781-ef78503154bb-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Wlrmdr Lolbin Use as Launcher</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wlrmdr\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)WLRMNDR\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-s\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-f\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-t\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-m\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-a\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-u\ )</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+winlogon\.exe</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\-</field>
    </rule>
    <rule id="901652" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_sideload_link_binary.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution utitilies often found in Visual Studio tools that hardcode the call to the binary "link.exe". They can be abused to sideload any binary with the same name-->
        <!--Date: 2022/08/22-->
        <!--Status: test-->
        <!--ID: 6e968eb1-5f05-4dac-94e9-fd0c5cb49fd6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Sideloading Link.EXE</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+link\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)LINK\ /</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Microsoft\ Visual\ Studio\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\ Visual\ Studio\\+)</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)\\+VC\\+Tools\\+MSVC\\+</field>
    </rule>
    <rule id="901653" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wusa_susp_parent_execution.yml</info>
        <!--Sigma Rule Author: X__Junior (Nextron Systems)-->
        <!--Description: Detects execution of the "wusa.exe" (Windows Update Standalone Installer) utility by a parent process that is located in a suspicious location.
-->
        <!--Date: 2023/11/26-->
        <!--Status: experimental-->
        <!--ID: ef64fc9c-a45e-43cc-8fd8-7d75d73b4c99-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Wusa.EXE Executed By Parent Process Located In Suspicious Location</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wusa\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i):\\+Perflogs\\+|:\\+Users\\+Public\\+|:\\+Windows\\+Temp\\+|\\+Appdata\\+Local\\+Temp\\+|\\+Temporary\ Internet</field>
    </rule>
    <rule id="901654" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_wusa_susp_parent_execution.yml</info>
        <!--Sigma Rule Author: X__Junior (Nextron Systems)-->
        <!--Description: Detects execution of the "wusa.exe" (Windows Update Standalone Installer) utility by a parent process that is located in a suspicious location.
-->
        <!--Date: 2023/11/26-->
        <!--Status: experimental-->
        <!--ID: ef64fc9c-a45e-43cc-8fd8-7d75d73b4c99-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Wusa.EXE Executed By Parent Process Located In Suspicious Location</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wusa\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\+Favorites\\+</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\+Favourites\\+</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\+Contacts\\+</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\+Pictures\\+</field>
    </rule>
    <rule id="901655" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_powertool.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution of the tool PowerTool which has the ability to kill a process, delete its process file, unload drivers, and delete the driver files-->
        <!--Date: 2022/11/29-->
        <!--Status: test-->
        <!--ID: a34f79a3-8e5f-4cc3-b765-de00695452c2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>HackTool - PowerTool Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+PowerTool\.exe|\\+PowerTool64\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)PowerTool\.exe</field>
    </rule>
    <rule id="901656" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_type.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of the "type" command to download/upload data from WebDAV server-->
        <!--Date: 2022/12/14-->
        <!--Status: test-->
        <!--ID: aa0b3a82-eacc-4ec3-9150-b5a9a3e3f82f-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Potential Download/Upload Activity Using Type Command</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:type\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ &gt;\ \\+</field>
    </rule>
    <rule id="901657" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_type.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects usage of the "type" command to download/upload data from WebDAV server-->
        <!--Date: 2022/12/14-->
        <!--Status: test-->
        <!--ID: aa0b3a82-eacc-4ec3-9150-b5a9a3e3f82f-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Potential Download/Upload Activity Using Type Command</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)type\ \\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ &gt;\ )</field>
    </rule>
    <rule id="901658" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_certipy.yml</info>
        <!--Sigma Rule Author: pH-T (Nextron Systems)-->
        <!--Description: Detects Certipy a tool for Active Directory Certificate Services enumeration and abuse based on PE metadata characteristics and common command line arguments.-->
        <!--Date: 2023/04/17-->
        <!--Status: experimental-->
        <!--ID: 6938366d-8954-4ddc-baff-c830b3ba8fcd-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.credential_access</id>
            <id>attack.t1649</id>
        </mitre>
        <description>HackTool - Certipy Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+Certipy\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Certipy\.exe</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)Certipy</field>
    </rule>
    <rule id="901659" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_conhost_uncommon_parent.yml</info>
        <!--Sigma Rule Author: Tim Rauch-->
        <!--Description: Detects when the Console Window Host (conhost.exe) process is spawned by an uncommon parent process, which could be indicative of potential code injection activity.-->
        <!--Date: 2022/09/28-->
        <!--Status: experimental-->
        <!--ID: cbb9e3d1-2386-4e59-912e-62f1484f7a89-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Conhost Spawned By Uncommon Parent Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+conhost\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+explorer\.exe|\\+lsass\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+services\.exe|\\+smss\.exe|\\+spoolsv\.exe|\\+svchost\.exe|\\+userinit\.exe|\\+wininit\.exe|\\+winlogon\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\-k\ apphost\ \-s\ AppHostSvc</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\-k\ imgsvc</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\-k\ localService\ \-p\ \-s\ RemoteRegistry</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\-k\ LocalSystemNetworkRestricted\ \-p\ \-s\ NgcSvc</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\-k\ NetSvcs\ \-p\ \-s\ NcaSvc</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\-k\ netsvcs\ \-p\ \-s\ NetSetupSvc</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\-k\ netsvcs\ \-p\ \-s\ wlidsvc</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\-k\ NetworkService\ \-p\ \-s\ DoSvc</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\-k\ wsappx\ \-p\ \-s\ AppXSvc</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\-k\ wsappx\ \-p\ \-s\ ClipSVC</field>
    </rule>
    <rule id="901660" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_conhost_uncommon_parent.yml</info>
        <!--Sigma Rule Author: Tim Rauch-->
        <!--Description: Detects when the Console Window Host (conhost.exe) process is spawned by an uncommon parent process, which could be indicative of potential code injection activity.-->
        <!--Date: 2022/09/28-->
        <!--Status: experimental-->
        <!--ID: cbb9e3d1-2386-4e59-912e-62f1484f7a89-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Conhost Spawned By Uncommon Parent Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+conhost\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+explorer\.exe|\\+lsass\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+services\.exe|\\+smss\.exe|\\+spoolsv\.exe|\\+svchost\.exe|\\+userinit\.exe|\\+wininit\.exe|\\+winlogon\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Dropbox\\+Client\\+</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Dropbox\\+Client\\+</field>
    </rule>
    <rule id="901661" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_cmd_redirect.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the use of the redirection character ">" to redicrect information in commandline-->
        <!--Date: 2022/01/22-->
        <!--Status: experimental-->
        <!--ID: 4f4eaa9f-5ad4-410c-a4be-bc6132b0175a-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1082</id>
        </mitre>
        <description>CMD Shell Output Redirect</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)Cmd\.Exe</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)&gt;</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Internet\ Download\ Manager\\+IDMMsgHost\.exe</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)chrome\-extension://</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)\\+\.\\+pipe\\+chrome\.nativeMessaging</field>
    </rule>
    <rule id="901662" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_utilityfunctions.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the use of a Microsoft signed script executing a managed DLL with PowerShell.-->
        <!--Date: 2022/05/28-->
        <!--Status: test-->
        <!--ID: 0403d67d-6227-4ea8-8145-4e72db7da120-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>UtilityFunctions.ps1 Proxy Dll</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:UtilityFunctions\.ps1|RegSnapin\ )</field>
    </rule>
    <rule id="901663" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_uac_bypass_dismhost.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using DismHost DLL hijacking (UACMe 63)-->
        <!--Date: 2021/08/30-->
        <!--Status: test-->
        <!--ID: 853e74f9-9392-4935-ad3b-2e8c040dae86-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using DismHost</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)C:\\+Users\\+</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\+DismHost\.exe</field>
        <field name="win.eventdata.integrityLevel" negate="no" type="pcre2">(?i)High|System</field>
    </rule>
    <rule id="901664" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_hacking.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects certain parent child patterns found in cases in which a web shell is used to perform certain credential dumping or exfiltration activities on a compromised system
-->
        <!--Date: 2022/03/17-->
        <!--Status: test-->
        <!--ID: 4ebc877f-4612-45cb-b3a5-8e3834db36c9-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Hacking Activity Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+caddy\.exe|\\+httpd\.exe|\\+nginx\.exe|\\+php\-cgi\.exe|\\+w3wp\.exe|\\+ws_tomcatservice\.exe)$</field>
    </rule>

</group>
