<group name="sigma,">
    <rule id="901665" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_hacking.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects certain parent child patterns found in cases in which a web shell is used to perform certain credential dumping or exfiltration activities on a compromised system
-->
        <!--Date: 2022/03/17-->
        <!--Status: test-->
        <!--ID: 4ebc877f-4612-45cb-b3a5-8e3834db36c9-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Hacking Activity Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+java\.exe|\\+javaw\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\-tomcat\-|\\+tomcat</field>
    </rule>
    <rule id="901666" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_hacking.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects certain parent child patterns found in cases in which a web shell is used to perform certain credential dumping or exfiltration activities on a compromised system
-->
        <!--Date: 2022/03/17-->
        <!--Status: test-->
        <!--ID: 4ebc877f-4612-45cb-b3a5-8e3834db36c9-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Hacking Activity Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+java\.exe|\\+javaw\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)catalina\.jar|CATALINA_HOME</field>
    </rule>
    <rule id="901667" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_hacking.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects certain parent child patterns found in cases in which a web shell is used to perform certain credential dumping or exfiltration activities on a compromised system
-->
        <!--Date: 2022/03/17-->
        <!--Status: test-->
        <!--ID: 4ebc877f-4612-45cb-b3a5-8e3834db36c9-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Hacking Activity Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)rundll32</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)comsvcs</field>
    </rule>
    <rule id="901668" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_hacking.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects certain parent child patterns found in cases in which a web shell is used to perform certain credential dumping or exfiltration activities on a compromised system
-->
        <!--Date: 2022/03/17-->
        <!--Status: test-->
        <!--ID: 4ebc877f-4612-45cb-b3a5-8e3834db36c9-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Hacking Activity Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-hp</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ a\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-m</field>
    </rule>
    <rule id="901669" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_hacking.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects certain parent child patterns found in cases in which a web shell is used to perform certain credential dumping or exfiltration activities on a compromised system
-->
        <!--Date: 2022/03/17-->
        <!--Status: test-->
        <!--ID: 4ebc877f-4612-45cb-b3a5-8e3834db36c9-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Hacking Activity Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)net</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ user\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /add</field>
    </rule>
    <rule id="901670" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_hacking.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects certain parent child patterns found in cases in which a web shell is used to perform certain credential dumping or exfiltration activities on a compromised system
-->
        <!--Date: 2022/03/17-->
        <!--Status: test-->
        <!--ID: 4ebc877f-4612-45cb-b3a5-8e3834db36c9-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Hacking Activity Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)net</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ localgroup\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ administrators\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)/add</field>
    </rule>
    <rule id="901671" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_hacking.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects certain parent child patterns found in cases in which a web shell is used to perform certain credential dumping or exfiltration activities on a compromised system
-->
        <!--Date: 2022/03/17-->
        <!--Status: test-->
        <!--ID: 4ebc877f-4612-45cb-b3a5-8e3834db36c9-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Hacking Activity Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ntdsutil\.exe|\\+ldifde\.exe|\\+adfind\.exe|\\+procdump\.exe|\\+Nanodump\.exe|\\+vssadmin\.exe|\\+fsutil\.exe)$</field>
    </rule>
    <rule id="901672" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_webshell_hacking.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects certain parent child patterns found in cases in which a web shell is used to perform certain credential dumping or exfiltration activities on a compromised system
-->
        <!--Date: 2022/03/17-->
        <!--Status: test-->
        <!--ID: 4ebc877f-4612-45cb-b3a5-8e3834db36c9-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
            <id>attack.t1018</id>
            <id>attack.t1033</id>
            <id>attack.t1087</id>
        </mitre>
        <description>Webshell Hacking Activity Patterns</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ \-decode\ |\ \-NoP\ |\ \-W\ Hidden\ |\ /decode\ |\ /ticket:|\ sekurlsa|\.dmp\ full|\.downloadfile\(|\.downloadstring\(|FromBase64String|process\ call\ create|reg\ save\ |whoami\ /priv</field>
    </rule>
    <rule id="901673" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_lolbin_gpscript.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the execution of the LOLBIN gpscript, which executes logon or startup scripts configured in Group Policy-->
        <!--Date: 2022/05/16-->
        <!--Status: experimental-->
        <!--ID: 1e59c230-6670-45bf-83b0-98903780607e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Gpscript Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+gpscript\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)GPSCRIPT\.EXE</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ /logon|\ /startup</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)C:\\+windows\\+system32\\+svchost\.exe\ \-k\ netsvcs\ \-p\ \-s\ gpsvc</field>
    </rule>
    <rule id="901674" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_silenttrinity_stager.yml</info>
        <!--Sigma Rule Author: Aleksey Potapov, oscd.community-->
        <!--Description: Detects SILENTTRINITY stager use via PE metadata-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: 03552375-cc2c-4883-bbe4-7958d5a980be-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1071</id>
        </mitre>
        <description>HackTool - SILENTTRINITY Stager Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)st2stager</field>
    </rule>
    <rule id="901675" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_use_of_te_bin.yml</info>
        <!--Sigma Rule Author: Agro (@agro_sev) oscd.community-->
        <!--Description: Windows Test Authoring and Execution Framework (TAEF) framework allows you to run automation by executing tests files written on different languages (C, C#, Microsoft COM Scripting interfaces
Adversaries may execute malicious code (such as WSC file with VBScript, dll and so on) directly by running te.exe
-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: 634b00d5-ccc3-4a06-ae3b-0ec8444dd51b-->
        <mitre>
            <id>attack.t1218</id>
        </mitre>
        <description>Malicious Windows Script Components File Execution by TAEF Detection</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+te\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+te\.exe)$</field>
        <field name="win.eventdata.originalFileName" negate="no" type="pcre2">(?i)\\+te\.exe</field>
    </rule>
    <rule id="901676" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_outlook_susp_child_processes.yml</info>
        <!--Sigma Rule Author: Michael Haag, Florian Roth (Nextron Systems), Markus Neis, Elastic, FPT.EagleEye Team-->
        <!--Description: Detects a suspicious process spawning from an Outlook process.-->
        <!--Date: 2022/02/28-->
        <!--Status: test-->
        <!--ID: 208748f7-881d-47ac-a29c-07ea84bf691d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204.002</id>
        </mitre>
        <description>Suspicious Outlook Child Process</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+OUTLOOK\.EXE)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+AppVLP\.exe|\\+bash\.exe|\\+cmd\.exe|\\+cscript\.exe|\\+forfiles\.exe|\\+hh\.exe|\\+mftrace\.exe|\\+msbuild\.exe|\\+msdt\.exe|\\+mshta\.exe|\\+msiexec\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+regsvr32\.exe|\\+schtasks\.exe|\\+scrcons\.exe|\\+scriptrunner\.exe|\\+sh\.exe|\\+svchost\.exe|\\+wmic\.exe|\\+wscript\.exe)$</field>
    </rule>
    <rule id="901677" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_office_outlook_susp_child_processes_remote.yml</info>
        <!--Sigma Rule Author: Markus Neis, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects a suspicious child process spawning from Outlook where the image is located in a remote location (SMB/WebDav shares).-->
        <!--Date: 2018/12/27-->
        <!--Status: test-->
        <!--ID: e212d415-0e93-435f-9e1a-f29005bb4723-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Suspicious Remote Child Process From Outlook</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+outlook\.exe)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)^(?:\\+)</field>
    </rule>
    <rule id="901678" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_defendercheck.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of DefenderCheck, a tool to evaluate the signatures used in Microsoft Defender. It can be used to figure out the strings / byte chains used in Microsoft Defender to detect a tool and thus used for AV evasion.-->
        <!--Date: 2022/08/30-->
        <!--Status: test-->
        <!--ID: f0ca6c24-3225-47d5-b1f5-352bf07ecfa7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027.005</id>
        </mitre>
        <description>PUA - DefenderCheck Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+DefenderCheck\.exe)$</field>
        <field name="win.eventdata.description" negate="no" type="pcre2">(?i)DefenderCheck</field>
    </rule>
    <rule id="901679" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_gmer.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution GMER tool based on image and hash fields.-->
        <!--Date: 2022/10/05-->
        <!--Status: experimental-->
        <!--ID: 9082ff1f-88ab-4678-a3cc-5bcff99fc74d-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>HackTool - GMER Rootkit Detector and Remover Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+gmer\.exe)$</field>
    </rule>
    <rule id="901680" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_gmer.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution GMER tool based on image and hash fields.-->
        <!--Date: 2022/10/05-->
        <!--Status: experimental-->
        <!--ID: 9082ff1f-88ab-4678-a3cc-5bcff99fc74d-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>HackTool - GMER Rootkit Detector and Remover Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)MD5=E9DC058440D321AA17D0600B3CA0AB04|SHA1=539C228B6B332F5AA523E5CE358C16647D8BBE57|SHA256=E8A3E804A96C716A3E9B69195DB6FFB0D33E2433AF871E4D4E1EAB3097237173</field>
    </rule>
    <rule id="901681" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_gmer.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the execution GMER tool based on image and hash fields.-->
        <!--Date: 2022/10/05-->
        <!--Status: experimental-->
        <!--ID: 9082ff1f-88ab-4678-a3cc-5bcff99fc74d-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>HackTool - GMER Rootkit Detector and Remover Execution</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)e9dc058440d321aa17d0600b3ca0ab04</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)539c228b6b332f5aa523e5ce358c16647d8bbe57</field>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)e8a3e804a96c716a3e9b69195db6ffb0d33e2433af871e4d4e1eab3097237173</field>
    </rule>
    <rule id="901682" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_dll_sideload_vmware_xfer.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects execution of VMware Xfer utility (VMwareXferlogs.exe) from the non-default directory which may be an attempt to sideload arbitrary DLL-->
        <!--Date: 2022/08/02-->
        <!--Status: test-->
        <!--ID: ebea773c-a8f1-42ad-a856-00cb221966e8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>DLL Sideloading by VMware Xfer Utility</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+VMwareXferlogs\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+VMware\\+)</field>
    </rule>
    <rule id="901683" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_crackmapexec_patterns.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious process patterns found in logs when CrackMapExec is used-->
        <!--Date: 2022/03/12-->
        <!--Status: experimental-->
        <!--ID: f26307d8-14cd-47e3-a26b-4b4769f24af6-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>HackTool - CrackMapExec Process Patterns</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:tasklist\ /fi\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)Imagename\ eq\ lsass\.exe</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:cmd\.exe\ /c\ |cmd\.exe\ /r\ |cmd\.exe\ /k\ |cmd\ /c\ |cmd\ /r\ |cmd\ /k\ )</field>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)AUTHORI|AUTORI</field>
    </rule>
    <rule id="901684" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_crackmapexec_patterns.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious process patterns found in logs when CrackMapExec is used-->
        <!--Date: 2022/03/12-->
        <!--Status: experimental-->
        <!--ID: f26307d8-14cd-47e3-a26b-4b4769f24af6-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>HackTool - CrackMapExec Process Patterns</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)do\ rundll32\.exe\ C:\\+windows\\+System32\\+comsvcs\.dll,\ MiniDump</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\\+Windows\\+Temp\\+</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)\ full</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)%%B</field>
    </rule>
    <rule id="901685" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_hktl_crackmapexec_patterns.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious process patterns found in logs when CrackMapExec is used-->
        <!--Date: 2022/03/12-->
        <!--Status: experimental-->
        <!--ID: f26307d8-14cd-47e3-a26b-4b4769f24af6-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>HackTool - CrackMapExec Process Patterns</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)tasklist\ /v\ /fo\ csv</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)findstr\ /i\ "lsass"</field>
    </rule>
    <rule id="901686" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_pua_rclone_execution.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj, Sittikorn S, Aaron Greetham (@beardofbinary) - NCC Group-->
        <!--Description: Detects execution of RClone utility for exfiltration as used by various ransomwares strains like REvil, Conti, FiveHands, etc-->
        <!--Date: 2021/05/10-->
        <!--Status: experimental-->
        <!--ID: e37db05d-d1f9-49c8-b464-cee1a4b11638-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.002</id>
        </mitre>
        <description>PUA - Rclone Execution</description>
        <options>no_full_log</options>
        <group>windows,process_creation,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-\-config\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\-\-no\-check\-certificate\ )</field>
        <field name="win.eventdata.commandLine" negate="no" type="pcre2">(?i)(?:\ copy\ )</field>
    </rule>
    <rule id="901687" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_creation/proc_creation_win_susp_16bit_application.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Ntvdm.exe allows the execution of 16-bit Windows applications on 32-bit Windows operating systems, as well as the execution of both 16-bit and 32-bit DOS applications-->
        <!--Date: 2022/07/16-->
        <!--Status: test-->
        <!--ID: 16905e21-66ee-42fe-b256-1318ada2d770-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Start of NT Virtual DOS Machine</description>
        <options>no_full_log</options>
        <group>process_creation,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ntvdm\.exe|\\+csrstub\.exe)$</field>
    </rule>
    <rule id="901688" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_susp_temp_use.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a driver load from a temporary directory-->
        <!--Date: 2017/02/12-->
        <!--Status: test-->
        <!--ID: 2c4523d5-d481-4ed0-8ec3-7fbf0cb41a75-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Suspicious Driver Load from Temp</description>
        <options>no_full_log</options>
        <group>driver_load,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)\\+Temp\\+</field>
    </rule>

    <rule id="901690" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_windivert.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the load of the Windiver driver, a powerful user-mode capture/sniffing/modification/blocking/re-injection package for Windows-->
        <!--Date: 2021/07/30-->
        <!--Status: test-->
        <!--ID: 679085d5-f427-4484-9f58-1dc30a7c426d-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1599.001</id>
            <id>attack.t1557.001</id>
        </mitre>
        <description>WinDivert Driver Load</description>
        <options>no_full_log</options>
        <group>driver_load,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)\\+WinDivert\.sys|\\+WinDivert64\.sys|\\+NordDivert\.sys|\\+lingtiwfp\.sys|\\+eswfp\.sys</field>
    </rule>
    <rule id="901691" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_windivert.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the load of the Windiver driver, a powerful user-mode capture/sniffing/modification/blocking/re-injection package for Windows-->
        <!--Date: 2021/07/30-->
        <!--Status: test-->
        <!--ID: 679085d5-f427-4484-9f58-1dc30a7c426d-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1599.001</id>
            <id>attack.t1557.001</id>
        </mitre>
        <description>WinDivert Driver Load</description>
        <options>no_full_log</options>
        <group>driver_load,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=0604bb7cb4bb851e2168d5c7d9399087|IMPHASH=2e5f0e649d97f32b03c09e4686d0574f|IMPHASH=52f8aa269f69f0edad9e8fcdaedce276|IMPHASH=c0e5d314da39dbf65a2dbff409cc2c76|IMPHASH=58623490691babe8330adc81cd04a663|IMPHASH=8ee39b48656e4d6b8459d7ba7da7438b|IMPHASH=45ee545ae77e8d43fc70ede9efcd4c96|IMPHASH=a1b2e245acd47e4a348e1a552a02859a|IMPHASH=2a5f85fe4609461c6339637594fa9b0a|IMPHASH=6b2c6f95233c2914d1d488ee27531acc|IMPHASH=9f2fdd3f9ab922bbb0560a7df46f4342|IMPHASH=d8a719865c448b1bd2ec241e46ac1c88|IMPHASH=0ea54f8c9af4a2fe8367fa457f48ed38|IMPHASH=9d519ae0a0864d6d6ae3f8b6c9c70af6|IMPHASH=a74929edfc3289895e3f2885278947ae|IMPHASH=a66b476c2d06c370f0a53b5537f2f11e|IMPHASH=bdcd836a46bc2415773f6b5ea77a46e4|IMPHASH=c28cd6ccd83179e79dac132a553693d9</field>
    </rule>
    <rule id="901692" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_windivert.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the load of the Windiver driver, a powerful user-mode capture/sniffing/modification/blocking/re-injection package for Windows-->
        <!--Date: 2021/07/30-->
        <!--Status: test-->
        <!--ID: 679085d5-f427-4484-9f58-1dc30a7c426d-->
        <mitre>
            <id>attack.collection</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1599.001</id>
            <id>attack.t1557.001</id>
        </mitre>
        <description>WinDivert Driver Load</description>
        <options>no_full_log</options>
        <group>driver_load,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)0604bb7cb4bb851e2168d5c7d9399087|2e5f0e649d97f32b03c09e4686d0574f|52f8aa269f69f0edad9e8fcdaedce276|c0e5d314da39dbf65a2dbff409cc2c76|58623490691babe8330adc81cd04a663|8ee39b48656e4d6b8459d7ba7da7438b|45ee545ae77e8d43fc70ede9efcd4c96|a1b2e245acd47e4a348e1a552a02859a|2a5f85fe4609461c6339637594fa9b0a|6b2c6f95233c2914d1d488ee27531acc|9f2fdd3f9ab922bbb0560a7df46f4342|d8a719865c448b1bd2ec241e46ac1c88|0ea54f8c9af4a2fe8367fa457f48ed38|9d519ae0a0864d6d6ae3f8b6c9c70af6|a74929edfc3289895e3f2885278947ae|a66b476c2d06c370f0a53b5537f2f11e|bdcd836a46bc2415773f6b5ea77a46e4|c28cd6ccd83179e79dac132a553693d9</field>
    </rule>
    <rule id="901693" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_vuln_hevd_driver.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the load of HackSys Extreme Vulnerable Driver which is an intentionally vulnerable Windows driver developed for security enthusiasts to learn and polish their exploitation skills at Kernel level and often abused by threat actors-->
        <!--Date: 2022/08/18-->
        <!--Status: test-->
        <!--ID: 295c9289-acee-4503-a571-8eacaef36b28-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Vulnerable HackSys Extreme Vulnerable Driver Load</description>
        <options>no_full_log</options>
        <group>windows,driver_load,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\+HEVD\.sys)$</field>
    </rule>
    <rule id="901694" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_vuln_hevd_driver.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the load of HackSys Extreme Vulnerable Driver which is an intentionally vulnerable Windows driver developed for security enthusiasts to learn and polish their exploitation skills at Kernel level and often abused by threat actors-->
        <!--Date: 2022/08/18-->
        <!--Status: test-->
        <!--ID: 295c9289-acee-4503-a571-8eacaef36b28-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Vulnerable HackSys Extreme Vulnerable Driver Load</description>
        <options>no_full_log</options>
        <group>windows,driver_load,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=f26d0b110873a1c7d8c4f08fbeab89c5|IMPHASH=c46ea2e651fd5f7f716c8867c6d13594</field>
    </rule>
    <rule id="901695" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_vuln_hevd_driver.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the load of HackSys Extreme Vulnerable Driver which is an intentionally vulnerable Windows driver developed for security enthusiasts to learn and polish their exploitation skills at Kernel level and often abused by threat actors-->
        <!--Date: 2022/08/18-->
        <!--Status: test-->
        <!--ID: 295c9289-acee-4503-a571-8eacaef36b28-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Vulnerable HackSys Extreme Vulnerable Driver Load</description>
        <options>no_full_log</options>
        <group>windows,driver_load,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)f26d0b110873a1c7d8c4f08fbeab89c5|c46ea2e651fd5f7f716c8867c6d13594</field>
    </rule>
    <rule id="901696" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_pua_process_hacker.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects driver load of the Process Hacker tool-->
        <!--Date: 2022/11/16-->
        <!--Status: experimental-->
        <!--ID: 67add051-9ee7-4ad3-93ba-42935615ae8d-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>cve.2021.21551</id>
            <id>attack.t1543</id>
        </mitre>
        <description>PUA - Process Hacker Driver Load</description>
        <options>no_full_log</options>
        <group>driver_load,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\+kprocesshacker\.sys)$</field>
    </rule>
    <rule id="901697" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_pua_process_hacker.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects driver load of the Process Hacker tool-->
        <!--Date: 2022/11/16-->
        <!--Status: experimental-->
        <!--ID: 67add051-9ee7-4ad3-93ba-42935615ae8d-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>cve.2021.21551</id>
            <id>attack.t1543</id>
        </mitre>
        <description>PUA - Process Hacker Driver Load</description>
        <options>no_full_log</options>
        <group>driver_load,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=821D74031D3F625BCBD0DF08B70F1E77|IMPHASH=F86759BB4DE4320918615DC06E998A39|IMPHASH=0A64EEB85419257D0CE32BD5D55C3A18|IMPHASH=6E7B34DFC017700B1517B230DF6FF0D0</field>
    </rule>
    <rule id="901698" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_pua_process_hacker.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects driver load of the Process Hacker tool-->
        <!--Date: 2022/11/16-->
        <!--Status: experimental-->
        <!--ID: 67add051-9ee7-4ad3-93ba-42935615ae8d-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>cve.2021.21551</id>
            <id>attack.t1543</id>
        </mitre>
        <description>PUA - Process Hacker Driver Load</description>
        <options>no_full_log</options>
        <group>driver_load,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)821D74031D3F625BCBD0DF08B70F1E77|F86759BB4DE4320918615DC06E998A39|0A64EEB85419257D0CE32BD5D55C3A18|6E7B34DFC017700B1517B230DF6FF0D0</field>
    </rule>
    <rule id="901699" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_powershell_script_installed_as_service.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: Detects powershell script installed as a Service-->
        <!--Date: 2020/10/06-->
        <!--Status: test-->
        <!--ID: 46deb5e1-28c9-4905-b2df-51cdcc9e6073-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>PowerShell Scripts Run by a Services</description>
        <options>no_full_log</options>
        <group>windows,driver_load,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)powershell|pwsh</field>
    </rule>
    <rule id="901700" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_vuln_winring0_driver.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the load of a signed WinRing0 driver often used by threat actors, crypto miners (XMRIG) or malware for privilege escalation-->
        <!--Date: 2022/07/26-->
        <!--Status: test-->
        <!--ID: 1a42dfa6-6cb2-4df9-9b48-295be477e835-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Vulnerable WinRing0 Driver Load</description>
        <options>no_full_log</options>
        <group>windows,driver_load,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\+WinRing0x64\.sys|\\+WinRing0\.sys|\\+WinRing0\.dll|\\+WinRing0x64\.dll|\\+winring00x64\.sys)$</field>
    </rule>
    <rule id="901701" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_vuln_winring0_driver.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the load of a signed WinRing0 driver often used by threat actors, crypto miners (XMRIG) or malware for privilege escalation-->
        <!--Date: 2022/07/26-->
        <!--Status: test-->
        <!--ID: 1a42dfa6-6cb2-4df9-9b48-295be477e835-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Vulnerable WinRing0 Driver Load</description>
        <options>no_full_log</options>
        <group>windows,driver_load,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)IMPHASH=D41FA95D4642DC981F10DE36F4DC8CD7</field>
    </rule>
    <rule id="901702" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_vuln_winring0_driver.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the load of a signed WinRing0 driver often used by threat actors, crypto miners (XMRIG) or malware for privilege escalation-->
        <!--Date: 2022/07/26-->
        <!--Status: test-->
        <!--ID: 1a42dfa6-6cb2-4df9-9b48-295be477e835-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>Vulnerable WinRing0 Driver Load</description>
        <options>no_full_log</options>
        <group>windows,driver_load,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.impHash" negate="no" type="pcre2">(?i)d41fa95d4642dc981f10de36f4dc8cd7</field>
    </rule>
    <rule id="901703" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_mal_drivers_names.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the load of known malicious drivers via their names only.-->
        <!--Date: 2022/10/03-->
        <!--Status: experimental-->
        <!--ID: 39b64854-5497-4b57-a448-40977b8c9679-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
            <id>attack.t1068</id>
        </mitre>
        <description>Malicious Driver Load By Name</description>
        <options>no_full_log</options>
        <group>windows,driver_load,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\+malicious\.sys|\\+daxin_blank5\.sys|\\+ntbios\.sys|\\+kt2\.sys|\\+7\.sys|\\+daxin_blank1\.sys|\\+ktes\.sys|\\+e29f6311ae87542b3d693c1f38e4e3ad\.sys|\\+wantd_3\.sys|\\+mlgbbiicaihflrnh\.sys|\\+poortry\.sys|\\+daxin_blank2\.sys|\\+spwizimgvt\.sys|\\+daxin_blank6\.sys|\\+nlslexicons0024uvn\.sys|\\+daxin_blank\.sys|\\+air_system10\.sys|\\+4748696211bd56c2d93c21cab91e82a5\.sys|\\+a9df5964635ef8bd567ae487c3d214c4\.sys|\\+daxin_blank3\.sys|\\+mimikatz\.sys|\\+fur\.sys|\\+gftkyj64\.sys|\\+gmer64\.sys|\\+mimidrv\.sys|\\+dkrtk\.sys|\\+4118b86e490aed091b1a219dba45f332\.sys|\\+1fc7aeeff3ab19004d2e53eae8160ab1\.sys|\\+msqpq\.sys|\\+lctka\.sys|\\+c94f405c5929cfcccc8ad00b42c95083\.sys|\\+pciecubed\.sys|\\+telephonuafy\.sys|\\+poortry1\.sys|\\+6771b13a53b9c7449d4891e427735ea2\.sys|\\+834761775\.sys|\\+blacklotus_driver\.sys|\\+fgme\.sys|\\+kapchelper_x64\.sys|\\+typelibde\.sys|\\+wfshbr64\.sys|\\+wantd_2\.sys|\\+a26363e7b02b13f2b8d697abb90cd5c3\.sys|\\+sense5ext\.sys|\\+nodedriver\.sys|\\+a236e7d654cd932b7d11cb604629a2d0\.sys|\\+ktmutil7odm\.sys|\\+wintapix\.sys|\\+prokiller64\.sys|\\+reddriver\.sys|\\+4\.sys|\\+wantd_6\.sys|\\+ktgn\.sys|\\+poortry2\.sys|\\+ntbios_2\.sys|\\+nqrmq\.sys|\\+wantd_4\.sys|\\+ef0e1725aaf0c6c972593f860531a2ea\.sys|\\+wantd\.sys|\\+be6318413160e589080df02bb3ca6e6a\.sys|\\+ndislan\.sys|\\+5a4fe297c7d42539303137b6d75b150d\.sys|\\+wantd_5\.sys|\\+e939448b28a4edc81f1f974cebf6e7d2\.sys|\\+2\.sys|\\+windbg\.sys|\\+mjj0ge\.sys|\\+daxin_blank4\.sys)$</field>
    </rule>

    <rule id="901705" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_vuln_drivers_names.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the load of known vulnerable drivers via their names only.-->
        <!--Date: 2022/10/03-->
        <!--Status: experimental-->
        <!--ID: 72cd00d6-490c-4650-86ff-1d11f491daa1-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
            <id>attack.t1068</id>
        </mitre>
        <description>Vulnerable Driver Load By Name</description>
        <options>no_full_log</options>
        <group>windows,driver_load,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\+lv561av\.sys|\\+hpportiox64\.sys|\\+d2\.sys|\\+rtcore64\.sys|\\+gdrv\.sys|\\+fiddrv\.sys|\\+fiddrv64\.sys|\\+asio32\.sys|\\+cpupress\.sys|\\+chaos\-rootkit\.sys|\\+eio\.sys|\\+kfeco11x64\.sys|\\+atillk64\.sys|\\+gvcidrv64\.sys|\\+eneio64\.sys|\\+lgdcatcher\.sys|\\+ene\.sys|\\+t7\.sys|\\+hwrwdrv\.sys|\\+bs_rciow1064\.sys|\\+amp\.sys|\\+mhyprot2\.sys|\\+agent64\.sys|\\+asupio\.sys|\\+d4\.sys|\\+wiseunlo\.sys|\\+msrhook\.sys|\\+winiodrv\.sys|\\+driver7\-x64\.sys|\\+proxy32\.sys|\\+bsmemx64\.sys|\\+msio64\.sys|\\+amigendrv64\.sys|\\+ni\.sys|\\+smep_namco\.sys|\\+bs_rcio64\.sys|\\+black\.sys|\\+testbone\.sys|\\+blackbonedrv10\.sys|\\+nchgbios2x64\.sys|\\+lgcoretemp\.sys|\\+hostnt\.sys|\\+viraglt64\.sys|\\+t\.sys|\\+kbdcap64\.sys|\\+winflash64\.sys|\\+windows\-xp\-64\.sys|\\+asribdrv\.sys|\\+citmdrv_amd64\.sys|\\+enetechio64\.sys|\\+vproeventmonitor\.sys|\\+amifldrv64\.sys|\\+my\.sys|\\+amdpowerprofiler\.sys|\\+80\.sys|\\+dbutil_2_3\.sys|\\+asrrapidstartdrv\.sys|\\+b3\.sys|\\+nbiolib_x64\.sys|\\+nicm\.sys|\\+bs_flash64\.sys|\\+kevp64\.sys|\\+hw\.sys|\\+bwrs\.sys|\\+wcpu\.sys|\\+nt6\.sys|\\+asrsmartconnectdrv\.sys|\\+phymem64\.sys|\\+winio32\.sys|\\+dbutildrv2\.sys|\\+segwindrvx64\.sys|\\+netproxydriver\.sys|\\+ctiio64\.sys|\\+inpoutx64\.sys|\\+nscm\.sys|\\+procexp\.sys|\\+nstrwsk\.sys|\\+tmcomm\.sys|\\+asrdrv103\.sys|\\+smep_capcom\.sys|\\+gametersafe\.sys|\\+piddrv\.sys|\\+fairplaykd\.sys|\\+sfdrvx32\.sys|\\+kfeco10x64\.sys|\\+phymemx64\.sys|\\+bs_hwmio64\.sys|\\+asrdrv101\.sys|\\+hwos2ec10x64\.sys|\\+rzpnk\.sys|\\+asrsetupdrv103\.sys|\\+winio32b\.sys|\\+phlashnt\.sys|\\+bs_def\.sys|\\+d\.sys|\\+dcr\.sys|\\+nt5\.sys|\\+citmdrv_ia64\.sys|\\+driver7\-x86\.sys|\\+asrdrv104\.sys|\\+bwrsh\.sys|\\+asrdrv106\.sys|\\+atszio64\.sys|\\+directio64\.sys|\\+elrawdsk\.sys|\\+ucorew64\.sys|\\+fidpcidrv64\.sys|\\+bsmi\.sys|\\+b1\.sys|\\+magdrvamd64\.sys|\\+elbycdio\.sys|\\+winio64\.sys|\\+winio64a\.sys|\\+physmem\.sys|\\+monitor_win10_x64\.sys|\\+panio\.sys|\\+asio64\.sys|\\+fidpcidrv\.sys|\\+aswvmm\.sys|\\+atszio\.sys|\\+mhyprot3\.sys|\\+gameink\.sys|\\+alsysio64\.sys|\\+kprocesshacker\.sys|\\+d3\.sys|\\+ncpl\.sys|\\+asupio64\.sys|\\+bw\.sys|\\+iobitunlocker\.sys|\\+rtkio\.sys|\\+bs_i2cio\.sys|\\+amdryzenmasterdriver\.sys|\\+81\.sys|\\+b\.sys|\\+asio\.sys|\\+otipcibus\.sys|\\+winio64b\.sys|\\+directio32\.sys|\\+panmonfltx64\.sys|\\+vboxusb\.sys|\\+t3\.sys|\\+semav6msr\.sys|\\+etdsupp\.sys|\\+vboxdrv\.sys|\\+proxy64\.sys|\\+lurker\.sys|\\+winio32a\.sys|\\+nt3\.sys|\\+glckio2\.sys|\\+sandra\.sys|\\+asmmap64\.sys|\\+mhyprot\.sys|\\+driver7\-x86\-withoutdbg\.sys|\\+nt2\.sys|\\+iqvw64\.sys|\\+lmiinfo\.sys|\\+dh_kernel_10\.sys|\\+naldrv\.sys|\\+c\.sys|\\+bs_hwmio64_w10\.sys|\\+bsmixp64\.sys|\\+t8\.sys|\\+dbk64\.sys|\\+asrdrv102\.sys|\\+windows7\-32\.sys|\\+1\.sys|\\+dh_kernel\.sys|\\+ntiolib\.sys|\\+viragt64\.sys|\\+lenovodiagnosticsdriver\.sys|\\+cpuz\.sys|\\+cpuz141\.sys|\\+speedfan\.sys|\\+se64a\.sys|\\+mtcbsv64\.sys|\\+tgsafe\.sys|\\+nvflash\.sys|\\+nt4\.sys|\\+irec\.sys|\\+lha\.sys|\\+echo_driver\.sys|\\+cupfixerx64\.sys|\\+winio64c\.sys|\\+dbutil\.sys|\\+viragt\.sys|\\+msio32\.sys|\\+vmdrv\.sys|\\+pchunter\.sys|\\+ssport\.sys|\\+asromgdrv\.sys|\\+adv64drv\.sys|\\+superbmc\.sys|\\+asrdrv10\.sys|\\+paniox64\.sys|\\+mydrivers\.sys|\\+bedaisy\.sys|\\+aswarpot\.sys|\\+rwdrv\.sys|\\+amsdk\.sys|\\+bs_def64\.sys|\\+sysdrv3s\.sys|\\+openlibsys\.sys|\\+netflt\.sys|\\+protects\.sys|\\+cpuz_x64\.sys|\\+bs_i2c64\.sys|\\+nvflsh64\.sys|\\+bsmix64\.sys|\\+b4\.sys|\\+bandai\.sys|\\+bs_rcio\.sys|\\+libnicm\.sys|\\+corsairllaccess64\.sys|\\+iomap64\.sys|\\+iomem64\.sys|\\+wyproxy64\.sys|\\+full\.sys|\\+winring0\.sys|\\+nstr\.sys|\\+fd3b7234419fafc9bdd533f48896ed73_b816c5cd\.sys|\\+iqvw64e\.sys|\\+netfilterdrv\.sys|\\+zam64\.sys|\\+hwos2ec7x64\.sys|\\+ntiolib_x64\.sys|\\+capcom\.sys|\\+asrautochkupddrv\.sys|\\+directio\.sys|\\+windows8\-10\-32\.sys|\\+sysinfo\.sys|\\+panmonflt\.sys|\\+piddrv64\.sys|\\+goad\.sys)$</field>
    </rule>
    <rule id="901706" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_mal_creddumper.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Teymur Kheirkhabarov, Daniil Yugoslavskiy, oscd.community-->
        <!--Description: Detects well-known credential dumping tools execution via service execution events-->
        <!--Date: 2017/03/05-->
        <!--Status: test-->
        <!--ID: df5ff0a5-f83f-4a5b-bba1-3e6a3f6f6ea2-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.execution</id>
            <id>attack.t1003.001</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.004</id>
            <id>attack.t1003.005</id>
            <id>attack.t1003.006</id>
            <id>attack.t1569.002</id>
            <id>attack.s0005</id>
        </mitre>
        <description>Credential Dumping Tools Service Execution</description>
        <options>no_full_log</options>
        <group>windows,driver_load,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)cachedump|dumpsvc|fgexec|gsecdump|mimidrv|pwdump|servpw</field>
    </rule>
    <rule id="901707" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_pua_system_informer.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects driver load of the System Informer tool-->
        <!--Date: 2023/05/08-->
        <!--Status: experimental-->
        <!--ID: 10cb6535-b31d-4512-9962-513dcbc42cc1-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543</id>
        </mitre>
        <description>PUA - System Informer Driver Load</description>
        <options>no_full_log</options>
        <group>driver_load,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.imageLoaded" negate="no" type="pcre2">(?i)(?:\\+SystemInformer\.sys)$</field>
    </rule>
    <rule id="901708" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_pua_system_informer.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects driver load of the System Informer tool-->
        <!--Date: 2023/05/08-->
        <!--Status: experimental-->
        <!--ID: 10cb6535-b31d-4512-9962-513dcbc42cc1-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543</id>
        </mitre>
        <description>PUA - System Informer Driver Load</description>
        <options>no_full_log</options>
        <group>driver_load,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)SHA256=8B9AD98944AC9886EA4CB07700E71B78BE4A2740934BB7E46CA3B56A7C59AD24|SHA256=A41348BEC147CA4D9EA2869817527EB5CEA2E20202AF599D2B30625433BCF454|SHA256=38EE0A88AF8535A11EFE8D8DA9C6812AA07067B75A64D99705A742589BDD846D|SHA256=A773891ACF203A7EB0C0D30942FB1347648F1CD918AE2BFD9A4857B4DCF5081B|SHA256=4C3B81AC88A987BBDF7D41FA0AECC2CEDF5B9BD2F45E7A21F376D05345FC211D|SHA256=3241BC14BEC51CE6A691B9A3562E5C1D52E9D057D27A3D67FD0B245C350B6D34|SHA256=047C42E9BBA28366868847C7DAFC1E043FB038C796422D37220493517D68EE89|SHA256=18931DC81E95D0020466FA091E16869DBE824E543A4C2C8FE644FA71A0F44FEB|SHA256=B4C2EF76C204273132FDE38F0DED641C2C5EE767652E64E4C4071A4A973B6C1B|SHA256=640954AFC268565F7DAA6E6F81A8EE05311E33E34332B501A3C3FE5B22ADEA97|SHA256=251BE949F662C838718F8AA0A5F8211FB90346D02BD63FF91E6B224E0E01B656|SHA256=E2606F272F7BA054DF16BE464FDA57211EF0D14A0D959F9C8DCB0575DF1186E4|SHA256=3A9E1D17BEEB514F1B9B3BACAEE7420285DE5CBDCE89C5319A992C6CBD1DE138</field>
    </rule>
    <rule id="901709" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/driver_load/driver_load_win_pua_system_informer.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects driver load of the System Informer tool-->
        <!--Date: 2023/05/08-->
        <!--Status: experimental-->
        <!--ID: 10cb6535-b31d-4512-9962-513dcbc42cc1-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543</id>
        </mitre>
        <description>PUA - System Informer Driver Load</description>
        <options>no_full_log</options>
        <group>driver_load,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.hashes" negate="no" type="pcre2">(?i)8b9ad98944ac9886ea4cb07700e71b78be4a2740934bb7e46ca3b56a7c59ad24|a41348bec147ca4d9ea2869817527eb5cea2e20202af599d2b30625433bcf454|38ee0a88af8535a11efe8d8da9c6812aa07067b75a64d99705a742589bdd846d|a773891acf203a7eb0c0d30942fb1347648f1cd918ae2bfd9a4857b4dcf5081b|4c3b81ac88a987bbdf7d41fa0aecc2cedf5b9bd2f45e7a21f376d05345fc211d|3241bc14bec51ce6a691b9a3562e5c1d52e9d057d27a3d67fd0b245c350b6d34|047c42e9bba28366868847c7dafc1e043fb038c796422d37220493517d68ee89|18931dc81e95d0020466fa091e16869dbe824e543a4c2c8fe644fa71a0f44feb|b4c2ef76c204273132fde38f0ded641c2c5ee767652e64e4c4071a4a973b6c1b|640954afc268565f7daa6e6f81a8ee05311e33e34332b501a3c3fe5b22adea97|251be949f662c838718f8aa0a5f8211fb90346d02bd63ff91e6b224e0e01b656|e2606f272f7ba054df16be464fda57211ef0d14a0d959f9c8dcb0575df1186e4|3a9e1d17beeb514f1b9b3bacaee7420285de5cbdce89c5319a992c6cbd1de138</field>
    </rule>
    <rule id="901710" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_lsass_werfault.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects process LSASS memory dump using Mimikatz, NanoDump, Invoke-Mimikatz, Procdump or Taskmgr based on the CallTrace pointing to ntdll.dll, dbghelp.dll or dbgcore.dll for win10, server2016 and up.-->
        <!--Date: 2012/06/27-->
        <!--Status: test-->
        <!--ID: e5b33f7d-eb93-48b6-9851-09e1e610b6d7-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0002</id>
        </mitre>
        <description>Credential Dumping Attempt Via WerFault</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\+WerFault\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1FFFFF</field>
    </rule>
    <rule id="901711" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_uac_bypass_wow64_logger.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using a WoW64 logger DLL hijack (UACMe 30)-->
        <!--Date: 2021/08/23-->
        <!--Status: test-->
        <!--ID: 4f6c43e2-f989-4ea5-bcd8-843b49a0317c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using WOW64 Logger DLL Hijack</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i):\\+Windows\\+SysWOW64\\+</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1fffff</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)^(?:UNKNOWN\(0000000000000000\)\|UNKNOWN\(0000000000000000\)\|)</field>
    </rule>
    <rule id="901712" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_cmstp_execution_by_access.yml</info>
        <!--Sigma Rule Author: Nik Seetharaman-->
        <!--Description: Detects various indicators of Microsoft Connection Manager Profile Installer execution-->
        <!--Date: 2018/07/16-->
        <!--Status: stable-->
        <!--ID: 3b4b232a-af90-427c-a22f-30b0c0837b95-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.003</id>
            <id>attack.execution</id>
            <id>attack.t1559.001</id>
            <id>attack.g0069</id>
            <id>attack.g0080</id>
            <id>car.2019-04-001</id>
        </mitre>
        <description>CMSTP Execution Process Access</description>
        <options>no_full_log</options>
        <group>windows,process_access,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)cmlua\.dll</field>
    </rule>
    <rule id="901713" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_susp_invoke_patchingapi.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects potential NT API stub patching as seen used by the project PatchingAPI-->
        <!--Date: 2023/01/07-->
        <!--Status: experimental-->
        <!--ID: b916cba1-b38a-42da-9223-17114d846fd6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>Potential NT API Stub Patching</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1FFFFF</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)^(?:C:\\+Windows\\+SYSTEM32\\+ntdll\.dll\+)</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)\|UNKNOWN\(</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)(?:\))$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Windows\\+System32\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Windows\\+SysWOW64\\+</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i):\\+Windows\\+System32\\+</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i):\\+Windows\\+SysWOW64\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Windows\\+Microsoft\.NET\\+</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i):\\+Windows\\+Microsoft\.NET\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Windows\\+system32\\+taskhostw\.exe</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Windows\\+system32\\+taskhost\.exe</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i):\\+Windows\\+Microsoft\.NET\\+Framework\\+v</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i):\\+Windows\\+Microsoft\.NET\\+Framework64\\+v</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?:\\+NGenTask\.exe)$</field>
    </rule>
    <rule id="901714" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_susp_invoke_patchingapi.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects potential NT API stub patching as seen used by the project PatchingAPI-->
        <!--Date: 2023/01/07-->
        <!--Status: experimental-->
        <!--ID: b916cba1-b38a-42da-9223-17114d846fd6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>Potential NT API Stub Patching</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1FFFFF</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)^(?:C:\\+Windows\\+SYSTEM32\\+ntdll\.dll\+)</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)\|UNKNOWN\(</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)(?:\))$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+thor\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+thor64\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+GitHubDesktop\\+app\-</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+GitHubDesktop\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+resources\\+app\\+git\\+usr\\+bin\\+sh\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+GitHubDesktop\\+app\-</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Microsoft\\+Teams\\+stage\\+Teams\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Microsoft\\+Teams\\+Update\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Microsoft\\+Teams\\+Update\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+WINDOWS\\+SysWOW64\\+regsvr32\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Microsoft\\+Teams\\+Update\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Microsoft\\+Teams\\+stage\\+Teams\.exe)$</field>
    </rule>
    <rule id="901715" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_hktl_generic_access.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Swachchhanda Shrawan Poudel-->
        <!--Description: Detects process access requests from hacktool processes based on their default image name-->
        <!--Date: 2023/11/27-->
        <!--Status: experimental-->
        <!--ID: d0d2f720-d14f-448d-8242-51ff396a334e-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0002</id>
        </mitre>
        <description>HackTool - Generic Process Access</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\+Akagi\.exe|\\+Akagi64\.exe|\\+atexec_windows\.exe|\\+Certify\.exe|\\+Certipy\.exe|\\+CoercedPotato\.exe|\\+crackmapexec\.exe|\\+CreateMiniDump\.exe|\\+dcomexec_windows\.exe|\\+dpapi_windows\.exe|\\+findDelegation_windows\.exe|\\+GetADUsers_windows\.exe|\\+GetNPUsers_windows\.exe|\\+getPac_windows\.exe|\\+getST_windows\.exe|\\+getTGT_windows\.exe|\\+GetUserSPNs_windows\.exe|\\+gmer\.exe|\\+hashcat\.exe|\\+htran\.exe|\\+ifmap_windows\.exe|\\+impersonate\.exe|\\+Inveigh\.exe|\\+LocalPotato\.exe|\\+mimikatz_windows\.exe|\\+mimikatz\.exe|\\+netview_windows\.exe|\\+nmapAnswerMachine_windows\.exe|\\+opdump_windows\.exe|\\+PasswordDump\.exe|\\+Potato\.exe|\\+PowerTool\.exe|\\+PowerTool64\.exe|\\+psexec_windows\.exe|\\+PurpleSharp\.exe|\\+pypykatz\.exe|\\+QuarksPwDump\.exe|\\+rdp_check_windows\.exe|\\+Rubeus\.exe|\\+SafetyKatz\.exe|\\+sambaPipe_windows\.exe|\\+SelectMyParent\.exe|\\+SharpChisel\.exe|\\+SharPersist\.exe|\\+SharpEvtMute\.exe|\\+SharpImpersonation\.exe|\\+SharpLDAPmonitor\.exe|\\+SharpLdapWhoami\.exe|\\+SharpUp\.exe|\\+SharpView\.exe|\\+smbclient_windows\.exe|\\+smbserver_windows\.exe|\\+sniff_windows\.exe|\\+sniffer_windows\.exe|\\+split_windows\.exe|\\+SpoolSample\.exe|\\+Stracciatella\.exe|\\+SysmonEOP\.exe|\\+temp\\+rot\.exe|\\+ticketer_windows\.exe|\\+TruffleSnout\.exe|\\+winPEASany_ofs\.exe|\\+winPEASany\.exe|\\+winPEASx64_ofs\.exe|\\+winPEASx64\.exe|\\+winPEASx86_ofs\.exe|\\+winPEASx86\.exe|\\+xordump\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)\\+goldenPac|\\+just_dce_|\\+karmaSMB|\\+kintercept|\\+LocalPotato|\\+ntlmrelayx|\\+rpcdump|\\+samrdump|\\+secretsdump|\\+smbexec|\\+smbrelayx|\\+wmiexec|\\+wmipersist|HotPotato|Juicy\ Potato|JuicyPotato|PetitPotam|RottenPotato</field>
    </rule>
    <rule id="901716" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_svchost_susp_access_request.yml</info>
        <!--Sigma Rule Author: Tim Burrell-->
        <!--Description: Detects suspicious access to the "svchost" process such as that used by Invoke-Phantom to kill the thread of the Windows event logging service.-->
        <!--Date: 2020/01/02-->
        <!--Status: test-->
        <!--ID: 166e9c50-8cd9-44af-815d-d1f0c0e90dde-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>Suspicious Svchost Process Access</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?::\\+Windows\\+System32\\+svchost\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1F3FFF</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)UNKNOWN</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Microsoft\ Visual\ Studio\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+MSBuild\\+Current\\+Bin\\+MSBuild\.exe)$</field>
        <field name="win.eventdata.callTrace" negate="yes" type="pcre2">(?i)Microsoft\.Build\.ni\.dll</field>
        <field name="win.eventdata.callTrace" negate="yes" type="pcre2">(?i)System\.ni\.dll</field>
    </rule>
    <rule id="901717" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_lsass_remote_access_trough_winrm.yml</info>
        <!--Sigma Rule Author: Patryk Prauze - ING Tech-->
        <!--Description: Detects remote access to the LSASS process via WinRM. This could be a sign of credential dumping from tools like mimikatz.-->
        <!--Date: 2019/05/20-->
        <!--Status: stable-->
        <!--ID: aa35a627-33fb-4d04-a165-d33b4afca3e8-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.execution</id>
            <id>attack.t1003.001</id>
            <id>attack.t1059.001</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.006</id>
            <id>attack.s0002</id>
        </mitre>
        <description>Remote LSASS Process Access Through Windows Remote Management</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?::\\+Windows\\+system32\\+wsmprovhost\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="yes" type="pcre2">(?i)0x80000000</field>
    </rule>
    <rule id="901718" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_hktl_sysmonente.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of SysmonEnte, a tool to attack the integrity of Sysmon-->
        <!--Date: 2022/09/07-->
        <!--Status: test-->
        <!--ID: d29ada0f-af45-4f27-8f32-f7b77c3dbc4e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>HackTool - SysmonEnte Execution</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i):\\+Windows\\+Sysmon\.exe|:\\+Windows\\+Sysmon64\.exe</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1400</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Windows\\+System32\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Windows\\+SysWOW64\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+ProgramData\\+Microsoft\\+Windows\ Defender\\+Platform\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+MsMpEng\.exe)$</field>
    </rule>
    <rule id="901719" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_hktl_sysmonente.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of SysmonEnte, a tool to attack the integrity of Sysmon-->
        <!--Date: 2022/09/07-->
        <!--Status: test-->
        <!--ID: d29ada0f-af45-4f27-8f32-f7b77c3dbc4e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>HackTool - SysmonEnte Execution</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i):\\+Windows\\+Sysmon\.exe|:\\+Windows\\+Sysmon64\.exe</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1400</field>
    </rule>
    <rule id="901720" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_hktl_sysmonente.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of SysmonEnte, a tool to attack the integrity of Sysmon-->
        <!--Date: 2022/09/07-->
        <!--Status: test-->
        <!--ID: d29ada0f-af45-4f27-8f32-f7b77c3dbc4e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>HackTool - SysmonEnte Execution</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)Ente</field>
    </rule>
    <rule id="901721" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_lsass_memdump.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden, Michael Haag-->
        <!--Description: Detects process access requests to the LSASS process with specific call trace calls and access masks.
This behaviour is expressed by many credential dumping tools such as Mimikatz, NanoDump, Invoke-Mimikatz, Procdump and even the Taskmgr dumping feature.
-->
        <!--Date: 2019/04/03-->
        <!--Status: experimental-->
        <!--ID: 5ef9853e-4d0e-4a70-846f-a9ca37d876da-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0002</id>
        </mitre>
        <description>Credential Dumping Activity Via Lsass</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1038|0x143a|0x1438|0x1000|0x01000|0x1010|0x1400|0x1410|0x1fffff|0x40</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)dbgcore\.dll|dbghelp\.dll|kernel32\.dll|kernelbase\.dll|ntdll\.dll</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)AUTHORI</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)AUTORI</field>
    </rule>
    <rule id="901722" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_lsass_memdump.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden, Michael Haag-->
        <!--Description: Detects process access requests to the LSASS process with specific call trace calls and access masks.
This behaviour is expressed by many credential dumping tools such as Mimikatz, NanoDump, Invoke-Mimikatz, Procdump and even the Taskmgr dumping feature.
-->
        <!--Date: 2019/04/03-->
        <!--Status: experimental-->
        <!--ID: 5ef9853e-4d0e-4a70-846f-a9ca37d876da-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0002</id>
        </mitre>
        <description>Credential Dumping Activity Via Lsass</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1038|0x143a|0x1438|0x1000|0x01000|0x1010|0x1400|0x1410|0x1fffff|0x40</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)dbgcore\.dll|dbghelp\.dll|kernel32\.dll|kernelbase\.dll|ntdll\.dll</field>
        <field name="win.eventdata.callTrace" negate="yes" type="pcre2">(?i):\\+Windows\\+Temp\\+asgard2\-agent\\+</field>
        <field name="win.eventdata.callTrace" negate="yes" type="pcre2">(?i)\\+thor\\+thor64\.exe\+</field>
        <field name="win.eventdata.callTrace" negate="yes" type="pcre2">(?i)\|UNKNOWN\(</field>
        <field name="win.eventdata.grantedAccess" negate="yes" type="pcre2">(?i)0x103800</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+Sysmon64\.exe)$</field>
    </rule>
    <rule id="901723" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_susp_direct_syscall_ntopenprocess.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems), Tim Shelton (FP)-->
        <!--Description: Detects the usage of the direct syscall of NtOpenProcess which might be done from a CobaltStrike BOF.-->
        <!--Date: 2021/07/28-->
        <!--Status: experimental-->
        <!--ID: 3f3f3506-1895-401b-9cc3-e86b16e630d0-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1106</id>
        </mitre>
        <description>Direct Syscall of NtOpenProcess</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)^(?:UNKNOWN)</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?:vcredist_x64\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:vcredist_x64\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Windows\\+System32\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Windows\\+SysWOW64\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Windows\\+WinSxS\\+</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i):\\+Windows\\+System32\\+</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i):\\+Windows\\+SysWOW64\\+</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i):\\+Windows\\+WinSxS\\+</field>
        <field name="win.eventdata.providerName" negate="yes" type="pcre2">(?i)Microsoft\-Windows\-Kernel\-Audit\-API\-Calls</field>
    </rule>
    <rule id="901724" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_susp_direct_syscall_ntopenprocess.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems), Tim Shelton (FP)-->
        <!--Description: Detects the usage of the direct syscall of NtOpenProcess which might be done from a CobaltStrike BOF.-->
        <!--Date: 2021/07/28-->
        <!--Status: experimental-->
        <!--ID: 3f3f3506-1895-401b-9cc3-e86b16e630d0-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1106</id>
        </mitre>
        <description>Direct Syscall of NtOpenProcess</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)^(?:UNKNOWN)</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+system32\\+systeminfo\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:setup64\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+Explorer\.EXE)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+Cylance\\+Desktop\\+CylanceUI\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:AmazonSSMAgentSetup\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?:AmazonSSMAgentSetup\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Programs\\+Microsoft\ VS\ Code\\+Code\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Programs\\+Microsoft\ VS\ Code\\+Code\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Microsoft\\+Teams\\+current\\+Teams\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Microsoft\\+Teams\\+current\\+Teams\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Discord\\+</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?:\\+Discord\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+yammerdesktop\\+app\-</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+Yammer\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+yammerdesktop\\+app\-</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?:\\+Yammer\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="yes" type="pcre2">(?i)0x1000</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?:\\+Evernote\\+Evernote\.exe)$</field>
    </rule>
    <rule id="901725" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_lsass_dump_comsvcs_dll.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects adversaries leveraging the MiniDump export function from comsvcs.dll via rundll32 to perform a memory dump from lsass.-->
        <!--Date: 2020/10/20-->
        <!--Status: test-->
        <!--ID: a49fa4d5-11db-418c-8473-1e014a8dd462-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Lsass Memory Dump via Comsvcs DLL</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)comsvcs\.dll</field>
    </rule>
    <rule id="901726" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_lsass_uncommon_access_flag.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects process access to LSASS memory with uncommon access flags 0x410 and 0x01410-->
        <!--Date: 2022/03/13-->
        <!--Status: test-->
        <!--ID: 678dfc63-fefb-47a5-a04c-26bcf8cc9f65-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0002</id>
        </mitre>
        <description>Uncommon GrantedAccess Flags On LSASS</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)(?:10)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Common\ Files\\+McAfee\\+MMSSHost\\+MMSSHOST\.exe</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Malwarebytes\\+Anti\-Malware\\+MBAMService\.exe</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Windows\ Defender\\+MsMpEng\.exe</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)C:\\+PROGRAMDATA\\+MALWAREBYTES\\+MBAMSERVICE\\+ctlrupdate\\+mbupdatr\.exe</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+lsass\.exe</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+msiexec\.exe</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)C:\\+WINDOWS\\+System32\\+perfmon\.exe</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)C:\\+WINDOWS\\+system32\\+taskhostw\.exe</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)C:\\+WINDOWS\\+system32\\+taskmgr\.exe</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)C:\\+WINDOWS\\+system32\\+wbem\\+wmiprvse\.exe</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+SysWOW64\\+msiexec\.exe</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+sysWOW64\\+wbem\\+wmiprvse\.exe</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)^(?:C:\\+ProgramData\\+Microsoft\\+Windows\ Defender\\+)</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+MsMpEng\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+WindowsApps\\+)</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+GamingServices\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+PROCEXP64\.EXE)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+PROCEXP\.EXE)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)^(?:C:\\+ProgramData\\+VMware\\+VMware\ Tools\\+)</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+vmtoolsd\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+)</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+)</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)Antivirus</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+thor64\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+thor\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+aurora\-agent\-64\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+aurora\-agent\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)\\+vs_bootstrapper_</field>
        <field name="win.eventdata.grantedAccess" negate="yes" type="pcre2">(?i)0x1410</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+)</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+)</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)^(?:C:\\+WINDOWS\\+system32\\+)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)C:\\+WINDOWS\\+system32\\+wermgr\.exe\ \-upload</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)C:\\+Users\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+Microsoft\ VS\ Code\\+Code\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+software_reporter_tool\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+DropboxUpdate\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+MBAMInstallerService\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+WebEx\\+WebexHost\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+Programs\\+Microsoft\ VS\ Code\\+Code\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+JetBrains\\+Toolbox\\+bin\\+jetbrains\-toolbox\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+xampp\-control\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="yes" type="pcre2">(?i)0x410</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)\\+SteamLibrary\\+steamapps\\+</field>
        <field name="win.eventdata.grantedAccess" negate="yes" type="pcre2">(?i)0x410</field>
        <field name="win.eventdata.grantedAccess" negate="yes" type="pcre2">(?i)0x10</field>
    </rule>
    <rule id="901727" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_hktl_littlecorporal_generated_maldoc.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the process injection of a LittleCorporal generated Maldoc.-->
        <!--Date: 2021/08/09-->
        <!--Status: test-->
        <!--ID: 7bdde3bf-2a42-4c39-aa31-a92b3e17afac-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204.002</id>
            <id>attack.t1055.003</id>
        </mitre>
        <description>HackTool - LittleCorporal Generated Maldoc Injection</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\+winword\.exe)$</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i):\\+Windows\\+Microsoft\.NET\\+Framework64\\+v2\.</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)UNKNOWN</field>
    </rule>
    <rule id="901728" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_uac_bypass_editionupgrademanagerobj.yml</info>
        <!--Sigma Rule Author: oscd.community, Dmitry Uchakin-->
        <!--Description: Detects function calls from the EditionUpgradeManager COM interface. Which is an interface that is not used by standard executables.-->
        <!--Date: 2020/10/07-->
        <!--Status: test-->
        <!--ID: fb3722e4-1a06-46b6-b772-253e2e7db933-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Function Call From Undocumented COM Interface EditionUpgradeManager</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)editionupgrademanagerobj\.dll</field>
    </rule>
    <rule id="901729" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_susp_shellcode_injection.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects potential shellcode injection used by tools such as Metasploit's migrate and Empire's psinject-->
        <!--Date: 2022/03/11-->
        <!--Status: test-->
        <!--ID: 250ae82f-736e-4844-a68b-0b5e8cc887da-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1055</id>
        </mitre>
        <description>Potential Shellcode Injection</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x147a|0x1f3fff</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)UNKNOWN</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Dell\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+Dell\\+</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Dell\\+</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+Dell\\+</field>
        <field name="win.eventdata.grantedAccess" negate="yes" type="pcre2">(?i)0x1F3FFF</field>
        <field name="win.eventdata.callTrace" negate="yes" type="pcre2">(?i)^(?:.:\\+Windows\\+System32\\+ntdll\.dll)</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\ \(x86\)\\+Dell\\+UpdateService\\+ServiceShell\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+Explorer\.EXE)$</field>
        <field name="win.eventdata.grantedAccess" negate="yes" type="pcre2">(?i)0x1F3FFF</field>
        <field name="win.eventdata.callTrace" negate="yes" type="pcre2">(?i)^(?:.:\\+Windows\\+System32\\+ntdll\.dll)</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+Microsoft\ Visual\ Studio\\+2022\\+Community\\+Common7\\+IDE\\+PerfWatson2\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\ \(x86\)\\+Microsoft\ Visual\ Studio\\+2019\\+Community\\+Common7\\+IDE\\+PerfWatson2\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+Microsoft\ Visual\ Studio\\+2022\\+Community\\+Common7\\+IDE\\+devenv\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\ \(x86\)\\+Microsoft\ Visual\ Studio\\+2019\\+Community\\+Common7\\+IDE\\+devenv\.exe)$</field>
        <field name="win.eventdata.callTrace" negate="yes" type="pcre2">(?i)^(?:.:\\+Windows\\+System32\\+ntdll\.dll)</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Microsoft\ Visual\ Studio\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+MSBuild\\+Current\\+Bin\\+MSBuild\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+Dell\\+DellDataVault\\+DDVDataCollector\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+Wbem\\+Wmiprvse\.exe)$</field>
        <field name="win.eventdata.targetImage" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+system32\\+lsass\.exe)$</field>
        <field name="win.eventdata.callTrace" negate="yes" type="pcre2">(?i)^(?:.:\\+Windows\\+SYSTEM32\\+ntdll\.dll)</field>
    </rule>
    <rule id="901730" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_lsass_python_based_tool.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj, Jonhnathan Ribeiro-->
        <!--Description: Detects LSASS process access for potential credential dumping by a Python-like tool such as LaZagne or Pypykatz.-->
        <!--Date: 2023/11/27-->
        <!--Status: stable-->
        <!--ID: f8be3e82-46a3-4e4e-ada5-8e538ae8b9c9-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0349</id>
        </mitre>
        <description>Credential Dumping Activity By Python Based Tool</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)_ctypes\.pyd\+</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i):\\+Windows\\+System32\\+KERNELBASE\.dll\+</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i):\\+Windows\\+SYSTEM32\\+ntdll\.dll\+</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)python27\.dll\+|python3.+\.dll\+</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1FFFFF</field>
    </rule>
    <rule id="901731" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_hktl_cobaltstrike_bof_injection_pattern.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects a typical pattern of a CobaltStrike BOF which inject into other processes-->
        <!--Date: 2021/08/04-->
        <!--Status: test-->
        <!--ID: 09706624-b7f6-455d-9d02-adee024cee1d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1106</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>HackTool - CobaltStrike BOF Injection Pattern</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)^C:\\+Windows\\+SYSTEM32\\+ntdll\.dll\+[a-z0-9]{4,6}\|C:\\+Windows\\+System32\\+KERNELBASE\.dll\+[a-z0-9]{4,6}\|UNKNOWN\([A-Z0-9]{16}\)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1028|0x1fffff</field>
    </rule>
    <rule id="901732" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_lsass_dump_keyword_image.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects LSASS process access requests from a source process with the "dump" keyword in its image name.-->
        <!--Date: 2022/02/10-->
        <!--Status: test-->
        <!--ID: 9bd012ee-0dff-44d7-84a0-aa698cfd87a3-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0002</id>
        </mitre>
        <description>LSASS Memory Access by Tool With Dump Keyword In Name</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)dump</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)(?:10|30|50|70|90|B0|D0|F0|18|38|58|78|98|B8|D8|F8|1A|3A|5A|7A|9A|BA|DA|FA|0x14C2|FF)$</field>
    </rule>
    <rule id="901733" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_lsass_seclogon_access.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden (original elastic rule), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious access to LSASS handle via a call trace to "seclogon.dll" with a suspicious access right.-->
        <!--Date: 2022/06/29-->
        <!--Status: test-->
        <!--ID: 472159c5-31b9-4f56-b794-b766faa8b0a7-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Suspicious LSASS Access Via MalSecLogon</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\+svchost\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x14c0</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)seclogon\.dll</field>
    </rule>
    <rule id="901734" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_lsass_susp_access_flag.yml</info>
        <!--Sigma Rule Author: Florian Roth, Roberto Rodriguez, Dimitrios Slamaris, Mark Russinovich, Thomas Patzke, Teymur Kheirkhabarov, Sherif Eldeeb, James Dickenson, Aleksey Potapov, oscd.community-->
        <!--Description: Detects process access requests to LSASS process with potentially suspicious access flags-->
        <!--Date: 2021/11/22-->
        <!--Status: experimental-->
        <!--ID: a18dd26b-6450-46de-8c91-9659150cf088-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0002</id>
        </mitre>
        <description>Potentially Suspicious GrantedAccess Flags On LSASS</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)(?:30|50|70|90|B0|D0|F0|18|38|58|78|98|B8|D8|F8|1A|3A|5A|7A|9A|BA|DA|FA|0x14C2)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)^(?:0x100000|0x1418|0x1438|0x143a|0x1f0fff|0x1f1fff|0x1f2fff|0x1f3fff|0x40)</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Windows\\+System32\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+Windows\\+SysWOW64\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+ProgramData\\+Microsoft\\+Windows\ Defender\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+MsMpEng\.exe)$</field>
        <field name="win.eventdata.callTrace" negate="yes" type="pcre2">(?i)\|.:\\+ProgramData\\+Microsoft\\+Windows\ Defender\\+Definition\ Updates\\+\{</field>
        <field name="win.eventdata.callTrace" negate="yes" type="pcre2">(?i)\}\\+mpengine\.dll\+</field>
        <field name="win.eventdata.grantedAccess" negate="yes" type="pcre2">(?i)0x1418</field>
        <field name="win.eventdata.callTrace" negate="yes" type="pcre2">(?i)\|c:\\+program\ files\\+windows\ defender\\+mprtp\.dll</field>
        <field name="win.eventdata.callTrace" negate="yes" type="pcre2">(?i)\|c:\\+program\ files\\+windows\ defender\\+MpClient\.dll</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+explorer\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="yes" type="pcre2">(?i)0x401</field>
    </rule>
    <rule id="901735" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_lsass_susp_access_flag.yml</info>
        <!--Sigma Rule Author: Florian Roth, Roberto Rodriguez, Dimitrios Slamaris, Mark Russinovich, Thomas Patzke, Teymur Kheirkhabarov, Sherif Eldeeb, James Dickenson, Aleksey Potapov, oscd.community-->
        <!--Description: Detects process access requests to LSASS process with potentially suspicious access flags-->
        <!--Date: 2021/11/22-->
        <!--Status: experimental-->
        <!--ID: a18dd26b-6450-46de-8c91-9659150cf088-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0002</id>
        </mitre>
        <description>Potentially Suspicious GrantedAccess Flags On LSASS</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)(?:30|50|70|90|B0|D0|F0|18|38|58|78|98|B8|D8|F8|1A|3A|5A|7A|9A|BA|DA|FA|0x14C2)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)^(?:0x100000|0x1418|0x1438|0x143a|0x1f0fff|0x1f1fff|0x1f2fff|0x1f3fff|0x40)</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?::\\+ProgramData\\+MALWAREBYTES\\+MBAMSERVICE\\+ctlrupdate\\+mbupdatr\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Programs\\+Microsoft\ VS\ Code\\+Code\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i):\\+ProgramData\\+VMware\\+VMware\ Tools\\+</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+vmtoolsd\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+PROCEXP64\.EXE)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+PROCEXP\.EXE)$</field>
        <field name="win.eventdata.grantedAccess" negate="yes" type="pcre2">(?i)0x40</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+MBAMInstallerService\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="yes" type="pcre2">(?i)0x40</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+aurora\-agent\-64\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+aurora\-agent\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+thor\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+thor64\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="yes" type="pcre2">(?i)0x40</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+handle\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+handle64\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="yes" type="pcre2">(?i)0x40</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+WebEx\\+WebexHost\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="yes" type="pcre2">(?i)0x401</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)\\+SteamLibrary\\+steamapps\\+</field>
    </rule>
    <rule id="901736" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_hktl_handlekatz_lsass_access.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj (rule), @thefLinkk-->
        <!--Description: Detects HandleKatz opening LSASS to duplicate its handle to later dump the memory without opening any new handles-->
        <!--Date: 2022/06/27-->
        <!--Status: test-->
        <!--ID: b1bd3a59-c1fd-4860-9f40-4dd161a7d1f5-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1106</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>HackTool - HandleKatz Duplicating LSASS Handle</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x1440</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+ntdll\.dll\+)</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)\|UNKNOWN\(</field>
        <field name="win.eventdata.callTrace" negate="no" type="pcre2">(?i)(?:\))$</field>
    </rule>
    <rule id="901737" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_svchost_credential_dumping.yml</info>
        <!--Sigma Rule Author: Florent Labouyrie-->
        <!--Description: Detects when a process tries to access the memory of svchost to potentially dump credentials.-->
        <!--Date: 2021/04/30-->
        <!--Status: test-->
        <!--ID: 174afcfa-6e40-4ae9-af64-496546389294-->
        <mitre>
            <id>attack.t1548</id>
        </mitre>
        <description>Credential Dumping Attempt Via Svchost</description>
        <options>no_full_log</options>
        <group>windows,process_access,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+svchost\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)0x143a</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+services\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="yes" type="pcre2">(?i)(?:\\+msiexec\.exe)$</field>
    </rule>
    <rule id="901738" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/process_access/proc_access_win_lsass_whitelisted_process_names.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a possible process memory dump that uses a white-listed filename like TrolleyExpress.exe as a way to dump the LSASS process memory without Microsoft Defender interference
-->
        <!--Date: 2022/02/10-->
        <!--Status: test-->
        <!--ID: 4be8b654-0c01-4c9d-a10c-6b28467fc651-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.s0002</id>
        </mitre>
        <description>LSASS Access From Potentially White-Listed Processes</description>
        <options>no_full_log</options>
        <group>process_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetImage" negate="no" type="pcre2">(?i)(?:\\+lsass\.exe)$</field>
        <field name="win.eventdata.sourceImage" negate="no" type="pcre2">(?i)(?:\\+TrolleyExpress\.exe|\\+ProcessDump\.exe|\\+dump64\.exe)$</field>
        <field name="win.eventdata.grantedAccess" negate="no" type="pcre2">(?i)(?:10|30|50|70|90|B0|D0|F0|18|38|58|78|98|B8|D8|F8|1A|3A|5A|7A|9A|BA|DA|FA|0x14C2|FF)$</field>
    </rule>
    <rule id="901739" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_change/file_change_win_2022_timestomping.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth (Nextron Systems)-->
        <!--Description: Attackers may change the file creation time of a backdoor to make it look like it was installed with the operating system.
Note that many processes legitimately change the creation time of a file; it does not necessarily indicate malicious activity.
-->
        <!--Date: 2022/08/12-->
        <!--Status: test-->
        <!--ID: 558eebe5-f2ba-4104-b339-36f7902bcc1a-->
        <mitre>
            <id>attack.t1070.006</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>File Creation Date Changed to Another Year</description>
        <options>no_full_log</options>
        <group>file_change,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:2022)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:2022)</field>
    </rule>
    <rule id="901740" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_change/file_change_win_2022_timestomping.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth (Nextron Systems)-->
        <!--Description: Attackers may change the file creation time of a backdoor to make it look like it was installed with the operating system.
Note that many processes legitimately change the creation time of a file; it does not necessarily indicate malicious activity.
-->
        <!--Date: 2022/08/12-->
        <!--Status: test-->
        <!--ID: 558eebe5-f2ba-4104-b339-36f7902bcc1a-->
        <mitre>
            <id>attack.t1070.006</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>File Creation Date Changed to Another Year</description>
        <options>no_full_log</options>
        <group>file_change,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:2022)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:202)</field>
        <field name="full_log" negate="yes" type="pcre2">(?i)(?:202)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+system32\\+ProvTool\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+usocoreworker\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+ImmersiveControlPanel\\+SystemSettings\.exe</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)^(?:C:\\+ProgramData\\+USOPrivate\\+UpdateStore\\+)</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.tmp)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.temp)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+WINDOWS\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+TiWorker\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.cab)$</field>
    </rule>
    <rule id="901741" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_change/file_change_win_unusual_modification_by_dns_exe.yml</info>
        <!--Sigma Rule Author: Tim Rauch (Nextron Systems)-->
        <!--Description: Detects an unexpected file being modified by dns.exe which my indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed)-->
        <!--Date: 2022/09/27-->
        <!--Status: test-->
        <!--ID: 9f383dc0-fdeb-4d56-acbc-9f9f4f8f20f3-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1133</id>
        </mitre>
        <description>Unusual File Modification by dns.exe</description>
        <options>no_full_log</options>
        <group>file_change,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+dns\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\\+dns\.log)$</field>
    </rule>
    <rule id="901742" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_access/file_access_win_dpapi_master_key_access.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects file access requests to the the Windows Data Protection API Master keys by an uncommon application.
This can be a sign of credential stealing. Example case would be usage of mimikatz "dpapi::masterkey" function
-->
        <!--Date: 2022/10/17-->
        <!--Status: experimental-->
        <!--ID: 46612ae6-86be-4802-bc07-39b59feb1309-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1555.004</id>
        </mitre>
        <description>Access To Windows DPAPI Master Keys By Uncommon Application</description>
        <options>no_full_log</options>
        <group>file_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)\\+Microsoft\\+Protect\\+S\-1\-5\-18\\+|\\+Microsoft\\+Protect\\+S\-1\-5\-21\-</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+system32\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+SysWOW64\\+)</field>
    </rule>
    <rule id="901743" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_access/file_access_win_browser_credential_access.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects file access requests to browser credential stores by uncommon processes.
Could indicate potential attempt of credential stealing.
Requires heavy baselining before usage
-->
        <!--Date: 2022/04/09-->
        <!--Status: experimental-->
        <!--ID: 91cb43db-302a-47e3-b3c8-7ede481e27bf-->
        <mitre>
            <id>attack.t1003</id>
            <id>attack.credential_access</id>
        </mitre>
        <description>Access To Browser Credential Files By Uncommon Application</description>
        <options>no_full_log</options>
        <group>file_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\\+Appdata\\+Local\\+Microsoft\\+Windows\\+WebCache\\+WebCacheV01\.dat)</field>
    </rule>
    <rule id="901744" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_access/file_access_win_browser_credential_access.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects file access requests to browser credential stores by uncommon processes.
Could indicate potential attempt of credential stealing.
Requires heavy baselining before usage
-->
        <!--Date: 2022/04/09-->
        <!--Status: experimental-->
        <!--ID: 91cb43db-302a-47e3-b3c8-7ede481e27bf-->
        <mitre>
            <id>attack.t1003</id>
            <id>attack.credential_access</id>
        </mitre>
        <description>Access To Browser Credential Files By Uncommon Application</description>
        <options>no_full_log</options>
        <group>file_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\\+cookies\.sqlite|release\\+key3\.db|release\\+key4\.db|release\\+logins\.json)</field>
    </rule>
    <rule id="901745" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_access/file_access_win_browser_credential_access.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects file access requests to browser credential stores by uncommon processes.
Could indicate potential attempt of credential stealing.
Requires heavy baselining before usage
-->
        <!--Date: 2022/04/09-->
        <!--Status: experimental-->
        <!--ID: 91cb43db-302a-47e3-b3c8-7ede481e27bf-->
        <mitre>
            <id>attack.t1003</id>
            <id>attack.credential_access</id>
        </mitre>
        <description>Access To Browser Credential Files By Uncommon Application</description>
        <options>no_full_log</options>
        <group>file_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)\\+Appdata\\+Local\\+Chrome\\+User\ Data\\+Default\\+Login\ Data|\\+AppData\\+Local\\+Google\\+Chrome\\+User\ Data\\+Default\\+Network\\+Cookies|\\+AppData\\+Local\\+Google\\+Chrome\\+User\ Data\\+Local\ State</field>
    </rule>
    <rule id="901746" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_access/file_access_win_browser_credential_access.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects file access requests to browser credential stores by uncommon processes.
Could indicate potential attempt of credential stealing.
Requires heavy baselining before usage
-->
        <!--Date: 2022/04/09-->
        <!--Status: experimental-->
        <!--ID: 91cb43db-302a-47e3-b3c8-7ede481e27bf-->
        <mitre>
            <id>attack.t1003</id>
            <id>attack.credential_access</id>
        </mitre>
        <description>Access To Browser Credential Files By Uncommon Application</description>
        <options>no_full_log</options>
        <group>file_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)System</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)Idle</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+WINDOWS\\+system32\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+WINDOWS\\+SysWOW64\\+)</field>
    </rule>
    <rule id="901747" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_access/file_access_win_browser_credential_access.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects file access requests to browser credential stores by uncommon processes.
Could indicate potential attempt of credential stealing.
Requires heavy baselining before usage
-->
        <!--Date: 2022/04/09-->
        <!--Status: experimental-->
        <!--ID: 91cb43db-302a-47e3-b3c8-7ede481e27bf-->
        <mitre>
            <id>attack.t1003</id>
            <id>attack.credential_access</id>
        </mitre>
        <description>Access To Browser Credential Files By Uncommon Application</description>
        <options>no_full_log</options>
        <group>file_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+ProgramData\\+Microsoft\\+Windows\ Defender\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+MpCopyAccelerator\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+MsMpEng\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+thor64\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+thor\.exe)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+msiexec\.exe</field>
    </rule>
    <rule id="901748" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_access/file_access_win_reg_and_hive_access.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects file access requests to files ending with either the ".hive"/".reg" extension, usually associated with Windows Registry backups.-->
        <!--Date: 2023/09/15-->
        <!--Status: experimental-->
        <!--ID: 337a31c6-46c4-46be-886a-260d7aa78cac-->
        <mitre>
            <id>attack.t1112</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Access To .Reg/.Hive Files By Uncommon Application</description>
        <options>no_full_log</options>
        <group>file_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\.hive|\.reg)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+System32\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+SysWOW64\\+</field>
    </rule>
    <rule id="901749" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_access/file_access_win_credential_manager_access.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious processes based on name and location that access the windows credential manager and vault.
Which can be a sign of credential stealing. Example case would be usage of mimikatz "dpapi::cred" function
-->
        <!--Date: 2022/10/11-->
        <!--Status: experimental-->
        <!--ID: 407aecb1-e762-4acf-8c7b-d087bcff3bb6-->
        <mitre>
            <id>attack.t1003</id>
            <id>attack.credential_access</id>
        </mitre>
        <description>Credential Manager Access By Uncommon Application</description>
        <options>no_full_log</options>
        <group>file_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Microsoft\\+Credentials\\+|\\+AppData\\+Roaming\\+Microsoft\\+Credentials\\+|\\+AppData\\+Local\\+Microsoft\\+Vault\\+|\\+ProgramData\\+Microsoft\\+Vault\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+system32\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+SysWOW64\\+)</field>
    </rule>
    <rule id="901750" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_access/file_access_win_susp_gpo_access_file.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects file access requests to potentially sensitive files hosted on the Windows Sysvol share.-->
        <!--Date: 2023/12/21-->
        <!--Status: experimental-->
        <!--ID: d51694fe-484a-46ac-92d6-969e76d60d10-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.006</id>
        </mitre>
        <description>Access To Potentially Sensitive Sysvol Files By Uncommon Application</description>
        <options>no_full_log</options>
        <group>file_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\\+)</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\\+sysvol\\+</field>
        <field name="full_log" negate="no" type="pcre2">(?i)\\+Policies\\+</field>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:audit\.csv|Files\.xml|GptTmpl\.inf|groups\.xml|Registry\.pol|Registry\.xml|scheduledtasks\.xml|scripts\.ini|services\.xml)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?::\\+Program\ Files\ \(x86\)\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?::\\+Program\ Files\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?::\\+Windows\\+explorer\.exe)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?::\\+Windows\\+system32\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?::\\+Windows\\+SysWOW64\\+)</field>
    </rule>
    <rule id="901751" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_access/file_access_win_susp_cred_hist_access.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects file access requests to the Windows Credential History File by an uncommon application.
This can be a sign of credential stealing. Example case would be usage of mimikatz "dpapi::credhist" function
-->
        <!--Date: 2022/10/17-->
        <!--Status: experimental-->
        <!--ID: 7a2a22ea-a203-4cd3-9abf-20eb1c5c6cd2-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1555.004</id>
        </mitre>
        <description>Access To Windows Credential History File By Uncommon Application</description>
        <options>no_full_log</options>
        <group>file_access,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\\+Microsoft\\+Protect\\+CREDHIST)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+system32\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+SysWOW64\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+explorer\.exe</field>
    </rule>
    <rule id="901752" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_rename/file_rename_win_ransomware.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects file renames where the target filename uses an uncommon double extension. Could indicate potential ransomware activity renaming files and adding a custom extension to the encrypted files, such as ".jpg.crypted", ".docx.locky", etc.-->
        <!--Date: 2022/07/16-->
        <!--Status: test-->
        <!--ID: e3f673b3-65d1-4d80-9146-466f8b63fa99-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1486</id>
        </mitre>
        <description>Suspicious Appended Extension</description>
        <options>no_full_log</options>
        <group>windows,file_rename,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\.doc|\.docx|\.jpeg|\.jpg|\.lnk|\.pdf|\.png|\.pst|\.rtf|\.xls|\.xlsx)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.doc\.|\.docx\.|\.jpeg\.|\.jpg\.|\.lnk\.|\.pdf\.|\.png\.|\.pst\.|\.rtf\.|\.xls\.|\.xlsx\.</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.backup)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.bak)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.old)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.orig)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.temp)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.tmp)$</field>
    </rule>
    <rule id="901753" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_rename/file_rename_win_ransomware.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects file renames where the target filename uses an uncommon double extension. Could indicate potential ransomware activity renaming files and adding a custom extension to the encrypted files, such as ".jpg.crypted", ".docx.locky", etc.-->
        <!--Date: 2022/07/16-->
        <!--Status: test-->
        <!--ID: e3f673b3-65d1-4d80-9146-466f8b63fa99-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1486</id>
        </mitre>
        <description>Suspicious Appended Extension</description>
        <options>no_full_log</options>
        <group>windows,file_rename,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="full_log" negate="no" type="pcre2">(?i)(?:\.doc|\.docx|\.jpeg|\.jpg|\.lnk|\.pdf|\.png|\.pst|\.rtf|\.xls|\.xlsx)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.doc\.|\.docx\.|\.jpeg\.|\.jpg\.|\.lnk\.|\.pdf\.|\.png\.|\.pst\.|\.rtf\.|\.xls\.|\.xlsx\.</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i):\\+ProgramData\\+Anaconda3\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.c\~)$</field>
    </rule>
    <rule id="901754" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_mal_octopus_scanner.yml</info>
        <!--Sigma Rule Author: NVISO-->
        <!--Description: Detects Octopus Scanner Malware.-->
        <!--Date: 2020/06/09-->
        <!--Status: test-->
        <!--ID: 805c55d9-31e6-4846-9878-c34c75054fe9-->
        <mitre>
            <id>attack.t1195</id>
            <id>attack.t1195.001</id>
        </mitre>
        <description>Octopus Scanner Malware</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Microsoft\\+Cache134\.dat|\\+AppData\\+Local\\+Microsoft\\+ExplorerSync\.db)$</field>
    </rule>
    <rule id="901755" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_taskmgr_lsass_dump.yml</info>
        <!--Sigma Rule Author: Swachchhanda Shrawan Poudel-->
        <!--Description: Detects the creation of an "lsass.dmp" file by the taskmgr process. This indicates a manual dumping of the LSASS.exe process memory using Windows Task Manager.-->
        <!--Date: 2023/10/19-->
        <!--Status: experimental-->
        <!--ID: 69ca12af-119d-44ed-b50f-a47af0ebc364-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>LSASS Process Memory Dump Creation Via Taskmgr.EXE</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?::\\+Windows\\+system32\\+taskmgr\.exe|:\\+Windows\\+SysWOW64\\+taskmgr\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+lsass</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.DMP</field>
    </rule>
    <rule id="901756" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_vscode_tunnel_renamed_execution.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of a file with the name "code_tunnel.json" which indicate execution and usage of VsCode tunneling utility by an "Image" or "Process" other than VsCode.
-->
        <!--Date: 2023/10/25-->
        <!--Status: experimental-->
        <!--ID: d102b8f5-61dc-4e68-bd83-9a3187c67377-->
        <mitre>
            <id>attack.command_and_control</id>
        </mitre>
        <description>Renamed VsCode Code Tunnel Execution - File Indicator</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+code_tunnel\.json)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+code\-tunnel\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+code\.exe)$</field>
    </rule>
    <rule id="901757" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_access_susp_unattend_xml.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Attempts to access unattend.xml, where credentials are commonly stored, within the Panther directory where installation logs are stored.
If these files exist, their contents will be displayed. They are used to store credentials/answers during the unattended windows install process
-->
        <!--Date: 2021/12/19-->
        <!--Status: test-->
        <!--ID: 1a3d42dd-3763-46b9-8025-b5f17f340dfb-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.001</id>
        </mitre>
        <description>Suspicious Unattend.xml File Access</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+unattend\.xml)$</field>
    </rule>
    <rule id="901758" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_office_uncommon_file_startup.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of a file with an uncommon extension in an Office application startup folder-->
        <!--Date: 2022/06/05-->
        <!--Status: experimental-->
        <!--ID: a10a2c40-2c4d-49f8-b557-1a946bc55d9d-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1587.001</id>
        </mitre>
        <description>Uncommon File Created In Office Startup Folder</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Microsoft\\+Word\\+STARTUP</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Office</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Program\ Files</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+STARTUP</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.docb)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.docm)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.docx)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.dotm)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.pdf)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.wll)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.wwl)$</field>
    </rule>
    <rule id="901759" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_office_uncommon_file_startup.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of a file with an uncommon extension in an Office application startup folder-->
        <!--Date: 2022/06/05-->
        <!--Status: experimental-->
        <!--ID: a10a2c40-2c4d-49f8-b557-1a946bc55d9d-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1587.001</id>
        </mitre>
        <description>Uncommon File Created In Office Startup Folder</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Microsoft\\+Word\\+STARTUP</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Office</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Program\ Files</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+STARTUP</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+Microsoft\\+Excel\\+XLSTART</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+Office</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+Program\ Files</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+XLSTART</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.xls)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.xlsm)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.xlsx)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.xlt)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.xltm)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.xll)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.xlw)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Common\ Files\\+Microsoft\ Shared\\+ClickToRun\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+OfficeClickToRun\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Microsoft\ Office\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\ Office\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+winword\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+excel\.exe)$</field>
    </rule>
    <rule id="901760" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_wmiprvse_wbemcomn_dll_hijack.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects a threat actor creating a file named `wbemcomn.dll` in the `C:\Windows\System32\wbem\` directory over the network and loading it for a WMI DLL Hijack scenario.-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: 614a7e17-5643-4d89-b6fe-f9df1a79641c-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1047</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
        </mitre>
        <description>Wmiprvse Wbemcomn DLL Hijack - File</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)System</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+wbem\\+wbemcomn\.dll)$</field>
    </rule>
    <rule id="901761" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_startup_folder_persistence.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when a file with a suspicious extension is created in the startup folder-->
        <!--Date: 2022/08/10-->
        <!--Status: test-->
        <!--ID: 28208707-fe31-437f-9a7f-4b1108b94d2e-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Suspicious Startup Folder Persistence</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Windows\\+Start\ Menu\\+Programs\\+Startup\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.vbs|\.vbe|\.bat|\.ps1|\.hta|\.dll|\.jar|\.msi|\.scr|\.cmd)$</field>
    </rule>
    <rule id="901762" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_net_cli_artefact.yml</info>
        <!--Sigma Rule Author: frack113, omkar72, oscd.community, Wojciech Lesicki-->
        <!--Description: Detects the creation of Usage Log files by the CLR (clr.dll). These files are named after the executing process once the assembly is finished executing for the first time in the (user) session context.-->
        <!--Date: 2022/11/18-->
        <!--Status: experimental-->
        <!--ID: e0b06658-7d1d-4cd3-bf15-03467507ff7c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Suspicious DotNET CLR Usage Log Artifact</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+UsageLogs\\+cmstp\.exe\.log|\\+UsageLogs\\+cscript\.exe\.log|\\+UsageLogs\\+mshta\.exe\.log|\\+UsageLogs\\+msxsl\.exe\.log|\\+UsageLogs\\+regsvr32\.exe\.log|\\+UsageLogs\\+rundll32\.exe\.log|\\+UsageLogs\\+svchost\.exe\.log|\\+UsageLogs\\+wscript\.exe\.log|\\+UsageLogs\\+wmic\.exe\.log)$</field>
        <field name="win.eventdata.parentImage" negate="yes" type="pcre2">(?i)(?:\\+MsiExec\.exe)$</field>
        <field name="win.eventdata.parentCommandLine" negate="yes" type="pcre2">(?i)\ \-Embedding</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+rundll32\.exe)$</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)Temp</field>
        <field name="win.eventdata.commandLine" negate="yes" type="pcre2">(?i)zzzzInvokeManagedCustomActionOutOfProc</field>
    </rule>
    <rule id="901763" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_teamviewer_remote_session.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the creation of log files during a TeamViewer remote session-->
        <!--Date: 2022/01/30-->
        <!--Status: test-->
        <!--ID: 162ab1e4-6874-4564-853c-53ec3ab8be01-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>TeamViewer Remote Session</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+TeamViewer\\+RemotePrinting\\+tvprint\.db|\\+TeamViewer\\+TVNetwork\.log)$</field>
    </rule>
    <rule id="901764" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_teamviewer_remote_session.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the creation of log files during a TeamViewer remote session-->
        <!--Date: 2022/01/30-->
        <!--Status: test-->
        <!--ID: 162ab1e4-6874-4564-853c-53ec3ab8be01-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>TeamViewer Remote Session</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+TeamViewer</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)_Logfile\.log</field>
    </rule>
    <rule id="901765" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_hktl_remote_cred_dump.yml</info>
        <!--Sigma Rule Author: SecurityAura-->
        <!--Description: Detects default filenames output from the execution of CrackMapExec and Impacket-secretsdump against an endpoint.-->
        <!--Date: 2022/11/16-->
        <!--Status: test-->
        <!--ID: 6e2a900a-ced9-4e4a-a9c2-13e706f9518a-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
        </mitre>
        <description>Potential Remote Credential Dumping Activity</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+svchost\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Windows\\+System32\\+[a-zA-Z0-9]{8}\.tmp$</field>
    </rule>
    <rule id="901766" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_lnk_double_extension.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), frack113-->
        <!--Description: Detects the creation of files with an "LNK" as a second extension. This is sometimes used by malware as a method to abuse the fact that Windows hides the "LNK" extension by default.
-->
        <!--Date: 2022/11/07-->
        <!--Status: experimental-->
        <!--ID: 3215aa19-f060-4332-86d5-5602511f3ca8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.007</id>
        </mitre>
        <description>Suspicious LNK Double Extension File Created</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.lnk)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.doc\.|\.docx\.|\.jpg\.|\.pdf\.|\.ppt\.|\.pptx\.|\.xls\.|\.xlsx\.</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+AppData\\+Roaming\\+Microsoft\\+Windows\\+Recent\\+</field>
    </rule>
    <rule id="901767" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_lnk_double_extension.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), frack113-->
        <!--Description: Detects the creation of files with an "LNK" as a second extension. This is sometimes used by malware as a method to abuse the fact that Windows hides the "LNK" extension by default.
-->
        <!--Date: 2022/11/07-->
        <!--Status: experimental-->
        <!--ID: 3215aa19-f060-4332-86d5-5602511f3ca8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.007</id>
        </mitre>
        <description>Suspicious LNK Double Extension File Created</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.lnk)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.doc\.|\.docx\.|\.jpg\.|\.pdf\.|\.ppt\.|\.pptx\.|\.xls\.|\.xlsx\.</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+excel\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+powerpnt\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+winword\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+AppData\\+Roaming\\+Microsoft\\+Office\\+Recent\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+excel\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+AppData\\+Roaming\\+Microsoft\\+Excel</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+powerpnt\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+AppData\\+Roaming\\+Microsoft\\+PowerPoint</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+winword\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+AppData\\+Roaming\\+Microsoft\\+Word</field>
    </rule>
    <rule id="901768" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_wmi_persistence_script_event_consumer_write.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects file writes of WMI script event consumer-->
        <!--Date: 2018/03/07-->
        <!--Status: test-->
        <!--ID: 33f41cdd-35ac-4ba8-814b-c6a4244a1ad4-->
        <mitre>
            <id>attack.t1546.003</id>
            <id>attack.persistence</id>
        </mitre>
        <description>WMI Persistence - Script Event Consumer File Write</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\+WINDOWS\\+system32\\+wbem\\+scrcons\.exe</field>
    </rule>

    <rule id="901770" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_creation_system_file.yml</info>
        <!--Sigma Rule Author: Sander Wiebing, Tim Shelton, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of an executable with a system process name in folders other than the system ones (System32, SysWOW64...etc).-->
        <!--Date: 2020/05/26-->
        <!--Status: test-->
            <id>attack.t1547.009</id>
        <!--ID: d5866ddf-ce8f-4aea-b28e-d96485a20d3d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.005</id>
        </mitre>
        <description>Files With System Process Name In Unsuspected Locations</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+AtBroker\.exe|\\+audiodg\.exe|\\+backgroundTaskHost\.exe|\\+bcdedit\.exe|\\+bitsadmin\.exe|\\+cmdl32\.exe|\\+cmstp\.exe|\\+conhost\.exe|\\+csrss\.exe|\\+dasHost\.exe|\\+dfrgui\.exe|\\+dllhost\.exe|\\+dwm\.exe|\\+eventcreate\.exe|\\+eventvwr\.exe|\\+explorer\.exe|\\+extrac32\.exe|\\+fontdrvhost\.exe|\\+ipconfig\.exe|\\+iscsicli\.exe|\\+iscsicpl\.exe|\\+logman\.exe|\\+LogonUI\.exe|\\+LsaIso\.exe|\\+lsass\.exe|\\+lsm\.exe|\\+msiexec\.exe|\\+msinfo32\.exe|\\+mstsc\.exe|\\+nbtstat\.exe|\\+odbcconf\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+regini\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+RuntimeBroker\.exe|\\+schtasks\.exe|\\+SearchFilterHost\.exe|\\+SearchIndexer\.exe|\\+SearchProtocolHost\.exe|\\+SecurityHealthService\.exe|\\+SecurityHealthSystray\.exe|\\+services\.exe|\\+ShellAppRuntime\.exe|\\+sihost\.exe|\\+smartscreen\.exe|\\+smss\.exe|\\+spoolsv\.exe|\\+svchost\.exe|\\+SystemSettingsBroker\.exe|\\+taskhost\.exe|\\+taskhostw\.exe|\\+Taskmgr\.exe|\\+TiWorker\.exe|\\+vssadmin\.exe|\\+w32tm\.exe|\\+WerFault\.exe|\\+WerFaultSecure\.exe|\\+wermgr\.exe|\\+wevtutil\.exe|\\+wininit\.exe|\\+winlogon\.exe|\\+winrshost\.exe|\\+WinRTNetMUAHostServer\.exe|\\+wlanext\.exe|\\+wlrmdr\.exe|\\+WmiPrvSE\.exe|\\+wslhost\.exe|\\+WSReset\.exe|\\+WUDFHost\.exe|\\+WWAHost\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i):\\+Windows\\+SoftwareDistribution\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i):\\+Windows\\+System32\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i):\\+Windows\\+SysWOW64\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i):\\+Windows\\+WinSxS\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+SystemRoot\\+System32\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Windows\\+System32\\+dism\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+TiWorker\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i):\\+\$WINDOWS\.\~BT\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+\$WINDOWS\.\~BT\\+Sources\\+SetupHost\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\\+RuntimeBroker\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+system32\\+wbengine\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+system32\\+svchost\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i):\\+Windows\\+SoftwareDistribution\\+Download\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+WindowsApps\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+wuauclt\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+explorer\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+WINDOWS\\+system32\\+msiexec\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+PowerShell\\+7\\+pwsh\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+PowerShell\\+7\-preview\\+pwsh\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i):\\+Windows\\+System32\\+SecurityHealth\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\\+SecurityHealthSystray\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+SecurityHealthSetup\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+uus\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+wuaucltcore\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i):\\+\$WinREAgent\\+</field>
    </rule>
    <rule id="901771" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_pcre_net_temp_file.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects processes creating temp files related to PCRE.NET package-->
        <!--Date: 2020/10/29-->
        <!--Status: test-->
        <!--ID: 6e90ae7a-7cd3-473f-a035-4ebb72d961da-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>PCRE.NET Package Temp Files</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+ba9ea7344a4a5f591d6e5dc32a13494b\\+</field>
    </rule>
    <rule id="901772" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_anydesk_writing_susp_binaries.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects AnyDesk writing binary files to disk other than "gcapi.dll".
According to RedCanary research it is highly abnormal for AnyDesk to write executable files to disk besides gcapi.dll,
which is a legitimate DLL that is part of the Google Chrome web browser used to interact with the Google Cloud API. (See reference section for more details)
-->
        <!--Date: 2022/09/28-->
        <!--Status: test-->
        <!--ID: 2d367498-5112-4ae5-a06a-96e7bc33a211-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Suspicious Binary Writes Via AnyDesk</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+anydesk\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.dll|\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\\+gcapi\.dll)$</field>
    </rule>
    <rule id="901773" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_hktl_quarkspw_filedump.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a dump file written by QuarksPwDump password dumper-->
        <!--Date: 2018/02/10-->
        <!--Status: test-->
        <!--ID: 847def9e-924d-4e90-b7c4-5f581395a2b4-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>QuarksPwDump Dump File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+SAM\-</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.dmp</field>
    </rule>
    <rule id="901774" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_office_startup_persistence.yml</info>
        <!--Sigma Rule Author: Max Altgelt (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects creation of Microsoft Office files inside of one of the default startup folders in order to achieve persistence.-->
        <!--Date: 2022/06/02-->
        <!--Status: test-->
        <!--ID: 0e20c89d-2264-44ae-8238-aeeaba609ece-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137</id>
        </mitre>
        <description>Potential Persistence Via Microsoft Office Startup Folder</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Microsoft\\+Word\\+STARTUP</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Office</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Program\ Files</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+STARTUP</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.doc|\.docm|\.docx|\.dot|\.dotm|\.rtf)$</field>
    </rule>
    <rule id="901775" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_office_startup_persistence.yml</info>
        <!--Sigma Rule Author: Max Altgelt (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects creation of Microsoft Office files inside of one of the default startup folders in order to achieve persistence.-->
        <!--Date: 2022/06/02-->
        <!--Status: test-->
        <!--ID: 0e20c89d-2264-44ae-8238-aeeaba609ece-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137</id>
        </mitre>
        <description>Potential Persistence Via Microsoft Office Startup Folder</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Microsoft\\+Excel\\+XLSTART</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Office</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Program\ Files</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+XLSTART</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.xls|\.xlsm|\.xlsx|\.xlt|\.xltm)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+WINWORD\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+EXCEL\.exe)$</field>
    </rule>
    <rule id="901776" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_vscode_tunnel_remote_creation_artefacts.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of file by the "node.exe" process in the ".vscode-server" directory. Could be a sign of remote file creation via VsCode tunnel feature
-->
        <!--Date: 2023/10/25-->
        <!--Status: experimental-->
        <!--ID: 56e05d41-ce99-4ecd-912d-93f019ee0b71-->
        <mitre>
            <id>attack.command_and_control</id>
        </mitre>
        <description>Visual Studio Code Tunnel Remote File Creation</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+servers\\+Stable\-</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+server\\+node\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+\.vscode\-server\\+data\\+User\\+History\\+</field>
    </rule>
    <rule id="901777" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_office_macro_files_created.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of a new office macro files on the systems-->
        <!--Date: 2022/01/23-->
        <!--Status: test-->
        <!--ID: 91174a41-dc8f-401b-be89-7bfc140612a0-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1566.001</id>
        </mitre>
        <description>Office Macro File Creation</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.docm|\.dotm|\.xlsm|\.xltm|\.potm|\.pptm)$</field>
    </rule>
    <rule id="901778" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_powershell_module_creation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of a new PowerShell module ".psm1", ".psd1", ".dll", ".ps1", etc.-->
        <!--Date: 2023/05/09-->
        <!--Status: experimental-->
        <!--ID: e36941d0-c0f0-443f-bc6f-cb2952eb69ea-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>PowerShell Module File Created</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+WindowsPowerShell\\+Modules\\+|\\+PowerShell\\+7\\+Modules\\+</field>
    </rule>
    <rule id="901779" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_legitimate_app_dropping_script.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth (Nextron Systems)-->
        <!--Description: Detects programs on a Windows system that should not write scripts to disk-->
        <!--Date: 2022/08/21-->
        <!--Status: experimental-->
        <!--ID: 7d604714-e071-49ff-8726-edeb95a70679-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Legitimate Application Dropped Script</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+eqnedt32\.exe|\\+wordpad\.exe|\\+wordview\.exe|\\+certutil\.exe|\\+certoc\.exe|\\+CertReq\.exe|\\+Desktopimgdownldr\.exe|\\+esentutl\.exe|\\+mshta\.exe|\\+AcroRd32\.exe|\\+RdrCEF\.exe|\\+hh\.exe|\\+finger\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.ps1|\.bat|\.vbs|\.scf|\.wsf|\.wsh)$</field>
    </rule>
    <rule id="901780" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_iso_file_mount.yml</info>
        <!--Sigma Rule Author: @sam0x90-->
        <!--Description: Detects the creation of a ISO file in the Outlook temp folder or in the Appdata temp folder. Typical of Qakbot TTP from end-July 2022.-->
        <!--Date: 2022/07/30-->
        <!--Status: test-->
        <!--ID: 2f9356ae-bf43-41b8-b858-4496d83b2acb-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1566.001</id>
        </mitre>
        <description>ISO File Created Within Temp Folders</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.zip\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.iso)$</field>
    </rule>
    <rule id="901781" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_iso_file_mount.yml</info>
        <!--Sigma Rule Author: @sam0x90-->
        <!--Description: Detects the creation of a ISO file in the Outlook temp folder or in the Appdata temp folder. Typical of Qakbot TTP from end-July 2022.-->
        <!--Date: 2022/07/30-->
        <!--Status: test-->
        <!--ID: 2f9356ae-bf43-41b8-b858-4496d83b2acb-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1566.001</id>
        </mitre>
        <description>ISO File Created Within Temp Folders</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Microsoft\\+Windows\\+INetCache\\+Content\.Outlook\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.iso)$</field>
    </rule>
    <rule id="901782" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_uac_bypass_dotnet_profiler.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using .NET Code Profiler and mmc.exe DLL hijacking (UACMe 39)-->
        <!--Date: 2021/08/30-->
        <!--Status: test-->
        <!--ID: 93a19907-d4f9-4deb-9f91-aac4692776a6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using .NET Code Profiler on MMC</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Users\\+)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Temp\\+pe386\.dll)$</field>
    </rule>
    <rule id="901783" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_winsxs_binary_creation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of binaries in the WinSxS folder by non-system processes-->
        <!--Date: 2023/05/11-->
        <!--Status: experimental-->
        <!--ID: 34746e8c-5fb8-415a-b135-0abc167e912a-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>WinSxS Executable File Creation By Non-System Process</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Windows\\+WinSxS\\+)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+Systems32\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+SysWOW64\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+WinSxS\\+)</field>
    </rule>
    <rule id="901784" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_powershell_module_susp_creation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of a new PowerShell module in the first folder of the module directory structure "\WindowsPowerShell\Modules\malware\malware.psm1". This is somewhat an uncommon practice as legitimate modules often includes a version folder.-->
        <!--Date: 2023/05/09-->
        <!--Status: experimental-->
        <!--ID: e8a52bbd-bced-459f-bd93-64db45ce7657-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Potential Suspicious PowerShell Module File Created</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+WindowsPowerShell\\+Modules\\+.+\\+\.ps|\\+WindowsPowerShell\\+Modules\\+.+\\+\.dll)$</field>
    </rule>
    <rule id="901785" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_werfault_dll_hijacking.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects WerFault copoed to a suspicious folder, which could be a sign of WerFault DLL hijacking-->
        <!--Date: 2022/05/09-->
        <!--Status: test-->
        <!--ID: 28a452f3-786c-4fd8-b8f2-bddbe9d616d1-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.001</id>
        </mitre>
        <description>Creation of an WerFault.exe in Unusual Folder</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+WerFault\.exe|\\+wer\.dll)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+System32\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+SysWOW64\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+WinSxS\\+</field>
    </rule>
    <rule id="901786" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_remote_access_tools_screenconnect_artefact.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/02/13-->
        <!--Status: test-->
        <!--ID: fec96f39-988b-4586-b746-b93d59fd1922-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>ScreenConnect Temporary Installation Artefact</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Bin\\+ScreenConnect\.</field>
    </rule>
    <rule id="901787" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_hktl_inveigh_artefacts.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the presence and execution of Inveigh via dropped artefacts-->
        <!--Date: 2022/10/24-->
        <!--Status: test-->
        <!--ID: bb09dd3e-2b78-4819-8e35-a7c1b874e449-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Inveigh Execution Artefacts</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+Inveigh\-Log\.txt|\\+Inveigh\-Cleartext\.txt|\\+Inveigh\-NTLMv1Users\.txt|\\+Inveigh\-NTLMv2Users\.txt|\\+Inveigh\-NTLMv1\.txt|\\+Inveigh\-NTLMv2\.txt|\\+Inveigh\-FormInput\.txt|\\+Inveigh\.dll|\\+Inveigh\.exe|\\+Inveigh\.ps1|\\+Inveigh\-Relay\.ps1)$</field>
    </rule>
    <rule id="901788" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_sysinternals_psexec_service.yml</info>
        <!--Sigma Rule Author: Thomas Patzke-->
        <!--Description: Detects default PsExec service filename which indicates PsExec service installation and execution-->
        <!--Date: 2017/06/12-->
        <!--Status: test-->
        <!--ID: 259e5a6a-b8d2-4c38-86e2-26c5e651361d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>PsExec Service File Creation</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+PSEXESVC\.exe)$</field>
    </rule>
    <rule id="901789" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_desktopimgdownldr_file.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects a suspicious Microsoft desktopimgdownldr file creation that stores a file to a suspicious location or contains a file with a suspicious extension-->
        <!--Date: 2020/07/03-->
        <!--Status: test-->
        <!--ID: fc4f4817-0c53-4683-a4ee-b17a64bc1039-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Suspicious Desktopimgdownldr Target File</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+svchost\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Personalization\\+LockScreenImage\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)C:\\+Windows\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\.jpg</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\.jpeg</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\.png</field>
    </rule>
    <rule id="901790" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_hktl_mimikatz_files.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), David ANDRE-->
        <!--Description: Detects the creation of files created by mimikatz such as ".kirbi", "mimilsa.log", etc.-->
        <!--Date: 2021/11/08-->
        <!--Status: test-->
        <!--ID: 9e099d99-44c2-42b6-a6d8-54c3545cab29-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1558</id>
        </mitre>
        <description>Mimikatz Kirbi File Creation</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.kirbi|mimilsa\.log)$</field>
    </rule>
    <rule id="901791" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_office_outlook_newform.yml</info>
        <!--Sigma Rule Author: Tobias Michalski (Nextron Systems)-->
        <!--Description: Detects the creation of a new Outlook form which can contain malicious code-->
        <!--Date: 2021/06/10-->
        <!--Status: experimental-->
        <!--ID: c3edc6a5-d9d4-48d8-930e-aab518390917-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137.003</id>
        </mitre>
        <description>Potential Persistence Via Outlook Form</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+outlook\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Microsoft\\+FORMS\\+IPM|\\+Local\ Settings\\+Application\ Data\\+Microsoft\\+Forms</field>
    </rule>
    <rule id="901792" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_new_files_in_uncommon_appdata_folder.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of suspicious files and folders inside the user's AppData folder but not inside any of the common and well known directories (Local, Romaing, LocalLow). This method could be used as a method to bypass detection who exclude the AppData folder in fear of FPs-->
        <!--Date: 2022/08/05-->
        <!--Status: experimental-->
        <!--ID: d7b50671-d1ad-4871-aa60-5aa5b331fe04-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.execution</id>
        </mitre>
        <description>Suspicious File Creation In Uncommon AppData Folder</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Users\\+)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.bat|\.cmd|\.cpl|\.dll|\.exe|\.hta|\.iso|\.lnk|\.msi|\.ps1|\.psm1|\.scr|\.vbe|\.vbs)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)^(?:C:\\+Users\\+)</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+AppData\\+LocalLow\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+AppData\\+Roaming\\+</field>
    </rule>
    <rule id="901793" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_lsass_shtinkering.yml</info>
        <!--Sigma Rule Author: @pbssubhash-->
        <!--Description: Detects the presence of an LSASS dump file in the "CrashDumps" folder. This could be a sign of LSASS credential dumping. Techniques such as the LSASS Shtinkering have been seen abusing the Windows Error Reporting to dump said process.-->
        <!--Date: 2022/12/08-->
        <!--Status: test-->
        <!--ID: 6902955a-01b7-432c-b32a-6f5f81d8f625-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>LSASS Process Dump Artefact In CrashDumps Folder</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+config\\+systemprofile\\+AppData\\+Local\\+CrashDumps\\+)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)lsass\.exe\.</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.dmp)$</field>
    </rule>
    <rule id="901794" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_sam_dump.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the creation of files that look like exports of the local SAM (Security Account Manager)-->
        <!--Date: 2022/02/11-->
        <!--Status: test-->
        <!--ID: 4e87b8e2-2ee9-4b2a-a715-4727d297ece0-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
        </mitre>
        <description>Potential SAM Database Dump</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+Temp\\+sam|\\+sam\.sav|\\+Intel\\+sam|\\+sam\.hive|\\+Perflogs\\+sam|\\+ProgramData\\+sam|\\+Users\\+Public\\+sam|\\+AppData\\+Local\\+sam|\\+AppData\\+Roaming\\+sam|_ShadowSteal\.zip|\\+Documents\\+SAM\.export|:\\+sam)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+hive_sam_|\\+sam\.save|\\+sam\.export|\\+\~reg_sam\.save|\\+sam_backup|\\+sam\.bck|\\+sam\.backup</field>
    </rule>
    <rule id="901795" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_powershell_exploit_scripts.yml</info>
        <!--Sigma Rule Author: Markus Neis, Nasreddine Bencherchali (Nextron Systems), Mustafa Kaan Demir, Georg Lauenstein-->
        <!--Description: Detects the creation of known offensive powershell scripts used for exploitation-->
        <!--Date: 2018/04/07-->
        <!--Status: test-->
        <!--ID: f331aa1f-8c53-4fc3-b083-cc159bc971cb-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious PowerShell Scripts - FileCreation</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+Add\-ConstrainedDelegationBackdoor\.ps1|\\+Add\-Exfiltration\.ps1|\\+Add\-Persistence\.ps1|\\+Add\-RegBackdoor\.ps1|\\+Add\-RemoteRegBackdoor\.ps1|\\+Add\-ScrnSaveBackdoor\.ps1|\\+ADRecon\.ps1|\\+AzureADRecon\.ps1|\\+Check\-VM\.ps1|\\+ConvertTo\-ROT13\.ps1|\\+Copy\-VSS\.ps1|\\+Create\-MultipleSessions\.ps1|\\+DNS_TXT_Pwnage\.ps1|\\+Do\-Exfiltration\.ps1|\\+DomainPasswordSpray\.ps1|\\+Download_Execute\.ps1|\\+Download\-Execute\-PS\.ps1|\\+Enable\-DuplicateToken\.ps1|\\+Enabled\-DuplicateToken\.ps1|\\+Execute\-Command\-MSSQL\.ps1|\\+Execute\-DNSTXT\-Code\.ps1|\\+Execute\-OnTime\.ps1|\\+ExetoText\.ps1|\\+Exploit\-Jboss\.ps1|\\+Find\-AVSignature\.ps1|\\+Find\-Fruit\.ps1|\\+Find\-GPOLocation\.ps1|\\+Find\-TrustedDocuments\.ps1|\\+FireBuster\.ps1|\\+FireListener\.ps1|\\+Get\-ApplicationHost\.ps1|\\+Get\-ChromeDump\.ps1|\\+Get\-ClipboardContents\.ps1|\\+Get\-ComputerDetail\.ps1|\\+Get\-FoxDump\.ps1|\\+Get\-GPPAutologon\.ps1|\\+Get\-GPPPassword\.ps1|\\+Get\-IndexedItem\.ps1|\\+Get\-Keystrokes\.ps1|\\+Get\-LSASecret\.ps1|\\+Get\-MicrophoneAudio\.ps1|\\+Get\-PassHashes\.ps1|\\+Get\-PassHints\.ps1|\\+Get\-RegAlwaysInstallElevated\.ps1|\\+Get\-RegAutoLogon\.ps1|\\+Get\-RickAstley\.ps1|\\+Get\-Screenshot\.ps1|\\+Get\-SecurityPackages\.ps1|\\+Get\-ServiceFilePermission\.ps1|\\+Get\-ServicePermission\.ps1|\\+Get\-ServiceUnquoted\.ps1|\\+Get\-SiteListPassword\.ps1|\\+Get\-System\.ps1|\\+Get\-TimedScreenshot\.ps1|\\+Get\-UnattendedInstallFile\.ps1|\\+Get\-Unconstrained\.ps1|\\+Get\-USBKeystrokes\.ps1|\\+Get\-VaultCredential\.ps1|\\+Get\-VulnAutoRun\.ps1|\\+Get\-VulnSchTask\.ps1|\\+Get\-WebConfig\.ps1|\\+Get\-WebCredentials\.ps1|\\+Get\-WLAN\-Keys\.ps1|\\+Gupt\-Backdoor\.ps1|\\+HTTP\-Backdoor\.ps1|\\+HTTP\-Login\.ps1|\\+Install\-ServiceBinary\.ps1|\\+Install\-SSP\.ps1|\\+Invoke\-ACLScanner\.ps1|\\+Invoke\-ADSBackdoor\.ps1|\\+Invoke\-AmsiBypass\.ps1|\\+Invoke\-ARPScan\.ps1|\\+Invoke\-BackdoorLNK\.ps1|\\+Invoke\-BadPotato\.ps1|\\+Invoke\-BetterSafetyKatz\.ps1|\\+Invoke\-BruteForce\.ps1|\\+Invoke\-BypassUAC\.ps1|\\+Invoke\-Carbuncle\.ps1|\\+Invoke\-Certify\.ps1|\\+Invoke\-ConPtyShell\.ps1|\\+Invoke\-CredentialInjection\.ps1|\\+Invoke\-CredentialsPhish\.ps1|\\+Invoke\-DAFT\.ps1|\\+Invoke\-DCSync\.ps1|\\+Invoke\-Decode\.ps1|\\+Invoke\-DinvokeKatz\.ps1|\\+Invoke\-DllInjection\.ps1|\\+Invoke\-DNSUpdate\.ps1|\\+Invoke\-DowngradeAccount\.ps1|\\+Invoke\-EgressCheck\.ps1|\\+Invoke\-Encode\.ps1|\\+Invoke\-EventViewer\.ps1|\\+Invoke\-Eyewitness\.ps1|\\+Invoke\-FakeLogonScreen\.ps1|\\+Invoke\-Farmer\.ps1|\\+Invoke\-Get\-RBCD\-Threaded\.ps1|\\+Invoke\-Gopher\.ps1|\\+Invoke\-Grouper2\.ps1|\\+Invoke\-Grouper3\.ps1|\\+Invoke\-HandleKatz\.ps1|\\+Invoke\-Interceptor\.ps1|\\+Invoke\-Internalmonologue\.ps1|\\+Invoke\-Inveigh\.ps1|\\+Invoke\-InveighRelay\.ps1|\\+Invoke\-JSRatRegsvr\.ps1|\\+Invoke\-JSRatRundll\.ps1|\\+Invoke\-KrbRelay\.ps1|\\+Invoke\-KrbRelayUp\.ps1|\\+Invoke\-LdapSignCheck\.ps1|\\+Invoke\-Lockless\.ps1|\\+Invoke\-MalSCCM\.ps1|\\+Invoke\-Mimikatz\.ps1|\\+Invoke\-MimikatzWDigestDowngrade\.ps1|\\+Invoke\-Mimikittenz\.ps1|\\+Invoke\-MITM6\.ps1|\\+Invoke\-NanoDump\.ps1|\\+Invoke\-NetRipper\.ps1|\\+Invoke\-NetworkRelay\.ps1|\\+Invoke\-NinjaCopy\.ps1|\\+Invoke\-OxidResolver\.ps1|\\+Invoke\-P0wnedshell\.ps1|\\+Invoke\-P0wnedshellx86\.ps1|\\+Invoke\-Paranoia\.ps1|\\+Invoke\-PortScan\.ps1|\\+Invoke\-PoshRatHttp\.ps1|\\+Invoke\-PoshRatHttps\.ps1|\\+Invoke\-PostExfil\.ps1|\\+Invoke\-PowerDump\.ps1|\\+Invoke\-PowerShellIcmp\.ps1|\\+Invoke\-PowerShellTCP\.ps1|\\+Invoke\-PowerShellTcpOneLine\.ps1|\\+Invoke\-PowerShellTcpOneLineBind\.ps1|\\+Invoke\-PowerShellUdp\.ps1|\\+Invoke\-PowerShellUdpOneLine\.ps1|\\+Invoke\-PowerShellWMI\.ps1|\\+Invoke\-PowerThIEf\.ps1|\\+Invoke\-PPLDump\.ps1|\\+Invoke\-Prasadhak\.ps1|\\+Invoke\-PsExec\.ps1|\\+Invoke\-PsGcat\.ps1|\\+Invoke\-PsGcatAgent\.ps1|\\+Invoke\-PSInject\.ps1|\\+Invoke\-PsUaCme\.ps1|\\+Invoke\-ReflectivePEInjection\.ps1|\\+Invoke\-ReverseDNSLookup\.ps1|\\+Invoke\-Rubeus\.ps1|\\+Invoke\-RunAs\.ps1|\\+Invoke\-SafetyKatz\.ps1|\\+Invoke\-SauronEye\.ps1|\\+Invoke\-SCShell\.ps1|\\+Invoke\-Seatbelt\.ps1|\\+Invoke\-ServiceAbuse\.ps1|\\+Invoke\-SessionGopher\.ps1|\\+Invoke\-ShellCode\.ps1|\\+Invoke\-SMBScanner\.ps1|\\+Invoke\-Snaffler\.ps1|\\+Invoke\-Spoolsample\.ps1|\\+Invoke\-SSHCommand\.ps1|\\+Invoke\-SSIDExfil\.ps1|\\+Invoke\-StandIn\.ps1|\\+Invoke\-StickyNotesExtract\.ps1|\\+Invoke\-Tater\.ps1|\\+Invoke\-Thunderfox\.ps1|\\+Invoke\-ThunderStruck\.ps1|\\+Invoke\-TokenManipulation\.ps1|\\+Invoke\-Tokenvator\.ps1|\\+Invoke\-TotalExec\.ps1|\\+Invoke\-UrbanBishop\.ps1|\\+Invoke\-UserHunter\.ps1|\\+Invoke\-VoiceTroll\.ps1|\\+Invoke\-Whisker\.ps1|\\+Invoke\-WinEnum\.ps1|\\+Invoke\-winPEAS\.ps1|\\+Invoke\-WireTap\.ps1|\\+Invoke\-WmiCommand\.ps1|\\+Invoke\-WScriptBypassUAC\.ps1|\\+Invoke\-Zerologon\.ps1|\\+Keylogger\.ps1|\\+MailRaider\.ps1|\\+New\-HoneyHash\.ps1|\\+OfficeMemScraper\.ps1|\\+Offline_Winpwn\.ps1|\\+Out\-CHM\.ps1|\\+Out\-DnsTxt\.ps1|\\+Out\-Excel\.ps1|\\+Out\-HTA\.ps1|\\+Out\-Java\.ps1|\\+Out\-JS\.ps1|\\+Out\-Minidump\.ps1|\\+Out\-RundllCommand\.ps1|\\+Out\-SCF\.ps1|\\+Out\-SCT\.ps1|\\+Out\-Shortcut\.ps1|\\+Out\-WebQuery\.ps1|\\+Out\-Word\.ps1|\\+Parse_Keys\.ps1|\\+Port\-Scan\.ps1|\\+PowerBreach\.ps1|\\+powercat\.ps1|\\+Powermad\.ps1|\\+PowerRunAsSystem\.psm1|\\+PowerSharpPack\.ps1|\\+PowerUp\.ps1|\\+PowerUpSQL\.ps1|\\+PowerView\.ps1|\\+PSAsyncShell\.ps1|\\+RemoteHashRetrieval\.ps1|\\+Remove\-Persistence\.ps1|\\+Remove\-PoshRat\.ps1|\\+Remove\-Update\.ps1|\\+Run\-EXEonRemote\.ps1|\\+Schtasks\-Backdoor\.ps1|\\+Set\-DCShadowPermissions\.ps1|\\+Set\-MacAttribute\.ps1|\\+Set\-RemotePSRemoting\.ps1|\\+Set\-RemoteWMI\.ps1|\\+Set\-Wallpaper\.ps1|\\+Show\-TargetScreen\.ps1|\\+Speak\.ps1|\\+Start\-CaptureServer\.ps1|\\+Start\-WebcamRecorder\.ps1|\\+StringToBase64\.ps1|\\+TexttoExe\.ps1|\\+VolumeShadowCopyTools\.ps1|\\+WinPwn\.ps1|\\+WSUSpendu\.ps1)$</field>
    </rule>
    <rule id="901796" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_powershell_exploit_scripts.yml</info>
        <!--Sigma Rule Author: Markus Neis, Nasreddine Bencherchali (Nextron Systems), Mustafa Kaan Demir, Georg Lauenstein-->
        <!--Description: Detects the creation of known offensive powershell scripts used for exploitation-->
        <!--Date: 2018/04/07-->
        <!--Status: test-->
        <!--ID: f331aa1f-8c53-4fc3-b083-cc159bc971cb-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Malicious PowerShell Scripts - FileCreation</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)Invoke\-Sharp</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.ps1)$</field>
    </rule>
    <rule id="901797" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_iso_file_recent.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the creation of recent element file that points to an .ISO, .IMG, .VHD or .VHDX file as often used in phishing attacks.
This can be a false positive on server systems but on workstations users should rarely mount .iso or .img files.
-->
        <!--Date: 2022/02/11-->
        <!--Status: test-->
        <!--ID: 4358e5a5-7542-4dcb-b9f3-87667371839b-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1566.001</id>
        </mitre>
        <description>ISO or Image Mount Indicator in Recent Files</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.iso\.lnk|\.img\.lnk|\.vhd\.lnk|\.vhdx\.lnk)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Microsoft\\+Windows\\+Recent\\+</field>
    </rule>
    <rule id="901798" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_pfx_file_creation.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: A general detection for processes creating PFX files. This could be an indicator of an adversary exporting a local certificate to a PFX file.-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: dca1b3e8-e043-4ec8-85d7-867f334b5724-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.004</id>
        </mitre>
        <description>Suspicious PFX File Creation</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.pfx)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+Templates\\+Windows\\+Windows_TemporaryKey\.pfx</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+CMake\\+</field>
    </rule>
    <rule id="901799" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_powershell_profile.yml</info>
        <!--Sigma Rule Author: HieuTT35, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation or modification of a powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence-->
        <!--Date: 2019/10/24-->
        <!--Status: test-->
        <!--ID: b5b78988-486d-4a80-b991-930eff3ff8bf-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.013</id>
        </mitre>
        <description>PowerShell Profile Modification</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+Microsoft\.PowerShell_profile\.ps1|\\+PowerShell\\+profile\.ps1|\\+Program\ Files\\+PowerShell\\+7\-preview\\+profile\.ps1|\\+Program\ Files\\+PowerShell\\+7\\+profile\.ps1|\\+Windows\\+System32\\+WindowsPowerShell\\+v1\.0\\+profile\.ps1|\\+WindowsPowerShell\\+profile\.ps1)$</field>
    </rule>
    <rule id="901800" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_recycle_bin_fake_exec.yml</info>
        <!--Sigma Rule Author: X__Junior (Nextron Systems)-->
        <!--Description: Detects file write event from/to a fake recycle bin folder that is often used as a staging directory for malware-->
        <!--Date: 2023/07/12-->
        <!--Status: experimental-->
        <!--ID: cd8b36ac-8e4a-4c2f-a402-a29b8fbd5bca-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious File Creation Activity From Fake Recycle.Bin Folder</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)RECYCLERS\.BIN\\+|RECYCLER\.BIN\\+|RECYCLE\.BIN\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)RECYCLERS\.BIN\\+|RECYCLER\.BIN\\+|RECYCLE\.BIN\\+</field>
    </rule>
    <rule id="901801" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_new_scr_file.yml</info>
        <!--Sigma Rule Author: Christopher Peacock @securepeacock, SCYTHE @scythe_io-->
        <!--Description: Detects the creation of screensaver files (.scr) outside of system folders. Attackers may execute an application as an ".SCR" file using "rundll32.exe desk.cpl,InstallScreenSaver" for example.-->
        <!--Date: 2022/04/27-->
        <!--Status: experimental-->
        <!--ID: c048f047-7e2a-4888-b302-55f509d4a91d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218.011</id>
        </mitre>
        <description>SCR File Write Event</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.scr)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i):\\+\$WINDOWS\.\~BT\\+NewOS\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i):\\+Windows\\+System32\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i):\\+Windows\\+SysWOW64\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i):\\+Windows\\+WinSxS\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i):\\+WUDownloadCache\\+</field>
    </rule>
    <rule id="901802" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_msdt_susp_directories.yml</info>
        <!--Sigma Rule Author: Vadim Varganov, Florian Roth (Nextron Systems)-->
        <!--Description: Detects msdt.exe creating files in suspicious directories which could be a sign of exploitation of either Follina or Dogwalk vulnerabilities-->
        <!--Date: 2022/08/24-->
        <!--Status: experimental-->
        <!--ID: 318557a5-150c-4c8d-b70e-a9910e199857-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
            <id>cve.2022.30190</id>
        </mitre>
        <description>File Creation In Suspicious Directory By Msdt.EXE</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+msdt\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Desktop\\+|\\+Start\ Menu\\+Programs\\+Startup\\+|C:\\+PerfLogs\\+|C:\\+ProgramData\\+|C:\\+Users\\+Public\\+</field>
    </rule>
    <rule id="901803" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_desktop_ini.yml</info>
        <!--Sigma Rule Author: Maxime Thiebaut (@0xThiebaut), Tim Shelton (HAWK.IO)-->
        <!--Description: Detects unusual processes accessing desktop.ini, which can be leveraged to alter how Explorer displays a folder's content (i.e. renaming files) without changing them on disk.-->
        <!--Date: 2020/03/19-->
        <!--Status: test-->
        <!--ID: 81315b50-6b60-4d8f-9928-3466e1022515-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Suspicious desktop.ini Action</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+desktop\.ini)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+JetBrains\\+Toolbox\\+bin\\+7z\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+JetBrains\\+apps\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)^(?:C:\\+\$WINDOWS\.\~BT\\+NewOS\\+)</field>
    </rule>
    <rule id="901804" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_desktop_txt.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Ransomware create txt file in the user Desktop-->
        <!--Date: 2021/12/26-->
        <!--Status: test-->
        <!--ID: caf02a0a-1e1c-4552-9b48-5e070bd88d11-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1486</id>
        </mitre>
        <description>Suspicious Creation TXT File in User Desktop</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Users\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Desktop\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.txt)$</field>
    </rule>
    <rule id="901805" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_create_non_existent_dlls.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), fornotes-->
        <!--Description: Detects the creation of system dlls that are not present on the system. Usually to achieve dll hijacking-->
        <!--Date: 2022/12/01-->
        <!--Status: experimental-->
        <!--ID: df6ecb8b-7822-4f4b-b412-08f524b4576c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1574.001</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>Creation Of Non-Existent System DLL</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\+Windows\\+System32\\+WLBSCTRL\.dll|C:\\+Windows\\+System32\\+TSMSISrv\.dll|C:\\+Windows\\+System32\\+TSVIPSrv\.dll|C:\\+Windows\\+System32\\+wow64log\.dll|C:\\+Windows\\+System32\\+WptsExtensions\.dll|C:\\+Windows\\+System32\\+wbem\\+wbemcomn\.dll</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+SprintCSP\.dll)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+)</field>
    </rule>
    <rule id="901806" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_ntds_dit_uncommon_parent_process.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects creation of a file named "ntds.dit" (Active Directory Database) by an uncommon parent process or directory-->
        <!--Date: 2022/03/11-->
        <!--Status: test-->
        <!--ID: 4e7050dd-e548-483f-b7d6-527ab4fa784d-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>NTDS.DIT Creation By Uncommon Parent Process</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+ntds\.dit)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)(?:\\+cscript\.exe|\\+httpd\.exe|\\+nginx\.exe|\\+php\-cgi\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+w3wp\.exe|\\+wscript\.exe)$</field>
    </rule>
    <rule id="901807" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_ntds_dit_uncommon_parent_process.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects creation of a file named "ntds.dit" (Active Directory Database) by an uncommon parent process or directory-->
        <!--Date: 2022/03/11-->
        <!--Status: test-->
        <!--ID: 4e7050dd-e548-483f-b7d6-527ab4fa784d-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>NTDS.DIT Creation By Uncommon Parent Process</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+ntds\.dit)$</field>
        <field name="win.eventdata.parentImage" negate="no" type="pcre2">(?i)\\+apache|\\+tomcat|\\+AppData\\+|\\+Temp\\+|\\+Public\\+|\\+PerfLogs\\+</field>
    </rule>
    <rule id="901808" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_colorcpl.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Once executed, colorcpl.exe will copy the arbitrary file to c:\windows\system32\spool\drivers\color\-->
        <!--Date: 2022/01/21-->
        <!--Status: test-->
        <!--ID: e15b518d-b4ce-4410-a9cd-501f23ce4a18-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564</id>
        </mitre>
        <description>Suspicious Creation with Colorcpl</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+colorcpl\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.icm)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.gmmp)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.cdmp)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.camp)$</field>
    </rule>
    <rule id="901809" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_shell_write_susp_files_extensions.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects Windows executables that writes files with suspicious extensions-->
        <!--Date: 2022/08/12-->
        <!--Status: experimental-->
        <!--ID: b8fd0e93-ff58-4cbd-8f48-1c114e342e62-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Windows Binaries Write Suspicious Extensions</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+smss\.exe|\\+RuntimeBroker\.exe|\\+sihost\.exe|\\+lsass\.exe|\\+csrss\.exe|\\+winlogon\.exe|\\+wininit\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.bat|\.vbe|\.txt|\.vbs|\.exe|\.ps1|\.hta|\.iso|\.dll)$</field>
    </rule>
    <rule id="901810" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_shell_write_susp_files_extensions.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects Windows executables that writes files with suspicious extensions-->
        <!--Date: 2022/08/12-->
        <!--Status: experimental-->
        <!--ID: b8fd0e93-ff58-4cbd-8f48-1c114e342e62-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
        </mitre>
        <description>Windows Binaries Write Suspicious Extensions</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+rundll32\.exe|\\+svchost\.exe|\\+dllhost\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.bat|\.vbe|\.vbs|\.ps1|\.hta|\.iso)$</field>
    </rule>
    <rule id="901811" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_shell_write_susp_directory.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects Windows shells and scripting applications that write files to suspicious folders-->
        <!--Date: 2021/11/20-->
        <!--Status: experimental-->
        <!--ID: 1277f594-a7d1-4f28-a2d3-73af5cbeab43-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Windows Shell/Scripting Application File Write to Suspicious Folder</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+bash\.exe|\\+cmd\.exe|\\+cscript\.exe|\\+msbuild\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+sh\.exe|\\+wscript\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+PerfLogs\\+|C:\\+Users\\+Public\\+)</field>
    </rule>
    <rule id="901812" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_shell_write_susp_directory.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects Windows shells and scripting applications that write files to suspicious folders-->
        <!--Date: 2021/11/20-->
        <!--Status: experimental-->
        <!--ID: 1277f594-a7d1-4f28-a2d3-73af5cbeab43-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Windows Shell/Scripting Application File Write to Suspicious Folder</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+certutil\.exe|\\+forfiles\.exe|\\+mshta\.exe|\\+schtasks\.exe|\\+scriptrunner\.exe|\\+wmic\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\+PerfLogs\\+|C:\\+Users\\+Public\\+|C:\\+Windows\\+Temp\\+</field>
    </rule>
    <rule id="901813" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_powershell_drop_powershell.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects PowerShell creating a PowerShell file (.ps1). While often times this behavior is benign, sometimes it can be a sign of a dropper script trying to achieve persistence.-->
        <!--Date: 2023/05/09-->
        <!--Status: experimental-->
        <!--ID: 576426ad-0131-4001-ae01-be175da0c108-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>PowerShell Script Dropped Via PowerShell.EXE</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.ps1)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)__PSScriptPolicyTest_</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)^(?:C:\\+Users\\+)</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+Temp\\+)</field>
    </rule>
    <rule id="901814" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_uac_bypass_winsat.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using a path parsing issue in winsat.exe (UACMe 52)-->
        <!--Date: 2021/08/30-->
        <!--Status: test-->
        <!--ID: 155dbf56-e0a4-4dd0-8905-8a98705045e8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Abusing Winsat Path Parsing - File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Users\\+)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Temp\\+system32\\+winsat\.exe|\\+AppData\\+Local\\+Temp\\+system32\\+winmm\.dll)$</field>
    </rule>
    <rule id="901815" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_creation_by_mobsync.yml</info>
        <!--Sigma Rule Author: elhoim-->
        <!--Description: This rule detects suspicious files created by Microsoft Sync Center (mobsync)-->
        <!--Date: 2022/04/28-->
        <!--Status: test-->
        <!--ID: 409f8a98-4496-4aaa-818a-c931c0a8b832-->
        <mitre>
            <id>attack.t1055</id>
            <id>attack.t1218</id>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Created Files by Microsoft Sync Center</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+mobsync\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.dll|\.exe)$</field>
    </rule>
    <rule id="901816" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_hktl_powerup_dllhijacking.yml</info>
        <!--Sigma Rule Author: Subhash Popuri (@pbssubhash)-->
        <!--Description: Powerup tool's Write Hijack DLL exploits DLL hijacking for privilege escalation.
In it's default mode, it builds a self deleting .bat file which executes malicious command.
The detection rule relies on creation of the malicious bat file (debug.bat by default).
-->
        <!--Date: 2021/08/21-->
        <!--Status: test-->
        <!--ID: 602a1f13-c640-4d73-b053-be9a2fa58b96-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.001</id>
        </mitre>
        <description>Powerup Write Hijack DLL</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.bat)$</field>
    </rule>
    <rule id="901817" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_uac_bypass_ieinstal.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using IEInstal.exe (UACMe 64)-->
        <!--Date: 2021/08/30-->
        <!--Status: test-->
        <!--ID: bdd8157d-8e85-4397-bb82-f06cc9c71dbb-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using IEInstal - File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\+Program\ Files\\+Internet\ Explorer\\+IEInstal\.exe</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Users\\+)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:consent\.exe)$</field>
    </rule>
    <rule id="901818" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_office_outlook_macro_creation.yml</info>
        <!--Sigma Rule Author: @ScoubiMtl-->
        <!--Description: Detects the creation of a macro file for Outlook.-->
        <!--Date: 2021/04/05-->
        <!--Status: test-->
        <!--ID: 8c31f563-f9a7-450c-bfa8-35f8f32f1f61-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.command_and_control</id>
            <id>attack.t1137</id>
            <id>attack.t1008</id>
            <id>attack.t1546</id>
        </mitre>
        <description>New Outlook Macro Created</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+outlook\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+Microsoft\\+Outlook\\+VbaProject\.OTM)$</field>
    </rule>
    <rule id="901819" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_cscript_wscript_dropper.yml</info>
        <!--Sigma Rule Author: Tim Shelton-->
        <!--Description: Detects a file ending in jse, vbe, js, vba, vbs written by cscript.exe or wscript.exe-->
        <!--Date: 2022/01/10-->
        <!--Status: test-->
        <!--ID: 002bdb95-0cf1-46a6-9e08-d38c128a6127-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
        </mitre>
        <description>WScript or CScript Dropper - File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+wscript\.exe|\\+cscript\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Users\\+|C:\\+ProgramData)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.jse|\.vbe|\.js|\.vba|\.vbs)$</field>
    </rule>
    <rule id="901820" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_get_variable.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Get-Variable is a valid PowerShell cmdlet
WindowsApps is by default in the path where PowerShell is executed.
So when the Get-Variable command is issued on PowerShell execution, the system first looks for the Get-Variable executable in the path and executes the malicious binary instead of looking for the PowerShell cmdlet.
-->
        <!--Date: 2022/04/23-->
        <!--Status: test-->
        <!--ID: 0c3fac91-5627-46e8-a6a8-a0d7b9b8ae1b-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Suspicious Get-Variable.exe Creation</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:Local\\+Microsoft\\+WindowsApps\\+Get\-Variable\.exe)$</field>
    </rule>
    <rule id="901821" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_double_extension.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), frack113-->
        <!--Description: Detects dropped files with double extensions, which is often used by malware as a method to abuse the fact that Windows hide default extensions by default.-->
        <!--Date: 2022/06/19-->
        <!--Status: test-->
        <!--ID: b4926b47-a9d7-434c-b3a0-adc3fa0bd13e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.007</id>
        </mitre>
        <description>Suspicious Double Extension Files</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.exe|\.iso|\.rar|\.zip)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.doc\.|\.docx\.|\.jpg\.|\.pdf\.|\.ppt\.|\.pptx\.|\.xls\.|\.xlsx\.</field>
    </rule>
    <rule id="901822" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_double_extension.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), frack113-->
        <!--Description: Detects dropped files with double extensions, which is often used by malware as a method to abuse the fact that Windows hide default extensions by default.-->
        <!--Date: 2022/06/19-->
        <!--Status: test-->
        <!--ID: b4926b47-a9d7-434c-b3a0-adc3fa0bd13e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.007</id>
        </mitre>
        <description>Suspicious Double Extension Files</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.rar\.exe|\.zip\.exe)$</field>
    </rule>
    <rule id="901823" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_sysinternals_livekd_default_dump_name.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of a file that has the same name as the default LiveKD kernel memory dump.-->
        <!--Date: 2023/05/16-->
        <!--Status: experimental-->
        <!--ID: 814ddeca-3d31-4265-8e07-8cc54fb44903-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>LiveKD Kernel Memory Dump File Created</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\+Windows\\+livekd\.dmp</field>
    </rule>
    <rule id="901824" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_create_evtx_non_common_locations.yml</info>
        <!--Sigma Rule Author: D3F7A5105-->
        <!--Description: Detects the creation of new files with the ".evtx" extension in non-common locations. Which could indicate tampering with default evtx locations in order to evade security controls-->
        <!--Date: 2023/01/02-->
        <!--Status: experimental-->
        <!--ID: 65236ec7-ace0-4f0c-82fd-737b04fd4dcb-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.002</id>
        </mitre>
        <description>EVTX Created In Uncommon Location</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.evtx)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i):\\+Windows\\+System32\\+winevt\\+Logs\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i):\\+ProgramData\\+Microsoft\\+Windows\\+Containers\\+BaseImages\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\\+Windows\\+System32\\+winevt\\+Logs\\+)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+explorer\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+system32\\+dllhost\.exe)$</field>
    </rule>
    <rule id="901825" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_uac_bypass_wmp.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)-->
        <!--Date: 2021/08/23-->
        <!--Status: test-->
        <!--ID: 68578b43-65df-4f81-9a9b-92f32711a951-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using Windows Media Player - File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Users\\+)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Temp\\+OskSupport\.dll)$</field>
    </rule>
    <rule id="901826" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_uac_bypass_wmp.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using Windows Media Player osksupport.dll (UACMe 32)-->
        <!--Date: 2021/08/23-->
        <!--Status: test-->
        <!--ID: 68578b43-65df-4f81-9a9b-92f32711a951-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using Windows Media Player - File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\+Windows\\+system32\\+DllHost\.exe</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\+Program\ Files\\+Windows\ Media\ Player\\+osk\.exe</field>
    </rule>
    <rule id="901827" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_hktl_safetykatz.yml</info>
        <!--Sigma Rule Author: Markus Neis-->
        <!--Description: Detects default lsass dump filename from SafetyKatz-->
        <!--Date: 2018/07/24-->
        <!--Status: test-->
        <!--ID: e074832a-eada-4fd7-94a1-10642b130e16-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>SafetyKatz Default Dump Filename</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+Temp\\+debug\.bin)$</field>
    </rule>
    <rule id="901828" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_remote_access_tools_screenconnect_remote_file.yml</info>
        <!--Sigma Rule Author: Ali Alwashali-->
        <!--Description: Detects the creation of files in a specific location by ScreenConnect RMM.
ScreenConnect has feature to remotely execute binaries on a target machine. These binaries will be dropped to ":\Users\<username>\Documents\ConnectWiseControl\Temp\" before execution.
-->
        <!--Date: 2023/10/10-->
        <!--Status: experimental-->
        <!--ID: 0afecb6e-6223-4a82-99fb-bf5b981e92a5-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.003</id>
        </mitre>
        <description>Remote Access Tool - ScreenConnect Temporary File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+ScreenConnect\.WindowsClient\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Documents\\+ConnectWiseControl\\+Temp\\+</field>
    </rule>
    <rule id="901829" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_creation_new_shim_database.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims.
The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time.
-->
        <!--Date: 2021/12/29-->
        <!--Status: test-->
        <!--ID: ee63c85c-6d51-4d12-ad09-04e25877a947-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.009</id>
        </mitre>
        <description>New Shim Database Created in the Default Directory</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i):\\+Windows\\+apppatch\\+Custom\\+|:\\+Windows\\+apppatch\\+CustomSDB\\+</field>
    </rule>
    <rule id="901830" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_redmimicry_winnti_filedrop.yml</info>
        <!--Sigma Rule Author: Alexander Rausch-->
        <!--Description: Detects files dropped by Winnti as described in RedMimicry Winnti playbook-->
        <!--Date: 2020/06/24-->
        <!--Status: test-->
        <!--ID: 130c9e58-28ac-4f83-8574-0a4cc913b97e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027</id>
        </mitre>
        <description>Potential Winnti Dropper Activity</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+gthread\-3\.6\.dll|\\+sigcmm\-2\.4\.dll|\\+Windows\\+Temp\\+tmp\.bat)$</field>
    </rule>
    <rule id="901831" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_office_onenote_susp_dropped_files.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious files created via the OneNote application. This could indicate a potential malicious ".one"/".onepkg" file was executed as seen being used in malware activity in the wild-->
        <!--Date: 2023/02/09-->
        <!--Status: experimental-->
        <!--ID: fcc6d700-68d9-4241-9a1a-06874d621b06-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious File Created Via OneNote Application</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+onenote\.exe|\\+onenotem\.exe|\\+onenoteim\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+OneNote\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.bat|\.chm|\.cmd|\.dll|\.exe|\.hta|\.htm|\.html|\.js|\.lnk|\.ps1|\.vbe|\.vbs|\.wsf)$</field>
    </rule>
    <rule id="901832" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_dump_file_susp_creation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of a file with the ".dmp"/".hdmp" extension by a shell or scripting application such as "cmd", "powershell", etc. Often created by software during a crash. Memory dumps can sometimes contain sensitive information such as credentials. It's best to determine the source of the crash.-->
        <!--Date: 2023/09/07-->
        <!--Status: experimental-->
        <!--ID: aba15bdd-657f-422a-bab3-ac2d2a0d6f1c-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Potentially Suspicious DMP/HDMP File Creation</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+cscript\.exe|\\+mshta\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+wscript\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.dmp|\.dump|\.hdmp)$</field>
    </rule>
    <rule id="901833" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_remcom_service.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects default RemCom service filename which indicates RemCom service installation and execution-->
        <!--Date: 2023/08/04-->
        <!--Status: test-->
        <!--ID: 7eff1a7f-dd45-4c20-877a-f21e342a7611-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>RemCom Service File Creation</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+RemComSvc\.exe)$</field>
    </rule>
    <rule id="901834" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_hidden_dir_index_allocation.yml</info>
        <!--Sigma Rule Author: Scoubi (@ScoubiMtl)-->
        <!--Description: Detects the creation of hidden file/folder with the "::$index_allocation" stream. Which can be used as a technique to prevent access to folder and files from tooling such as "explorer.exe" and "powershell.exe"
-->
        <!--Date: 2023/10/09-->
        <!--Status: experimental-->
        <!--ID: a8f866e1-bdd4-425e-a27a-37619238d9c7-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564.004</id>
        </mitre>
        <description>Potential Hidden Directory Creation Via NTFS INDEX_ALLOCATION Stream</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)::\$index_allocation</field>
    </rule>
    <rule id="901835" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_system32_local_folder_privilege_escalation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Subhash P (@pbssubhash)-->
        <!--Description: Detects potential privilege escalation attempt via the creation of the "*.Exe.Local" folder inside the "System32" directory in order to sideload "comctl32.dll"-->
        <!--Date: 2022/12/16-->
        <!--Status: test-->
        <!--ID: 07a99744-56ac-40d2-97b7-2095967b0e03-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>Potential Privilege Escalation Attempt Via .Exe.Local Technique</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+logonUI\.exe\.local|C:\\+Windows\\+System32\\+werFault\.exe\.local|C:\\+Windows\\+System32\\+consent\.exe\.local|C:\\+Windows\\+System32\\+narrator\.exe\.local|C:\\+Windows\\+System32\\+wermgr\.exe\.local)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+comctl32\.dll)$</field>
    </rule>
    <rule id="901836" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_powershell_drop_binary_or_script.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects PowerShell creating a binary executable or a script file.-->
        <!--Date: 2023/03/17-->
        <!--Status: experimental-->
        <!--ID: 7047d730-036f-4f40-b9d8-1c63e36d5e62-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Potential Binary Or Script Dropper Via PowerShell</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.bat|\.chm|\.cmd|\.com|\.dll|\.exe|\.hta|\.jar|\.js|\.ocx|\.scr|\.sys|\.vbe|\.vbs|\.wsf)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)^(?:C:\\+Users\\+)</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.dll)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+Temp\\+)</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.dll)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.exe)$</field>
    </rule>
    <rule id="901837" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_cred_dump_tools_dropped_files.yml</info>
        <!--Sigma Rule Author: Teymur Kheirkhabarov, oscd.community-->
        <!--Description: Files with well-known filenames (parts of credential dump software or files produced by them) creation-->
        <!--Date: 2019/11/01-->
        <!--Status: test-->
        <!--ID: 8fbf3271-1ef6-4e94-8210-03c2317947f6-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.003</id>
            <id>attack.t1003.004</id>
            <id>attack.t1003.005</id>
        </mitre>
        <description>Cred Dump Tools Dropped Files</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+fgdump\-log|\\+kirbi|\\+pwdump|\\+pwhashes|\\+wce_ccache|\\+wce_krbtkts</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+cachedump\.exe|\\+cachedump64\.exe|\\+DumpExt\.dll|\\+DumpSvc\.exe|\\+Dumpy\.exe|\\+fgexec\.exe|\\+lsremora\.dll|\\+lsremora64\.dll|\\+NTDS\.out|\\+procdump64\.exe|\\+pstgdump\.exe|\\+pwdump\.exe|\\+SAM\.out|\\+SECURITY\.out|\\+servpw\.exe|\\+servpw64\.exe|\\+SYSTEM\.out|\\+test\.pwd|\\+wceaux\.dll)$</field>
    </rule>
    <rule id="901838" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_uac_bypass_msconfig_gui.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using a msconfig GUI hack (UACMe 55)-->
        <!--Date: 2021/08/30-->
        <!--Status: test-->
        <!--ID: 41bb431f-56d8-4691-bb56-ed34e390906f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using MSConfig Token Modification - File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Users\\+)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Temp\\+pkgmgr\.exe)$</field>
    </rule>
    <rule id="901839" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_sysinternals_livekd_driver.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of the LiveKD driver, which is used for live kernel debugging-->
        <!--Date: 2023/05/16-->
        <!--Status: experimental-->
        <!--ID: 16fe46bb-4f64-46aa-817d-ff7bec4a2352-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>LiveKD Driver Creation</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\+Windows\\+System32\\+drivers\\+LiveKdD\.SYS</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+livekd\.exe|\\+livek64\.exe)$</field>
    </rule>
    <rule id="901840" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_perflogs_susp_files.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects suspicious file based on their extension being created in "C:\PerfLogs\". Note that this directory mostly contains ".etl" files-->
        <!--Date: 2023/05/05-->
        <!--Status: experimental-->
        <!--ID: bbb7e38c-0b41-4a11-b306-d2a457b7ac2b-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059</id>
        </mitre>
        <description>Suspicious File Created In PerfLogs</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+PerfLogs\\+)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.7z|\.bat|\.bin|\.chm|\.dll|\.exe|\.hta|\.lnk|\.ps1|\.psm1|\.py|\.scr|\.sys|\.vbe|\.vbs|\.zip)$</field>
    </rule>
    <rule id="901841" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_errorhandler_persistence.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects creation of a file named "ErrorHandler.cmd" in the "C:\WINDOWS\Setup\Scripts\" directory which could be used as a method of persistence
The content of C:\WINDOWS\Setup\Scripts\ErrorHandler.cmd is read whenever some tools under C:\WINDOWS\System32\oobe\ (e.g. Setup.exe) fail to run for any reason.
-->
        <!--Date: 2022/08/09-->
        <!--Status: test-->
        <!--ID: 15904280-565c-4b73-9303-3291f964e7f9-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Potential Persistence Attempt Via ErrorHandler.Cmd</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+WINDOWS\\+Setup\\+Scripts\\+ErrorHandler\.cmd)$</field>
    </rule>
    <rule id="901842" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_legitimate_app_dropping_exe.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth (Nextron Systems)-->
        <!--Description: Detects programs on a Windows system that should not write executables to disk-->
        <!--Date: 2022/08/21-->
        <!--Status: experimental-->
        <!--ID: f0540f7e-2db3-4432-b9e0-3965486744bc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Legitimate Application Dropped Executable</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+eqnedt32\.exe|\\+wordpad\.exe|\\+wordview\.exe|\\+certutil\.exe|\\+certoc\.exe|\\+CertReq\.exe|\\+Desktopimgdownldr\.exe|\\+esentutl\.exe|\\+mshta\.exe|\\+AcroRd32\.exe|\\+RdrCEF\.exe|\\+hh\.exe|\\+finger\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.exe|\.dll|\.ocx)$</field>
    </rule>
    <rule id="901843" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_creation_unquoted_service_path.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may execute their own malicious payloads by hijacking vulnerable file path references.
Adversaries can take advantage of paths that lack surrounding quotations by placing an executable in a higher level directory within the path, so that Windows will choose the adversary's executable to launch.
-->
        <!--Date: 2021/12/30-->
        <!--Status: test-->
        <!--ID: 8c3c76ca-8f8b-4b1d-aaf3-81aebcd367c9-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.009</id>
        </mitre>
        <description>Creation Exe for Service with Unquoted Path</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\+program\.exe</field>
    </rule>
    <rule id="901844" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_uac_bypass_idiagnostic_profile.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of a file by "dllhost.exe" in System32 directory part of "IDiagnosticProfileUAC" UAC bypass technique-->
        <!--Date: 2022/07/03-->
        <!--Status: test-->
        <!--ID: 48ea844d-19b1-4642-944e-fe39c2cc1fec-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using IDiagnostic Profile - File</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+DllHost\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.dll)$</field>
    </rule>
    <rule id="901845" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_dll_sideloading_space_path.yml</info>
        <!--Sigma Rule Author: frack113, Nasreddine Bencherchali-->
        <!--Description: Detects when an attacker create a similar folder structure to windows system folders such as (Windows, Program Files...)
but with a space in order to trick DLL load search order and perform a "DLL Search Order Hijacking" attack
-->
        <!--Date: 2022/07/30-->
        <!--Status: test-->
        <!--ID: b6f91281-20aa-446a-b986-38a92813a18f-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>DLL Search Order Hijackig Via Additional Space in Path</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Windows\ \\+|C:\\+Program\ Files\ \\+|C:\\+Program\ Files\ \(x86\)\ \\+)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.dll)$</field>
    </rule>
    <rule id="901846" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_csharp_compile_artefact.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: When C# is compiled dynamically, a .cmdline file will be created as a part of the process.
Certain processes are not typically observed compiling C# code, but can do so without touching disk.
This can be used to unpack a payload for execution
-->
        <!--Date: 2022/01/09-->
        <!--Status: test-->
        <!--ID: e4a74e34-ecde-4aab-b2fb-9112dd01aed0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1027.004</id>
        </mitre>
        <description>Dynamic CSharp Compile Artefact</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.cmdline)$</field>
    </rule>
    <rule id="901847" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_access_susp_teams.yml</info>
        <!--Sigma Rule Author: @SerkinValery-->
        <!--Description: Detects an access to authentication tokens and accounts of Microsoft Teams desktop application.-->
        <!--Date: 2022/09/16-->
        <!--Status: test-->
        <!--ID: 6902955a-01b7-432c-b32a-6f5f81d8f624-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1528</id>
        </mitre>
        <description>Suspicious File Event With Teams Objects</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Microsoft\\+Teams\\+Cookies|\\+Microsoft\\+Teams\\+Local\ Storage\\+leveldb</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Microsoft\\+Teams\\+current\\+Teams\.exe</field>
    </rule>
    <rule id="901848" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_dump_file_creation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of a file with the ".dmp"/".hdmp" extension. Often created by software during a crash. Memory dumps can sometimes contain sensitive information such as credentials. It's best to determine the source of the crash.-->
        <!--Date: 2023/09/07-->
        <!--Status: experimental-->
        <!--ID: 3a525307-d100-48ae-b3b9-0964699d7f97-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>DMP/HDMP File Creation</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.dmp|\.dump|\.hdmp)$</field>
    </rule>
    <rule id="901849" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_lsass_default_dump_file_names.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects creation of files with names used by different memory dumping tools to create a memory dump of the LSASS process memory, which contains user credentials.-->
        <!--Date: 2021/11/15-->
        <!--Status: experimental-->
        <!--ID: a5a2d357-1ab8-4675-a967-ef9990a59391-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>LSASS Process Memory Dump Files</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+lsass\.dmp|\\+lsass\.zip|\\+lsass\.rar|\\+Andrew\.dmp|\\+Coredump\.dmp|\\+NotLSASS\.zip|\\+PPLBlade\.dmp)$</field>
    </rule>
    <rule id="901850" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_lsass_default_dump_file_names.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects creation of files with names used by different memory dumping tools to create a memory dump of the LSASS process memory, which contains user credentials.-->
        <!--Date: 2021/11/15-->
        <!--Status: experimental-->
        <!--ID: a5a2d357-1ab8-4675-a967-ef9990a59391-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>LSASS Process Memory Dump Files</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+lsass_2|\\+lsassdump|\\+lsassdmp</field>
    </rule>
    <rule id="901851" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_lsass_default_dump_file_names.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects creation of files with names used by different memory dumping tools to create a memory dump of the LSASS process memory, which contains user credentials.-->
        <!--Date: 2021/11/15-->
        <!--Status: experimental-->
        <!--ID: a5a2d357-1ab8-4675-a967-ef9990a59391-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>LSASS Process Memory Dump Files</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+lsass</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.dmp</field>
    </rule>
    <rule id="901852" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_lsass_default_dump_file_names.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects creation of files with names used by different memory dumping tools to create a memory dump of the LSASS process memory, which contains user credentials.-->
        <!--Date: 2021/11/15-->
        <!--Status: experimental-->
        <!--ID: a5a2d357-1ab8-4675-a967-ef9990a59391-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>LSASS Process Memory Dump Files</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)SQLDmpr</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.mdmp)$</field>
    </rule>
    <rule id="901853" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_lsass_default_dump_file_names.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects creation of files with names used by different memory dumping tools to create a memory dump of the LSASS process memory, which contains user credentials.-->
        <!--Date: 2021/11/15-->
        <!--Status: experimental-->
        <!--ID: a5a2d357-1ab8-4675-a967-ef9990a59391-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>LSASS Process Memory Dump Files</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:nanodump)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.dmp)$</field>
    </rule>
    <rule id="901854" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_office_outlook_susp_macro_creation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of a macro file for Outlook.-->
        <!--Date: 2023/02/08-->
        <!--Status: test-->
        <!--ID: 117d3d3a-755c-4a61-b23e-9171146d094c-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.command_and_control</id>
            <id>attack.t1137</id>
            <id>attack.t1008</id>
            <id>attack.t1546</id>
        </mitre>
        <description>Suspicious Outlook Macro Created</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+Microsoft\\+Outlook\\+VbaProject\.OTM)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+outlook\.exe)$</field>
    </rule>
    <rule id="901855" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_rdp_file_susp_creation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects Rclone config file being created-->
        <!--Date: 2023/04/18-->
        <!--Status: experimental-->
        <!--ID: fccfb43e-09a7-4bd2-8b37-a5a7df33386d-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>RDP File Creation From Suspicious Application</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+brave\.exe|\\+CCleaner\ Browser\\+Application\\+CCleanerBrowser\.exe|\\+chromium\.exe|\\+firefox\.exe|\\+Google\\+Chrome\\+Application\\+chrome\.exe|\\+iexplore\.exe|\\+microsoftedge\.exe|\\+msedge\.exe|\\+Opera\.exe|\\+Vivaldi\.exe|\\+Whale\.exe|\\+Outlook\.exe|\\+RuntimeBroker\.exe|\\+Thunderbird\.exe|\\+Discord\.exe|\\+Keybase\.exe|\\+msteams\.exe|\\+Slack\.exe|\\+teams\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.rdp</field>
    </rule>
    <rule id="901856" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_powershell_module_uncommon_creation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of a new PowerShell module ".psm1", ".psd1", ".dll", ".ps1", etc. by a non-PowerShell process-->
        <!--Date: 2023/05/09-->
        <!--Status: experimental-->
        <!--ID: e3845023-ca9a-4024-b2b2-5422156d5527-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>PowerShell Module File Created By Non-PowerShell Process</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+WindowsPowerShell\\+Modules\\+|\\+PowerShell\\+7\\+Modules\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+PowerShell\\+7\-preview\\+pwsh\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+PowerShell\\+7\\+pwsh\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+poqexec\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+WindowsPowerShell\\+v1\.0\\+powershell_ise\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+WindowsPowerShell\\+v1\.0\\+powershell\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+SysWOW64\\+poqexec\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+SysWOW64\\+WindowsPowerShell\\+v1\.0\\+powershell_ise\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+SysWOW64\\+WindowsPowerShell\\+v1\.0\\+powershell\.exe)$</field>
    </rule>
    <rule id="901857" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_startup_folder_file_write.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: A General detection for files being created in the Windows startup directory. This could be an indicator of persistence.-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: 2aa0a6b4-a865-495b-ab51-c28249537b75-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Startup Folder File Write</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Microsoft\\+Windows\\+Start\ Menu\\+Programs\\+StartUp</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+wuauclt\.exe</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)^(?:C:\\+\$WINDOWS\.\~BT\\+NewOS\\+)</field>
    </rule>
    <rule id="901858" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_dcom_iertutil_dll_hijack.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez @Cyb3rWard0g, Open Threat Research (OTR), wagga-->
        <!--Description: Detects potential DLL hijack of "iertutil.dll" found in the DCOM InternetExplorer.Application Class over the network-->
        <!--Date: 2020/10/12-->
        <!--Status: test-->
        <!--ID: 2f7979ae-f82b-45af-ac1d-2b10e93b0baa-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1021.003</id>
        </mitre>
        <description>Potential DCOM InternetExplorer.Application DLL Hijack</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)System</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+Internet\ Explorer\\+iertutil\.dll)$</field>
    </rule>
    <rule id="901859" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_powershell_startup_shortcuts.yml</info>
        <!--Sigma Rule Author: Christopher Peacock '@securepeacock', SCYTHE-->
        <!--Description: Detects PowerShell writing startup shortcuts.
This procedure was highlighted in Red Canary Intel Insights Oct. 2021, "We frequently observe adversaries using PowerShell to write malicious .lnk files into the startup directory to establish persistence.
Accordingly, this detection opportunity is likely to identify persistence mechanisms in multiple threats.
In the context of Yellow Cockatoo, this persistence mechanism eventually launches the command-line script that leads to the installation of a malicious DLL"
-->
        <!--Date: 2021/10/24-->
        <!--Status: experimental-->
        <!--ID: 92fa78e7-4d39-45f1-91a3-8b23f3f1088d-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Potential Startup Shortcut Persistence Via PowerShell.EXE</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+start\ menu\\+programs\\+startup\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.lnk)$</field>
    </rule>
    <rule id="901860" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_hktl_hivenightmare_file_exports.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects files written by the different tools that exploit HiveNightmare-->
        <!--Date: 2021/07/23-->
        <!--Status: test-->
        <!--ID: 6ea858a8-ba71-4a12-b2cc-5d83312404c7-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1552.001</id>
            <id>cve.2021.36934</id>
        </mitre>
        <description>Typical HiveNightmare SAM File Export</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+hive_sam_|\\+SAM\-2021\-|\\+SAM\-2022\-|\\+SAM\-2023\-|\\+SAM\-haxx|\\+Sam\.save</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\+windows\\+temp\\+sam</field>
    </rule>
    <rule id="901861" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_exchange_aspx_write.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious activity in which the MSExchangeMailboxReplication process writes .asp and .apsx files to disk, which could be a sign of ProxyShell exploitation-->
        <!--Date: 2022/02/25-->
        <!--Status: test-->
        <!--ID: 7280c9f3-a5af-45d0-916a-bc01cb4151c9-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1190</id>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Suspicious MSExchangeMailboxReplication ASPX Write</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+MSExchangeMailboxReplication\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.aspx|\.asp)$</field>
    </rule>
    <rule id="901862" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_initial_access_dll_search_order_hijacking.yml</info>
        <!--Sigma Rule Author: Tim Rauch (rule), Elastic (idea)-->
        <!--Description: Detects attempts to create a DLL file to a known desktop application dependencies folder such as Slack, Teams or OneDrive and by an unusual process. This may indicate an attempt to load a malicious module via DLL search order hijacking.-->
        <!--Date: 2022/10/21-->
        <!--Status: test-->
        <!--ID: dbbd9f66-2ed3-4ca2-98a4-6ea985dd1a1c-->
        <mitre>
            <id>attack.t1566</id>
            <id>attack.t1566.001</id>
            <id>attack.initial_access</id>
            <id>attack.t1574</id>
            <id>attack.t1574.001</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Potential Initial Access via DLL Search Order Hijacking</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+winword\.exe|\\+excel\.exe|\\+powerpnt\.exe|\\+MSACCESS\.EXE|\\+MSPUB\.EXE|\\+fltldr\.exe|\\+cmd\.exe|\\+certutil\.exe|\\+mshta\.exe|\\+cscript\.exe|\\+wscript\.exe|\\+curl\.exe|\\+powershell\.exe|\\+pwsh\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.dll)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Users\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Microsoft\\+OneDrive\\+|\\+Microsoft\ OneDrive\\+|\\+Microsoft\\+Teams\\+|\\+Local\\+slack\\+app\-|\\+Local\\+Programs\\+Microsoft\ VS\ Code\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+cmd\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+Users\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+AppData\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+Microsoft\\+OneDrive\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+api\-ms\-win\-core\-</field>
    </rule>
    <rule id="901863" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_anydesk_artefact.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/02/11-->
        <!--Status: test-->
        <!--ID: 0b9ad457-2554-44c1-82c2-d56a99c42377-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Anydesk Temporary Artefact</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+Roaming\\+AnyDesk\\+user\.conf|\\+AppData\\+Roaming\\+AnyDesk\\+system\.conf</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.temp)$</field>
    </rule>
    <rule id="901864" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_uac_bypass_consent_comctl32.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using consent.exe and comctl32.dll (UACMe 22)-->
        <!--Date: 2021/08/23-->
        <!--Status: test-->
        <!--ID: 62ed5b55-f991-406a-85d9-e8e8fdf18789-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using Consent and Comctl32 - File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+consent\.exe\.@)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+comctl32\.dll)$</field>
    </rule>
    <rule id="901865" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_legitimate_app_dropping_archive.yml</info>
        <!--Sigma Rule Author: frack113, Florian Roth-->
        <!--Description: Detects programs on a Windows system that should not write an archive to disk-->
        <!--Date: 2022/08/21-->
        <!--Status: test-->
        <!--ID: 654fcc6d-840d-4844-9b07-2c3300e54a26-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Legitimate Application Dropped Archive</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+winword\.exe|\\+excel\.exe|\\+powerpnt\.exe|\\+msaccess\.exe|\\+mspub\.exe|\\+eqnedt32\.exe|\\+visio\.exe|\\+wordpad\.exe|\\+wordview\.exe|\\+certutil\.exe|\\+certoc\.exe|\\+CertReq\.exe|\\+Desktopimgdownldr\.exe|\\+esentutl\.exe|\\+finger\.exe|\\+notepad\.exe|\\+AcroRd32\.exe|\\+RdrCEF\.exe|\\+mshta\.exe|\\+hh\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.zip|\.rar|\.7z|\.diagcab|\.appx)$</field>
    </rule>
    <rule id="901866" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_office_onenote_files_in_susp_locations.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects creation of files with the ".one"/".onepkg" extension in suspicious or uncommon locations. This could be a sign of attackers abusing OneNote attachments-->
        <!--Date: 2023/01/22-->
        <!--Status: experimental-->
        <!--ID: 7fd164ba-126a-4d9c-9392-0d4f7c243df0-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>OneNote Attachment File Dropped In Suspicious Location</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+|\\+Users\\+Public\\+|\\+Windows\\+Temp\\+|:\\+Temp\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.one|\.onepkg)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Microsoft\ Office\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+ONENOTE\.EXE)$</field>
    </rule>
    <rule id="901867" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_ripzip_attack.yml</info>
        <!--Sigma Rule Author: Greg (rule)-->
        <!--Description: Detects a phishing attack which expands a ZIP file containing a malicious shortcut.
If the victim expands the ZIP file via the explorer process, then the explorer process expands the malicious ZIP file and drops a malicious shortcut redirected to a backdoor into the Startup folder.
Additionally, the file name of the malicious shortcut in Startup folder contains {0AFACED1-E828-11D1-9187-B532F1E9575D} meaning the folder shortcut operation.
-->
        <!--Date: 2022/07/21-->
        <!--Status: test-->
        <!--ID: a6976974-ea6f-4e97-818e-ea08625c52cb-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547</id>
        </mitre>
        <description>Potential RipZip Attack on Startup Folder</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Microsoft\\+Windows\\+Start\ Menu\\+Programs\\+Startup</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.lnk\.\{0AFACED1\-E828\-11D1\-9187\-B532F1E9575D\}</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+explorer\.exe)$</field>
    </rule>
    <rule id="901868" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_homoglyph_filename.yml</info>
        <!--Sigma Rule Author: Micah Babinski, @micahbabinski-->
        <!--Description: Detects the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.
This is used as an obfuscation and masquerading techniques. Only "perfect" homoglyphs are included; these are characters that
are indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.
-->
        <!--Date: 2023/05/08-->
        <!--Status: experimental-->
        <!--ID: 4f1707b1-b50b-45b4-b5a2-3978b5a5d0d6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Potential Homoglyph Attack Using Lookalike Characters in Filename</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)А|В|Е|К|М|Н|О|Р|С|Т|Х|Ѕ|І|Ј|Ү|Ӏ|Ԍ|Ԛ|Ԝ|Α|Β|Ε|Ζ|Η|Ι|Κ|Μ|Ν|Ο|Ρ|Τ|Υ|Χ</field>
    </rule>
    <rule id="901869" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_homoglyph_filename.yml</info>
        <!--Sigma Rule Author: Micah Babinski, @micahbabinski-->
        <!--Description: Detects the presence of unicode characters which are homoglyphs, or identical in appearance, to ASCII letter characters.
This is used as an obfuscation and masquerading techniques. Only "perfect" homoglyphs are included; these are characters that
are indistinguishable from ASCII characters and thus may make excellent candidates for homoglyph attack characters.
-->
        <!--Date: 2023/05/08-->
        <!--Status: experimental-->
        <!--ID: 4f1707b1-b50b-45b4-b5a2-3978b5a5d0d6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Potential Homoglyph Attack Using Lookalike Characters in Filename</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)а|е|о|р|с|х|ѕ|і|ӏ|ј|һ|ԁ|ԛ|ԝ|ο</field>
    </rule>
    <rule id="901870" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_advanced_ip_scanner.yml</info>
        <!--Sigma Rule Author: @ROxPinTeddy-->
        <!--Description: Detects the use of Advanced IP Scanner. Seems to be a popular tool for ransomware groups.-->
        <!--Date: 2020/05/12-->
        <!--Status: test-->
        <!--ID: fed85bf9-e075-4280-9159-fbe8a023d6fa-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1046</id>
        </mitre>
        <description>Advanced IP Scanner - File Event</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+Advanced\ IP\ Scanner\ 2</field>
    </rule>
    <rule id="901871" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_tsclient_filewrite_startup.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden-->
        <!--Description: Detects the usage of tsclient share to place a backdoor on the RDP source machine's startup folder-->
        <!--Date: 2019/02/21-->
        <!--Status: test-->
        <!--ID: 52753ea4-b3a0-4365-910d-36cff487b789-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Hijack Legit RDP Session to Move Laterally</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+mstsc\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Microsoft\\+Windows\\+Start\ Menu\\+Programs\\+Startup\\+</field>
    </rule>
    <rule id="901872" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_office_susp_file_extension.yml</info>
        <!--Sigma Rule Author: Vadim Khrykov (ThreatIntel), Cyb3rEng (Rule), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of files with an executable or script extension by an Office application.-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: c7a74c80-ba5a-486e-9974-ab9e682bc5e4-->
        <mitre>
            <id>attack.t1204.002</id>
            <id>attack.execution</id>
        </mitre>
        <description>File With Uncommon Extension Created By An Office Application</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+excel\.exe|\\+msaccess\.exe|\\+mspub\.exe|\\+powerpnt\.exe|\\+visio\.exe|\\+winword\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.bat|\.cmd|\.com|\.dll|\.exe|\.hta|\.ocx|\.proj|\.ps1|\.scf|\.scr|\.sys|\.vbe|\.vbs|\.wsf|\.wsh)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+assembly\\+tmp\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.dll)$</field>
    </rule>
    <rule id="901873" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_office_susp_file_extension.yml</info>
        <!--Sigma Rule Author: Vadim Khrykov (ThreatIntel), Cyb3rEng (Rule), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of files with an executable or script extension by an Office application.-->
        <!--Date: 2021/08/23-->
        <!--Status: experimental-->
        <!--ID: c7a74c80-ba5a-486e-9974-ab9e682bc5e4-->
        <mitre>
            <id>attack.t1204.002</id>
            <id>attack.execution</id>
        </mitre>
        <description>File With Uncommon Extension Created By An Office Application</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+excel\.exe|\\+msaccess\.exe|\\+mspub\.exe|\\+powerpnt\.exe|\\+visio\.exe|\\+winword\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.bat|\.cmd|\.com|\.dll|\.exe|\.hta|\.ocx|\.proj|\.ps1|\.scf|\.scr|\.sys|\.vbe|\.vbs|\.wsf|\.wsh)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)C:\\+Users\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Microsoft\\+Office\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+WebServiceCache\\+AllUsers</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.com)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+winword\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+webexdelta\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.dll)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\.exe)$</field>
    </rule>
    <rule id="901874" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_ntds_exfil_tools.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects creation of files with specific name patterns seen used in various tools that export the NTDS.DIT for exfiltration.-->
        <!--Date: 2022/03/11-->
        <!--Status: test-->
        <!--ID: 3a8da4e0-36c1-40d2-8b29-b3e890d5172a-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>NTDS Exfiltration Filename Patterns</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+All\.cab|\.ntds\.cleartext)$</field>
    </rule>
    <rule id="901875" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_procexplorer_driver_created_in_tmp_folder.yml</info>
        <!--Sigma Rule Author: xknow (@xknow_infosec), xorxes (@xor_xes)-->
        <!--Description: Detects the creation of the PROCEXP152.sys file in the application-data local temporary folder.
This driver is used by Sysinternals Process Explorer but also by KDU (https://github.com/hfiref0x/KDU) or Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU.
-->
        <!--Date: 2019/04/08-->
        <!--Status: test-->
        <!--ID: 3da70954-0f2c-4103-adff-b7440368f50e-->
        <mitre>
            <id>attack.t1562.001</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious PROCEXP152.sys File Created In TMP</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:PROCEXP152\.sys)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+procexp64\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+procexp\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+procmon64\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+procmon\.exe</field>
    </rule>
    <rule id="901876" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_wpbbin_persistence.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects creation of a file named "wpbbin" in the "%systemroot%\system32\" directory. Which could be indicative of UEFI based persistence method-->
        <!--Date: 2022/07/18-->
        <!--Status: test-->
        <!--ID: e94b9ddc-eec5-4bb8-8a58-b9dc5f4e185f-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1542.001</id>
        </mitre>
        <description>UEFI Persistence Via Wpbbin - FileCreation</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\+Windows\\+System32\\+wpbbin\.exe</field>
    </rule>
    <rule id="901877" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_csexec_service.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects default CSExec service filename which indicates CSExec service installation and execution-->
        <!--Date: 2023/08/04-->
        <!--Status: test-->
        <!--ID: f0e2b768-5220-47dd-b891-d57b96fc0ec1-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
            <id>attack.s0029</id>
        </mitre>
        <description>CSExec Service File Creation</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+csexecsvc\.exe)$</field>
    </rule>
    <rule id="901878" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_spool_drivers_color_drop.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of suspcious binary files inside the "\windows\system32\spool\drivers\color\" as seen in the blog referenced below-->
        <!--Date: 2022/07/28-->
        <!--Status: test-->
        <!--ID: ce7066a6-508a-42d3-995b-2952c65dc2ce-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Drop Binaries Into Spool Drivers Color Folder</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+spool\\+drivers\\+color\\+)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.dll|\.exe|\.sys)$</field>
    </rule>
    <rule id="901879" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_system_interactive_powershell.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the creation of files that indicator an interactive use of PowerShell in the SYSTEM user context-->
        <!--Date: 2021/12/07-->
        <!--Status: test-->
        <!--ID: 5b40a734-99b6-4b98-a1d0-1cea51a08ab2-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>Suspicious Interactive PowerShell as SYSTEM</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\+Windows\\+System32\\+config\\+systemprofile\\+AppData\\+Roaming\\+Microsoft\\+Windows\\+PowerShell\\+PSReadLine\\+ConsoleHost_history\.txt|C:\\+Windows\\+System32\\+config\\+systemprofile\\+AppData\\+Local\\+Microsoft\\+Windows\\+PowerShell\\+StartupProfileData\-Interactive</field>
    </rule>
    <rule id="901880" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_webshell_creation_detect.yml</info>
        <!--Sigma Rule Author: Beyu Denis, oscd.community, Tim Shelton, Thurein Oo-->
        <!--Description: Detects the creation of files with certain extensions on a static web site. This can be indicative of potential uploads of a web shell.-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: 39f1f9f2-9636-45de-98f6-a4046aa8e4b9-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Potential Webshell Creation On Static Website</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+inetpub\\+wwwroot\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.ashx|\.asp|\.ph|\.soap</field>
    </rule>
    <rule id="901881" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_webshell_creation_detect.yml</info>
        <!--Sigma Rule Author: Beyu Denis, oscd.community, Tim Shelton, Thurein Oo-->
        <!--Description: Detects the creation of files with certain extensions on a static web site. This can be indicative of potential uploads of a web shell.-->
        <!--Date: 2019/10/22-->
        <!--Status: test-->
        <!--ID: 39f1f9f2-9636-45de-98f6-a4046aa8e4b9-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1505.003</id>
        </mitre>
        <description>Potential Webshell Creation On Static Website</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+www\\+|\\+htdocs\\+|\\+html\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.ph</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+Windows\\+Temp\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)System</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)\\+xampp</field>
    </rule>
    <rule id="901882" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_iphlpapi_dll_sideloading.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects creation of a malicious DLL file in the location where the OneDrive or Team applications
Upon execution of the Teams or OneDrive application, the dropped malicious DLL file (&#8220;iphlpapi.dll&#8221;) is sideloaded
-->
        <!--Date: 2022/08/12-->
        <!--Status: test-->
        <!--ID: 1908fcc1-1b92-4272-8214-0fbaf2fa5163-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
        </mitre>
        <description>Malicious DLL File Dropped in the Teams or OneDrive Folder</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)iphlpapi\.dll</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Microsoft</field>
    </rule>
    <rule id="901883" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_office_addin_persistence.yml</info>
        <!--Sigma Rule Author: NVISO-->
        <!--Description: Detects potential persistence activity via startup add-ins that load when Microsoft Office starts (.wll/.xll are simply .dll fit for Word or Excel).-->
        <!--Date: 2020/05/11-->
        <!--Status: test-->
        <!--ID: 8e1cb247-6cf6-42fa-b440-3f27d57e9936-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137.006</id>
        </mitre>
        <description>Potential Persistence Via Microsoft Office Add-In</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Microsoft\\+Word\\+Startup\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.wll)$</field>
    </rule>
    <rule id="901884" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_office_addin_persistence.yml</info>
        <!--Sigma Rule Author: NVISO-->
        <!--Description: Detects potential persistence activity via startup add-ins that load when Microsoft Office starts (.wll/.xll are simply .dll fit for Word or Excel).-->
        <!--Date: 2020/05/11-->
        <!--Status: test-->
        <!--ID: 8e1cb247-6cf6-42fa-b440-3f27d57e9936-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137.006</id>
        </mitre>
        <description>Potential Persistence Via Microsoft Office Add-In</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Microsoft\\+Excel\\+Startup\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.xll)$</field>
    </rule>
    <rule id="901885" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_office_addin_persistence.yml</info>
        <!--Sigma Rule Author: NVISO-->
        <!--Description: Detects potential persistence activity via startup add-ins that load when Microsoft Office starts (.wll/.xll are simply .dll fit for Word or Excel).-->
        <!--Date: 2020/05/11-->
        <!--Status: test-->
        <!--ID: 8e1cb247-6cf6-42fa-b440-3f27d57e9936-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137.006</id>
        </mitre>
        <description>Potential Persistence Via Microsoft Office Add-In</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)Microsoft\\+Excel\\+XLSTART\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.xlam)$</field>
    </rule>
    <rule id="901886" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_office_addin_persistence.yml</info>
        <!--Sigma Rule Author: NVISO-->
        <!--Description: Detects potential persistence activity via startup add-ins that load when Microsoft Office starts (.wll/.xll are simply .dll fit for Word or Excel).-->
        <!--Date: 2020/05/11-->
        <!--Status: test-->
        <!--ID: 8e1cb247-6cf6-42fa-b440-3f27d57e9936-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137.006</id>
        </mitre>
        <description>Potential Persistence Via Microsoft Office Add-In</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Microsoft\\+Addins\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.xlam|\.xla|\.ppam)$</field>
    </rule>
    <rule id="901887" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_lsass_werfault_dump.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects WerFault creating a dump file with a name that indicates that the dump file could be an LSASS process memory, which contains user credentials-->
        <!--Date: 2022/06/27-->
        <!--Status: test-->
        <!--ID: c3e76af5-4ce0-4a14-9c9a-25ceb8fda182-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>WerFault LSASS Process Memory Dump</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\+WINDOWS\\+system32\\+WerFault\.exe</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+lsass|lsass\.exe</field>
    </rule>
    <rule id="901888" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_sysinternals_livekd_driver_susp_creation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of the LiveKD driver by a process image other than "livekd.exe".-->
        <!--Date: 2023/05/16-->
        <!--Status: experimental-->
        <!--ID: 059c5af9-5131-4d8d-92b2-de4ad6146712-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>LiveKD Driver Creation By Uncommon Process</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\+Windows\\+System32\\+drivers\\+LiveKdD\.SYS</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+livekd\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+livek64\.exe)$</field>
    </rule>
    <rule id="901889" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_default_gpo_dir_write.yml</info>
        <!--Sigma Rule Author: elhoim-->
        <!--Description: Detects the creation of copy of suspicious files (EXE/DLL) to the default GPO storage folder-->
        <!--Date: 2022/04/28-->
        <!--Status: test-->
        <!--ID: 5f87308a-0a5b-4623-ae15-d8fa1809bc60-->
        <mitre>
            <id>attack.t1036.005</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious Files in Default GPO Folder</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Policies\\+\{31B2F340\-016D\-11D2\-945F\-00C04FB984F9\}\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.dll|\.exe)$</field>
    </rule>
    <rule id="901890" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_creation_scr_binary_file.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may establish persistence by executing malicious content triggered by user inactivity.
Screensavers are programs that execute after a configurable time of user inactivity and consist of Portable Executable (PE) files with a .scr file extension
-->
        <!--Date: 2021/12/29-->
        <!--Status: test-->
        <!--ID: 97aa2e88-555c-450d-85a6-229bcd87efb8-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.002</id>
        </mitre>
        <description>Suspicious Screensaver Binary File Creation</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.scr)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Kindle\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Bin\\+ccSvcHst\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+TiWorker\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\\+uwfservicingscr\.scr)$</field>
    </rule>
    <rule id="901891" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_ntds_dit_creation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects creation of a file named "ntds.dit" (Active Directory Database)-->
        <!--Date: 2023/05/05-->
        <!--Status: experimental-->
        <!--ID: 0b8baa3f-575c-46ee-8715-d6f28cc7d33c-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>NTDS.DIT Created</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:ntds\.dit)$</field>
    </rule>
    <rule id="901892" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_executable_creation.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect creation of suspicious executable file name. Some strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths.-->
        <!--Date: 2022/09/05-->
        <!--Status: test-->
        <!--ID: 74babdd6-a758-4549-9632-26535279e654-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564</id>
        </mitre>
        <description>Suspicious Executable File Creation</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.bat\.exe|\.sys\.exe)$</field>
    </rule>
    <rule id="901893" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_executable_creation.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect creation of suspicious executable file name. Some strings look for suspicious file extensions, others look for filenames that exploit unquoted service paths.-->
        <!--Date: 2022/09/05-->
        <!--Status: test-->
        <!--ID: 74babdd6-a758-4549-9632-26535279e654-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1564</id>
        </mitre>
        <description>Suspicious Executable File Creation</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\+\$Recycle\.Bin\.exe|C:\\+Documents\ and\ Settings\.exe|C:\\+MSOCache\.exe|C:\\+Recovery\.exe|C:\\+PerfLogs\.exe</field>
    </rule>
    <rule id="901894" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_ntds_dit_uncommon_process.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects creation of a file named "ntds.dit" (Active Directory Database) by an uncommon process or a process located in a suspicious directory-->
        <!--Date: 2022/01/11-->
        <!--Status: test-->
        <!--ID: 11b1ed55-154d-4e82-8ad7-83739298f720-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>NTDS.DIT Creation By Uncommon Process</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+ntds\.dit)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+cscript\.exe|\\+mshta\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+regsvr32\.exe|\\+rundll32\.exe|\\+wscript\.exe|\\+wsl\.exe|\\+wt\.exe)$</field>
    </rule>
    <rule id="901895" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_ntds_dit_uncommon_process.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects creation of a file named "ntds.dit" (Active Directory Database) by an uncommon process or a process located in a suspicious directory-->
        <!--Date: 2022/01/11-->
        <!--Status: test-->
        <!--ID: 11b1ed55-154d-4e82-8ad7-83739298f720-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.002</id>
            <id>attack.t1003.003</id>
        </mitre>
        <description>NTDS.DIT Creation By Uncommon Process</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+ntds\.dit)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+AppData\\+|\\+Temp\\+|\\+Public\\+|\\+PerfLogs\\+</field>
    </rule>
    <rule id="901896" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_winrm_awl_bypass.yml</info>
        <!--Sigma Rule Author: Julia Fomina, oscd.community-->
        <!--Description: Detects execution of attacker-controlled WsmPty.xsl or WsmTxt.xsl via winrm.vbs and copied cscript.exe (can be renamed)-->
        <!--Date: 2020/10/06-->
        <!--Status: test-->
        <!--ID: d353dac0-1b41-46c2-820c-d7d2561fc6ed-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1216</id>
        </mitre>
        <description>AWL Bypass with Winrm.vbs and Malicious WsmPty.xsl/WsmTxt.xsl - File</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:WsmPty\.xsl|WsmTxt\.xsl)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+)</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+SysWOW64\\+)</field>
    </rule>
    <rule id="901897" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_sysinternals_psexec_service_key.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects creation of the PSEXEC key file. Which is created anytime a PsExec command is executed. It gets written to the file system and will be recorded in the USN Journal on the target system-->
        <!--Date: 2023/01/21-->
        <!--Status: experimental-->
        <!--ID: 304afd73-55a5-4bb9-8c21-0b1fc84ea9e4-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.privilege_escalation</id>
            <id>attack.execution</id>
            <id>attack.persistence</id>
            <id>attack.t1136.002</id>
            <id>attack.t1543.003</id>
            <id>attack.t1570</id>
            <id>attack.s0029</id>
        </mitre>
        <description>PSEXEC Remote Execution File Artefact</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Windows\\+PSEXEC\-)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.key)$</field>
    </rule>
    <rule id="901898" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_writing_local_admin_share.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Aversaries may use to interact with a remote network share using Server Message Block (SMB).
This technique is used by post-exploitation frameworks.
-->
        <!--Date: 2022/01/01-->
        <!--Status: test-->
        <!--ID: 4aafb0fa-bff5-4b9d-b99e-8093e659c65f-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1546.002</id>
        </mitre>
        <description>Writing Local Admin Share</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+127\.0\.0</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+ADMIN\$\\+</field>
    </rule>
    <rule id="901899" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_install_teamviewer_desktop.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: TeamViewer_Desktop.exe is create during install-->
        <!--Date: 2022/01/28-->
        <!--Status: test-->
        <!--ID: 9711de76-5d4f-4c50-a94f-21e4e8f8384d-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>Installation of TeamViewer Desktop</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+TeamViewer_Desktop\.exe)$</field>
    </rule>
    <rule id="901900" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_ps_script_policy_test_creation_by_uncommon_process.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of the "PSScriptPolicyTest" PowerShell script by an uncommon process. This file is usually generated by Microsoft Powershell to test against Applocker.-->
        <!--Date: 2023/06/01-->
        <!--Status: experimental-->
        <!--ID: 1027d292-dd87-4a1a-8701-2abe04d7783c-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>PSScriptPolicyTest Creation By Uncommon Process</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)__PSScriptPolicyTest_</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+PowerShell\\+7\-preview\\+pwsh\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+PowerShell\\+7\\+pwsh\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+dsac\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+ServerManager\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+WindowsPowerShell\\+v1\.0\\+powershell_ise\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+WindowsPowerShell\\+v1\.0\\+powershell\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+wsmprovhost\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+SysWOW64\\+WindowsPowerShell\\+v1\.0\\+powershell_ise\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+SysWOW64\\+WindowsPowerShell\\+v1\.0\\+powershell\.exe)$</field>
    </rule>
    <rule id="901901" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_hktl_nppspy.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the use of NPPSpy hacktool that stores cleartext passwords of users that logged in to a local file-->
        <!--Date: 2021/11/29-->
        <!--Status: test-->
        <!--ID: cad1fe90-2406-44dc-bd03-59d0b58fe722-->
        <mitre>
            <id>attack.credential_access</id>
        </mitre>
        <description>NPPSpy Hacktool Usage</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+NPPSpy\.txt|\\+NPPSpy\.dll)$</field>
    </rule>
    <rule id="901902" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_diagcab.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the creation of diagcab file, which could be caused by some legitimate installer or is a sign of exploitation (review the filename and its location)-->
        <!--Date: 2022/06/08-->
        <!--Status: test-->
        <!--ID: 3d0ed417-3d94-4963-a562-4a92c940656a-->
        <mitre>
            <id>attack.resource_development</id>
        </mitre>
        <description>Creation of a Diagcab</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.diagcab)$</field>
    </rule>
    <rule id="901903" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_office_publisher_files_in_susp_locations.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects creation of files with the ".pub" extension in suspicious or uncommon locations. This could be a sign of attackers abusing Publisher documents-->
        <!--Date: 2023/02/08-->
        <!--Status: experimental-->
        <!--ID: 3d2a2d59-929c-4b78-8c1a-145dfe9e07b1-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Publisher Attachment File Dropped In Suspicious Location</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+|\\+Users\\+Public\\+|\\+Windows\\+Temp\\+|C:\\+Temp\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.pub)$</field>
    </rule>
    <rule id="901904" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_vhd_download_via_browsers.yml</info>
        <!--Sigma Rule Author: frack113, Christopher Peacock '@securepeacock', SCYTHE '@scythe_io'-->
        <!--Description: Detects creation of ".vhd"/".vhdx" files by browser processes.
Malware can use mountable Virtual Hard Disk ".vhd" files to encapsulate payloads and evade security controls.
-->
        <!--Date: 2021/10/25-->
        <!--Status: test-->
        <!--ID: 8468111a-ef07-4654-903b-b863a80bbc95-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1587.001</id>
        </mitre>
        <description>VHD Image Download Via Browser</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+brave\.exe|\\+chrome\.exe|\\+firefox\.exe|\\+iexplore\.exe|\\+maxthon\.exe|\\+MicrosoftEdge\.exe|\\+msedge\.exe|\\+msedgewebview2\.exe|\\+opera\.exe|\\+safari\.exe|\\+seamonkey\.exe|\\+vivaldi\.exe|\\+whale\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.vhd</field>
    </rule>
    <rule id="901905" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_mal_adwind.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Tom Ueltschi, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects javaw.exe in AppData folder as used by Adwind / JRAT-->
        <!--Date: 2017/11/10-->
        <!--Status: test-->
        <!--ID: 0bcfabcb-7929-47f4-93d6-b33fb67d34d1-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
        </mitre>
        <description>Adwind RAT / JRAT File Artifact</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+Roaming\\+Oracle\\+bin\\+java</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.exe</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Retrive</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.vbs</field>
    </rule>
    <rule id="901906" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_rclone_config_files.yml</info>
        <!--Sigma Rule Author: Aaron Greetham (@beardofbinary) - NCC Group-->
        <!--Description: Detects Rclone config files being created-->
        <!--Date: 2021/05/26-->
        <!--Status: test-->
        <!--ID: 34986307-b7f4-49be-92f3-e7a4d01ac5db-->
        <mitre>
            <id>attack.exfiltration</id>
            <id>attack.t1567.002</id>
        </mitre>
        <description>Rclone Config File Creation</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+\.config\\+rclone\\+</field>
    </rule>
    <rule id="901907" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_crackmapexec_patterns.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious file creation patterns found in logs when CrackMapExec is used-->
        <!--Date: 2022/03/12-->
        <!--Status: test-->
        <!--ID: 9433ff9c-5d3f-4269-99f8-95fc826ea489-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>CrackMapExec File Creation Patterns</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Windows\\+Temp\\+)</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)C:\\+WINDOWS\\+system32\\+rundll32\.exe</field>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)AUTHORI|AUTORI</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.rtf|\.otf|\.odt|\.txt|\.doc|\.pdf|\.dll|\.docx|\.wpd|\.icns|\.db|\.ini|\.tex|\.sys|\.csv|\.fon|\.tar|\.ttf|\.xml|\.cfg|\.cpl|\.jpg|\.drv|\.cur|\.tmp)$</field>
    </rule>
    <rule id="901908" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_crackmapexec_patterns.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects suspicious file creation patterns found in logs when CrackMapExec is used-->
        <!--Date: 2022/03/12-->
        <!--Status: test-->
        <!--ID: 9433ff9c-5d3f-4269-99f8-95fc826ea489-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>CrackMapExec File Creation Patterns</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\+Windows\\+Temp\\+procdump\.exe</field>
        <field name="win.eventdata.user" negate="no" type="pcre2">(?i)AUTHORI|AUTORI</field>
    </rule>
    <rule id="901909" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_bloodhound_collection.yml</info>
        <!--Sigma Rule Author: C.J. May-->
        <!--Description: Detects default file names outputted by the BloodHound collection tool SharpHound-->
        <!--Date: 2022/08/09-->
        <!--Status: experimental-->
        <!--ID: 02773bed-83bf-469f-b7ff-e676e7d78bab-->
        <mitre>
            <id>attack.discovery</id>
            <id>attack.t1087.001</id>
            <id>attack.t1087.002</id>
            <id>attack.t1482</id>
            <id>attack.t1069.001</id>
            <id>attack.t1069.002</id>
            <id>attack.execution</id>
            <id>attack.t1059.001</id>
        </mitre>
        <description>BloodHound Collection Files</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:BloodHound\.zip|_computers\.json|_containers\.json|_domains\.json|_gpos\.json|_groups\.json|_ous\.json|_users\.json)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+svchost\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+WindowsApps\\+Microsoft\.)</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\\+pocket_containers\.json)$</field>
    </rule>
    <rule id="901910" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_sysinternals_procexp_driver_susp_creation.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects creation of the Process Explorer drivers by processes other than Process Explorer (procexp) itself.
Hack tools or malware may use the Process Explorer driver to elevate privileges, drops it to disk for a few moments, runs a service using that driver and removes it afterwards.
-->
        <!--Date: 2023/05/05-->
        <!--Status: experimental-->
        <!--ID: de46c52b-0bf8-4936-a327-aace94f94ac6-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1068</id>
        </mitre>
        <description>Process Explorer Driver Creation By Non-Sysinternals Binary</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+PROCEXP</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.sys)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+procexp\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+procexp64\.exe)$</field>
    </rule>
    <rule id="901911" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_task_write.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the creation of tasks from processes executed from suspicious locations-->
        <!--Date: 2021/11/16-->
        <!--Status: test-->
        <!--ID: 80e1f67a-4596-4351-98f5-a9c3efabac95-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.execution</id>
            <id>attack.t1053</id>
        </mitre>
        <description>Suspicious Scheduled Task Write to System32 Tasks</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Windows\\+System32\\+Tasks</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+AppData\\+|C:\\+PerfLogs|\\+Windows\\+System32\\+config\\+systemprofile</field>
    </rule>
    <rule id="901912" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_uac_bypass_ntfs_reparse_point.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using NTFS reparse point and wusa.exe DLL hijacking (UACMe 36)-->
        <!--Date: 2021/08/30-->
        <!--Status: test-->
        <!--ID: 7fff6773-2baa-46de-a24a-b6eec1aba2d1-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>UAC Bypass Using NTFS Reparse Point - File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Users\\+)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Temp\\+api\-ms\-win\-core\-kernel32\-legacy\-l1\.DLL)$</field>
    </rule>
    <rule id="901913" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_hktl_dumpert.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the creation of the default dump file used by Outflank Dumpert tool. A process dumper, which dumps the lsass process memory-->
        <!--Date: 2020/02/04-->
        <!--Status: test-->
        <!--ID: 93d94efc-d7ad-4161-ad7d-1638c4f908d8-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>HackTool - Dumpert Process Dumper Default File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:dumpert\.dmp)$</field>
    </rule>
    <rule id="901914" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_gotoopener_artefact.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: An adversary may use legitimate desktop support and remote access software, such as Team Viewer, Go2Assist, LogMein, AmmyyAdmin, etc, to establish an interactive command and control channel to target systems within networks.
These services are commonly used as legitimate technical support software, and may be allowed by application control within a target environment.
Remote access tools like VNC, Ammyy, and Teamviewer are used frequently when compared with other legitimate software commonly used by adversaries. (Citation: Symantec Living off the Land)
-->
        <!--Date: 2022/02/13-->
        <!--Status: test-->
        <!--ID: 5d756aee-ad3e-4306-ad95-cb1abec48de2-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1219</id>
        </mitre>
        <description>GoToAssist Temporary Installation Artefact</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+LogMeInInc\\+GoToAssist\ Remote\ Support\ Expert\\+</field>
    </rule>
    <rule id="901915" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_aspnet_temp_files.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of new DLL assembly files by "aspnet_compiler.exe", which could be a sign of "aspnet_compiler" abuse to proxy execution through a build provider.
-->
        <!--Date: 2023/08/14-->
        <!--Status: experimental-->
        <!--ID: 4c7f49ee-2638-43bb-b85b-ce676c30b260-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>Assembly DLL Creation Via AspNetCompiler</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+aspnet_compiler\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Temporary\ ASP\.NET\ Files\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+assembly\\+tmp\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\.dll</field>
    </rule>
    <rule id="901916" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_uac_bypass_eventvwr.yml</info>
        <!--Sigma Rule Author: Antonio Cocomazzi (idea), Florian Roth (Nextron Systems)-->
        <!--Description: Detects the pattern of a UAC bypass using Windows Event Viewer-->
        <!--Date: 2022/04/27-->
        <!--Status: test-->
        <!--ID: 63e4f530-65dc-49cc-8f80-ccfa95c69d43-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
        </mitre>
        <description>UAC Bypass Using EventVwr</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+Microsoft\\+Event\ Viewer\\+RecentViews|\\+Microsoft\\+EventV\~1\\+RecentViews)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+SysWOW64\\+)</field>
    </rule>
    <rule id="901917" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_sysinternals_procmon_driver_susp_creation.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects creation of the Process Monitor driver by processes other than Process Monitor (procmon) itself.-->
        <!--Date: 2023/05/05-->
        <!--Status: experimental-->
        <!--ID: a05baa88-e922-4001-bc4d-8738135f27de-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1068</id>
        </mitre>
        <description>Process Monitor Driver Creation By Non-Sysinternals Binary</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+procmon</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.sys)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+procmon\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+procmon64\.exe)$</field>
    </rule>
    <rule id="901918" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_susp_vscode_powershell_profile.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation or modification of a vscode related powershell profile which could indicate suspicious activity as the profile can be used as a mean of persistence-->
        <!--Date: 2022/08/24-->
        <!--Status: test-->
        <!--ID: 3a9fa2ec-30bc-4ebd-b49e-7c9cff225502-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1546.013</id>
        </mitre>
        <description>VsCode Powershell Profile Modification</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+Microsoft\.VSCode_profile\.ps1)$</field>
    </rule>
    <rule id="901919" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_notepad_plus_plus_persistence.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects creation of new ".dll" files inside the plugins directory of a notepad++ installation by a process other than "gup.exe". Which could indicates possible persistence-->
        <!--Date: 2022/06/10-->
        <!--Status: test-->
        <!--ID: 54127bd4-f541-4ac3-afdb-ea073f63f692-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Potential Persistence Via Notepad++ Plugins</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Notepad\+\+\\+plugins\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.dll)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Notepad\+\+\\+updater\\+gup\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Users\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+target\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:Installer\.x64\.exe)$</field>
    </rule>
    <rule id="901920" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_wmiexec_default_filename.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the creation of the default output filename used by the wmiexec tool-->
        <!--Date: 2022/06/02-->
        <!--Status: experimental-->
        <!--ID: 8d5aca11-22b3-4f22-b7ba-90e60533e1fb-->
        <mitre>
            <id>attack.lateral_movement</id>
            <id>attack.t1047</id>
        </mitre>
        <description>Wmiexec Default Output File</description>
        <options>no_full_log</options>
        <group>file_event,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Windows\\+__1\d{9}\.\d{1,7}$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\+__1\d{9}\.\d{1,7}$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)D:\\+__1\d{9}\.\d{1,7}$</field>
    </rule>
    <rule id="901921" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_adsi_cache_creation_by_uncommon_tool.yml</info>
        <!--Sigma Rule Author: xknow @xknow_infosec, Tim Shelton-->
        <!--Description: Detects the creation of an "Active Directory Schema Cache File" (.sch) file by an uncommon tool.-->
        <!--Date: 2019/03/24-->
        <!--Status: test-->
        <!--ID: 75bf09fa-1dd7-4d18-9af9-dd9e492562eb-->
        <mitre>
            <id>attack.t1001.003</id>
            <id>attack.command_and_control</id>
        </mitre>
        <description>ADSI-Cache File Creation By Uncommon Tool</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Local\\+Microsoft\\+Windows\\+SchCache\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.sch)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+Cylance\\+Desktop\\+CylanceSvc\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+CCM\\+CcmExec\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+windows\\+system32\\+dllhost\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+system32\\+dsac\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+system32\\+efsui\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+windows\\+system32\\+mmc\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+windows\\+system32\\+svchost\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+wbem\\+WmiPrvSE\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+windows\\+system32\\+WindowsPowerShell\\+v1\.0\\+powershell\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+ccmsetup\\+autoupgrade\\+ccmsetup</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+SentinelOne\\+Sentinel\ Agent</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Microsoft\ Office</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+OUTLOOK\.EXE)$</field>
    </rule>
    <rule id="901922" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_event/file_event_win_adsi_cache_creation_by_uncommon_tool.yml</info>
        <!--Sigma Rule Author: xknow @xknow_infosec, Tim Shelton-->
        <!--Description: Detects the creation of an "Active Directory Schema Cache File" (.sch) file by an uncommon tool.-->
        <!--Date: 2019/03/24-->
        <!--Status: test-->
        <!--ID: 75bf09fa-1dd7-4d18-9af9-dd9e492562eb-->
        <mitre>
            <id>attack.t1001.003</id>
            <id>attack.command_and_control</id>
        </mitre>
        <description>ADSI-Cache File Creation By Uncommon Tool</description>
        <options>no_full_log</options>
        <group>windows,file_event,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Local\\+Microsoft\\+Windows\\+SchCache\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.sch)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+LANDesk\\+LDCLient\\+ldapwhoami\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+Citrix\\+Receiver\ StoreFront\\+Services\\+DefaultDomainServices\\+Citrix\.DeliveryServices\.DomainServices\.ServiceHost\.exe)$</field>
    </rule>
    <rule id="901923" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_delete/file_delete_win_cve_2021_1675_print_nightmare.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detect DLL deletions from Spooler Service driver folder. This might be a potential exploitation attempt of CVE-2021-1675-->
        <!--Date: 2021/07/01-->
        <!--Status: experimental-->
        <!--ID: 5b2bbc47-dead-4ef7-8908-0cf73fcbecbf-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1574</id>
            <id>cve.2021.1675</id>
        </mitre>
        <description>Potential PrintNightmare Exploitation Attempt</description>
        <options>no_full_log</options>
        <group>file_delete,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+spoolsv\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)C:\\+Windows\\+System32\\+spool\\+drivers\\+x64\\+3\\+</field>
    </rule>
    <rule id="901924" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_delete/file_delete_win_delete_powershell_command_history.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the deletion of the PowerShell console History logs which may indicate an attempt to destroy forensic evidence-->
        <!--Date: 2023/02/15-->
        <!--Status: experimental-->
        <!--ID: ff301988-c231-4bd0-834c-ac9d73b86586-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
        </mitre>
        <description>PowerShell Console History Logs Deleted</description>
        <options>no_full_log</options>
        <group>file_delete,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\\+PSReadLine\\+ConsoleHost_history\.txt)$</field>
    </rule>
    <rule id="901925" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_delete/file_delete_win_delete_iis_access_logs.yml</info>
        <!--Sigma Rule Author: Tim Rauch (Nextron Systems), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the deletion of IIS WebServer access logs which may indicate an attempt to destroy forensic evidence-->
        <!--Date: 2022/09/16-->
        <!--Status: experimental-->
        <!--ID: 3eb8c339-a765-48cc-a150-4364c04652bf-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
        </mitre>
        <description>IIS WebServer Access Logs Deleted</description>
        <options>no_full_log</options>
        <group>file_delete,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+inetpub\\+logs\\+LogFiles\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.log)$</field>
    </rule>
    <rule id="901926" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_delete/file_delete_win_delete_prefetch.yml</info>
        <!--Sigma Rule Author: Cedric MAURUGEON-->
        <!--Description: Detects the deletion of a prefetch file which may indicate an attempt to destroy forensic evidence-->
        <!--Date: 2021/09/29-->
        <!--Status: experimental-->
        <!--ID: 0a1f9d29-6465-4776-b091-7f43b26e4c89-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.004</id>
        </mitre>
        <description>Prefetch File Deleted</description>
        <options>no_full_log</options>
        <group>windows,file_delete,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Windows\\+Prefetch\\+)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.pf)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+windows\\+system32\\+svchost\.exe</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)AUTHORI</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)AUTORI</field>
    </rule>
    <rule id="901927" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_delete/file_delete_win_delete_teamviewer_logs.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the deletion of the TeamViewer log files which may indicate an attempt to destroy forensic evidence-->
        <!--Date: 2022/01/16-->
        <!--Status: test-->
        <!--ID: b1decb61-ed83-4339-8e95-53ea51901720-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.004</id>
        </mitre>
        <description>TeamViewer Log File Deleted</description>
        <options>no_full_log</options>
        <group>windows,file_delete,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+TeamViewer_</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.log)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+system32\\+svchost\.exe</field>
    </rule>
    <rule id="901928" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_delete/file_delete_win_delete_event_log_files.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the deletion of the event log files which may indicate an attempt to destroy forensic evidence-->
        <!--Date: 2023/02/15-->
        <!--Status: experimental-->
        <!--ID: 63c779ba-f638-40a0-a593-ddd45e8b1ddc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
        </mitre>
        <description>EventLog EVTX File Deleted</description>
        <options>no_full_log</options>
        <group>file_delete,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+winevt\\+Logs\\+)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.evtx)$</field>
    </rule>
    <rule id="901929" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_delete/file_delete_win_delete_tomcat_logs.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the deletion of tomcat WebServer logs which may indicate an attempt to destroy forensic evidence-->
        <!--Date: 2023/02/16-->
        <!--Status: experimental-->
        <!--ID: 270185ff-5f50-4d6d-a27f-24c3b8c9fef8-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
        </mitre>
        <description>Tomcat WebServer Logs Deleted</description>
        <options>no_full_log</options>
        <group>file_delete,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+Tomcat</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)\\+logs\\+</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)catalina\.|_access_log\.|localhost\.</field>
    </rule>
    <rule id="901930" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_delete/file_delete_win_sysinternals_sdelete_file_deletion.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects the deletion of files by the Sysinternals SDelete utility. It looks for the common name pattern used to rename files.-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: 6ddab845-b1b8-49c2-bbf7-1a11967f64bc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.004</id>
        </mitre>
        <description>File Deleted Via Sysinternals SDelete</description>
        <options>no_full_log</options>
        <group>windows,file_delete,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.AAA|\.ZZZ)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\\+Wireshark\\+radius\\+dictionary\.alcatel\-lucent\.aaa)$</field>
    </rule>
    <rule id="901931" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_delete/file_delete_win_delete_backup_file.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects deletion of files with extensions often used for backup files. Adversaries may delete or remove built-in operating system data and turn off services designed to aid in the recovery of a corrupted system to prevent recovery.-->
        <!--Date: 2022/01/02-->
        <!--Status: experimental-->
        <!--ID: 06125661-3814-4e03-bfa2-1e4411c60ac3-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1490</id>
        </mitre>
        <description>Backup Files Deleted</description>
        <options>no_full_log</options>
        <group>windows,file_delete,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+cmd\.exe|\\+powershell\.exe|\\+pwsh\.exe|\\+wt\.exe|\\+rundll32\.exe|\\+regsvr32\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?:\.VHD|\.bac|\.bak|\.wbcat|\.bkf|\.set|\.win|\.dsk)$</field>
    </rule>
    <rule id="901932" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_delete/file_delete_win_zone_identifier_ads_uncommon.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the deletion of the "Zone.Identifier" ADS by an uncommon process. Attackers can leverage this in order to bypass security restrictions that make use of the ADS such as Microsoft Office apps.-->
        <!--Date: 2023/09/04-->
        <!--Status: experimental-->
        <!--ID: 3109530e-ab47-4cc6-a953-cac5ebcc93ae-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.004</id>
        </mitre>
        <description>ADS Zone.Identifier Deleted By Uncommon Application</description>
        <options>no_full_log</options>
        <group>windows,file_delete,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)(?::Zone\.Identifier)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+PowerShell\\+7\-preview\\+pwsh\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Program\ Files\\+PowerShell\\+7\\+pwsh\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+explorer\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+System32\\+WindowsPowerShell\\+v1\.0\\+powershell\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+SysWOW64\\+explorer\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?::\\+Windows\\+SysWOW64\\+WindowsPowerShell\\+v1\.0\\+powershell\.exe)$</field>
    </rule>
    <rule id="901933" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_delete/file_delete_win_unusual_deletion_by_dns_exe.yml</info>
        <!--Sigma Rule Author: Tim Rauch (Nextron Systems)-->
        <!--Description: Detects an unexpected file being deleted by dns.exe which my indicate activity related to remote code execution or other forms of exploitation as seen in CVE-2020-1350 (SigRed)-->
        <!--Date: 2022/09/27-->
        <!--Status: experimental-->
        <!--ID: 8f0b1fb1-9bd4-4e74-8cdf-a8de4d2adfd0-->
        <mitre>
            <id>attack.initial_access</id>
            <id>attack.t1133</id>
        </mitre>
        <description>Unusual File Deletion by Dns.exe</description>
        <options>no_full_log</options>
        <group>file_delete,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+dns\.exe)$</field>
        <field name="win.eventdata.targetFilename" negate="yes" type="pcre2">(?i)(?:\\+dns\.log)$</field>
    </rule>
    <rule id="901934" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/file/file_delete/file_delete_win_delete_exchange_powershell_logs.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the deletion of the Exchange PowerShell cmdlet History logs which may indicate an attempt to destroy forensic evidence-->
        <!--Date: 2022/10/26-->
        <!--Status: test-->
        <!--ID: a55349d8-9588-4c5a-8e3b-1925fe2a4ffe-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
        </mitre>
        <description>Exchange PowerShell Cmdlet History Deleted</description>
        <options>no_full_log</options>
        <group>file_delete,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)^(?:\\+Logging\\+CmdletInfra\\+LocalPowerShell\\+Cmdlet\\+)</field>
        <field name="win.eventdata.targetFilename" negate="no" type="pcre2">(?i)_Cmdlet_</field>
    </rule>
    <rule id="901935" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_delete/registry_delete_removal_com_hijacking_registry_key.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Detects any deletion of entries in ".*\shell\open\command" registry keys.
These registry keys might have been used for COM hijacking activities by a threat actor or an attacker and the deletion could indicate steps to remove its tracks.
-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: 96f697b0-b499-4e5d-9908-a67bec11cdb6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Removal of Potential COM Hijacking Registry Keys</description>
        <options>no_full_log</options>
        <group>windows,registry_delete,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)DeleteKey</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+shell\\+open\\+command)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+system32\\+svchost\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Common\ Files\\+Microsoft\ Shared\\+ClickToRun\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Common\ Files\\+Microsoft\ Shared\\+ClickToRun\\+Updates\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+OfficeClickToRun\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Microsoft\ Office\\+root\\+integration\\+integrator\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Dropbox\.exe)$</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+Dropbox\.</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Temp\\+Wireshark_uninstaller\.exe)$</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+wireshark\-capture\-file\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Opera\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Opera\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+installer\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)peazip</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+PeaZip\.</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Everything\.exe)$</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+Everything\.</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+Installer\\+MSI)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Java\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+installer\.exe)$</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+Classes\\+WOW6432Node\\+CLSID\\+\{4299124F\-F2C3\-41b4\-9C73\-9236B2AD0E8F\}</field>
    </rule>
    <rule id="901936" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_delete/registry_delete_schtasks_hide_task_via_index_value_removal.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when the "index" value of a scheduled task is removed or deleted from the registry. Which effectively hides it from any tooling such as "schtasks /query"-->
        <!--Date: 2022/08/26-->
        <!--Status: experimental-->
        <!--ID: 526cc8bc-1cdc-48ad-8b26-f19bff969cec-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562</id>
        </mitre>
        <description>Removal Of Index Value to Hide Schedule Task - Registry</description>
        <options>no_full_log</options>
        <group>windows,registry_delete,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)DeleteKey</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+Schedule\\+TaskCache\\+Tree\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Index</field>
    </rule>
    <rule id="901937" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_delete/registry_delete_schtasks_hide_task_via_sd_value_removal.yml</info>
        <!--Sigma Rule Author: Sittikorn S-->
        <!--Description: Remove SD (Security Descriptor) value in \Schedule\TaskCache\Tree registry hive to hide schedule task. This technique is used by Tarrask malware-->
        <!--Date: 2022/04/15-->
        <!--Status: experimental-->
        <!--ID: acd74772-5f88-45c7-956b-6a7b36c294d2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562</id>
        </mitre>
        <description>Removal Of SD Value to Hide Schedule Task - Registry</description>
        <options>no_full_log</options>
        <group>windows,registry_delete,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)DeleteKey</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+Schedule\\+TaskCache\\+Tree\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)SD</field>
    </rule>
    <rule id="901938" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_delete/registry_delete_exploit_guard_protected_folders.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the removal of folders from the "ProtectedFolders" list of of exploit guard. This could indicate an attacker trying to launch an encryption process or trying to manipulate data inside of the protected folder-->
        <!--Date: 2022/08/05-->
        <!--Status: experimental-->
        <!--ID: 272e55a4-9e6b-4211-acb6-78f51f0b1b40-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Folder Removed From Exploit Guard ProtectedFolders List - Registry</description>
        <options>no_full_log</options>
        <group>registry_delete,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)DeleteValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)SOFTWARE\\+Microsoft\\+Windows\ Defender\\+Windows\ Defender\ Exploit\ Guard\\+Controlled\ Folder\ Access\\+ProtectedFolders</field>
    </rule>
    <rule id="901939" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_delete/registry_delete_removal_amsi_registry_key.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the deletion of AMSI provider registry key entries in HKLM\Software\Microsoft\AMSI. This technique could be used by an attacker in order to disable AMSI inspection.-->
        <!--Date: 2021/06/07-->
        <!--Status: test-->
        <!--ID: 41d1058a-aea7-4952-9293-29eaaf516465-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Removal Of AMSI Provider Registry Keys</description>
        <options>no_full_log</options>
        <group>windows,registry_delete,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)DeleteKey</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\{2781761E\-28E0\-4109\-99FE\-B9D127C57AFE\}|\{A7C452EF\-8E9F\-42EB\-9F2B\-245613CA0DC9\})$</field>
    </rule>
    <rule id="901940" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_delete/registry_delete_mstsc_history_cleared.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the deletion of registry keys containing the MSTSC connection history-->
        <!--Date: 2021/10/19-->
        <!--Status: test-->
        <!--ID: 07bdd2f5-9c58-4f38-aec8-e101bb79ef8d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Terminal Server Client Connection History Cleared - Registry</description>
        <options>no_full_log</options>
        <group>registry_delete,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)DeleteValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Microsoft\\+Terminal\ Server\ Client\\+Default\\+MRU</field>
    </rule>
    <rule id="901941" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_delete/registry_delete_mstsc_history_cleared.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the deletion of registry keys containing the MSTSC connection history-->
        <!--Date: 2021/10/19-->
        <!--Status: test-->
        <!--ID: 07bdd2f5-9c58-4f38-aec8-e101bb79ef8d-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Terminal Server Client Connection History Cleared - Registry</description>
        <options>no_full_log</options>
        <group>registry_delete,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)DeleteKey</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Microsoft\\+Terminal\ Server\ Client\\+Servers\\+</field>
    </rule>
    <rule id="901942" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_mycomputer.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects modification to the "Default" value of the "MyComputer" key and subkeys to point to a custom binary that will be launched whenever the associated action is executed (see reference section for example)-->
        <!--Date: 2022/08/09-->
        <!--Status: experimental-->
        <!--ID: 8fbe98a8-8f9d-44f8-aa71-8c572e29ef06-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Potential Persistence Via MyComputer Registry Keys</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Explorer\\+MyComputer</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\(Default\))$</field>
    </rule>
    <rule id="901943" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_telemetry_persistence.yml</info>
        <!--Sigma Rule Author: Lednyov Alexey, oscd.community, Sreeman-->
        <!--Description: Detects potential persistence behavior using the windows telemetry registry key.
Windows telemetry makes use of the binary CompatTelRunner.exe to run a variety of commands and perform the actual telemetry collections.
This binary was created to be easily extensible, and to that end, it relies on the registry to instruct on which commands to run.
The problem is, it will run any arbitrary command without restriction of location or type.
-->
        <!--Date: 2020/10/16-->
        <!--Status: test-->
        <!--ID: 73a883d0-0348-4be4-a8d8-51031c2564f8-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1053.005</id>
        </mitre>
        <description>Potential Registry Persistence Attempt Via Windows Telemetry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+AppCompatFlags\\+TelemetryController\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Command)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\.bat|\.bin|\.cmd|\.dat|\.dll|\.exe|\.hta|\.jar|\.js|\.msi|\.ps|\.sh|\.vb</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\\+system32\\+CompatTelRunner\.exe</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\\+system32\\+DeviceCensus\.exe</field>
    </rule>
    <rule id="901944" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_new_network_provider.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when an attacker tries to add a new network provider in order to dump clear text credentials, similar to how the NPPSpy tool does it-->
        <!--Date: 2022/08/23-->
        <!--Status: experimental-->
        <!--ID: 0442defa-b4a2-41c9-ae2c-ea7042fc4701-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003</id>
        </mitre>
        <description>Potential Credential Dumping Attempt Using New NetworkProvider - REG</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+System\\+CurrentControlSet\\+Services\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+NetworkProvider</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+System\\+CurrentControlSet\\+Services\\+WebClient\\+NetworkProvider</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+System\\+CurrentControlSet\\+Services\\+LanmanWorkstation\\+NetworkProvider</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+System\\+CurrentControlSet\\+Services\\+RDPNP\\+NetworkProvider</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+poqexec\.exe</field>
    </rule>
    <rule id="901945" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_disabled_microsoft_defender_eventlog.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the disabling of the Windows Defender eventlog as seen in relation to Lockbit 3.0 infections-->
        <!--Date: 2022/07/04-->
        <!--Status: experimental-->
        <!--ID: fcddca7c-b9c0-4ddf-98da-e1e2d18b0157-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Disabled Windows Defender Eventlog</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Microsoft\\+Windows\\+CurrentVersion\\+WINEVT\\+Channels\\+Microsoft\-Windows\-Windows\ Defender/Operational\\+Enabled</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="901946" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_defender_exclusions.yml</info>
        <!--Sigma Rule Author: Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the Setting of Windows Defender Exclusions-->
        <!--Date: 2021/07/06-->
        <!--Status: test-->
        <!--ID: a982fc9c-6333-4ffb-a51d-addb04e8b529-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Windows Defender Exclusions Added - Registry</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Microsoft\\+Windows\ Defender\\+Exclusions</field>
    </rule>
    <rule id="901947" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_susp_user_shell_folders.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect modification of the startup key to a path where a payload could be stored to be launched during startup-->
        <!--Date: 2022/10/01-->
        <!--Status: experimental-->
        <!--ID: 9c226817-8dc9-46c2-a58d-66655aafd7dc-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Modify User Shell Folders Startup Value</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Explorer\\+User\ Shell\ Folders</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:Startup)$</field>
    </rule>
    <rule id="901948" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_susp_service_installed.yml</info>
        <!--Sigma Rule Author: xknow (@xknow_infosec), xorxes (@xor_xes)-->
        <!--Description: Detects installation of NalDrv or PROCEXP152 services via registry-keys to non-system32 folders.
Both services are used in the tool Ghost-In-The-Logs (https://github.com/bats3c/Ghost-In-The-Logs), which uses KDU (https://github.com/hfiref0x/KDU)
-->
        <!--Date: 2019/04/08-->
        <!--Status: test-->
        <!--ID: f2485272-a156-4773-82d7-1d178bc4905b-->
        <mitre>
            <id>attack.t1562.001</id>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Suspicious Service Installed</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\+System\\+CurrentControlSet\\+Services\\+NalDrv\\+ImagePath|HKLM\\+System\\+CurrentControlSet\\+Services\\+PROCEXP152\\+ImagePath</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+procexp64\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+procexp\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+procmon64\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+procmon\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+handle\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+handle64\.exe)$</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\\+WINDOWS\\+system32\\+Drivers\\+PROCEXP152\.SYS</field>
    </rule>
    <rule id="901949" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_creation_service_susp_folder.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), frack113-->
        <!--Description: Detect the creation of a service with a service binary located in a suspicious directory-->
        <!--Date: 2022/05/02-->
        <!--Status: experimental-->
        <!--ID: a07f0359-4c90-4dc4-a681-8ffea40b4f47-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Service Binary in Suspicious Folder</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKLM\\+System\\+CurrentControlSet\\+Services\\+)</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Start)$</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+Users\\+Public\\+|\\+Perflogs\\+|\\+ADMIN\$\\+|\\+Temp\\+</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)|DWORD\ \(0x00000001\)|DWORD\ \(0x00000002\)</field>
    </rule>
    <rule id="901950" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_creation_service_susp_folder.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), frack113-->
        <!--Description: Detect the creation of a service with a service binary located in a suspicious directory-->
        <!--Date: 2022/05/02-->
        <!--Status: experimental-->
        <!--ID: a07f0359-4c90-4dc4-a681-8ffea40b4f47-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Service Binary in Suspicious Folder</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKLM\\+System\\+CurrentControlSet\\+Services\\+)</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+ImagePath)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\\+Users\\+Public\\+|\\+Perflogs\\+|\\+ADMIN\$\\+|\\+Temp\\+</field>
    </rule>
    <rule id="901951" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_creation_service_susp_folder.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), frack113-->
        <!--Description: Detect the creation of a service with a service binary located in a suspicious directory-->
        <!--Date: 2022/05/02-->
        <!--Status: experimental-->
        <!--ID: a07f0359-4c90-4dc4-a681-8ffea40b4f47-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Service Binary in Suspicious Folder</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Common\ Files\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)\\+Temp\\+</field>
    </rule>
    <rule id="901952" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_bginfo_custom_wmi_query.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects setting of a new registry value related to BgInfo configuration, which can be abused to execute custom WMI query via "BgInfo.exe"-->
        <!--Date: 2023/08/16-->
        <!--Status: experimental-->
        <!--ID: cd277474-5c52-4423-a52b-ac2d7969902f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>New BgInfo.EXE Custom WMI Query Registry Configuration</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Software\\+Winternals\\+BGInfo\\+UserFields\\+</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)^(?:6)</field>
    </rule>
    <rule id="901953" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_reflectdebugger.yml</info>
        <!--Sigma Rule Author: X__Junior-->
        <!--Description: Detects potential WerFault "ReflectDebugger" registry value abuse for persistence.-->
        <!--Date: 2023/05/18-->
        <!--Status: experimental-->
        <!--ID: 0cf2e1c6-8d10-4273-8059-738778f981ad-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Potential WerFault ReflectDebugger Registry Value Abuse</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Microsoft\\+Windows\\+Windows\ Error\ Reporting\\+Hangs\\+ReflectDebugger)$</field>
    </rule>
    <rule id="901954" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_lsass_usermode_dumping.yml</info>
        <!--Sigma Rule Author: @pbssubhash-->
        <!--Description: Detects the setting of the "DumpType" registry value to "2" which stands for a "Full Dump". Technique such as LSASS Shtinkering requires this value to be "2" in order to dump LSASS.-->
        <!--Date: 2022/12/08-->
        <!--Status: experimental-->
        <!--ID: 33efc23c-6ea2-4503-8cfe-bdf82ce8f719-->
        <mitre>
            <id>attack.credential_access</id>
            <id>attack.t1003.001</id>
        </mitre>
        <description>Lsass Full Dump Request Via DumpType Registry Settings</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Windows\\+Windows\ Error\ Reporting\\+LocalDumps\\+DumpType|\\+SOFTWARE\\+Microsoft\\+Windows\\+Windows\ Error\ Reporting\\+LocalDumps\\+lsass\.exe\\+DumpType</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000002\)</field>
    </rule>
    <rule id="901955" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_scrobj_dll.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect use of scrobj.dll as this DLL looks for the ScriptletURL key to get the location of the script to execute-->
        <!--Date: 2022/08/20-->
        <!--Status: experimental-->
        <!--ID: fe20dda1-6f37-4379-bbe0-a98d400cae90-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.015</id>
        </mitre>
        <description>Potential Persistence Via Scrobj.dll COM Hijacking</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:InprocServer32\\+\(Default\))$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)C:\\+WINDOWS\\+system32\\+scrobj\.dll</field>
    </rule>
    <rule id="901956" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_disabled_exploit_guard_net_protection_on_ms_defender.yml</info>
        <!--Sigma Rule Author: Austin Songer @austinsonger-->
        <!--Description: Detects disabling Windows Defender Exploit Guard Network Protection-->
        <!--Date: 2021/08/04-->
        <!--Status: experimental-->
        <!--ID: bf9e1387-b040-4393-9851-1598f8ecfae9-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Disable Exploit Guard Network Protection on Windows Defender</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)SOFTWARE\\+Policies\\+Microsoft\\+Windows\ Defender\ Security\ Center\\+App\ and\ Browser\ protection\\+DisallowExploitProtectionOverride</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(00000001\)</field>
    </rule>
    <rule id="901957" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_disk_cleanup_handler_autorun_persistence.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence via autorun.
The disk cleanup manager is part of the operating system.
It displays the dialog box [&#8230;] The user has the option of enabling or disabling individual handlers by selecting or clearing their check box in the disk cleanup manager's UI.
Although Windows comes with a number of disk cleanup handlers, they aren't designed to handle files produced by other applications.
Instead, the disk cleanup manager is designed to be flexible and extensible by enabling any developer to implement and register their own disk cleanup handler.
Any developer can extend the available disk cleanup services by implementing and registering a disk cleanup handler.
-->
        <!--Date: 2022/07/21-->
        <!--Status: experimental-->
        <!--ID: d4e2745c-f0c6-4bde-a3ab-b553b3f693cc-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Persistence Via Disk Cleanup Handler - Autorun</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Explorer\\+VolumeCaches\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Autorun</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="901958" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_disk_cleanup_handler_autorun_persistence.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when an attacker modifies values of the Disk Cleanup Handler in the registry to achieve persistence via autorun.
The disk cleanup manager is part of the operating system.
It displays the dialog box [&#8230;] The user has the option of enabling or disabling individual handlers by selecting or clearing their check box in the disk cleanup manager's UI.
Although Windows comes with a number of disk cleanup handlers, they aren't designed to handle files produced by other applications.
Instead, the disk cleanup manager is designed to be flexible and extensible by enabling any developer to implement and register their own disk cleanup handler.
Any developer can extend the available disk cleanup services by implementing and registering a disk cleanup handler.
-->
        <!--Date: 2022/07/21-->
        <!--Status: experimental-->
        <!--ID: d4e2745c-f0c6-4bde-a3ab-b553b3f693cc-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Persistence Via Disk Cleanup Handler - Autorun</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Explorer\\+VolumeCaches\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+CleanupString|\\+PreCleanupString</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)cmd|powershell|rundll32|mshta|cscript|wscript|wsl|\\+Users\\+Public\\+|\\+Windows\\+TEMP\\+|\\+Microsoft\\+Windows\\+Start\ Menu\\+Programs\\+Startup\\+</field>
    </rule>
    <rule id="901959" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_hide_scheduled_task_via_index_tamper.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when the "index" value of a scheduled task is modified from the registry
Which effectively hides it from any tooling such as "schtasks /query" (Read the referenced link for more information about the effects of this technique)
-->
        <!--Date: 2022/08/26-->
        <!--Status: experimental-->
        <!--ID: 5b16df71-8615-4f7f-ac9b-6c43c0509e61-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562</id>
        </mitre>
        <description>Hide Schedule Task Via Index Value Tamper</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+Schedule\\+TaskCache\\+Tree\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Index</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="901960" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_office_enable_dde.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Enable Dynamic Data Exchange protocol (DDE) in all supported editions of Microsoft Word or Excel.-->
        <!--Date: 2022/02/26-->
        <!--Status: test-->
        <!--ID: 63647769-326d-4dde-a419-b925cc0caf42-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1559.002</id>
        </mitre>
        <description>Enable Microsoft Dynamic Data Exchange</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Word\\+Security\\+AllowDDE)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)|DWORD\ \(0x00000002\)</field>
    </rule>
    <rule id="901961" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_office_enable_dde.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Enable Dynamic Data Exchange protocol (DDE) in all supported editions of Microsoft Word or Excel.-->
        <!--Date: 2022/02/26-->
        <!--Status: test-->
        <!--ID: 63647769-326d-4dde-a419-b925cc0caf42-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1559.002</id>
        </mitre>
        <description>Enable Microsoft Dynamic Data Exchange</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Excel\\+Security\\+DisableDDEServerLaunch|\\+Excel\\+Security\\+DisableDDEServerLookup)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="901962" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_office_vsto.yml</info>
        <!--Sigma Rule Author: Bhabesh Raj-->
        <!--Description: Detects persistence via Visual Studio Tools for Office (VSTO) add-ins in Office applications.-->
        <!--Date: 2021/01/10-->
        <!--Status: experimental-->
        <!--ID: 9d15044a-7cfe-4d23-8085-6ebc11df7685-->
        <mitre>
            <id>attack.t1137.006</id>
            <id>attack.persistence</id>
        </mitre>
        <description>Potential Persistence Via Visual Studio Tools for Office</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Software\\+Microsoft\\+Office\\+Outlook\\+Addins\\+|\\+Software\\+Microsoft\\+Office\\+Word\\+Addins\\+|\\+Software\\+Microsoft\\+Office\\+Excel\\+Addins\\+|\\+Software\\+Microsoft\\+Office\\+Powerpoint\\+Addins\\+|\\+Software\\+Microsoft\\+VSTO\\+Security\\+Inclusion\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+msiexec\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+regsvr32\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+excel\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+integrator\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+OfficeClickToRun\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+winword\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+visio\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+Teams\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+AVG\\+Antivirus\\+RegSvr\.exe</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+Microsoft\\+Office\\+Outlook\\+Addins\\+Antivirus\.AsOutExt\\+</field>
    </rule>
    <rule id="901963" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_susp_reg_persist_explorer_run.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), oscd.community-->
        <!--Description: Detects a possible persistence mechanism using RUN key for Windows Explorer and pointing to a suspicious folder-->
        <!--Date: 2018/07/18-->
        <!--Status: test-->
        <!--ID: b7916c2a-fa2f-4795-9477-32b731f70f11-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Registry Persistence via Explorer Run Key</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Explorer\\+Run)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)^(?:C:\\+Windows\\+Temp\\+|C:\\+ProgramData\\+|C:\\+\$Recycle\.bin\\+|C:\\+Temp\\+|C:\\+Users\\+Public\\+|C:\\+Users\\+Default\\+)</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\\+AppData\\+</field>
    </rule>
    <rule id="901964" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_winget_enable_local_manifest.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects changes to the AppInstaller (winget) policy. Specifically the activation of the local manifest installation, which allows a user to install new packages via custom manifests.-->
        <!--Date: 2023/04/17-->
        <!--Status: experimental-->
        <!--ID: fa277e82-9b78-42dd-b05c-05555c7b6015-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
        </mitre>
        <description>Enable Local Manifest Installation With Winget</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+AppInstaller\\+EnableLocalManifestFiles)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="901965" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_asep_reg_keys_modification_currentversion_nt.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, Daniil Yugoslavskiy, Gleb Sukhodolskiy, Timur Zinniatullin, oscd.community, Tim Shelton, frack113 (split)-->
        <!--Description: Detects modification of autostart extensibility point (ASEP) in registry.-->
        <!--Date: 2019/10/25-->
        <!--Status: experimental-->
        <!--ID: cbf93e5d-ca6c-4722-8bea-e9119007c248-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>CurrentVersion NT Autorun Keys Modification</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Windows\ NT\\+CurrentVersion</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Winlogon\\+VmApplet|\\+Winlogon\\+Userinit|\\+Winlogon\\+Taskman|\\+Winlogon\\+Shell|\\+Winlogon\\+GpExtensions|\\+Winlogon\\+AppSetup|\\+Winlogon\\+AlternateShells\\+AvailableShells|\\+Windows\\+IconServiceLib|\\+Windows\\+Appinit_Dlls|\\+Image\ File\ Execution\ Options|\\+Font\ Drivers|\\+Drivers32|\\+Windows\\+Run|\\+Windows\\+Load</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\(Empty\)</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+Image\ File\ Execution\ Options\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)(?:\\+DisableExceptionChainValidation)$</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)(?:\\+MitigationOptions)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+Microsoft\\+Temp\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+MicrosoftEdgeUpdate\.exe)$</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+ClickToRunStore\\+HKLM\\+SOFTWARE\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+ClickToRun\\+REGISTRY\\+MACHINE\\+Software\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\\+Microsoft\ Office\\+root\\+integration\\+integrator\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Microsoft\ Office\\+root\\+integration\\+integrator\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Common\ Files\\+Microsoft\ Shared\\+ClickToRun\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Common\ Files\\+Microsoft\ Shared\\+ClickToRun\\+Updates\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+OfficeClickToRun\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+system32\\+svchost\.exe</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+Winlogon\\+GPExtensions\\+\{827D319E\-6EAC\-11D2\-A4EA\-00C04F79F83A\}\\+PreviousPolicyAreas</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+Winlogon\\+GPExtensions\\+\{827D319E\-6EAC\-11D2\-A4EA\-00C04F79F83A\}\\+MaxNoGPOListChangesInterval</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)DWORD\ \(0x00000009\)</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)DWORD\ \(0x000003c0\)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+Microsoft\.NET\\+Framework)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+ngen\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Microsoft\\+OneDrive\\+StandaloneUpdater\\+OneDriveSetup\.exe)$</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)(?:\\+Microsoft\\+Windows\\+CurrentVersion\\+RunOnce\\+Delete\ Cached\ Update\ Binary)$</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+system32\\+cmd\.exe\ /q\ /c\ del\ /q\ "C:\\+Users\\+)</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)(?:\\+AppData\\+Local\\+Microsoft\\+OneDrive\\+Update\\+OneDriveSetup\.exe")$</field>
    </rule>
    <rule id="901966" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_office_outlook_enable_unsafe_client_mail_rules.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects an attacker trying to enable the outlook security setting "EnableUnsafeClientMailRules" which allows outlook to run applications or execute macros-->
        <!--Date: 2023/02/08-->
        <!--Status: experimental-->
        <!--ID: 6763c6c8-bd01-4687-bc8d-4fa52cf8ba08-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Outlook EnableUnsafeClientMailRules Setting Enabled - Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Outlook\\+Security\\+EnableUnsafeClientMailRules)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="901967" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_dhcp_calloutdll.yml</info>
        <!--Sigma Rule Author: Dimitrios Slamaris-->
        <!--Description: Detects the installation of a Callout DLL via CalloutDlls and CalloutEnabled parameter in Registry, which can be used to execute code in context of the DHCP server (restart required)-->
        <!--Date: 2017/05/15-->
        <!--Status: test-->
        <!--ID: 9d3436ef-9476-4c43-acca-90ce06bdf33a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1574.002</id>
            <id>attack.t1112</id>
        </mitre>
        <description>DHCP Callout DLL Installation</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Services\\+DHCPServer\\+Parameters\\+CalloutDlls|\\+Services\\+DHCPServer\\+Parameters\\+CalloutEnabled)$</field>
    </rule>
    <rule id="901968" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_asep_reg_keys_modification_internet_explorer.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, Daniil Yugoslavskiy, Gleb Sukhodolskiy, Timur Zinniatullin, oscd.community, Tim Shelton, frack113 (split)-->
        <!--Description: Detects modification of autostart extensibility point (ASEP) in registry.-->
        <!--Date: 2019/10/25-->
        <!--Status: test-->
        <!--ID: a80f662f-022f-4429-9b8c-b1a41aaa6688-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Internet Explorer Autorun Keys Modification</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Software\\+Wow6432Node\\+Microsoft\\+Internet\ Explorer|\\+Software\\+Microsoft\\+Internet\ Explorer</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Toolbar|\\+Extensions|\\+Explorer\ Bars</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\(Empty\)</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+Extensions\\+\{2670000A\-7350\-4f3c\-8081\-5663EE0C6C49\}</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+Extensions\\+\{31D09BA0\-12F5\-4CCE\-BE8A\-2923E76605DA\}</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+Extensions\\+\{789FE86F\-6FC4\-46A1\-9849\-EDE0DB0C95CA\}</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+Extensions\\+\{A95fe080\-8f5d\-11d2\-a20b\-00aa003c157a\}</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)(?:\\+Toolbar\\+ShellBrowser\\+ITBar7Layout)$</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)(?:\\+Toolbar\\+ShowDiscussionButton)$</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)(?:\\+Toolbar\\+Locked)$</field>
    </rule>
    <rule id="901969" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_netsh_help_dll_persistence_susp_location.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects changes to the Netsh registry key to add a new DLL value that is located on a suspicious location. This change might be an indication of a potential persistence attempt by adding a malicious Netsh helper
-->
        <!--Date: 2023/11/28-->
        <!--Status: experimental-->
        <!--ID: e7b18879-676e-4a0e-ae18-27039185a8e7-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.007</id>
        </mitre>
        <description>New Netsh Helper DLL Registered From A Suspicious Location</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+NetSh</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i):\\+Perflogs\\+|:\\+Users\\+Public\\+|:\\+Windows\\+Temp\\+|\\+AppData\\+Local\\+Temp\\+|\\+Temporary\ Internet</field>
    </rule>
    <rule id="901970" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_netsh_help_dll_persistence_susp_location.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects changes to the Netsh registry key to add a new DLL value that is located on a suspicious location. This change might be an indication of a potential persistence attempt by adding a malicious Netsh helper
-->
        <!--Date: 2023/11/28-->
        <!--Status: experimental-->
        <!--ID: e7b18879-676e-4a0e-ae18-27039185a8e7-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.007</id>
        </mitre>
        <description>New Netsh Helper DLL Registered From A Suspicious Location</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+NetSh</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\\+Favorites\\+</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\\+Favourites\\+</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\\+Contacts\\+</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\\+Pictures\\+</field>
    </rule>
    <rule id="901971" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_sip_persistence.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when an attacker register a new SIP provider for persistence and defense evasion-->
        <!--Date: 2022/07/21-->
        <!--Status: experimental-->
        <!--ID: 5a2b21ee-6aaa-4234-ac9d-59a59edf90a1-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1553.003</id>
        </mitre>
        <description>Persistence Via New SIP Provider</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Cryptography\\+Providers\\+|\\+SOFTWARE\\+Microsoft\\+Cryptography\\+OID\\+EncodingType|\\+SOFTWARE\\+WOW6432Node\\+Microsoft\\+Cryptography\\+Providers\\+|\\+SOFTWARE\\+WOW6432Node\\+Microsoft\\+Cryptography\\+OID\\+EncodingType</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Dll|\\+\$DLL</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)WINTRUST\.DLL</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)mso\.dll</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+poqexec\.exe</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CryptSIPDll</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+PsfSip\.dll</field>
    </rule>
    <rule id="901972" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_system_lsa_nolmhash.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects changes to the "NoLMHash" registry value in order to allow Windows to store LM Hashes.
By setting this registry value to "0" (DWORD), Windows will be allowed to store a LAN manager hash of your password in Active Directory and local SAM databases.
-->
        <!--Date: 2023/12/15-->
        <!--Status: experimental-->
        <!--ID: c420410f-c2d8-4010-856b-dffe21866437-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Enable LM Hash Storage</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:System\\+CurrentControlSet\\+Control\\+Lsa\\+NoLMHash)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="901973" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_disable_uac_registry.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects when an attacker tries to disable User Account Control (UAC) by changing its registry key HKLM\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System\EnableLUA from 1 to 0-->
        <!--Date: 2022/01/05-->
        <!--Status: experimental-->
        <!--ID: 48437c39-9e5f-47fb-af95-3d663c3f2919-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1548.002</id>
        </mitre>
        <description>Disable UAC Using Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+System\\+EnableLUA</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="901974" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_crashdump_disabled.yml</info>
        <!--Sigma Rule Author: Tobias Michalski (Nextron Systems)-->
        <!--Description: Detects disabling the CrashDump per registry (as used by HermeticWiper)-->
        <!--Date: 2022/02/24-->
        <!--Status: experimental-->
        <!--ID: 2ff692c2-4594-41ec-8fcb-46587de769e0-->
        <mitre>
            <id>attack.t1564</id>
            <id>attack.t1112</id>
        </mitre>
        <description>CrashControl CrashDump Disabled</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)SYSTEM\\+CurrentControlSet\\+Control\\+CrashControl</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="901975" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_office_vba_warnings_tamper.yml</info>
        <!--Sigma Rule Author: Trent Liffick (@tliffick), Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects registry changes to Microsoft Office "VBAWarning" to a value of "1" which enables the execution of all macros, whether signed or unsigned.-->
        <!--Date: 2020/05/22-->
        <!--Status: test-->
        <!--ID: 91239011-fe3c-4b54-9f24-15c86bb65913-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Office Macros Auto-Enabled</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Security\\+VBAWarnings)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="901976" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_terminal_server_tampering.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden, David ANDRE, Roberto Rodriguez @Cyb3rWard0g, Nasreddine Bencherchali-->
        <!--Description: Detects tampering of RDP Terminal Service/Server sensitive settings.
Such as allowing unauthorized users access to a system via the 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections'...etc
-->
        <!--Date: 2022/08/06-->
        <!--Status: test-->
        <!--ID: 3f6b7b62-61aa-45db-96bd-9c31b36b653c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1112</id>
        </mitre>
        <description>RDP Sensitive Settings Changed</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)SOFTWARE\\+Policies\\+Microsoft\\+Windows\ NT\\+Terminal\ Services\\+|\\+Control\\+Terminal\ Server\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Shadow)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)|DWORD\ \(0x00000002\)|DWORD\ \(0x00000003\)|DWORD\ \(0x00000004\)</field>
    </rule>
    <rule id="901977" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_terminal_server_tampering.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden, David ANDRE, Roberto Rodriguez @Cyb3rWard0g, Nasreddine Bencherchali-->
        <!--Description: Detects tampering of RDP Terminal Service/Server sensitive settings.
Such as allowing unauthorized users access to a system via the 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections'...etc
-->
        <!--Date: 2022/08/06-->
        <!--Status: test-->
        <!--ID: 3f6b7b62-61aa-45db-96bd-9c31b36b653c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1112</id>
        </mitre>
        <description>RDP Sensitive Settings Changed</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Control\\+Terminal\ Server\\+|SOFTWARE\\+Policies\\+Microsoft\\+Windows\ NT\\+Terminal\ Services\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+fAllowUnsolicited|\\+fAllowUnsolicitedFullControl)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="901978" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_terminal_server_tampering.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden, David ANDRE, Roberto Rodriguez @Cyb3rWard0g, Nasreddine Bencherchali-->
        <!--Description: Detects tampering of RDP Terminal Service/Server sensitive settings.
Such as allowing unauthorized users access to a system via the 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections'...etc
-->
        <!--Date: 2022/08/06-->
        <!--Status: test-->
        <!--ID: 3f6b7b62-61aa-45db-96bd-9c31b36b653c-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1112</id>
        </mitre>
        <description>RDP Sensitive Settings Changed</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+services\\+TermService\\+Parameters\\+ServiceDll|\\+Control\\+Terminal\ Server\\+WinStations\\+RDP\-Tcp\\+InitialProgram|\\+Control\\+Terminal\ Server\\+InitialProgram|SOFTWARE\\+Policies\\+Microsoft\\+Windows\ NT\\+Terminal\ Services\\+InitialProgram</field>
    </rule>
    <rule id="901979" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_disable_autologger_sessions.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects tampering with autologger trace sessions which is a technique used by attackers to disable logging-->
        <!--Date: 2022/08/01-->
        <!--Status: experimental-->
        <!--ID: f37b4bce-49d0-4087-9f5b-58bffda77316-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Potential AutoLogger Sessions Tampering</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+System\\+CurrentControlSet\\+Control\\+WMI\\+Autologger\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+EventLog\-|\\+Defender</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Enable|\\+Start)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+system32\\+wevtutil\.exe</field>
    </rule>
    <rule id="901980" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_mal_blue_mockingbird.yml</info>
        <!--Sigma Rule Author: Trent Liffick (@tliffick)-->
        <!--Description: Attempts to detect system changes made by Blue Mockingbird-->
        <!--Date: 2020/05/14-->
        <!--Status: experimental-->
        <!--ID: 92b0b372-a939-44ed-a11b-5136cf680e27-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1112</id>
            <id>attack.t1047</id>
        </mitre>
        <description>Blue Mockingbird - Registry</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+CurrentControlSet\\+Services\\+wercplsupport\\+Parameters\\+ServiceDll)$</field>
    </rule>
    <rule id="901981" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_allow_rdp_remote_assistance_feature.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect enable rdp feature to allow specific user to rdp connect on the targeted machine-->
        <!--Date: 2022/08/19-->
        <!--Status: experimental-->
        <!--ID: 37b437cf-3fc5-4c8e-9c94-1d7c9aff842b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Allow RDP Remote Assistance Feature</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:System\\+CurrentControlSet\\+Control\\+Terminal\ Server\\+fAllowToGetHelp)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="901982" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_deviceguard_hypervisorenforcedcodeintegrity_disabled.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Anish Bogati-->
        <!--Description: Detects changes to the HypervisorEnforcedCodeIntegrity registry key and the "Enabled" value being set to 0 in order to disable the Hypervisor Enforced Code Integrity feature. This allows an attacker to load unsigned and untrusted code to be run in the kernel-->
        <!--Date: 2023/03/14-->
        <!--Status: experimental-->
        <!--ID: 8b7273a4-ba5d-4d8a-b04f-11f2900d043a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Hypervisor Enforced Code Integrity Disabled</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Control\\+DeviceGuard\\+Scenarios\\+HypervisorEnforcedCodeIntegrity\\+Enabled)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="901983" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_susp_keyboard_layout_load.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems)-->
        <!--Description: Detects the keyboard preload installation with a suspicious keyboard layout, e.g. Chinese, Iranian or Vietnamese layout load in user session on systems maintained by US staff only-->
        <!--Date: 2019/10/12-->
        <!--Status: test-->
        <!--ID: 34aa0252-6039-40ff-951f-939fd6ce47d8-->
        <mitre>
            <id>attack.resource_development</id>
            <id>attack.t1588.002</id>
        </mitre>
        <description>Suspicious Keyboard Layout Load</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Keyboard\ Layout\\+Preload\\+|\\+Keyboard\ Layout\\+Substitutes\\+</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)429|50429|0000042a</field>
    </rule>
    <rule id="901984" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_appx_debugger.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects potential persistence using Appx DebugPath-->
        <!--Date: 2022/07/27-->
        <!--Status: experimental-->
        <!--ID: df4dc653-1029-47ba-8231-3c44238cc0ae-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.015</id>
        </mitre>
        <description>Potential Persistence Using DebugPath</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Classes\\+ActivatableClasses\\+Package\\+Microsoft\.</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+DebugPath)$</field>
    </rule>
    <rule id="901985" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_appx_debugger.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects potential persistence using Appx DebugPath-->
        <!--Date: 2022/07/27-->
        <!--Status: experimental-->
        <!--ID: df4dc653-1029-47ba-8231-3c44238cc0ae-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.015</id>
        </mitre>
        <description>Potential Persistence Using DebugPath</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Software\\+Microsoft\\+Windows\\+CurrentVersion\\+PackagedAppXDebug\\+Microsoft\.</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+\(Default\))$</field>
    </rule>
    <rule id="901986" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_ifilter.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when an attacker register a new IFilter for an extension. Microsoft Windows Search uses filters to extract the content of items for inclusion in a full-text index. You can extend Windows Search to index new or proprietary file types by writing filters to extract the content, and property handlers to extract the properties of files-->
        <!--Date: 2022/07/21-->
        <!--Status: experimental-->
        <!--ID: b23818c7-e575-4d13-8012-332075ec0a2b-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Register New IFiltre For Persistence</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKLM\\+SOFTWARE\\+Classes\\+\.|HKEY_LOCAL_MACHINE\\+SOFTWARE\\+Classes\\+\.)</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+PersistentHandler</field>
    </rule>
    <rule id="901987" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_ifilter.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when an attacker register a new IFilter for an extension. Microsoft Windows Search uses filters to extract the content of items for inclusion in a full-text index. You can extend Windows Search to index new or proprietary file types by writing filters to extract the content, and property handlers to extract the properties of files-->
        <!--Date: 2022/07/21-->
        <!--Status: experimental-->
        <!--ID: b23818c7-e575-4d13-8012-332075ec0a2b-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Register New IFiltre For Persistence</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKLM\\+SOFTWARE\\+Classes\\+CLSID|HKEY_LOCAL_MACHINE\\+SOFTWARE\\+Classes\\+CLSID)</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+PersistentAddinsRegistered\\+\{89BCB740\-6119\-101A\-BCB7\-00DD010655AF\}</field>
    </rule>
    <rule id="901988" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_ifilter.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when an attacker register a new IFilter for an extension. Microsoft Windows Search uses filters to extract the content of items for inclusion in a full-text index. You can extend Windows Search to index new or proprietary file types by writing filters to extract the content, and property handlers to extract the properties of files-->
        <!--Date: 2022/07/21-->
        <!--Status: experimental-->
        <!--ID: b23818c7-e575-4d13-8012-332075ec0a2b-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Register New IFiltre For Persistence</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{4F46F75F\-199F\-4C63\-8B7D\-86D48FE7970C\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{4887767F\-7ADC\-4983\-B576\-88FB643D6F79\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{D3B41FA1\-01E3\-49AF\-AA25\-1D0D824275AE\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{72773E1A\-B711\-4d8d\-81FA\-B9A43B0650DD\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{098f2470\-bae0\-11cd\-b579\-08002b30bfeb\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{1AA9BF05\-9A97\-48c1\-BA28\-D9DCE795E93C\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{2e2294a9\-50d7\-4fe7\-a09f\-e6492e185884\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{34CEAC8D\-CBC0\-4f77\-B7B1\-8A60CB6DA0F7\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{3B224B11\-9363\-407e\-850F\-C9E1FFACD8FB\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{3DDEB7A4\-8ABF\-4D82\-B9EE\-E1F4552E95BE\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{5645C8C1\-E277\-11CF\-8FDA\-00AA00A14F93\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{5645C8C4\-E277\-11CF\-8FDA\-00AA00A14F93\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{58A9EBF6\-5755\-4554\-A67E\-A2467AD1447B\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{5e941d80\-bf96\-11cd\-b579\-08002b30bfeb\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{698A4FFC\-63A3\-4E70\-8F00\-376AD29363FB\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{7E9D8D44\-6926\-426F\-AA2B\-217A819A5CCE\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{8CD34779\-9F10\-4f9b\-ADFB\-B3FAEABDAB5A\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{9694E38A\-E081\-46ac\-99A0\-8743C909ACB6\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{98de59a0\-d175\-11cd\-a7bd\-00006b827d94\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{AA10385A\-F5AA\-4EFF\-B3DF\-71B701E25E18\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{B4132098\-7A03\-423D\-9463\-163CB07C151F\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{d044309b\-5da6\-4633\-b085\-4ed02522e5a5\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{D169C14A\-5148\-4322\-92C8\-754FC9D018D8\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{DD75716E\-B42E\-4978\-BB60\-1497B92E30C4\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{E2F83EED\-62DE\-4A9F\-9CD0\-A1D40DCD13B6\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{E772CEB3\-E203\-4828\-ADF1\-765713D981B8\}\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{eec97550\-47a9\-11cf\-b952\-00aa0051fe20\}</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+CLSID\\+\{FB10BD80\-A331\-4e9e\-9EB7\-00279903AD99\}\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Windows\\+System32\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\ \(x86\)\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+)</field>
    </rule>
    <rule id="901989" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_disable_system_restore.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the modification of the registry to disable a system restore on the computer-->
        <!--Date: 2022/04/04-->
        <!--Status: experimental-->
        <!--ID: 5de03871-5d46-4539-a82d-3aa992a69a83-->
        <mitre>
            <id>attack.impact</id>
            <id>attack.t1490</id>
        </mitre>
        <description>Registry Disable System Restore</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Policies\\+Microsoft\\+Windows\ NT\\+SystemRestore|\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+SystemRestore</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:DisableConfig|DisableSR)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="901990" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_office_outlook_enable_macro_execution.yml</info>
        <!--Sigma Rule Author: @ScoubiMtl-->
        <!--Description: Detects the modification of Outlook security setting to allow unprompted execution of macros.-->
        <!--Date: 2021/04/05-->
        <!--Status: test-->
        <!--ID: e3b50fa5-3c3f-444e-937b-0a99d33731cd-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.command_and_control</id>
            <id>attack.t1137</id>
            <id>attack.t1008</id>
            <id>attack.t1546</id>
        </mitre>
        <description>Outlook Macro Execution Without Warning Setting Enabled</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Outlook\\+Security\\+Level)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)0x00000001</field>
    </rule>
    <rule id="901991" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_ie_security_zone_protocol_defaults_downgrade.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Michael Haag (idea)-->
        <!--Description: Detects changes to Internet Explorer's (IE / Windows Internet properties) ZoneMap configuration of the "HTTP" and "HTTPS" protocols to point to the "My Computer" zone. This allows downloaded files from the Internet to be granted the same level of trust as files stored locally.
-->
        <!--Date: 2023/09/05-->
        <!--Status: experimental-->
        <!--ID: 3fd4c8d7-8362-4557-a8e6-83b29cc0d724-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>IE ZoneMap Setting Downgraded To MyComputer Zone For HTTP Protocols</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Microsoft\\+Windows\\+CurrentVersion\\+Internet\ Settings\\+ZoneMap\\+ProtocolDefaults</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+http|\\+https)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="901992" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_change_rdp_port.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Remote desktop is a common feature in operating systems.
It allows a user to log into an interactive session with a system desktop graphical user interface on a remote system.
Microsoft refers to its implementation of the Remote Desktop Protocol (RDP) as Remote Desktop Services (RDS).
-->
        <!--Date: 2022/01/01-->
        <!--Status: test-->
        <!--ID: 509e84b9-a71a-40e0-834f-05470369bd1e-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.010</id>
        </mitre>
        <description>Changing RDP Port to Non Standard Number</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\+System\\+CurrentControlSet\\+Control\\+Terminal\ Server\\+WinStations\\+RDP\-Tcp\\+PortNumber</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)DWORD\ \(0x00000d3d\)</field>
    </rule>
    <rule id="901993" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_asep_reg_keys_modification_common.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, Daniil Yugoslavskiy, Gleb Sukhodolskiy, Timur Zinniatullin, oscd.community, Tim Shelton, frack113 (split), wagga (name)-->
        <!--Description: Detects modification of autostart extensibility point (ASEP) in registry.-->
        <!--Date: 2019/10/25-->
        <!--Status: experimental-->
        <!--ID: f59c3faf-50f3-464b-9f4c-1b67ab512d99-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Common Autorun Keys Modification</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Wow6432Node\\+Microsoft\\+Windows\ CE\ Services\\+AutoStart|\\+Software\\+Wow6432Node\\+Microsoft\\+Command\ Processor\\+Autorun|\\+SOFTWARE\\+Wow6432Node\\+Microsoft\\+Active\ Setup\\+Installed\ Components|\\+SOFTWARE\\+Microsoft\\+Windows\ CE\ Services\\+AutoStartOnDisconnect|\\+SOFTWARE\\+Microsoft\\+Windows\ CE\ Services\\+AutoStartOnConnect|\\+SYSTEM\\+Setup\\+CmdLine|\\+Software\\+Microsoft\\+Ctf\\+LangBarAddin|\\+Software\\+Microsoft\\+Command\ Processor\\+Autorun|\\+SOFTWARE\\+Microsoft\\+Active\ Setup\\+Installed\ Components|\\+SOFTWARE\\+Classes\\+Protocols\\+Handler|\\+SOFTWARE\\+Classes\\+Protocols\\+Filter|\\+SOFTWARE\\+Classes\\+Htmlfile\\+Shell\\+Open\\+Command\\+\(Default\)|\\+Environment\\+UserInitMprLogonScript|\\+SOFTWARE\\+Policies\\+Microsoft\\+Windows\\+Control\ Panel\\+Desktop\\+Scrnsave\.exe|\\+Software\\+Microsoft\\+Internet\ Explorer\\+UrlSearchHooks|\\+SOFTWARE\\+Microsoft\\+Internet\ Explorer\\+Desktop\\+Components|\\+Software\\+Classes\\+Clsid\\+\{AB8902B4\-09CA\-4bb6\-B78D\-A8F59079A8D5\}\\+Inprocserver32|\\+Control\ Panel\\+Desktop\\+Scrnsave\.exe</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\(Empty\)</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+Office\\+ClickToRun\\+REGISTRY\\+MACHINE\\+Software\\+Classes\\+PROTOCOLS\\+Handler\\+</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+ClickToRunStore\\+HKMU\\+SOFTWARE\\+Classes\\+PROTOCOLS\\+Handler\\+</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\{314111c7\-a502\-11d2\-bbca\-00c04f8ec294\}</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\{3459B272\-CC19\-4448\-86C9\-DDC3B4B2FAD3\}</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\{42089D2D\-912D\-4018\-9087\-2B87803E93FB\}</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\{5504BE45\-A83B\-4808\-900A\-3A5C36E7F77A\}</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\{807583E5\-5146\-11D5\-A672\-00B0D022E945\}</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Active\ Setup\\+Installed\ Components\\+\{8A69D345\-D564\-463c\-AFF1\-A69D9E530F96\}</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Active\ Setup\\+Installed\ Components\\+\{9459C573\-B17A\-45AE\-9F64\-1857B5D58CEE\}</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+Software\\+Microsoft\\+Active\ Setup\\+Installed\ Components\\+\{89820200\-ECBD\-11cf\-8B85\-00AA005B4383\}</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+poqexec\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Program\ Files\ \(x86\)\\+Microsoft\ Office\\+root\\+integration\\+integrator\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Common\ Files\\+Microsoft\ Shared\\+ClickToRun\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)^(?:C:\\+Program\ Files\\+Common\ Files\\+Microsoft\ Shared\\+ClickToRun\\+Updates\\+)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+OfficeClickToRun\.exe)$</field>
    </rule>
    <rule id="901994" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_netsh_helper_dll_potential_persistence.yml</info>
        <!--Sigma Rule Author: Anish Bogati-->
        <!--Description: Detects changes to the Netsh registry key to add a new DLL value. This change might be an indication of a potential persistence attempt by adding a malicious Netsh helper
-->
        <!--Date: 2023/11/28-->
        <!--Status: experimental-->
        <!--ID: c90362e0-2df3-4e61-94fe-b37615814cb1-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.007</id>
        </mitre>
        <description>Potential Persistence Via Netsh Helper DLL - Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+NetSh</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\.dll</field>
    </rule>
    <rule id="901995" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_change_security_zones.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Hides the file extension through modification of the registry-->
        <!--Date: 2022/01/22-->
        <!--Status: experimental-->
        <!--ID: 45e112d0-7759-4c2a-aa36-9f8fb79d3393-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137</id>
        </mitre>
        <description>IE Change Domain Zone</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Internet\ Settings\\+ZoneMap\\+Domains\\+</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\(Empty\)</field>
    </rule>
    <rule id="901996" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_event_viewer_events_asp.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potential registry persistence technique using the Event Viewer "Events.asp" technique-->
        <!--Date: 2023/02/17-->
        <!--Status: test-->
        <!--ID: a1e11042-a74a-46e6-b07c-c4ce8ecc239b-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Potential Persistence Via Event Viewer Events.asp</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+Event\ Viewer\\+MicrosoftRedirectionProgram|\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+Event\ Viewer\\+MicrosoftRedirectionURL</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:C:\\+WINDOWS\\+system32\\+svchost\.exe)$</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)(?:\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+Event\ Viewer\\+MicrosoftRedirectionProgram)$</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)%%SystemRoot%%\\+PCHealth\\+HelpCtr\\+Binaries\\+HelpCtr\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:C:\\+WINDOWS\\+system32\\+svchost\.exe)$</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)(?:\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+Event\ Viewer\\+MicrosoftRedirectionProgramCommandLineParameters)$</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\-url\ hcp://services/centers/support.topic=%%s</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)http://go\.microsoft\.com/fwlink/events\.asp</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\(Empty\)</field>
    </rule>
    <rule id="901997" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_lsa_extension.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when an attacker modifies the "REG_MULTI_SZ" value named "Extensions" to include a custom DLL to achieve persistence via lsass.
The "Extensions" list contains filenames of DLLs being automatically loaded by lsass.exe. Each DLL has its InitializeLsaExtension() method called after loading.
-->
        <!--Date: 2022/07/21-->
        <!--Status: experimental-->
        <!--ID: 41f6531d-af6e-4c6e-918f-b946f2b85a36-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Potential Persistence Via LSA Extensions</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SYSTEM\\+CurrentControlSet\\+Control\\+LsaExtensionConfig\\+LsaSrv\\+Extensions</field>
    </rule>
    <rule id="901998" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_winlogon_notify_key.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may abuse features of Winlogon to execute DLLs and/or executables when a user logs in.
Winlogon.exe is a Windows component responsible for actions at logon/logoff as well as the secure attention sequence (SAS) triggered by Ctrl-Alt-Delete.
-->
        <!--Date: 2021/12/30-->
        <!--Status: test-->
        <!--ID: bbf59793-6efb-4fa1-95ca-a7d288e52c88-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.004</id>
        </mitre>
        <description>Winlogon Notify Key Logon Persistence</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+SOFTWARE\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+Winlogon\\+Notify\\+logon)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)(?:\.dll)$</field>
    </rule>
    <rule id="901999" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_winget_admin_settings_tampering.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects changes to the AppInstaller (winget) admin settings. Such as enabling local manifest installations or disabling installer hash checks-->
        <!--Date: 2023/04/17-->
        <!--Status: experimental-->
        <!--ID: 6db5eaf9-88f7-4ed9-af7d-9ef2ad12f236-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
        </mitre>
        <description>Winget Admin Settings Modification</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+winget\.exe)$</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:\\+REGISTRY\\+A\\+)</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+LocalState\\+admin_settings)$</field>
    </rule>
    <rule id="902000" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_new_application_appcompat.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: A General detection for a new application in AppCompat. This indicates an application executing for the first time on an endpoint.-->
        <!--Date: 2020/05/02-->
        <!--Status: test-->
        <!--ID: 60936b49-fca0-4f32-993d-7415edcf9a5d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1204.002</id>
        </mitre>
        <description>New Application in AppCompat</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+AppCompatFlags\\+Compatibility\ Assistant\\+Store\\+</field>
    </rule>
    <rule id="902001" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_disable_privacy_settings_experience.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects registry modifications that disable Privacy Settings Experience-->
        <!--Date: 2022/10/02-->
        <!--Status: experimental-->
        <!--ID: 0372e1f9-0fd2-40f7-be1b-a7b2b848fa7b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Disable Privacy Settings Experience in Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+SOFTWARE\\+Policies\\+Microsoft\\+Windows\\+OOBE\\+DisablePrivacyExperience)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="902002" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_asep_reg_keys_modification_session_manager.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, Daniil Yugoslavskiy, Gleb Sukhodolskiy, Timur Zinniatullin, oscd.community, Tim Shelton, frack113 (split)-->
        <!--Description: Detects modification of autostart extensibility point (ASEP) in registry.-->
        <!--Date: 2019/10/25-->
        <!--Status: test-->
        <!--ID: 046218bd-e0d8-4113-a3c3-895a12b2b298-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
            <id>attack.t1546.009</id>
        </mitre>
        <description>Session Manager Autorun Keys Modification</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+System\\+CurrentControlSet\\+Control\\+Session\ Manager</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SetupExecute|\\+S0InitialCommand|\\+KnownDlls|\\+Execute|\\+BootExecute|\\+AppCertDlls</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\(Empty\)</field>
    </rule>
    <rule id="902003" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_disable_defender_firewall.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may disable or modify system firewalls in order to bypass controls limiting network usage-->
        <!--Date: 2022/01/09-->
        <!--Status: test-->
        <!--ID: 974515da-6cc5-4c95-ae65-f97f9150ec7f-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>Disable Microsoft Defender Firewall via Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKLM\\+System\\+CurrentControlSet\\+Services\\+SharedAccess\\+Parameters\\+FirewallPolicy\\+)</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+EnableFirewall)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="902004" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_asep_reg_keys_modification_classes.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, Daniil Yugoslavskiy, Gleb Sukhodolskiy, Timur Zinniatullin, oscd.community, Tim Shelton, frack113 (split)-->
        <!--Description: Detects modification of autostart extensibility point (ASEP) in registry.-->
        <!--Date: 2019/10/25-->
        <!--Status: experimental-->
        <!--ID: 9df5f547-c86a-433e-b533-f2794357e242-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>Classes Autorun Keys Modification</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Software\\+Classes</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Folder\\+ShellEx\\+ExtShellFolderViews|\\+Folder\\+ShellEx\\+DragDropHandlers|\\+Folder\\+Shellex\\+ColumnHandlers|\\+Filter|\\+Exefile\\+Shell\\+Open\\+Command\\+\(Default\)|\\+Directory\\+Shellex\\+DragDropHandlers|\\+Directory\\+Shellex\\+CopyHookHandlers|\\+CLSID\\+\{AC757296\-3522\-4E11\-9862\-C17BE5A1767E\}\\+Instance|\\+CLSID\\+\{ABE3B9A4\-257D\-4B97\-BD1A\-294AF496222E\}\\+Instance|\\+CLSID\\+\{7ED96837\-96F0\-4812\-B211\-F13C24117ED3\}\\+Instance|\\+CLSID\\+\{083863F1\-70DE\-11d0\-BD40\-00A0C911CE86\}\\+Instance|\\+Classes\\+AllFileSystemObjects\\+ShellEx\\+DragDropHandlers|\\+\.exe|\\+\.cmd|\\+ShellEx\\+PropertySheetHandlers|\\+ShellEx\\+ContextMenuHandlers</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\(Empty\)</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\{807583E5\-5146\-11D5\-A672\-00B0D022E945\}</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+drvinst\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+svchost\.exe</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+lnkfile\\+shellex\\+ContextMenuHandlers\\+</field>
    </rule>
    <rule id="902005" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_bypass_uac_using_eventviewer.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Bypasses User Account Control using Event Viewer and a relevant Windows Registry modification-->
        <!--Date: 2022/01/05-->
        <!--Status: experimental-->
        <!--ID: 674202d0-b22a-4af4-ae5f-2eda1f3da1af-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.010</id>
        </mitre>
        <description>Bypass UAC Using Event Viewer</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:_Classes\\+mscfile\\+shell\\+open\\+command\\+\(Default\))$</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)^(?:%SystemRoot%\\+system32\\+mmc\.exe\ "%1"\ %)</field>
    </rule>
    <rule id="902006" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_typed_paths.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects modification addition to the 'TypedPaths' key in the user or admin registry from a non standard application. Which might indicate persistence attempt-->
        <!--Date: 2022/08/22-->
        <!--Status: experimental-->
        <!--ID: 086ae989-9ca6-4fe7-895a-759c5544f247-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Potential Persistence Via TypedPaths</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Software\\+Microsoft\\+Windows\\+CurrentVersion\\+Explorer\\+TypedPaths\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+explorer\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+SysWOW64\\+explorer\.exe</field>
    </rule>
    <rule id="902007" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_dbgmanageddebugger_persistence.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects the addition of the "Debugger" value to the "DbgManagedDebugger" key in order to achieve persistence. Which will get invoked when an application crashes-->
        <!--Date: 2022/08/07-->
        <!--Status: experimental-->
        <!--ID: 9827ae57-3802-418f-994b-d5ecf5cd974b-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1574</id>
        </mitre>
        <description>Potential Registry Persistence Attempt Via DbgManagedDebugger</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Microsoft\\+\.NETFramework\\+DbgManagedDebugger)$</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)"C:\\+Windows\\+system32\\+vsjitdebugger\.exe"\ PID\ %d\ APPDOM\ %d\ EXTEXT\ "%s"\ EVTHDL\ %d</field>
    </rule>
    <rule id="902008" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_disable_administrative_share.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Administrative shares are hidden network shares created by Microsoft Windows NT operating systems that grant system administrators remote access to every disk volume on a network-connected system-->
        <!--Date: 2022/01/16-->
        <!--Status: test-->
        <!--ID: c7dcacd0-cc59-4004-b0a4-1d6cdebe6f3e-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1070.005</id>
        </mitre>
        <description>Disable Administrative Share Creation at Startup</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKLM\\+System\\+CurrentControlSet\\+Services\\+LanmanServer\\+Parameters\\+)</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:AutoShareWks|AutoShareServer)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="902009" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_autodial_dll.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects change the the "AutodialDLL" key which could be used as a persistence method to load custom DLL via the "ws2_32" library-->
        <!--Date: 2022/08/10-->
        <!--Status: experimental-->
        <!--ID: e6fe26ee-d063-4f5b-b007-39e90aaf50e3-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Potential Persistence Via AutodialDLL</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Services\\+WinSock2\\+Parameters\\+AutodialDLL</field>
    </rule>
    <rule id="902010" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_globalflags.yml</info>
        <!--Sigma Rule Author: Karneades, Jonhnathan Ribeiro, Florian Roth-->
        <!--Description: Detects registry persistence technique using the GlobalFlags and SilentProcessExit keys-->
        <!--Date: 2018/04/11-->
        <!--Status: test-->
        <!--ID: 36803969-5421-41ec-b92f-8500f79c23b0-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1546.012</id>
            <id>car.2013-01-002</id>
        </mitre>
        <description>Potential Persistence Via GlobalFlags</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Image\ File\ Execution\ Options\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+GlobalFlag</field>
    </rule>
    <rule id="902011" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_globalflags.yml</info>
        <!--Sigma Rule Author: Karneades, Jonhnathan Ribeiro, Florian Roth-->
        <!--Description: Detects registry persistence technique using the GlobalFlags and SilentProcessExit keys-->
        <!--Date: 2018/04/11-->
        <!--Status: test-->
        <!--ID: 36803969-5421-41ec-b92f-8500f79c23b0-->
        <mitre>
            <id>attack.privilege_escalation</id>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1546.012</id>
            <id>car.2013-01-002</id>
        </mitre>
        <description>Potential Persistence Via GlobalFlags</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SilentProcessExit\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+ReportingMode|\\+MonitorProcess</field>
    </rule>
    <rule id="902012" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_uac_bypass_sdclt.yml</info>
        <!--Sigma Rule Author: Omer Yampel, Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using registry key manipulation of sdclt.exe (e.g. UACMe 53)-->
        <!--Date: 2017/03/17-->
        <!--Status: experimental-->
        <!--ID: 5b872a46-3b90-45c1-8419-f675db8053aa-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
            <id>car.2019-04-001</id>
        </mitre>
        <description>UAC Bypass via Sdclt</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:Software\\+Classes\\+exefile\\+shell\\+runas\\+command\\+isolatedCommand)$</field>
    </rule>
    <rule id="902013" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_uac_bypass_sdclt.yml</info>
        <!--Sigma Rule Author: Omer Yampel, Christian Burkard (Nextron Systems)-->
        <!--Description: Detects the pattern of UAC Bypass using registry key manipulation of sdclt.exe (e.g. UACMe 53)-->
        <!--Date: 2017/03/17-->
        <!--Status: experimental-->
        <!--ID: 5b872a46-3b90-45c1-8419-f675db8053aa-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1548.002</id>
            <id>car.2019-04-001</id>
        </mitre>
        <description>UAC Bypass via Sdclt</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:Software\\+Classes\\+Folder\\+shell\\+open\\+command\\+SymbolicLinkValue)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)-1[0-9]{3}\\+Software\\+Classes\\+</field>
    </rule>
    <rule id="902014" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_cobaltstrike_service_installs.yml</info>
        <!--Sigma Rule Author: Wojciech Lesicki-->
        <!--Description: Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement.
We can also catch this by system log 7045 (https://github.com/SigmaHQ/sigma/blob/master/rules/windows/builtin/win_cobaltstrike_service_installs.yml)
In some SIEM you can catch those events also in HKLM\System\ControlSet001\Services or HKLM\System\ControlSet002\Services, however, this rule is based on a regular sysmon's events.
-->
        <!--Date: 2021/06/29-->
        <!--Status: test-->
        <!--ID: 61a7697c-cb79-42a8-a2ff-5f0cdfae0130-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>CobaltStrike Service Installations in Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\+System\\+CurrentControlSet\\+Services</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)ADMIN\$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\.exe</field>
    </rule>
    <rule id="902015" level="15">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_cobaltstrike_service_installs.yml</info>
        <!--Sigma Rule Author: Wojciech Lesicki-->
        <!--Description: Detects known malicious service installs that appear in cases in which a Cobalt Strike beacon elevates privileges or lateral movement.
We can also catch this by system log 7045 (https://github.com/SigmaHQ/sigma/blob/master/rules/windows/builtin/win_cobaltstrike_service_installs.yml)
In some SIEM you can catch those events also in HKLM\System\ControlSet001\Services or HKLM\System\ControlSet002\Services, however, this rule is based on a regular sysmon's events.
-->
        <!--Date: 2021/06/29-->
        <!--Status: test-->
        <!--ID: 61a7697c-cb79-42a8-a2ff-5f0cdfae0130-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.privilege_escalation</id>
            <id>attack.lateral_movement</id>
            <id>attack.t1021.002</id>
            <id>attack.t1543.003</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>CobaltStrike Service Installations in Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)HKLM\\+System\\+CurrentControlSet\\+Services</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)%COMSPEC%</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)start</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)powershell</field>
    </rule>
    <rule id="902016" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_set_nopolicies_user.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects registry modifications that disable internal tools or functions in explorer (malware like Agent Tesla uses this technique)-->
        <!--Date: 2022/03/18-->
        <!--Status: test-->
        <!--ID: 1c3121ed-041b-4d97-a075-07f54f20fb4a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Registry Explorer Policy Modification</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Explorer\\+NoLogOff|SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Explorer\\+NoDesktop|SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Explorer\\+NoRun|SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Explorer\\+NoFind|SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Explorer\\+NoControlPanel|SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Explorer\\+NoFileMenu|SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Explorer\\+NoClose|SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Explorer\\+NoSetTaskbar|SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Explorer\\+NoPropertiesMyDocuments|SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Explorer\\+NoTrayContextMenu)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="902017" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_disable_windows_firewall.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect set EnableFirewall to 0 to disable the Windows firewall-->
        <!--Date: 2022/08/19-->
        <!--Status: experimental-->
        <!--ID: e78c408a-e2ea-43cd-b5ea-51975cf358c0-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.004</id>
        </mitre>
        <description>Disable Windows Firewall by Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+SOFTWARE\\+Policies\\+Microsoft\\+WindowsFirewall\\+StandardProfile\\+EnableFirewall|\\+SOFTWARE\\+Policies\\+Microsoft\\+WindowsFirewall\\+DomainProfile\\+EnableFirewall)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="902018" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_ime_non_default_extension.yml</info>
        <!--Sigma Rule Author: X__Junior (Nextron Systems)-->
        <!--Description: Detects usage of Windows Input Method Editor (IME) keyboard layout feature, which allows an attacker to load a DLL into the process after sending the WM_INPUTLANGCHANGEREQUEST message.
Before doing this, the client needs to register the DLL in a special registry key that is assumed to implement this keyboard layout. This registry key should store a value named "Ime File" with a DLL path.
IMEs are essential for languages that have more characters than can be represented on a standard keyboard, such as Chinese, Japanese, and Korean.
-->
        <!--Date: 2023/11/21-->
        <!--Status: experimental-->
        <!--ID: b888e3f2-224d-4435-b00b-9dd66e9ea1f1-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Uncommon Extension In Keyboard Layout IME File Registry Value</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Control\\+Keyboard\ Layouts\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Ime\ File</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)(?:\.ime)$</field>
    </rule>
    <rule id="902019" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_powershell_execution_policy.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects changes to the PowerShell execution policy in order to bypass signing requirements for script execution-->
        <!--Date: 2023/01/11-->
        <!--Status: experimental-->
        <!--ID: fad91067-08c5-4d1a-8d8c-d96a21b37814-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Potential PowerShell Execution Policy Tampering</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+ShellIds\\+Microsoft\.PowerShell\\+ExecutionPolicy|\\+Policies\\+Microsoft\\+Windows\\+PowerShell\\+ExecutionPolicy)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)Bypass|RemoteSigned|Unrestricted</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+System32\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Windows\\+SysWOW64\\+</field>
    </rule>
    <rule id="902020" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_policies_attachments_tamper.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects tampering with attachment manager settings policies attachments (See reference for more information)-->
        <!--Date: 2022/08/01-->
        <!--Status: experimental-->
        <!--ID: ee77a5db-b0f3-4be2-bfd4-b58be1c6b15a-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Potential Attachment Manager Settings Attachments Tamper</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Attachments\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+HideZoneInfoOnProperties)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="902021" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_policies_attachments_tamper.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects tampering with attachment manager settings policies attachments (See reference for more information)-->
        <!--Date: 2022/08/01-->
        <!--Status: experimental-->
        <!--ID: ee77a5db-b0f3-4be2-bfd4-b58be1c6b15a-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Potential Attachment Manager Settings Attachments Tamper</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Attachments\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+SaveZoneInformation)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000002\)</field>
    </rule>
    <rule id="902022" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_policies_attachments_tamper.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects tampering with attachment manager settings policies attachments (See reference for more information)-->
        <!--Date: 2022/08/01-->
        <!--Status: experimental-->
        <!--ID: ee77a5db-b0f3-4be2-bfd4-b58be1c6b15a-->
        <mitre>
            <id>attack.defense_evasion</id>
        </mitre>
        <description>Potential Attachment Manager Settings Attachments Tamper</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Attachments\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+ScanWithAntiVirus)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="902023" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_wab_dllpath_reg_change.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: This rule detects that the path to the DLL written in the registry is different from the default one. Launched WAB.exe tries to load the DLL from Registry.-->
        <!--Date: 2020/10/13-->
        <!--Status: test-->
        <!--ID: fc014922-5def-4da9-a0fc-28c973f41bfb-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1218</id>
        </mitre>
        <description>Execution DLL of Choice Using WAB.EXE</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Software\\+Microsoft\\+WAB\\+DLLPath)$</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)%CommonProgramFiles%\\+System\\+wab32\.dll</field>
    </rule>
    <rule id="902024" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_aedebug_persistence.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when an attacker adds a new "Debugger" value to the "AeDebug" key in order to achieve persistence which will get invoked when an application crashes-->
        <!--Date: 2022/07/21-->
        <!--Status: experimental-->
        <!--ID: 092af964-4233-4373-b4ba-d86ea2890288-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Add Debugger Entry To AeDebug For Persistence</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+AeDebug\\+Debugger</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)(?:\.dll)$</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)"C:\\+WINDOWS\\+system32\\+vsjitdebugger\.exe"\ \-p\ %ld\ \-e\ %ld\ \-j\ 0x%p</field>
    </rule>
    <rule id="902025" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_asep_reg_keys_modification_currentcontrolset.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, Daniil Yugoslavskiy, Gleb Sukhodolskiy, Timur Zinniatullin, oscd.community, Tim Shelton, frack113 (split)-->
        <!--Description: Detects modification of autostart extensibility point (ASEP) in registry.-->
        <!--Date: 2019/10/25-->
        <!--Status: experimental-->
        <!--ID: f674e36a-4b91-431e-8aef-f8a96c2aca35-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>CurrentControlSet Autorun Keys Modification</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SYSTEM\\+CurrentControlSet\\+Control</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Terminal\ Server\\+WinStations\\+RDP\-Tcp\\+InitialProgram|\\+Terminal\ Server\\+Wds\\+rdpwd\\+StartupPrograms|\\+SecurityProviders\\+SecurityProviders|\\+SafeBoot\\+AlternateShell|\\+Print\\+Providers|\\+Print\\+Monitors|\\+NetworkProvider\\+Order|\\+Lsa\\+Notification\ Packages|\\+Lsa\\+Authentication\ Packages|\\+BootVerificationProgram\\+ImagePath</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\(Empty\)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+spoolsv\.exe</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)\\+Print\\+Monitors\\+CutePDF\ Writer\ Monitor</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)cpwmon64_v40\.dll</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)CutePDF\ Writer</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+spoolsv\.exe</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)Print\\+Monitors\\+Appmon\\+Ports\\+Microsoft\.Office\.OneNote_</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)AUTHORI</field>
        <field name="win.eventdata.user" negate="yes" type="pcre2">(?i)AUTORI</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+poqexec\.exe</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)(?:\\+NetworkProvider\\+Order\\+ProviderOrder)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+spoolsv\.exe</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)(?:\\+Print\\+Monitors\\+MONVNC\\+Driver)$</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)VNCpm\.dll</field>
    </rule>
    <rule id="902026" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_winlogon_allow_multiple_tssessions.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when the 'AllowMultipleTSSessions' value is enabled.
Which allows for multiple Remote Desktop connection sessions to be opened at once.
This is often used by attacker as a way to connect to an RDP session without disconnecting the other users
-->
        <!--Date: 2022/09/09-->
        <!--Status: experimental-->
        <!--ID: f7997770-92c3-4ec9-b112-774c4ef96f96-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Winlogon AllowMultipleTSSessions Enable</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+Winlogon\\+AllowMultipleTSSessions)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)(?:DWORD\ \(0x00000001\))$</field>
    </rule>
    <rule id="902027" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_hhctrl_persistence.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects when an attacker modifies the registry value of the "hhctrl" to point to a custom binary-->
        <!--Date: 2022/07/21-->
        <!--Status: experimental-->
        <!--ID: f10ed525-97fe-4fed-be7c-2feecca941b1-->
        <mitre>
            <id>attack.persistence</id>
        </mitre>
        <description>Persistence Via Hhctrl.ocx</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+CLSID\\+\{52A2AAAE\-085D\-4187\-97EA\-8C30DB990436\}\\+InprocServer32\\+\(Default\)</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+hhctrl\.ocx</field>
    </rule>
    <rule id="902028" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_lolbin_onedrivestandaloneupdater.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects setting a custom URL for OneDriveStandaloneUpdater.exe to download a file from the Internet without executing any
anomalous executables with suspicious arguments. The downloaded file will be in C:\Users\redacted\AppData\Local\Microsoft\OneDrive\StandaloneUpdaterreSignInSettingsConfig.json
-->
        <!--Date: 2022/05/28-->
        <!--Status: experimental-->
        <!--ID: 3aff0be0-7802-4a7e-a4fa-c60c74bc5e1d-->
        <mitre>
            <id>attack.command_and_control</id>
            <id>attack.t1105</id>
        </mitre>
        <description>Lolbas OneDriveStandaloneUpdater.exe Proxy Download</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+OneDrive\\+UpdateOfficeConfig\\+UpdateRingSettingURLFromOC</field>
    </rule>
    <rule id="902029" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_mal_adwind.yml</info>
        <!--Sigma Rule Author: Florian Roth (Nextron Systems), Tom Ueltschi, Jonhnathan Ribeiro, oscd.community-->
        <!--Description: Detects javaw.exe in AppData folder as used by Adwind / JRAT-->
        <!--Date: 2017/11/10-->
        <!--Status: experimental-->
        <!--ID: 42f0e038-767e-4b85-9d96-2c6335bad0b5-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1059.005</id>
            <id>attack.t1059.007</id>
        </mitre>
        <description>Adwind RAT / JRAT - Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKLM\\+SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Run)</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)^(?:%AppData%\\+Roaming\\+Oracle\\+bin\\+)</field>
    </rule>
    <rule id="902030" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_dot_net_etw_tamper.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Potential adversaries stopping ETW providers recording loaded .NET assemblies.-->
        <!--Date: 2020/06/05-->
        <!--Status: test-->
        <!--ID: bf4fc428-dcc3-4bbd-99fe-2422aeee2544-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
            <id>attack.t1562</id>
        </mitre>
        <description>ETW Logging Disabled In .NET Processes - Sysmon Registry</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:SOFTWARE\\+Microsoft\\+\.NETFramework\\+ETWEnabled)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="902031" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_dot_net_etw_tamper.yml</info>
        <!--Sigma Rule Author: Roberto Rodriguez (Cyb3rWard0g), OTR (Open Threat Research)-->
        <!--Description: Potential adversaries stopping ETW providers recording loaded .NET assemblies.-->
        <!--Date: 2020/06/05-->
        <!--Status: test-->
        <!--ID: bf4fc428-dcc3-4bbd-99fe-2422aeee2544-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
            <id>attack.t1562</id>
        </mitre>
        <description>ETW Logging Disabled In .NET Processes - Sysmon Registry</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+COMPlus_ETWEnabled|\\+COMPlus_ETWFlags)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)0|DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="902032" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_servicedll_hijack.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects changes to the "ServiceDLL" value related to a service in the registry. This is often used as a method of persistence.-->
        <!--Date: 2022/02/04-->
        <!--Status: experimental-->
        <!--ID: 612e47e9-8a59-43a6-b404-f48683f45bd6-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.privilege_escalation</id>
            <id>attack.t1543.003</id>
        </mitre>
        <description>ServiceDll Hijack</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)^(?:HKLM\\+System\\+CurrentControlSet\\+Services\\+)</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Parameters\\+ServiceDll)$</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)C:\\+Windows\\+system32\\+spool\\+drivers\\+x64\\+3\\+PrintConfig\.dll</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+system32\\+lsass\.exe</field>
        <field name="win.eventdata.targetObject" negate="yes" type="pcre2">(?i)(?:\\+CurrentControlSet\\+Services\\+NTDS\\+Parameters\\+ServiceDll)$</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)%%systemroot%%\\+system32\\+ntdsa\.dll</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+poqexec\.exe</field>
    </rule>
    <rule id="902033" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_office_outlook_enable_load_macro_provider_on_boot.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects the modification of Outlook setting "LoadMacroProviderOnBoot" which if enabled allows the automatic loading of any configured VBA project/module-->
        <!--Date: 2021/04/05-->
        <!--Status: experimental-->
        <!--ID: 396ae3eb-4174-4b9b-880e-dc0364d78a19-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.command_and_control</id>
            <id>attack.t1137</id>
            <id>attack.t1008</id>
            <id>attack.t1546</id>
        </mitre>
        <description>Potential Persistence Via Outlook LoadMacroProviderOnBoot Setting</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Outlook\\+LoadMacroProviderOnBoot)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)0x00000001</field>
    </rule>
    <rule id="902034" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_disable_security_center_notifications.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect set UseActionCenterExperience to 0 to disable the Windows security center notification-->
        <!--Date: 2022/08/19-->
        <!--Status: experimental-->
        <!--ID: 3ae1a046-f7db-439d-b7ce-b8b366b81fa6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Disable Windows Security Center Notifications</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:Windows\\+CurrentVersion\\+ImmersiveShell\\+UseActionCenterExperience)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="902035" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_sophos_av_tamper.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects tamper attempts to sophos av functionality via registry key modification-->
        <!--Date: 2022/09/02-->
        <!--Status: experimental-->
        <!--ID: 9f4662ac-17ca-43aa-8f12-5d7b989d0101-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Tamper With Sophos AV Registry Keys</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Sophos\ Endpoint\ Defense\\+TamperProtection\\+Config\\+SAVEnabled|\\+Sophos\ Endpoint\ Defense\\+TamperProtection\\+Config\\+SEDEnabled|\\+Sophos\\+SAVService\\+TamperProtection\\+Enabled</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="902036" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_terminal_server_suspicious.yml</info>
        <!--Sigma Rule Author: Samir Bousseaden, David ANDRE, Roberto Rodriguez @Cyb3rWard0g, Nasreddine Bencherchali-->
        <!--Description: Detects tampering of RDP Terminal Service/Server sensitive settings.
Such as allowing unauthorized users access to a system via the 'fAllowUnsolicited' or enabling RDP via 'fDenyTSConnections', etc.
-->
        <!--Date: 2022/09/29-->
        <!--Status: test-->
        <!--ID: a2863fbc-d5cb-48d5-83fb-d976d4b1743b-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.persistence</id>
            <id>attack.t1112</id>
        </mitre>
        <description>RDP Sensitive Settings Changed to Zero</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+fDenyTSConnections|\\+fSingleSessionPerUser|\\+UserAuthentication)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="902037" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_desktop_background_change.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Stephen Lincoln @slincoln-aiq (AttackIQ)-->
        <!--Description: Detects regsitry value settings that would replace the user's desktop background.
This is a common technique used by malware to change the desktop background to a ransom note or other image.
-->
        <!--Date: 2023/12/21-->
        <!--Status: experimental-->
        <!--ID: 85b88e05-dadc-430b-8a9e-53ff1cd30aae-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.impact</id>
            <id>attack.t1112</id>
            <id>attack.t1491.001</id>
        </mitre>
        <description>Potentially Suspicious Desktop Background Change Via Registry</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Control\ Panel\\+Desktop|CurrentVersion\\+Policies\\+ActiveDesktop|CurrentVersion\\+Policies\\+System</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:NoChangingWallpaper)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="902038" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_desktop_background_change.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Stephen Lincoln @slincoln-aiq (AttackIQ)-->
        <!--Description: Detects regsitry value settings that would replace the user's desktop background.
This is a common technique used by malware to change the desktop background to a ransom note or other image.
-->
        <!--Date: 2023/12/21-->
        <!--Status: experimental-->
        <!--ID: 85b88e05-dadc-430b-8a9e-53ff1cd30aae-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.impact</id>
            <id>attack.t1112</id>
            <id>attack.t1491.001</id>
        </mitre>
        <description>Potentially Suspicious Desktop Background Change Via Registry</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Control\ Panel\\+Desktop|CurrentVersion\\+Policies\\+ActiveDesktop|CurrentVersion\\+Policies\\+System</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Wallpaper)$</field>
    </rule>
    <rule id="902039" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_desktop_background_change.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Stephen Lincoln @slincoln-aiq (AttackIQ)-->
        <!--Description: Detects regsitry value settings that would replace the user's desktop background.
This is a common technique used by malware to change the desktop background to a ransom note or other image.
-->
        <!--Date: 2023/12/21-->
        <!--Status: experimental-->
        <!--ID: 85b88e05-dadc-430b-8a9e-53ff1cd30aae-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.impact</id>
            <id>attack.t1112</id>
            <id>attack.t1491.001</id>
        </mitre>
        <description>Potentially Suspicious Desktop Background Change Via Registry</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Control\ Panel\\+Desktop|CurrentVersion\\+Policies\\+ActiveDesktop|CurrentVersion\\+Policies\\+System</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+WallpaperStyle)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)2</field>
    </rule>
    <rule id="902040" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_desktop_background_change.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Stephen Lincoln @slincoln-aiq (AttackIQ)-->
        <!--Description: Detects regsitry value settings that would replace the user's desktop background.
This is a common technique used by malware to change the desktop background to a ransom note or other image.
-->
        <!--Date: 2023/12/21-->
        <!--Status: experimental-->
        <!--ID: 85b88e05-dadc-430b-8a9e-53ff1cd30aae-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.impact</id>
            <id>attack.t1112</id>
            <id>attack.t1491.001</id>
        </mitre>
        <description>Potentially Suspicious Desktop Background Change Via Registry</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Control\ Panel\\+Desktop|CurrentVersion\\+Policies\\+ActiveDesktop|CurrentVersion\\+Policies\\+System</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+svchost\.exe)$</field>
    </rule>
    <rule id="902041" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_powershell_as_service.yml</info>
        <!--Sigma Rule Author: oscd.community, Natalia Shornikova-->
        <!--Description: Detects that a powershell code is written to the registry as a service.-->
        <!--Date: 2020/10/06-->
        <!--Status: test-->
        <!--ID: 4a5f5a5e-ac01-474b-9b4e-d61298c9df1d-->
        <mitre>
            <id>attack.execution</id>
            <id>attack.t1569.002</id>
        </mitre>
        <description>PowerShell as a Service in Registry</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Services\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+ImagePath)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)powershell|pwsh</field>
    </rule>
    <rule id="902042" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_asep_reg_keys_modification_winsock2.yml</info>
        <!--Sigma Rule Author: Victor Sergeev, Daniil Yugoslavskiy, Gleb Sukhodolskiy, Timur Zinniatullin, oscd.community, Tim Shelton, frack113 (split)-->
        <!--Description: Detects modification of autostart extensibility point (ASEP) in registry.-->
        <!--Date: 2019/10/25-->
        <!--Status: test-->
        <!--ID: d6c2ce7e-afb5-4337-9ca4-4b5254ed0565-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1547.001</id>
        </mitre>
        <description>WinSock2 Autorun Keys Modification</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+System\\+CurrentControlSet\\+Services\\+WinSock2\\+Parameters</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Protocol_Catalog9\\+Catalog_Entries|\\+NameSpace_Catalog5\\+Catalog_Entries</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)\(Empty\)</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+System32\\+MsiExec\.exe</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)C:\\+Windows\\+syswow64\\+MsiExec\.exe</field>
    </rule>
    <rule id="902043" level="7">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_powershell_enablescripts_enabled.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems), Thurein Oo-->
        <!--Description: Detects the enabling of the PowerShell script execution policy. Once enabled, this policy allows scripts to be executed.-->
        <!--Date: 2023/10/18-->
        <!--Status: experimental-->
        <!--ID: 8218c875-90b9-42e2-b60d-0b0069816d10-->
        <mitre>
            <id>attack.execution</id>
        </mitre>
        <description>PowerShell Script Execution Policy Enabled</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Policies\\+Microsoft\\+Windows\\+PowerShell\\+EnableScripts)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="902044" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_com_hijacking_susp_locations.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects potential COM object hijacking where the "Server" (In/Out) is pointing to a suspicious or unsuale location-->
        <!--Date: 2022/07/28-->
        <!--Status: experimental-->
        <!--ID: 3d968d17-ffa4-4bc0-bfdc-f139de76ce77-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.015</id>
        </mitre>
        <description>Potential Persistence Via COM Hijacking From Suspicious Locations</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+CLSID\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+InprocServer32\\+\(Default\)|\\+LocalServer32\\+\(Default\))$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+|\\+Desktop\\+|\\+Downloads\\+|\\+Microsoft\\+Windows\\+Start\ Menu\\+Programs\\+Startup\\+|\\+System32\\+spool\\+drivers\\+color\\+|\\+Users\\+Public\\+|\\+Windows\\+Temp\\+|%appdata%|%temp%|%tmp%</field>
    </rule>
    <rule id="902045" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_suppress_defender_notifications.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect set Notification_Suppress to 1 to disable the Windows security center notification-->
        <!--Date: 2022/08/19-->
        <!--Status: experimental-->
        <!--ID: 0c93308a-3f1b-40a9-b649-57ea1a1c1d63-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Activate Suppression of Windows Security Center Notifications</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:SOFTWARE\\+Policies\\+Microsoft\\+Windows\ Defender\\+UX\ Configuration\\+Notification_Suppress)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="902046" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_hide_function_user.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects registry modifications that hide internal tools or functions from the user (malware like Agent Tesla, Hermetic Wiper uses this technique)-->
        <!--Date: 2022/03/18-->
        <!--Status: test-->
        <!--ID: 5a93eb65-dffa-4543-b761-94aa60098fb6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Registry Hide Function from User</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Explorer\\+HideClock|SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Explorer\\+HideSCAHealth|SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Explorer\\+HideSCANetwork|SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Explorer\\+HideSCAPower|SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Policies\\+Explorer\\+HideSCAVolume)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="902047" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_hide_function_user.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detects registry modifications that hide internal tools or functions from the user (malware like Agent Tesla, Hermetic Wiper uses this technique)-->
        <!--Date: 2022/03/18-->
        <!--Status: test-->
        <!--ID: 5a93eb65-dffa-4543-b761-94aa60098fb6-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Registry Hide Function from User</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Explorer\\+Advanced\\+ShowInfoTip|SOFTWARE\\+Microsoft\\+Windows\\+CurrentVersion\\+Explorer\\+Advanced\\+ShowCompColor)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000000\)</field>
    </rule>
    <rule id="902048" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_susp_pendingfilerenameoperations.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect changes to the "PendingFileRenameOperations" registry key from uncommon or suspicious images lcoations to stage currently used files for rename after reboot.-->
        <!--Date: 2023/01/27-->
        <!--Status: test-->
        <!--ID: 4eec988f-7bf0-49f1-8675-1e6a510b3a2a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Potential PendingFileRenameOperations Tamper</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+CurrentControlSet\\+Control\\+Session\ Manager\\+PendingFileRenameOperations</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)\\+AppData\\+Local\\+Temp\\+|\\+Users\\+Public\\+</field>
    </rule>
    <rule id="902049" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_susp_pendingfilerenameoperations.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect changes to the "PendingFileRenameOperations" registry key from uncommon or suspicious images lcoations to stage currently used files for rename after reboot.-->
        <!--Date: 2023/01/27-->
        <!--Status: test-->
        <!--ID: 4eec988f-7bf0-49f1-8675-1e6a510b3a2a-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1036.003</id>
        </mitre>
        <description>Potential PendingFileRenameOperations Tamper</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.eventType" negate="no" type="pcre2">(?i)SetValue</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+CurrentControlSet\\+Control\\+Session\ Manager\\+PendingFileRenameOperations</field>
        <field name="win.eventdata.image" negate="no" type="pcre2">(?i)(?:\\+reg\.exe|\\+regedit\.exe)$</field>
    </rule>
    <rule id="902050" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_xll.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Detect potential persistence via the creation of an excel add-in (XLL) file to make it run automatically when Excel is started.-->
        <!--Date: 2023/01/15-->
        <!--Status: experimental-->
        <!--ID: 961e33d1-4f86-4fcf-80ab-930a708b2f82-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1137.006</id>
        </mitre>
        <description>Potential Persistence Via Excel Add-in - Registry</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Software\\+Microsoft\\+Office\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Excel\\+Options)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)^(?:/R\ )</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)(?:\.xll)$</field>
    </rule>
    <rule id="902051" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_custom_file_open_handler_powershell_execution.yml</info>
        <!--Sigma Rule Author: CD_R0M_-->
        <!--Description: Detects the abuse of custom file open handler, executing powershell-->
        <!--Date: 2022/06/11-->
        <!--Status: experimental-->
        <!--ID: 7530b96f-ad8e-431d-a04d-ac85cc461fdc-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1202</id>
        </mitre>
        <description>Custom File Open Handler Executes PowerShell</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)shell\\+open\\+command\\+</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)powershell</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\-command</field>
    </rule>
    <rule id="902052" level="10">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_shim_database.yml</info>
        <!--Sigma Rule Author: frack113-->
        <!--Description: Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by application shims.
The Microsoft Windows Application Compatibility Infrastructure/Framework (Application Shim) was created to allow for backward compatibility of software as the operating system codebase changes over time
-->
        <!--Date: 2021/12/30-->
        <!--Status: experimental-->
        <!--ID: dfb5b4e8-91d0-4291-b40a-e3b0d3942c45-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1546.011</id>
        </mitre>
        <description>Potential Persistence Via Shim Database Modification</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+SOFTWARE\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+AppCompatFlags\\+InstalledSDB\\+|\\+SOFTWARE\\+Microsoft\\+Windows\ NT\\+CurrentVersion\\+AppCompatFlags\\+Custom\\+</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)</field>
    </rule>
    <rule id="902053" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_ime_suspicious_paths.yml</info>
        <!--Date: 2023/11/21-->
        <!--Status: experimental-->
        <!--ID: 9d8f9bb8-01af-4e15-a3a2-349071530530-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Suspicious Path In Keyboard Layout IME File Registry Value</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Control\\+Keyboard\ Layouts\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Ime\ File</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i):\\+Perflogs\\+|:\\+Users\\+Public\\+|:\\+Windows\\+Temp\\+|\\+AppData\\+Local\\+Temp\\+|\\+AppData\\+Roaming\\+|\\+Temporary\ Internet</field>
    </rule>
    <rule id="902054" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_ime_suspicious_paths.yml</info>
        <!--Sigma Rule Author: X__Junior (Nextron Systems)-->
        <!--Description: Detects usage of Windows Input Method Editor (IME) keyboard layout feature, which allows an attacker to load a DLL into the process after sending the WM_INPUTLANGCHANGEREQUEST message.
Before doing this, the client needs to register the DLL in a special registry key that is assumed to implement this keyboard layout. This registry key should store a value named "Ime File" with a DLL path.
IMEs are essential for languages that have more characters than can be represented on a standard keyboard, such as Chinese, Japanese, and Korean.
-->
        <!--Date: 2023/11/21-->
        <!--Status: experimental-->
        <!--ID: 9d8f9bb8-01af-4e15-a3a2-349071530530-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1562.001</id>
        </mitre>
        <description>Suspicious Path In Keyboard Layout IME File Registry Value</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Control\\+Keyboard\ Layouts\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Ime\ File</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\\+Favorites\\+</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\\+Favourites\\+</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i):\\+Users\\+</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)\\+Contacts\\+</field>
    </rule>
    <rule id="902055" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_office_trusted_location_uncommon.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects changes to registry keys related to "Trusted Location" of Microsoft Office where the path is set to something uncommon. Attackers might add additional trusted locations to avoid macro security restrictions.-->
        <!--Date: 2023/06/21-->
        <!--Status: experimental-->
        <!--ID: f742bde7-9528-42e5-bd82-84f51a8387d2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Uncommon Microsoft Office Trusted Location Added</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Security\\+Trusted\ Locations\\+Location</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Path)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Common\ Files\\+Microsoft\ Shared\\+ClickToRun\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i)(?:\\+OfficeClickToRun\.exe)$</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Microsoft\ Office\\+</field>
        <field name="win.eventdata.image" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+Microsoft\ Office\\+</field>
    </rule>
    <rule id="902056" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_office_trusted_location_uncommon.yml</info>
        <!--Sigma Rule Author: Nasreddine Bencherchali (Nextron Systems)-->
        <!--Description: Detects changes to registry keys related to "Trusted Location" of Microsoft Office where the path is set to something uncommon. Attackers might add additional trusted locations to avoid macro security restrictions.-->
        <!--Date: 2023/06/21-->
        <!--Status: experimental-->
        <!--ID: f742bde7-9528-42e5-bd82-84f51a8387d2-->
        <mitre>
            <id>attack.defense_evasion</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Uncommon Microsoft Office Trusted Location Added</description>
        <options>no_full_log</options>
        <group>registry_set,windows,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Security\\+Trusted\ Locations\\+Location</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:\\+Path)$</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)%APPDATA%\\+Microsoft\\+Templates</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)%%APPDATA%%\\+Microsoft\\+Templates</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)%APPDATA%\\+Microsoft\\+Word\\+Startup</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i)%%APPDATA%%\\+Microsoft\\+Word\\+Startup</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i):\\+Program\ Files\ \(x86\)\\+Microsoft\ Office\\+root\\+Templates\\+</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Microsoft\ Office\ \(x86\)\\+Templates</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Microsoft\ Office\\+root\\+Templates\\+</field>
        <field name="win.eventdata.details" negate="yes" type="pcre2">(?i):\\+Program\ Files\\+Microsoft\ Office\\+Templates\\+</field>
    </rule>
    <rule id="902057" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_outlook_todaypage.yml</info>
        <!--Sigma Rule Author: Tobias Michalski (Nextron Systems)-->
        <!--Description: Detects potential persistence activity via outlook today pages. An attacker can set a custom page to execute arbitrary code and link to it via the registry key "UserDefinedUrl".-->
        <!--Date: 2021/06/10-->
        <!--Status: experimental-->
        <!--ID: 487bb375-12ef-41f6-baae-c6a1572b4dd1-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Potential Persistence Via Outlook Today Pages</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Software\\+Microsoft\\+Office\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Outlook\\+Today\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:Stamp)$</field>
        <field name="win.eventdata.details" negate="no" type="pcre2">(?i)DWORD\ \(0x00000001\)</field>
    </rule>
    <rule id="902058" level="13">
        <info type="link">https://github.com/SigmaHQ/sigma/tree/master/rules/windows/registry/registry_set/registry_set_persistence_outlook_todaypage.yml</info>
        <!--Sigma Rule Author: Tobias Michalski (Nextron Systems)-->
        <!--Description: Detects potential persistence activity via outlook today pages. An attacker can set a custom page to execute arbitrary code and link to it via the registry key "UserDefinedUrl".-->
        <!--Date: 2021/06/10-->
        <!--Status: experimental-->
        <!--ID: 487bb375-12ef-41f6-baae-c6a1572b4dd1-->
        <mitre>
            <id>attack.persistence</id>
            <id>attack.t1112</id>
        </mitre>
        <description>Potential Persistence Via Outlook Today Pages</description>
        <options>no_full_log</options>
        <group>windows,registry_set,</group>
        <if_sid>18100, 60000, 60001, 60002, 60003, 60004, 60006, 60007, 60008, 60009, 60010, 60011, 60012</if_sid>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)Software\\+Microsoft\\+Office\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)\\+Outlook\\+Today\\+</field>
        <field name="win.eventdata.targetObject" negate="no" type="pcre2">(?i)(?:UserDefinedUrl)$</field>
    </rule>
</group>
